
RobotBalanceador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e30c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800e420  0800e420  0000f420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e888  0800e888  000103e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e888  0800e888  0000f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e890  0800e890  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e890  0800e890  0000f890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e894  0800e894  0000f894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e8  20000000  0800e898  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  200003e8  0800ec80  000103e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001884  0800ec80  00010884  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153ce  00000000  00000000  00010411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bce  00000000  00000000  000257df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  000293b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f59  00000000  00000000  0002a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001beed  00000000  00000000  0002b721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a86d  00000000  00000000  0004760e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f98  00000000  00000000  00061e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3e13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066bc  00000000  00000000  000f3e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000fa514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003e8 	.word	0x200003e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e404 	.word	0x0800e404

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003ec 	.word	0x200003ec
 800014c:	0800e404 	.word	0x0800e404

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <MX_GPIO_Init+0xc4>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a2a      	ldr	r2, [pc, #168]	@ (80011d4 <MX_GPIO_Init+0xc4>)
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <MX_GPIO_Init+0xc4>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <MX_GPIO_Init+0xc4>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <MX_GPIO_Init+0xc4>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_GPIO_Init+0xc4>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <MX_GPIO_Init+0xc4>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a1e      	ldr	r2, [pc, #120]	@ (80011d4 <MX_GPIO_Init+0xc4>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <MX_GPIO_Init+0xc4>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT1_IN1_Pin|MOT1_IN2_Pin|MOT2_IN1_Pin|MOT2_IN2_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001172:	4819      	ldr	r0, [pc, #100]	@ (80011d8 <MX_GPIO_Init+0xc8>)
 8001174:	f001 fbf2 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOT1_IN1_Pin|MOT1_IN2_Pin|MOT2_IN1_Pin|MOT2_IN2_Pin;
 8001178:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800117c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4619      	mov	r1, r3
 8001190:	4811      	ldr	r0, [pc, #68]	@ (80011d8 <MX_GPIO_Init+0xc8>)
 8001192:	f001 fa5f 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001196:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119c:	2312      	movs	r3, #18
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	480b      	ldr	r0, [pc, #44]	@ (80011d8 <MX_GPIO_Init+0xc8>)
 80011ac:	f001 fa52 	bl	8002654 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011b0:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <MX_GPIO_Init+0xcc>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <MX_GPIO_Init+0xcc>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	6053      	str	r3, [r2, #4]

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	40010000 	.word	0x40010000

080011e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_I2C2_Init+0x50>)
 80011e6:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <MX_I2C2_Init+0x54>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_I2C2_Init+0x50>)
 80011ec:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <MX_I2C2_Init+0x58>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_I2C2_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_I2C2_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_I2C2_Init+0x50>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001202:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <MX_I2C2_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_I2C2_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <MX_I2C2_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_I2C2_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <MX_I2C2_Init+0x50>)
 800121e:	f001 fbb5 	bl	800298c <HAL_I2C_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 fa48 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000404 	.word	0x20000404
 8001234:	40005800 	.word	0x40005800
 8001238:	000186a0 	.word	0x000186a0

0800123c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a16      	ldr	r2, [pc, #88]	@ (80012b0 <HAL_I2C_MspInit+0x74>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d124      	bne.n	80012a6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_I2C_MspInit+0x78>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <HAL_I2C_MspInit+0x78>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_I2C_MspInit+0x78>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001274:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	480b      	ldr	r0, [pc, #44]	@ (80012b8 <HAL_I2C_MspInit+0x7c>)
 800128a:	f001 f9e3 	bl	8002654 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_I2C_MspInit+0x78>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <HAL_I2C_MspInit+0x78>)
 8001294:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_I2C_MspInit+0x78>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012a6:	bf00      	nop
 80012a8:	3720      	adds	r7, #32
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40005800 	.word	0x40005800
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010c00 	.word	0x40010c00

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b094      	sub	sp, #80	@ 0x50
 80012c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f001 f857 	bl	8002374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f889 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ca:	f7ff ff21 	bl	8001110 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012ce:	f009 fa31 	bl	800a734 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80012d2:	f000 ff2d 	bl	8002130 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012d6:	f000 feb1 	bl	800203c <MX_TIM3_Init>
  MX_I2C2_Init();
 80012da:	f7ff ff81 	bl	80011e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // Inicializar variables
  char msg[50];
  last_mpu_time = HAL_GetTick();
 80012de:	f001 f8a1 	bl	8002424 <HAL_GetTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a33      	ldr	r2, [pc, #204]	@ (80013b4 <main+0xf8>)
 80012e6:	6013      	str	r3, [r2, #0]


  // Inicialización del PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012e8:	2100      	movs	r1, #0
 80012ea:	4833      	ldr	r0, [pc, #204]	@ (80013b8 <main+0xfc>)
 80012ec:	f004 fe16 	bl	8005f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012f0:	2104      	movs	r1, #4
 80012f2:	4831      	ldr	r0, [pc, #196]	@ (80013b8 <main+0xfc>)
 80012f4:	f004 fe12 	bl	8005f1c <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  El DRV8870 utiliza 4 pines de PWM
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80012f8:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <main+0xfc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2200      	movs	r2, #0
 80012fe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8001300:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <main+0xfc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	639a      	str	r2, [r3, #56]	@ 0x38
  // __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 0);
  // __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, 0);


  // Inicialización de timer para Encoder
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001308:	213c      	movs	r1, #60	@ 0x3c
 800130a:	482c      	ldr	r0, [pc, #176]	@ (80013bc <main+0x100>)
 800130c:	f004 ff4a 	bl	80061a4 <HAL_TIM_Encoder_Start>


  // Inicializar el PID
  PID_Init(&pid, 40, 0, 0, -1000, 1000);
 8001310:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <main+0x104>)
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <main+0x108>)
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4929      	ldr	r1, [pc, #164]	@ (80013c8 <main+0x10c>)
 8001322:	482a      	ldr	r0, [pc, #168]	@ (80013cc <main+0x110>)
 8001324:	f000 f920 	bl	8001568 <PID_Init>

  // Esperar para la inicialización del MPU6050
  while (MPU6050_Init(&hi2c2) == 1);
 8001328:	bf00      	nop
 800132a:	4829      	ldr	r0, [pc, #164]	@ (80013d0 <main+0x114>)
 800132c:	f000 f9cc 	bl	80016c8 <MPU6050_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d0f9      	beq.n	800132a <main+0x6e>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

    // Lectura del MPU6050 cada 100ms
    if (HAL_GetTick() - last_mpu_time > 100) {
 8001336:	f001 f875 	bl	8002424 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <main+0xf8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	@ 0x64
 8001344:	d9f7      	bls.n	8001336 <main+0x7a>
      MPU6050_Read_All(&hi2c2, &MPU6050);
 8001346:	4923      	ldr	r1, [pc, #140]	@ (80013d4 <main+0x118>)
 8001348:	4821      	ldr	r0, [pc, #132]	@ (80013d0 <main+0x114>)
 800134a:	f000 fa15 	bl	8001778 <MPU6050_Read_All>

      float angulo = MPU6050.KalmanAngleY;
 800134e:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <main+0x118>)
 8001350:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fb96 	bl	8000a88 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      float accion = PID(&pid, 0, angulo);
 8001360:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001362:	f04f 0100 	mov.w	r1, #0
 8001366:	4819      	ldr	r0, [pc, #100]	@ (80013cc <main+0x110>)
 8001368:	f000 f93c 	bl	80015e4 <PID>
 800136c:	63b8      	str	r0, [r7, #56]	@ 0x38
      PWM_Aplicar(accion);
 800136e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001370:	f000 f88e 	bl	8001490 <PWM_Aplicar>

      // Enviar a la PC
      snprintf(msg, 50, "accion=%f,angulo=%f\r\n", accion, angulo);
 8001374:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001376:	f7ff f857 	bl	8000428 <__aeabi_f2d>
 800137a:	4604      	mov	r4, r0
 800137c:	460d      	mov	r5, r1
 800137e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001380:	f7ff f852 	bl	8000428 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	1d38      	adds	r0, r7, #4
 800138a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800138e:	e9cd 4500 	strd	r4, r5, [sp]
 8001392:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <main+0x11c>)
 8001394:	2132      	movs	r1, #50	@ 0x32
 8001396:	f00a fb87 	bl	800baa8 <sniprintf>
      CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f7fe fed7 	bl	8000150 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f009 fa80 	bl	800a8b0 <CDC_Transmit_FS>
    if (HAL_GetTick() - last_mpu_time > 100) {
 80013b0:	e7c1      	b.n	8001336 <main+0x7a>
 80013b2:	bf00      	nop
 80013b4:	20000458 	.word	0x20000458
 80013b8:	200004e4 	.word	0x200004e4
 80013bc:	2000052c 	.word	0x2000052c
 80013c0:	447a0000 	.word	0x447a0000
 80013c4:	c47a0000 	.word	0xc47a0000
 80013c8:	42200000 	.word	0x42200000
 80013cc:	200004b8 	.word	0x200004b8
 80013d0:	20000404 	.word	0x20000404
 80013d4:	20000460 	.word	0x20000460
 80013d8:	0800e420 	.word	0x0800e420

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	@ 0x50
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e6:	2228      	movs	r2, #40	@ 0x28
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a fbd3 	bl	800bb96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140c:	2301      	movs	r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141a:	2301      	movs	r3, #1
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141e:	2302      	movs	r3, #2
 8001420:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001422:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001426:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001428:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800142c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001432:	4618      	mov	r0, r3
 8001434:	f004 f870 	bl	8005518 <HAL_RCC_OscConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800143e:	f000 f93d 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	230f      	movs	r3, #15
 8001444:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800144e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001452:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2102      	movs	r1, #2
 800145e:	4618      	mov	r0, r3
 8001460:	f004 fadc 	bl	8005a1c <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800146a:	f000 f927 	bl	80016bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800146e:	2310      	movs	r3, #16
 8001470:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4618      	mov	r0, r3
 800147a:	f004 fc49 	bl	8005d10 <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001484:	f000 f91a 	bl	80016bc <Error_Handler>
  }
}
 8001488:	bf00      	nop
 800148a:	3750      	adds	r7, #80	@ 0x50
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <PWM_Aplicar>:

/* USER CODE BEGIN 4 */

// Aplicar PWM a los motores, si el valor es negativo va en el otro sentido
void PWM_Aplicar(float valor) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  // Duty va de 0 a 1000

  // Convertir valor a entero
  uint16_t entero = (uint16_t)ABS(valor);
 8001498:	f04f 0100 	mov.w	r1, #0
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fe03 	bl	80010a8 <__aeabi_fcmpge>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <PWM_Aplicar+0x24>
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fe11 	bl	80010d0 <__aeabi_f2uiz>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	e007      	b.n	80014c4 <PWM_Aplicar+0x34>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe08 	bl	80010d0 <__aeabi_f2uiz>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	81fb      	strh	r3, [r7, #14]

  // Limitar de 0 a 1000
  entero = (entero > 1000)? 1000 : entero;
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014cc:	bf28      	it	cs
 80014ce:	f44f 737a 	movcs.w	r3, #1000	@ 0x3e8
 80014d2:	81fb      	strh	r3, [r7, #14]
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, entero);
 80014d4:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <PWM_Aplicar+0xd0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	89fa      	ldrh	r2, [r7, #14]
 80014da:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, entero);
 80014dc:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <PWM_Aplicar+0xd0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	89fa      	ldrh	r2, [r7, #14]
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38

  if (valor >= 0.0) {
 80014e4:	f04f 0100 	mov.w	r1, #0
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fddd 	bl	80010a8 <__aeabi_fcmpge>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d018      	beq.n	8001526 <PWM_Aplicar+0x96>
    //Motor Derecho
    HAL_GPIO_WritePin(MOT1_IN1_GPIO_Port, MOT1_IN1_Pin, 1); //Giro Horario
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014fa:	481a      	ldr	r0, [pc, #104]	@ (8001564 <PWM_Aplicar+0xd4>)
 80014fc:	f001 fa2e 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT1_IN2_GPIO_Port, MOT1_IN2_Pin, 0); //Grio Antihorario
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001506:	4817      	ldr	r0, [pc, #92]	@ (8001564 <PWM_Aplicar+0xd4>)
 8001508:	f001 fa28 	bl	800295c <HAL_GPIO_WritePin>
    //Motor Izquierdo
    HAL_GPIO_WritePin(MOT2_IN1_GPIO_Port, MOT2_IN1_Pin, 1); //Giro Horario
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001512:	4814      	ldr	r0, [pc, #80]	@ (8001564 <PWM_Aplicar+0xd4>)
 8001514:	f001 fa22 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT2_IN2_GPIO_Port, MOT2_IN2_Pin, 0); //Grio Antihorario
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800151e:	4811      	ldr	r0, [pc, #68]	@ (8001564 <PWM_Aplicar+0xd4>)
 8001520:	f001 fa1c 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT1_IN2_GPIO_Port, MOT1_IN2_Pin, 1); //Grio Antihorario
    //Motor Izquierdo
    HAL_GPIO_WritePin(MOT2_IN1_GPIO_Port, MOT2_IN1_Pin, 0); //Giro Horario
    HAL_GPIO_WritePin(MOT2_IN2_GPIO_Port, MOT2_IN2_Pin, 1); //Grio Antihorario
  }
}
 8001524:	e017      	b.n	8001556 <PWM_Aplicar+0xc6>
    HAL_GPIO_WritePin(MOT1_IN1_GPIO_Port, MOT1_IN1_Pin, 0); //Giro Horario
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800152c:	480d      	ldr	r0, [pc, #52]	@ (8001564 <PWM_Aplicar+0xd4>)
 800152e:	f001 fa15 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT1_IN2_GPIO_Port, MOT1_IN2_Pin, 1); //Grio Antihorario
 8001532:	2201      	movs	r2, #1
 8001534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001538:	480a      	ldr	r0, [pc, #40]	@ (8001564 <PWM_Aplicar+0xd4>)
 800153a:	f001 fa0f 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT2_IN1_GPIO_Port, MOT2_IN1_Pin, 0); //Giro Horario
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001544:	4807      	ldr	r0, [pc, #28]	@ (8001564 <PWM_Aplicar+0xd4>)
 8001546:	f001 fa09 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT2_IN2_GPIO_Port, MOT2_IN2_Pin, 1); //Grio Antihorario
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001550:	4804      	ldr	r0, [pc, #16]	@ (8001564 <PWM_Aplicar+0xd4>)
 8001552:	f001 fa03 	bl	800295c <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200004e4 	.word	0x200004e4
 8001564:	40010c00 	.word	0x40010c00

08001568 <PID_Init>:
    __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 0);
    __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, entero);
  }
}

void PID_Init(PID_t *pid, float kp, float ki, float kd, float u_min, float u_max) {
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  pid->k1 = kp + ki + kd;
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f7ff fadb 	bl	8000b34 <__addsf3>
 800157e:	4603      	mov	r3, r0
 8001580:	6839      	ldr	r1, [r7, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fad6 	bl	8000b34 <__addsf3>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	601a      	str	r2, [r3, #0]
  pid->k2 = -kp - 2*kd;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff faca 	bl	8000b34 <__addsf3>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4619      	mov	r1, r3
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff fac3 	bl	8000b30 <__aeabi_fsub>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
  pid->k3 = kd;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	609a      	str	r2, [r3, #8]
  pid->e1 = 0.0;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  pid->e2 = 0.0;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
  pid->u_min = u_min;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a3a      	ldr	r2, [r7, #32]
 80015cc:	619a      	str	r2, [r3, #24]
  pid->u_max = u_max;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d2:	61da      	str	r2, [r3, #28]
  pid->u = 0.0;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}

080015e4 <PID>:


// Cálculo de la acción del PID
float PID(PID_t *pid, float setpoint, float nueva_lectura) {
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  pid->e2 = pid->e1;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	615a      	str	r2, [r3, #20]
  pid->e1 = pid->e0;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	611a      	str	r2, [r3, #16]

  pid->e0 = setpoint - nueva_lectura;
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	68b8      	ldr	r0, [r7, #8]
 8001604:	f7ff fa94 	bl	8000b30 <__aeabi_fsub>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	60da      	str	r2, [r3, #12]
  float delta_u = pid->k1*pid->e0 + pid->k2*pid->e1 + pid->k3*pid->e2;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f7ff fb92 	bl	8000d44 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	461c      	mov	r4, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f7ff fb88 	bl	8000d44 <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	4619      	mov	r1, r3
 8001638:	4620      	mov	r0, r4
 800163a:	f7ff fa7b 	bl	8000b34 <__addsf3>
 800163e:	4603      	mov	r3, r0
 8001640:	461c      	mov	r4, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f7ff fb79 	bl	8000d44 <__aeabi_fmul>
 8001652:	4603      	mov	r3, r0
 8001654:	4619      	mov	r1, r3
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff fa6c 	bl	8000b34 <__addsf3>
 800165c:	4603      	mov	r3, r0
 800165e:	617b      	str	r3, [r7, #20]
  pid->u = pid->u + delta_u;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	6979      	ldr	r1, [r7, #20]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fa64 	bl	8000b34 <__addsf3>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	621a      	str	r2, [r3, #32]

  if (pid->u > pid->u_max) pid->u = pid->u_max;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a1a      	ldr	r2, [r3, #32]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	4619      	mov	r1, r3
 800167e:	4610      	mov	r0, r2
 8001680:	f7ff fd1c 	bl	80010bc <__aeabi_fcmpgt>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <PID+0xae>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	621a      	str	r2, [r3, #32]
  if (pid->u < pid->u_min) pid->u = pid->u_min;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a1a      	ldr	r2, [r3, #32]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f7ff fcef 	bl	8001080 <__aeabi_fcmplt>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <PID+0xcc>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	699a      	ldr	r2, [r3, #24]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	621a      	str	r2, [r3, #32]

  return pid->u;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <Error_Handler+0x8>

080016c8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af04      	add	r7, sp, #16
 80016ce:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80016d0:	2364      	movs	r3, #100	@ 0x64
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	2301      	movs	r3, #1
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	f107 030f 	add.w	r3, r7, #15
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2301      	movs	r3, #1
 80016e0:	2275      	movs	r2, #117	@ 0x75
 80016e2:	21d0      	movs	r1, #208	@ 0xd0
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f001 fb8f 	bl	8002e08 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b68      	cmp	r3, #104	@ 0x68
 80016ee:	d13d      	bne.n	800176c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80016f4:	2364      	movs	r3, #100	@ 0x64
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2301      	movs	r3, #1
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f107 030e 	add.w	r3, r7, #14
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	226b      	movs	r2, #107	@ 0x6b
 8001706:	21d0      	movs	r1, #208	@ 0xd0
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f001 fa83 	bl	8002c14 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800170e:	2307      	movs	r3, #7
 8001710:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001712:	2364      	movs	r3, #100	@ 0x64
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	f107 030e 	add.w	r3, r7, #14
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2301      	movs	r3, #1
 8001722:	2219      	movs	r2, #25
 8001724:	21d0      	movs	r1, #208	@ 0xd0
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f001 fa74 	bl	8002c14 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800172c:	2300      	movs	r3, #0
 800172e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001730:	2364      	movs	r3, #100	@ 0x64
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2301      	movs	r3, #1
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	f107 030e 	add.w	r3, r7, #14
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2301      	movs	r3, #1
 8001740:	221c      	movs	r2, #28
 8001742:	21d0      	movs	r1, #208	@ 0xd0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f001 fa65 	bl	8002c14 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800174a:	2300      	movs	r3, #0
 800174c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800174e:	2364      	movs	r3, #100	@ 0x64
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	2301      	movs	r3, #1
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	f107 030e 	add.w	r3, r7, #14
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	221b      	movs	r2, #27
 8001760:	21d0      	movs	r1, #208	@ 0xd0
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f001 fa56 	bl	8002c14 <HAL_I2C_Mem_Write>
        return 0;
 8001768:	2300      	movs	r3, #0
 800176a:	e000      	b.n	800176e <MPU6050_Init+0xa6>
    }
    return 1;
 800176c:	2301      	movs	r3, #1
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800177c:	b094      	sub	sp, #80	@ 0x50
 800177e:	af04      	add	r7, sp, #16
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001784:	2364      	movs	r3, #100	@ 0x64
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	230e      	movs	r3, #14
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2301      	movs	r3, #1
 8001794:	223b      	movs	r2, #59	@ 0x3b
 8001796:	21d0      	movs	r1, #208	@ 0xd0
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f001 fb35 	bl	8002e08 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800179e:	7a3b      	ldrb	r3, [r7, #8]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	7a7b      	ldrb	r3, [r7, #9]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80017b0:	7abb      	ldrb	r3, [r7, #10]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	7afb      	ldrb	r3, [r7, #11]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21a      	sxth	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80017c2:	7b3b      	ldrb	r3, [r7, #12]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	7b7b      	ldrb	r3, [r7, #13]
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80017d4:	7bbb      	ldrb	r3, [r7, #14]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80017e2:	7c3b      	ldrb	r3, [r7, #16]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	7c7b      	ldrb	r3, [r7, #17]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80017f4:	7cbb      	ldrb	r3, [r7, #18]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b21a      	sxth	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001806:	7d3b      	ldrb	r3, [r7, #20]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	b21a      	sxth	r2, r3
 800180c:	7d7b      	ldrb	r3, [r7, #21]
 800180e:	b21b      	sxth	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b21a      	sxth	r2, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fdf0 	bl	8000404 <__aeabi_i2d>
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	4b95      	ldr	r3, [pc, #596]	@ (8001a80 <MPU6050_Read_All+0x308>)
 800182a:	f7fe ff7f 	bl	800072c <__aeabi_ddiv>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fde0 	bl	8000404 <__aeabi_i2d>
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b8d      	ldr	r3, [pc, #564]	@ (8001a80 <MPU6050_Read_All+0x308>)
 800184a:	f7fe ff6f 	bl	800072c <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fdd0 	bl	8000404 <__aeabi_i2d>
 8001864:	a380      	add	r3, pc, #512	@ (adr r3, 8001a68 <MPU6050_Read_All+0x2f0>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe ff5f 	bl	800072c <__aeabi_ddiv>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001878:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fa0d 	bl	8000c9c <__aeabi_i2f>
 8001882:	4603      	mov	r3, r0
 8001884:	497f      	ldr	r1, [pc, #508]	@ (8001a84 <MPU6050_Read_All+0x30c>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fb10 	bl	8000eac <__aeabi_fdiv>
 800188c:	4603      	mov	r3, r0
 800188e:	497e      	ldr	r1, [pc, #504]	@ (8001a88 <MPU6050_Read_All+0x310>)
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f94f 	bl	8000b34 <__addsf3>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fdad 	bl	8000404 <__aeabi_i2d>
 80018aa:	a371      	add	r3, pc, #452	@ (adr r3, 8001a70 <MPU6050_Read_All+0x2f8>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe ff3c 	bl	800072c <__aeabi_ddiv>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd9d 	bl	8000404 <__aeabi_i2d>
 80018ca:	a369      	add	r3, pc, #420	@ (adr r3, 8001a70 <MPU6050_Read_All+0x2f8>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe ff2c 	bl	800072c <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	6839      	ldr	r1, [r7, #0]
 80018da:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fd8d 	bl	8000404 <__aeabi_i2d>
 80018ea:	a361      	add	r3, pc, #388	@ (adr r3, 8001a70 <MPU6050_Read_All+0x2f8>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe ff1c 	bl	800072c <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	6839      	ldr	r1, [r7, #0]
 80018fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80018fe:	f000 fd91 	bl	8002424 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	4b61      	ldr	r3, [pc, #388]	@ (8001a8c <MPU6050_Read_All+0x314>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fd6a 	bl	80003e4 <__aeabi_ui2d>
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	4b5e      	ldr	r3, [pc, #376]	@ (8001a90 <MPU6050_Read_All+0x318>)
 8001916:	f7fe ff09 	bl	800072c <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001922:	f000 fd7f 	bl	8002424 <HAL_GetTick>
 8001926:	4603      	mov	r3, r0
 8001928:	4a58      	ldr	r2, [pc, #352]	@ (8001a8c <MPU6050_Read_All+0x314>)
 800192a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001932:	461a      	mov	r2, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193a:	fb03 f202 	mul.w	r2, r3, r2
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001944:	4619      	mov	r1, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd56 	bl	8000404 <__aeabi_i2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f00c f9ee 	bl	800dd40 <sqrt>
 8001964:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001974:	f7ff f818 	bl	80009a8 <__aeabi_dcmpeq>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d119      	bne.n	80019b2 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fd3d 	bl	8000404 <__aeabi_i2d>
 800198a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800198e:	f7fe fecd 	bl	800072c <__aeabi_ddiv>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f00c f9f5 	bl	800dd88 <atan>
 800199e:	a336      	add	r3, pc, #216	@ (adr r3, 8001a78 <MPU6050_Read_All+0x300>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe fd98 	bl	80004d8 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80019b0:	e005      	b.n	80019be <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c4:	425b      	negs	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd1c 	bl	8000404 <__aeabi_i2d>
 80019cc:	4682      	mov	sl, r0
 80019ce:	468b      	mov	fp, r1
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd14 	bl	8000404 <__aeabi_i2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4650      	mov	r0, sl
 80019e2:	4659      	mov	r1, fp
 80019e4:	f00c f9aa 	bl	800dd3c <atan2>
 80019e8:	a323      	add	r3, pc, #140	@ (adr r3, 8001a78 <MPU6050_Read_All+0x300>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fd73 	bl	80004d8 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <MPU6050_Read_All+0x31c>)
 8001a00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a04:	f7fe ffda 	bl	80009bc <__aeabi_dcmplt>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <MPU6050_Read_All+0x2ac>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <MPU6050_Read_All+0x320>)
 8001a1a:	f7fe ffed 	bl	80009f8 <__aeabi_dcmpgt>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d114      	bne.n	8001a4e <MPU6050_Read_All+0x2d6>
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <MPU6050_Read_All+0x320>)
 8001a2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a2e:	f7fe ffe3 	bl	80009f8 <__aeabi_dcmpgt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d033      	beq.n	8001aa0 <MPU6050_Read_All+0x328>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <MPU6050_Read_All+0x31c>)
 8001a44:	f7fe ffba 	bl	80009bc <__aeabi_dcmplt>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d028      	beq.n	8001aa0 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 8001a4e:	4913      	ldr	r1, [pc, #76]	@ (8001a9c <MPU6050_Read_All+0x324>)
 8001a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a54:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a5e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001a62:	e030      	b.n	8001ac6 <MPU6050_Read_All+0x34e>
 8001a64:	f3af 8000 	nop.w
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40cc2900 	.word	0x40cc2900
 8001a70:	00000000 	.word	0x00000000
 8001a74:	40606000 	.word	0x40606000
 8001a78:	1a63c1f8 	.word	0x1a63c1f8
 8001a7c:	404ca5dc 	.word	0x404ca5dc
 8001a80:	40d00000 	.word	0x40d00000
 8001a84:	43aa0000 	.word	0x43aa0000
 8001a88:	42121eb8 	.word	0x42121eb8
 8001a8c:	200004dc 	.word	0x200004dc
 8001a90:	408f4000 	.word	0x408f4000
 8001a94:	c0568000 	.word	0xc0568000
 8001a98:	40568000 	.word	0x40568000
 8001a9c:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001aae:	e9cd 2300 	strd	r2, r3, [sp]
 8001ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab6:	481c      	ldr	r0, [pc, #112]	@ (8001b28 <MPU6050_Read_All+0x3b0>)
 8001ab8:	f000 f83c 	bl	8001b34 <Kalman_getAngle>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	6839      	ldr	r1, [r7, #0]
 8001ac2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001acc:	4690      	mov	r8, r2
 8001ace:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <MPU6050_Read_All+0x3b4>)
 8001ad8:	4640      	mov	r0, r8
 8001ada:	4649      	mov	r1, r9
 8001adc:	f7fe ff8c 	bl	80009f8 <__aeabi_dcmpgt>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001aec:	4614      	mov	r4, r2
 8001aee:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001afe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b06:	e9cd 2300 	strd	r2, r3, [sp]
 8001b0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b0e:	4808      	ldr	r0, [pc, #32]	@ (8001b30 <MPU6050_Read_All+0x3b8>)
 8001b10:	f000 f810 	bl	8001b34 <Kalman_getAngle>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	6839      	ldr	r1, [r7, #0]
 8001b1a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8001b1e:	bf00      	nop
 8001b20:	3740      	adds	r7, #64	@ 0x40
 8001b22:	46bd      	mov	sp, r7
 8001b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b28:	20000048 	.word	0x20000048
 8001b2c:	40568000 	.word	0x40568000
 8001b30:	20000000 	.word	0x20000000

08001b34 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b092      	sub	sp, #72	@ 0x48
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001b4a:	f7fe fb0d 	bl	8000168 <__aeabi_dsub>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001b64:	f7fe fcb8 	bl	80004d8 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fafc 	bl	800016c <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	68f9      	ldr	r1, [r7, #12]
 8001b7a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001b8a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b8e:	f7fe fca3 	bl	80004d8 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ba0:	f7fe fae2 	bl	8000168 <__aeabi_dsub>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001bb2:	f7fe fad9 	bl	8000168 <__aeabi_dsub>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fad2 	bl	800016c <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001bd4:	f7fe fc80 	bl	80004d8 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f7fe fac4 	bl	800016c <__adddf3>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	68f9      	ldr	r1, [r7, #12]
 8001bea:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001bfa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001bfe:	f7fe fc6b 	bl	80004d8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe faad 	bl	8000168 <__aeabi_dsub>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001c24:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001c28:	f7fe fc56 	bl	80004d8 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fa98 	bl	8000168 <__aeabi_dsub>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c4e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001c52:	f7fe fc41 	bl	80004d8 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f7fe fa85 	bl	800016c <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	68f9      	ldr	r1, [r7, #12]
 8001c68:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c78:	f7fe fa78 	bl	800016c <__adddf3>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c8e:	f7fe fd4d 	bl	800072c <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001ca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ca4:	f7fe fd42 	bl	800072c <__aeabi_ddiv>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cba:	f7fe fa55 	bl	8000168 <__aeabi_dsub>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001ccc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cd4:	f7fe fc00 	bl	80004d8 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fa44 	bl	800016c <__adddf3>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001cf4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cfc:	f7fe fbec 	bl	80004d8 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4620      	mov	r0, r4
 8001d06:	4629      	mov	r1, r5
 8001d08:	f7fe fa30 	bl	800016c <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	68f9      	ldr	r1, [r7, #12]
 8001d12:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001d1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001d26:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001d30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d38:	f7fe fbce 	bl	80004d8 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4620      	mov	r0, r4
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7fe fa10 	bl	8000168 <__aeabi_dsub>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001d58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d60:	f7fe fbba 	bl	80004d8 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe f9fc 	bl	8000168 <__aeabi_dsub>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001d80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d88:	f7fe fba6 	bl	80004d8 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7fe f9e8 	bl	8000168 <__aeabi_dsub>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001db0:	f7fe fb92 	bl	80004d8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe f9d4 	bl	8000168 <__aeabi_dsub>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	3748      	adds	r7, #72	@ 0x48
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	4a14      	ldr	r2, [pc, #80]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6193      	str	r3, [r2, #24]
 8001dee:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_MspInit+0x60>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_MspInit+0x60>)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <NMI_Handler+0x4>

08001e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <MemManage_Handler+0x4>

08001e58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e90:	f000 fab6 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001e9e:	f001 fef6 	bl	8003c8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20001240 	.word	0x20001240

08001eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return 1;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <_kill>:

int _kill(int pid, int sig)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ec4:	f009 feba 	bl	800bc3c <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2216      	movs	r2, #22
 8001ecc:	601a      	str	r2, [r3, #0]
  return -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_exit>:

void _exit (int status)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffe7 	bl	8001eba <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <_exit+0x12>

08001ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e00a      	b.n	8001f18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f02:	f3af 8000 	nop.w
 8001f06:	4601      	mov	r1, r0
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbf0      	blt.n	8001f02 <_read+0x12>
  }

  return len;
 8001f20:	687b      	ldr	r3, [r7, #4]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e009      	b.n	8001f50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf1      	blt.n	8001f3c <_write+0x12>
  }
  return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_close>:

int _close(int file)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f88:	605a      	str	r2, [r3, #4]
  return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <_isatty>:

int _isatty(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <_sbrk+0x5c>)
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <_sbrk+0x60>)
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <_sbrk+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	@ (800202c <_sbrk+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff4:	f009 fe22 	bl	800bc3c <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	e009      	b.n	8002018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <_sbrk+0x64>)
 8002014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20005000 	.word	0x20005000
 8002024:	00000400 	.word	0x00000400
 8002028:	200004e0 	.word	0x200004e0
 800202c:	20001888 	.word	0x20001888

08002030 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	@ 0x28
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002042:	f107 0320 	add.w	r3, r7, #32
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800205e:	4b32      	ldr	r3, [pc, #200]	@ (8002128 <MX_TIM3_Init+0xec>)
 8002060:	4a32      	ldr	r2, [pc, #200]	@ (800212c <MX_TIM3_Init+0xf0>)
 8002062:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002064:	4b30      	ldr	r3, [pc, #192]	@ (8002128 <MX_TIM3_Init+0xec>)
 8002066:	2248      	movs	r2, #72	@ 0x48
 8002068:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206a:	4b2f      	ldr	r3, [pc, #188]	@ (8002128 <MX_TIM3_Init+0xec>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002070:	4b2d      	ldr	r3, [pc, #180]	@ (8002128 <MX_TIM3_Init+0xec>)
 8002072:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002076:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002078:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <MX_TIM3_Init+0xec>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207e:	4b2a      	ldr	r3, [pc, #168]	@ (8002128 <MX_TIM3_Init+0xec>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002084:	4828      	ldr	r0, [pc, #160]	@ (8002128 <MX_TIM3_Init+0xec>)
 8002086:	f003 fef9 	bl	8005e7c <HAL_TIM_PWM_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002090:	f7ff fb14 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	4619      	mov	r1, r3
 80020a2:	4821      	ldr	r0, [pc, #132]	@ (8002128 <MX_TIM3_Init+0xec>)
 80020a4:	f004 fbe8 	bl	8006878 <HAL_TIMEx_MasterConfigSynchronization>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80020ae:	f7ff fb05 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b2:	2360      	movs	r3, #96	@ 0x60
 80020b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2200      	movs	r2, #0
 80020c6:	4619      	mov	r1, r3
 80020c8:	4817      	ldr	r0, [pc, #92]	@ (8002128 <MX_TIM3_Init+0xec>)
 80020ca:	f004 f8f9 	bl	80062c0 <HAL_TIM_PWM_ConfigChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80020d4:	f7ff faf2 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2204      	movs	r2, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4812      	ldr	r0, [pc, #72]	@ (8002128 <MX_TIM3_Init+0xec>)
 80020e0:	f004 f8ee 	bl	80062c0 <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80020ea:	f7ff fae7 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2208      	movs	r2, #8
 80020f2:	4619      	mov	r1, r3
 80020f4:	480c      	ldr	r0, [pc, #48]	@ (8002128 <MX_TIM3_Init+0xec>)
 80020f6:	f004 f8e3 	bl	80062c0 <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002100:	f7ff fadc 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	220c      	movs	r2, #12
 8002108:	4619      	mov	r1, r3
 800210a:	4807      	ldr	r0, [pc, #28]	@ (8002128 <MX_TIM3_Init+0xec>)
 800210c:	f004 f8d8 	bl	80062c0 <HAL_TIM_PWM_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002116:	f7ff fad1 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800211a:	4803      	ldr	r0, [pc, #12]	@ (8002128 <MX_TIM3_Init+0xec>)
 800211c:	f000 f8b8 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	@ 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200004e4 	.word	0x200004e4
 800212c:	40000400 	.word	0x40000400

08002130 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	@ 0x30
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	2224      	movs	r2, #36	@ 0x24
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f009 fd29 	bl	800bb96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800214c:	4b20      	ldr	r3, [pc, #128]	@ (80021d0 <MX_TIM4_Init+0xa0>)
 800214e:	4a21      	ldr	r2, [pc, #132]	@ (80021d4 <MX_TIM4_Init+0xa4>)
 8002150:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002152:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <MX_TIM4_Init+0xa0>)
 8002154:	2200      	movs	r2, #0
 8002156:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <MX_TIM4_Init+0xa0>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <MX_TIM4_Init+0xa0>)
 8002160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002164:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <MX_TIM4_Init+0xa0>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <MX_TIM4_Init+0xa0>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002172:	2301      	movs	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800217a:	2301      	movs	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800218a:	2301      	movs	r3, #1
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800218e:	2300      	movs	r3, #0
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	4619      	mov	r1, r3
 800219c:	480c      	ldr	r0, [pc, #48]	@ (80021d0 <MX_TIM4_Init+0xa0>)
 800219e:	f003 ff5f 	bl	8006060 <HAL_TIM_Encoder_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80021a8:	f7ff fa88 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_TIM4_Init+0xa0>)
 80021ba:	f004 fb5d 	bl	8006878 <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80021c4:	f7ff fa7a 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	3730      	adds	r7, #48	@ 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000052c 	.word	0x2000052c
 80021d4:	40000800 	.word	0x40000800

080021d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a09      	ldr	r2, [pc, #36]	@ (800220c <HAL_TIM_PWM_MspInit+0x34>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10b      	bne.n	8002202 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_TIM_PWM_MspInit+0x38>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <HAL_TIM_PWM_MspInit+0x38>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_TIM_PWM_MspInit+0x38>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40000400 	.word	0x40000400
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a15      	ldr	r2, [pc, #84]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x70>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d123      	bne.n	800227c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <HAL_TIM_Encoder_MspInit+0x74>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	4a13      	ldr	r2, [pc, #76]	@ (8002288 <HAL_TIM_Encoder_MspInit+0x74>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	61d3      	str	r3, [r2, #28]
 8002240:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <HAL_TIM_Encoder_MspInit+0x74>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <HAL_TIM_Encoder_MspInit+0x74>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a0d      	ldr	r2, [pc, #52]	@ (8002288 <HAL_TIM_Encoder_MspInit+0x74>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_TIM_Encoder_MspInit+0x74>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002264:	23c0      	movs	r3, #192	@ 0xc0
 8002266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4619      	mov	r1, r3
 8002276:	4805      	ldr	r0, [pc, #20]	@ (800228c <HAL_TIM_Encoder_MspInit+0x78>)
 8002278:	f000 f9ec 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800227c:	bf00      	nop
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40000800 	.word	0x40000800
 8002288:	40021000 	.word	0x40021000
 800228c:	40010c00 	.word	0x40010c00

08002290 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002318 <HAL_TIM_MspPostInit+0x88>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d12f      	bne.n	8002310 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a19      	ldr	r2, [pc, #100]	@ (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b17      	ldr	r3, [pc, #92]	@ (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c8:	4b14      	ldr	r3, [pc, #80]	@ (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a13      	ldr	r2, [pc, #76]	@ (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 80022e0:	23c0      	movs	r3, #192	@ 0xc0
 80022e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	4619      	mov	r1, r3
 80022f2:	480b      	ldr	r0, [pc, #44]	@ (8002320 <HAL_TIM_MspPostInit+0x90>)
 80022f4:	f000 f9ae 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 80022f8:	2303      	movs	r3, #3
 80022fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2302      	movs	r3, #2
 8002302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	4619      	mov	r1, r3
 800230a:	4806      	ldr	r0, [pc, #24]	@ (8002324 <HAL_TIM_MspPostInit+0x94>)
 800230c:	f000 f9a2 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002310:	bf00      	nop
 8002312:	3720      	adds	r7, #32
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40000400 	.word	0x40000400
 800231c:	40021000 	.word	0x40021000
 8002320:	40010800 	.word	0x40010800
 8002324:	40010c00 	.word	0x40010c00

08002328 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002328:	f7ff fe82 	bl	8002030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800232c:	480b      	ldr	r0, [pc, #44]	@ (800235c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800232e:	490c      	ldr	r1, [pc, #48]	@ (8002360 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002330:	4a0c      	ldr	r2, [pc, #48]	@ (8002364 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002334:	e002      	b.n	800233c <LoopCopyDataInit>

08002336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233a:	3304      	adds	r3, #4

0800233c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800233c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002340:	d3f9      	bcc.n	8002336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002342:	4a09      	ldr	r2, [pc, #36]	@ (8002368 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002344:	4c09      	ldr	r4, [pc, #36]	@ (800236c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002348:	e001      	b.n	800234e <LoopFillZerobss>

0800234a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800234c:	3204      	adds	r2, #4

0800234e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002350:	d3fb      	bcc.n	800234a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002352:	f009 fc79 	bl	800bc48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002356:	f7fe ffb1 	bl	80012bc <main>
  bx lr
 800235a:	4770      	bx	lr
  ldr r0, =_sdata
 800235c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002360:	200003e8 	.word	0x200003e8
  ldr r2, =_sidata
 8002364:	0800e898 	.word	0x0800e898
  ldr r2, =_sbss
 8002368:	200003e8 	.word	0x200003e8
  ldr r4, =_ebss
 800236c:	20001884 	.word	0x20001884

08002370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <ADC1_2_IRQHandler>
	...

08002374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002378:	4b08      	ldr	r3, [pc, #32]	@ (800239c <HAL_Init+0x28>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a07      	ldr	r2, [pc, #28]	@ (800239c <HAL_Init+0x28>)
 800237e:	f043 0310 	orr.w	r3, r3, #16
 8002382:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002384:	2003      	movs	r0, #3
 8002386:	f000 f923 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238a:	200f      	movs	r0, #15
 800238c:	f000 f808 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002390:	f7ff fd24 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40022000 	.word	0x40022000

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a8:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f93b 	bl	800263a <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f000 f903 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e0:	4a06      	ldr	r2, [pc, #24]	@ (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000090 	.word	0x20000090
 80023f8:	20000098 	.word	0x20000098
 80023fc:	20000094 	.word	0x20000094

08002400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_IncTick+0x1c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_IncTick+0x20>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a03      	ldr	r2, [pc, #12]	@ (8002420 <HAL_IncTick+0x20>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	20000098 	.word	0x20000098
 8002420:	20000574 	.word	0x20000574

08002424 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return uwTick;
 8002428:	4b02      	ldr	r3, [pc, #8]	@ (8002434 <HAL_GetTick+0x10>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	20000574 	.word	0x20000574

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4906      	ldr	r1, [pc, #24]	@ (80024d0 <__NVIC_EnableIRQ+0x34>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	@ (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	@ (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f7ff ff90 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff2d 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff42 	bl	8002480 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff90 	bl	8002528 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5f 	bl	80024d4 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff35 	bl	800249c <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa2 	bl	800258c <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b08b      	sub	sp, #44	@ 0x2c
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002666:	e169      	b.n	800293c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002668:	2201      	movs	r2, #1
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8158 	bne.w	8002936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a9a      	ldr	r2, [pc, #616]	@ (80028f4 <HAL_GPIO_Init+0x2a0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d05e      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 8002690:	4a98      	ldr	r2, [pc, #608]	@ (80028f4 <HAL_GPIO_Init+0x2a0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d875      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 8002696:	4a98      	ldr	r2, [pc, #608]	@ (80028f8 <HAL_GPIO_Init+0x2a4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d058      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 800269c:	4a96      	ldr	r2, [pc, #600]	@ (80028f8 <HAL_GPIO_Init+0x2a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d86f      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026a2:	4a96      	ldr	r2, [pc, #600]	@ (80028fc <HAL_GPIO_Init+0x2a8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d052      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026a8:	4a94      	ldr	r2, [pc, #592]	@ (80028fc <HAL_GPIO_Init+0x2a8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d869      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ae:	4a94      	ldr	r2, [pc, #592]	@ (8002900 <HAL_GPIO_Init+0x2ac>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d04c      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026b4:	4a92      	ldr	r2, [pc, #584]	@ (8002900 <HAL_GPIO_Init+0x2ac>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d863      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ba:	4a92      	ldr	r2, [pc, #584]	@ (8002904 <HAL_GPIO_Init+0x2b0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d046      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026c0:	4a90      	ldr	r2, [pc, #576]	@ (8002904 <HAL_GPIO_Init+0x2b0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d85d      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026c6:	2b12      	cmp	r3, #18
 80026c8:	d82a      	bhi.n	8002720 <HAL_GPIO_Init+0xcc>
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d859      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ce:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <HAL_GPIO_Init+0x80>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	0800274f 	.word	0x0800274f
 80026d8:	08002729 	.word	0x08002729
 80026dc:	0800273b 	.word	0x0800273b
 80026e0:	0800277d 	.word	0x0800277d
 80026e4:	08002783 	.word	0x08002783
 80026e8:	08002783 	.word	0x08002783
 80026ec:	08002783 	.word	0x08002783
 80026f0:	08002783 	.word	0x08002783
 80026f4:	08002783 	.word	0x08002783
 80026f8:	08002783 	.word	0x08002783
 80026fc:	08002783 	.word	0x08002783
 8002700:	08002783 	.word	0x08002783
 8002704:	08002783 	.word	0x08002783
 8002708:	08002783 	.word	0x08002783
 800270c:	08002783 	.word	0x08002783
 8002710:	08002783 	.word	0x08002783
 8002714:	08002783 	.word	0x08002783
 8002718:	08002731 	.word	0x08002731
 800271c:	08002745 	.word	0x08002745
 8002720:	4a79      	ldr	r2, [pc, #484]	@ (8002908 <HAL_GPIO_Init+0x2b4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002726:	e02c      	b.n	8002782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e029      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	3304      	adds	r3, #4
 8002736:	623b      	str	r3, [r7, #32]
          break;
 8002738:	e024      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	3308      	adds	r3, #8
 8002740:	623b      	str	r3, [r7, #32]
          break;
 8002742:	e01f      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	330c      	adds	r3, #12
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e01a      	b.n	8002784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002756:	2304      	movs	r3, #4
 8002758:	623b      	str	r3, [r7, #32]
          break;
 800275a:	e013      	b.n	8002784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002764:	2308      	movs	r3, #8
 8002766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	611a      	str	r2, [r3, #16]
          break;
 800276e:	e009      	b.n	8002784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002770:	2308      	movs	r3, #8
 8002772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	615a      	str	r2, [r3, #20]
          break;
 800277a:	e003      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x130>
          break;
 8002782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2bff      	cmp	r3, #255	@ 0xff
 8002788:	d801      	bhi.n	800278e <HAL_GPIO_Init+0x13a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_Init+0x13e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2bff      	cmp	r3, #255	@ 0xff
 8002798:	d802      	bhi.n	80027a0 <HAL_GPIO_Init+0x14c>
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x152>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	3b08      	subs	r3, #8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	210f      	movs	r1, #15
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	6a39      	ldr	r1, [r7, #32]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	431a      	orrs	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80b1 	beq.w	8002936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027d4:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <HAL_GPIO_Init+0x2b8>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a4c      	ldr	r2, [pc, #304]	@ (800290c <HAL_GPIO_Init+0x2b8>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b4a      	ldr	r3, [pc, #296]	@ (800290c <HAL_GPIO_Init+0x2b8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027ec:	4a48      	ldr	r2, [pc, #288]	@ (8002910 <HAL_GPIO_Init+0x2bc>)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a40      	ldr	r2, [pc, #256]	@ (8002914 <HAL_GPIO_Init+0x2c0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_GPIO_Init+0x1ec>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3f      	ldr	r2, [pc, #252]	@ (8002918 <HAL_GPIO_Init+0x2c4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00d      	beq.n	800283c <HAL_GPIO_Init+0x1e8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3e      	ldr	r2, [pc, #248]	@ (800291c <HAL_GPIO_Init+0x2c8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d007      	beq.n	8002838 <HAL_GPIO_Init+0x1e4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3d      	ldr	r2, [pc, #244]	@ (8002920 <HAL_GPIO_Init+0x2cc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_GPIO_Init+0x1e0>
 8002830:	2303      	movs	r3, #3
 8002832:	e006      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002834:	2304      	movs	r3, #4
 8002836:	e004      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002838:	2302      	movs	r3, #2
 800283a:	e002      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002840:	2300      	movs	r3, #0
 8002842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002844:	f002 0203 	and.w	r2, r2, #3
 8002848:	0092      	lsls	r2, r2, #2
 800284a:	4093      	lsls	r3, r2
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002852:	492f      	ldr	r1, [pc, #188]	@ (8002910 <HAL_GPIO_Init+0x2bc>)
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800286c:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	492c      	ldr	r1, [pc, #176]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800287a:	4b2a      	ldr	r3, [pc, #168]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	43db      	mvns	r3, r3
 8002882:	4928      	ldr	r1, [pc, #160]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 8002884:	4013      	ands	r3, r2
 8002886:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002894:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	4922      	ldr	r1, [pc, #136]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	60cb      	str	r3, [r1, #12]
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	491e      	ldr	r1, [pc, #120]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4918      	ldr	r1, [pc, #96]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ca:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4914      	ldr	r1, [pc, #80]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d021      	beq.n	8002928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	490e      	ldr	r1, [pc, #56]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e021      	b.n	8002936 <HAL_GPIO_Init+0x2e2>
 80028f2:	bf00      	nop
 80028f4:	10320000 	.word	0x10320000
 80028f8:	10310000 	.word	0x10310000
 80028fc:	10220000 	.word	0x10220000
 8002900:	10210000 	.word	0x10210000
 8002904:	10120000 	.word	0x10120000
 8002908:	10110000 	.word	0x10110000
 800290c:	40021000 	.word	0x40021000
 8002910:	40010000 	.word	0x40010000
 8002914:	40010800 	.word	0x40010800
 8002918:	40010c00 	.word	0x40010c00
 800291c:	40011000 	.word	0x40011000
 8002920:	40011400 	.word	0x40011400
 8002924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_GPIO_Init+0x304>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	43db      	mvns	r3, r3
 8002930:	4909      	ldr	r1, [pc, #36]	@ (8002958 <HAL_GPIO_Init+0x304>)
 8002932:	4013      	ands	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	3301      	adds	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	f47f ae8e 	bne.w	8002668 <HAL_GPIO_Init+0x14>
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	372c      	adds	r7, #44	@ 0x2c
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40010400 	.word	0x40010400

0800295c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
 8002968:	4613      	mov	r3, r2
 800296a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002978:	e003      	b.n	8002982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e12b      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fc42 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	@ 0x24
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f0:	f003 f95c 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 80029f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a81      	ldr	r2, [pc, #516]	@ (8002c00 <HAL_I2C_Init+0x274>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d807      	bhi.n	8002a10 <HAL_I2C_Init+0x84>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a80      	ldr	r2, [pc, #512]	@ (8002c04 <HAL_I2C_Init+0x278>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e006      	b.n	8002a1e <HAL_I2C_Init+0x92>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a7d      	ldr	r2, [pc, #500]	@ (8002c08 <HAL_I2C_Init+0x27c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0e7      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a78      	ldr	r2, [pc, #480]	@ (8002c0c <HAL_I2C_Init+0x280>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d802      	bhi.n	8002a60 <HAL_I2C_Init+0xd4>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	e009      	b.n	8002a74 <HAL_I2C_Init+0xe8>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a69      	ldr	r2, [pc, #420]	@ (8002c10 <HAL_I2C_Init+0x284>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	3301      	adds	r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	495c      	ldr	r1, [pc, #368]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d819      	bhi.n	8002ac8 <HAL_I2C_Init+0x13c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e59      	subs	r1, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_I2C_Init+0x138>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e59      	subs	r1, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	e051      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	e04f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <HAL_I2C_Init+0x168>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e012      	b.n	8002b1a <HAL_I2C_Init+0x18e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Init+0x196>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e022      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10e      	bne.n	8002b48 <HAL_I2C_Init+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e58      	subs	r0, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	440b      	add	r3, r1
 8002b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b46:	e00f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6809      	ldr	r1, [r1, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6911      	ldr	r1, [r2, #16]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	000186a0 	.word	0x000186a0
 8002c04:	001e847f 	.word	0x001e847f
 8002c08:	003d08ff 	.word	0x003d08ff
 8002c0c:	431bde83 	.word	0x431bde83
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	817b      	strh	r3, [r7, #10]
 8002c26:	460b      	mov	r3, r1
 8002c28:	813b      	strh	r3, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c2e:	f7ff fbf9 	bl	8002424 <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	f040 80d9 	bne.w	8002df4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2319      	movs	r3, #25
 8002c48:	2201      	movs	r2, #1
 8002c4a:	496d      	ldr	r1, [pc, #436]	@ (8002e00 <HAL_I2C_Mem_Write+0x1ec>)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fccd 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e0cc      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_I2C_Mem_Write+0x56>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e0c5      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d007      	beq.n	8002c90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2221      	movs	r2, #33	@ 0x21
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2240      	movs	r2, #64	@ 0x40
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a3a      	ldr	r2, [r7, #32]
 8002cba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a4d      	ldr	r2, [pc, #308]	@ (8002e04 <HAL_I2C_Mem_Write+0x1f0>)
 8002cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd2:	88f8      	ldrh	r0, [r7, #6]
 8002cd4:	893a      	ldrh	r2, [r7, #8]
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fb04 	bl	80032f0 <I2C_RequestMemoryWrite>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d052      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e081      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fd92 	bl	8003820 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d107      	bne.n	8002d1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e06b      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d11b      	bne.n	8002d94 <HAL_I2C_Mem_Write+0x180>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d017      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1aa      	bne.n	8002cf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fd85 	bl	80038b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e016      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	00100002 	.word	0x00100002
 8002e04:	ffff0000 	.word	0xffff0000

08002e08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	@ 0x30
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	4608      	mov	r0, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	4603      	mov	r3, r0
 8002e18:	817b      	strh	r3, [r7, #10]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	813b      	strh	r3, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e26:	f7ff fafd 	bl	8002424 <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	f040 8250 	bne.w	80032da <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2319      	movs	r3, #25
 8002e40:	2201      	movs	r2, #1
 8002e42:	4982      	ldr	r1, [pc, #520]	@ (800304c <HAL_I2C_Mem_Read+0x244>)
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fbd1 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
 8002e52:	e243      	b.n	80032dc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2C_Mem_Read+0x5a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e23c      	b.n	80032dc <HAL_I2C_Mem_Read+0x4d4>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d007      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2222      	movs	r2, #34	@ 0x22
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2240      	movs	r2, #64	@ 0x40
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a62      	ldr	r2, [pc, #392]	@ (8003050 <HAL_I2C_Mem_Read+0x248>)
 8002ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eca:	88f8      	ldrh	r0, [r7, #6]
 8002ecc:	893a      	ldrh	r2, [r7, #8]
 8002ece:	8979      	ldrh	r1, [r7, #10]
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	4603      	mov	r3, r0
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fa9e 	bl	800341c <I2C_RequestMemoryRead>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e1f8      	b.n	80032dc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d113      	bne.n	8002f1a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e1cc      	b.n	80032b4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d11e      	bne.n	8002f60 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f32:	b672      	cpsid	i
}
 8002f34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f5c:	b662      	cpsie	i
}
 8002f5e:	e035      	b.n	8002fcc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d11e      	bne.n	8002fa6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f78:	b672      	cpsid	i
}
 8002f7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fa2:	b662      	cpsie	i
}
 8002fa4:	e012      	b.n	8002fcc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fb4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002fcc:	e172      	b.n	80032b4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	f200 811f 	bhi.w	8003216 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d123      	bne.n	8003028 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fcab 	bl	8003940 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e173      	b.n	80032dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003026:	e145      	b.n	80032b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302c:	2b02      	cmp	r3, #2
 800302e:	d152      	bne.n	80030d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003036:	2200      	movs	r2, #0
 8003038:	4906      	ldr	r1, [pc, #24]	@ (8003054 <HAL_I2C_Mem_Read+0x24c>)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fad6 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e148      	b.n	80032dc <HAL_I2C_Mem_Read+0x4d4>
 800304a:	bf00      	nop
 800304c:	00100002 	.word	0x00100002
 8003050:	ffff0000 	.word	0xffff0000
 8003054:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003058:	b672      	cpsid	i
}
 800305a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800309e:	b662      	cpsie	i
}
 80030a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030d4:	e0ee      	b.n	80032b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030dc:	2200      	movs	r2, #0
 80030de:	4981      	ldr	r1, [pc, #516]	@ (80032e4 <HAL_I2C_Mem_Read+0x4dc>)
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fa83 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0f5      	b.n	80032dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003100:	b672      	cpsid	i
}
 8003102:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003136:	4b6c      	ldr	r3, [pc, #432]	@ (80032e8 <HAL_I2C_Mem_Read+0x4e0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	4a6b      	ldr	r2, [pc, #428]	@ (80032ec <HAL_I2C_Mem_Read+0x4e4>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0a1a      	lsrs	r2, r3, #8
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00da      	lsls	r2, r3, #3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	3b01      	subs	r3, #1
 8003154:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d118      	bne.n	800318e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800317e:	b662      	cpsie	i
}
 8003180:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0a6      	b.n	80032dc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b04      	cmp	r3, #4
 800319a:	d1d9      	bne.n	8003150 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031de:	b662      	cpsie	i
}
 80031e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003214:	e04e      	b.n	80032b4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003218:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fb90 	bl	8003940 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e058      	b.n	80032dc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d124      	bne.n	80032b4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326e:	2b03      	cmp	r3, #3
 8003270:	d107      	bne.n	8003282 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003280:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f47f ae88 	bne.w	8002fce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	@ 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	00010004 	.word	0x00010004
 80032e8:	20000090 	.word	0x20000090
 80032ec:	14f8b589 	.word	0x14f8b589

080032f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	4608      	mov	r0, r1
 80032fa:	4611      	mov	r1, r2
 80032fc:	461a      	mov	r2, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	817b      	strh	r3, [r7, #10]
 8003302:	460b      	mov	r3, r1
 8003304:	813b      	strh	r3, [r7, #8]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003318:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	2200      	movs	r2, #0
 8003322:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f960 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00d      	beq.n	800334e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003340:	d103      	bne.n	800334a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003348:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e05f      	b.n	800340e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800335c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	492d      	ldr	r1, [pc, #180]	@ (8003418 <I2C_RequestMemoryWrite+0x128>)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f9bb 	bl	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e04c      	b.n	800340e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fa46 	bl	8003820 <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d107      	bne.n	80033b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e02b      	b.n	800340e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033bc:	893b      	ldrh	r3, [r7, #8]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]
 80033c6:	e021      	b.n	800340c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033c8:	893b      	ldrh	r3, [r7, #8]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d8:	6a39      	ldr	r1, [r7, #32]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fa20 	bl	8003820 <I2C_WaitOnTXEFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d107      	bne.n	80033fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e005      	b.n	800340e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003402:	893b      	ldrh	r3, [r7, #8]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	00010002 	.word	0x00010002

0800341c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	4608      	mov	r0, r1
 8003426:	4611      	mov	r1, r2
 8003428:	461a      	mov	r2, r3
 800342a:	4603      	mov	r3, r0
 800342c:	817b      	strh	r3, [r7, #10]
 800342e:	460b      	mov	r3, r1
 8003430:	813b      	strh	r3, [r7, #8]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003444:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003454:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	2200      	movs	r2, #0
 800345e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f8c2 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800347c:	d103      	bne.n	8003486 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003484:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0aa      	b.n	80035e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003498:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	6a3a      	ldr	r2, [r7, #32]
 800349e:	4952      	ldr	r1, [pc, #328]	@ (80035e8 <I2C_RequestMemoryRead+0x1cc>)
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f91d 	bl	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e097      	b.n	80035e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c8:	6a39      	ldr	r1, [r7, #32]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f9a8 	bl	8003820 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d107      	bne.n	80034ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e076      	b.n	80035e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d105      	bne.n	8003504 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f8:	893b      	ldrh	r3, [r7, #8]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	611a      	str	r2, [r3, #16]
 8003502:	e021      	b.n	8003548 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003504:	893b      	ldrh	r3, [r7, #8]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	b29b      	uxth	r3, r3
 800350a:	b2da      	uxtb	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003514:	6a39      	ldr	r1, [r7, #32]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f982 	bl	8003820 <I2C_WaitOnTXEFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2b04      	cmp	r3, #4
 8003528:	d107      	bne.n	800353a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003538:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e050      	b.n	80035e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800353e:	893b      	ldrh	r3, [r7, #8]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800354a:	6a39      	ldr	r1, [r7, #32]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f967 	bl	8003820 <I2C_WaitOnTXEFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00d      	beq.n	8003574 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	2b04      	cmp	r3, #4
 800355e:	d107      	bne.n	8003570 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e035      	b.n	80035e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003582:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	2200      	movs	r2, #0
 800358c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f82b 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035aa:	d103      	bne.n	80035b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e013      	b.n	80035e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035b8:	897b      	ldrh	r3, [r7, #10]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	6a3a      	ldr	r2, [r7, #32]
 80035cc:	4906      	ldr	r1, [pc, #24]	@ (80035e8 <I2C_RequestMemoryRead+0x1cc>)
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f886 	bl	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	00010002 	.word	0x00010002

080035ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fc:	e048      	b.n	8003690 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d044      	beq.n	8003690 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003606:	f7fe ff0d 	bl	8002424 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d302      	bcc.n	800361c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d139      	bne.n	8003690 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10d      	bne.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	43da      	mvns	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	e00c      	b.n	800365c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	43da      	mvns	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4013      	ands	r3, r2
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	429a      	cmp	r2, r3
 8003660:	d116      	bne.n	8003690 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e023      	b.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10d      	bne.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	e00c      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	43da      	mvns	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d093      	beq.n	80035fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ee:	e071      	b.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fe:	d123      	bne.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e067      	b.n	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	d041      	beq.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003750:	f7fe fe68 	bl	8002424 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d302      	bcc.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d136      	bne.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d10c      	bne.n	800378a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	e00b      	b.n	80037a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	43da      	mvns	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4013      	ands	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d016      	beq.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	f043 0220 	orr.w	r2, r3, #32
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e021      	b.n	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d10c      	bne.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	43da      	mvns	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4013      	ands	r3, r2
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e00b      	b.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	43da      	mvns	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4013      	ands	r3, r2
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f af6d 	bne.w	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800382c:	e034      	b.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f8e3 	bl	80039fa <I2C_IsAcknowledgeFailed>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e034      	b.n	80038a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d028      	beq.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fe fded 	bl	8002424 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11d      	bne.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003866:	2b80      	cmp	r3, #128	@ 0x80
 8003868:	d016      	beq.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e007      	b.n	80038a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a2:	2b80      	cmp	r3, #128	@ 0x80
 80038a4:	d1c3      	bne.n	800382e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038bc:	e034      	b.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f89b 	bl	80039fa <I2C_IsAcknowledgeFailed>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e034      	b.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d028      	beq.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7fe fda5 	bl	8002424 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11d      	bne.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d016      	beq.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d1c3      	bne.n	80038be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800394c:	e049      	b.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b10      	cmp	r3, #16
 800395a:	d119      	bne.n	8003990 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0210 	mvn.w	r2, #16
 8003964:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e030      	b.n	80039f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003990:	f7fe fd48 	bl	8002424 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d302      	bcc.n	80039a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11d      	bne.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	d016      	beq.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	f043 0220 	orr.w	r2, r3, #32
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e007      	b.n	80039f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	2b40      	cmp	r3, #64	@ 0x40
 80039ee:	d1ae      	bne.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a10:	d11b      	bne.n	8003a4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0e8      	b.n	8003c3a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f007 f84b 	bl	800ab18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2203      	movs	r2, #3
 8003a86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f002 ff70 	bl	800697a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aa4:	f002 ff46 	bl	8006934 <USB_CoreInit>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0bf      	b.n	8003c3a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f002 ff74 	bl	80069ae <USB_SetCurrentMode>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0b0      	b.n	8003c3a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e03e      	b.n	8003b5c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	3311      	adds	r3, #17
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	440b      	add	r3, r1
 8003b00:	3310      	adds	r3, #16
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	3313      	adds	r3, #19
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	440b      	add	r3, r1
 8003b28:	3320      	adds	r3, #32
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b2e:	7bfa      	ldrb	r2, [r7, #15]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3324      	adds	r3, #36	@ 0x24
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	791b      	ldrb	r3, [r3, #4]
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3bb      	bcc.n	8003ade <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	e044      	b.n	8003bf6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	440b      	add	r3, r1
 8003ba6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	440b      	add	r3, r1
 8003bbc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	440b      	add	r3, r1
 8003bd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	440b      	add	r3, r1
 8003be8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	791b      	ldrb	r3, [r3, #4]
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3b5      	bcc.n	8003b6c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c0a:	f002 fedc 	bl	80069c6 <USB_DevInit>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e00c      	b.n	8003c3a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f005 f95b 	bl	8008eee <USB_DevDisconnect>

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_PCD_Start+0x16>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e016      	b.n	8003c86 <HAL_PCD_Start+0x44>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 fe72 	bl	800694e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f007 f9c6 	bl	800affe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f005 f92f 	bl	8008eda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b088      	sub	sp, #32
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f005 f931 	bl	8008f02 <USB_ReadInterrupts>
 8003ca0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fb1a 	bl	80042e6 <PCD_EP_ISR_Handler>

    return;
 8003cb2:	e119      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d013      	beq.n	8003ce6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd0:	b292      	uxth	r2, r2
 8003cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f006 ff99 	bl	800ac0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003cdc:	2100      	movs	r1, #0
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f905 	bl	8003eee <HAL_PCD_SetAddress>

    return;
 8003ce4:	e100      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00c      	beq.n	8003d0a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d02:	b292      	uxth	r2, r2
 8003d04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d08:	e0ee      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d26:	b292      	uxth	r2, r2
 8003d28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d2c:	e0dc      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d027      	beq.n	8003d88 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0208 	bic.w	r2, r2, #8
 8003d62:	b292      	uxth	r2, r2
 8003d64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f006 ff89 	bl	800ac80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d80:	b292      	uxth	r2, r2
 8003d82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d86:	e0af      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8083 	beq.w	8003e9a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e010      	b.n	8003dbc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	7ffb      	ldrb	r3, [r7, #31]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	441a      	add	r2, r3
 8003da6:	7ffb      	ldrb	r3, [r7, #31]
 8003da8:	8812      	ldrh	r2, [r2, #0]
 8003daa:	b292      	uxth	r2, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	3320      	adds	r3, #32
 8003db0:	443b      	add	r3, r7
 8003db2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003db6:	7ffb      	ldrb	r3, [r7, #31]
 8003db8:	3301      	adds	r3, #1
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	7ffb      	ldrb	r3, [r7, #31]
 8003dbe:	2b07      	cmp	r3, #7
 8003dc0:	d9eb      	bls.n	8003d9a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	b292      	uxth	r2, r2
 8003dee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003df2:	bf00      	nop
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f6      	beq.n	8003df4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e18:	b292      	uxth	r2, r2
 8003e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e00f      	b.n	8003e44 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003e24:	7ffb      	ldrb	r3, [r7, #31]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	7ffa      	ldrb	r2, [r7, #31]
 8003e2e:	0092      	lsls	r2, r2, #2
 8003e30:	440a      	add	r2, r1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	3320      	adds	r3, #32
 8003e36:	443b      	add	r3, r7
 8003e38:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e3c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
 8003e40:	3301      	adds	r3, #1
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	7ffb      	ldrb	r3, [r7, #31]
 8003e46:	2b07      	cmp	r3, #7
 8003e48:	d9ec      	bls.n	8003e24 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0208 	orr.w	r2, r2, #8
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e74:	b292      	uxth	r2, r2
 8003e76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0204 	orr.w	r2, r2, #4
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f006 feda 	bl	800ac4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003e98:	e026      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00f      	beq.n	8003ec4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f006 fe98 	bl	800abf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ec2:	e011      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003ee6:	bf00      	nop
  }
}
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_PCD_SetAddress+0x1a>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e012      	b.n	8003f2e <HAL_PCD_SetAddress+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 ffc8 	bl	8008eb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	4608      	mov	r0, r1
 8003f40:	4611      	mov	r1, r2
 8003f42:	461a      	mov	r2, r3
 8003f44:	4603      	mov	r3, r0
 8003f46:	70fb      	strb	r3, [r7, #3]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	803b      	strh	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	da0e      	bge.n	8003f7a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	f003 0207 	and.w	r2, r3, #7
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4413      	add	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	705a      	strb	r2, [r3, #1]
 8003f78:	e00e      	b.n	8003f98 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 0207 	and.w	r2, r3, #7
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fa4:	883a      	ldrh	r2, [r7, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	78ba      	ldrb	r2, [r7, #2]
 8003fae:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fb0:	78bb      	ldrb	r3, [r7, #2]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d102      	bne.n	8003fbc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_PCD_EP_Open+0x94>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e00e      	b.n	8003fe8 <HAL_PCD_EP_Open+0xb2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 fd11 	bl	8006a00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004000:	2b00      	cmp	r3, #0
 8004002:	da0e      	bge.n	8004022 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	f003 0207 	and.w	r2, r3, #7
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	3310      	adds	r3, #16
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	705a      	strb	r2, [r3, #1]
 8004020:	e00e      	b.n	8004040 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 0207 	and.w	r2, r3, #7
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4413      	add	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	b2da      	uxtb	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_PCD_EP_Close+0x6a>
 8004056:	2302      	movs	r3, #2
 8004058:	e00e      	b.n	8004078 <HAL_PCD_EP_Close+0x88>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	4618      	mov	r0, r3
 800406a:	f003 f889 	bl	8007180 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	460b      	mov	r3, r1
 800408e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004090:	7afb      	ldrb	r3, [r7, #11]
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4413      	add	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2200      	movs	r2, #0
 80040b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c0:	7afb      	ldrb	r3, [r7, #11]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6979      	ldr	r1, [r7, #20]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f003 fa40 	bl	8007558 <USB_EPStartXfer>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 0207 	and.w	r2, r3, #7
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004104:	681b      	ldr	r3, [r3, #0]
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	460b      	mov	r3, r1
 800411e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004120:	7afb      	ldrb	r3, [r7, #11]
 8004122:	f003 0207 	and.w	r2, r3, #7
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	3310      	adds	r3, #16
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2200      	movs	r2, #0
 8004154:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2201      	movs	r2, #1
 800415a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800415c:	7afb      	ldrb	r3, [r7, #11]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	b2da      	uxtb	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6979      	ldr	r1, [r7, #20]
 800416e:	4618      	mov	r0, r3
 8004170:	f003 f9f2 	bl	8007558 <USB_EPStartXfer>

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	7912      	ldrb	r2, [r2, #4]
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e04c      	b.n	8004236 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800419c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	da0e      	bge.n	80041c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	f003 0207 	and.w	r2, r3, #7
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	3310      	adds	r3, #16
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4413      	add	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	705a      	strb	r2, [r3, #1]
 80041c0:	e00c      	b.n	80041dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_PCD_EP_SetStall+0x7e>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e01c      	b.n	8004236 <HAL_PCD_EP_SetStall+0xb8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68f9      	ldr	r1, [r7, #12]
 800420a:	4618      	mov	r0, r3
 800420c:	f004 fd55 	bl	8008cba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	2b00      	cmp	r3, #0
 8004218:	d108      	bne.n	800422c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f004 fe7a 	bl	8008f20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	7912      	ldrb	r2, [r2, #4]
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e040      	b.n	80042de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800425c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004260:	2b00      	cmp	r3, #0
 8004262:	da0e      	bge.n	8004282 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 0207 	and.w	r2, r3, #7
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	3310      	adds	r3, #16
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4413      	add	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	705a      	strb	r2, [r3, #1]
 8004280:	e00e      	b.n	80042a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 0207 	and.w	r2, r3, #7
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_PCD_EP_ClrStall+0x82>
 80042bc:	2302      	movs	r3, #2
 80042be:	e00e      	b.n	80042de <HAL_PCD_EP_ClrStall+0xa0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f004 fd43 	bl	8008d5a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b096      	sub	sp, #88	@ 0x58
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042ee:	e3bb      	b.n	8004a68 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80042fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800430a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 8175 	bne.w	80045fe <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d14e      	bne.n	80043be <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800432c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004330:	81fb      	strh	r3, [r7, #14]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	89fb      	ldrh	r3, [r7, #14]
 8004338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800433c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004340:	b29b      	uxth	r3, r3
 8004342:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3310      	adds	r3, #16
 8004348:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004352:	b29b      	uxth	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4413      	add	r3, r2
 800435e:	3302      	adds	r3, #2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004374:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	441a      	add	r2, r3
 8004380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004382:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004384:	2100      	movs	r1, #0
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f006 fc19 	bl	800abbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	7b5b      	ldrb	r3, [r3, #13]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8368 	beq.w	8004a68 <PCD_EP_ISR_Handler+0x782>
 8004398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 8363 	bne.w	8004a68 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	7b5b      	ldrb	r3, [r3, #13]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	735a      	strb	r2, [r3, #13]
 80043bc:	e354      	b.n	8004a68 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043c4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80043d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d034      	beq.n	8004446 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	3306      	adds	r3, #6
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004406:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004414:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004418:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800441a:	b29b      	uxth	r3, r3
 800441c:	f004 fdd0 	bl	8008fc0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29a      	uxth	r2, r3
 8004428:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800442c:	4013      	ands	r3, r2
 800442e:	823b      	strh	r3, [r7, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	8a3a      	ldrh	r2, [r7, #16]
 8004436:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800443a:	b292      	uxth	r2, r2
 800443c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f006 fb90 	bl	800ab64 <HAL_PCD_SetupStageCallback>
 8004444:	e310      	b.n	8004a68 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004446:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800444a:	2b00      	cmp	r3, #0
 800444c:	f280 830c 	bge.w	8004a68 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29a      	uxth	r2, r3
 8004458:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800445c:	4013      	ands	r3, r2
 800445e:	83fb      	strh	r3, [r7, #30]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	8bfa      	ldrh	r2, [r7, #30]
 8004466:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800446a:	b292      	uxth	r2, r2
 800446c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004476:	b29b      	uxth	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	3306      	adds	r3, #6
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004498:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800449a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d019      	beq.n	80044d6 <PCD_EP_ISR_Handler+0x1f0>
 80044a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d015      	beq.n	80044d6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b0:	6959      	ldr	r1, [r3, #20]
 80044b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80044b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f004 fd80 	bl	8008fc0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80044c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	441a      	add	r2, r3
 80044ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044cc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80044ce:	2100      	movs	r1, #0
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f006 fb59 	bl	800ab88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80044e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f040 82bd 	bne.w	8004a68 <PCD_EP_ISR_Handler+0x782>
 80044ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044fa:	f000 82b5 	beq.w	8004a68 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800450c:	b29b      	uxth	r3, r3
 800450e:	461a      	mov	r2, r3
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	4413      	add	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004528:	b29a      	uxth	r2, r3
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b3e      	cmp	r3, #62	@ 0x3e
 8004534:	d91d      	bls.n	8004572 <PCD_EP_ISR_Handler+0x28c>
 8004536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	647b      	str	r3, [r7, #68]	@ 0x44
 800453e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2b00      	cmp	r3, #0
 8004548:	d102      	bne.n	8004550 <PCD_EP_ISR_Handler+0x26a>
 800454a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454c:	3b01      	subs	r3, #1
 800454e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29a      	uxth	r2, r3
 8004556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004558:	b29b      	uxth	r3, r3
 800455a:	029b      	lsls	r3, r3, #10
 800455c:	b29b      	uxth	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456a:	b29a      	uxth	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	e026      	b.n	80045c0 <PCD_EP_ISR_Handler+0x2da>
 8004572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10a      	bne.n	8004590 <PCD_EP_ISR_Handler+0x2aa>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004588:	b29a      	uxth	r2, r3
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	e017      	b.n	80045c0 <PCD_EP_ISR_Handler+0x2da>
 8004590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	647b      	str	r3, [r7, #68]	@ 0x44
 8004598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <PCD_EP_ISR_Handler+0x2c4>
 80045a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a6:	3301      	adds	r3, #1
 80045a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	029b      	lsls	r3, r3, #10
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4313      	orrs	r3, r2
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d0:	827b      	strh	r3, [r7, #18]
 80045d2:	8a7b      	ldrh	r3, [r7, #18]
 80045d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80045d8:	827b      	strh	r3, [r7, #18]
 80045da:	8a7b      	ldrh	r3, [r7, #18]
 80045dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045e0:	827b      	strh	r3, [r7, #18]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	8a7b      	ldrh	r3, [r7, #18]
 80045e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	8013      	strh	r3, [r2, #0]
 80045fc:	e234      	b.n	8004a68 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004612:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004616:	2b00      	cmp	r3, #0
 8004618:	f280 80fc 	bge.w	8004814 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29a      	uxth	r2, r3
 800462e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004632:	4013      	ands	r3, r2
 8004634:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800464a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800464e:	b292      	uxth	r2, r2
 8004650:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004652:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466a:	7b1b      	ldrb	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d125      	bne.n	80046bc <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004678:	b29b      	uxth	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4413      	add	r3, r2
 8004684:	3306      	adds	r3, #6
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004698:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800469c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8092 	beq.w	80047ca <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046ac:	6959      	ldr	r1, [r3, #20]
 80046ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b0:	88da      	ldrh	r2, [r3, #6]
 80046b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046b6:	f004 fc83 	bl	8008fc0 <USB_ReadPMA>
 80046ba:	e086      	b.n	80047ca <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80046bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046be:	78db      	ldrb	r3, [r3, #3]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d10a      	bne.n	80046da <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80046c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046c8:	461a      	mov	r2, r3
 80046ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9d9 	bl	8004a84 <HAL_PCD_EP_DB_Receive>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80046d8:	e077      	b.n	80047ca <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800470a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800470e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004716:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800471a:	b29b      	uxth	r3, r3
 800471c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d024      	beq.n	8004782 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004740:	b29b      	uxth	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	3302      	adds	r3, #2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004760:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004764:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004768:	2b00      	cmp	r3, #0
 800476a:	d02e      	beq.n	80047ca <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004772:	6959      	ldr	r1, [r3, #20]
 8004774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004776:	891a      	ldrh	r2, [r3, #8]
 8004778:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800477c:	f004 fc20 	bl	8008fc0 <USB_ReadPMA>
 8004780:	e023      	b.n	80047ca <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	3306      	adds	r3, #6
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80047ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047bc:	6959      	ldr	r1, [r3, #20]
 80047be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c0:	895a      	ldrh	r2, [r3, #10]
 80047c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80047c6:	f004 fbfb 	bl	8008fc0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80047ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80047d2:	441a      	add	r2, r3
 80047d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80047d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80047e0:	441a      	add	r2, r3
 80047e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80047e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <PCD_EP_ISR_Handler+0x514>
 80047ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80047f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d206      	bcs.n	8004808 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80047fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f006 f9c1 	bl	800ab88 <HAL_PCD_DataOutStageCallback>
 8004806:	e005      	b.n	8004814 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800480e:	4618      	mov	r0, r3
 8004810:	f002 fea2 	bl	8007558 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004814:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8123 	beq.w	8004a68 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004822:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	3310      	adds	r3, #16
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800484c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004850:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486e:	b29b      	uxth	r3, r3
 8004870:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004874:	78db      	ldrb	r3, [r3, #3]
 8004876:	2b01      	cmp	r3, #1
 8004878:	f040 80a2 	bne.w	80049c0 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800487c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487e:	2200      	movs	r2, #0
 8004880:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004884:	7b1b      	ldrb	r3, [r3, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8093 	beq.w	80049b2 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800488c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d046      	beq.n	8004926 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d126      	bne.n	80048ee <PCD_EP_ISR_Handler+0x608>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	4413      	add	r3, r2
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	011a      	lsls	r2, r3, #4
 80048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c0:	4413      	add	r3, r2
 80048c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048c6:	623b      	str	r3, [r7, #32]
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	801a      	strh	r2, [r3, #0]
 80048ec:	e061      	b.n	80049b2 <PCD_EP_ISR_Handler+0x6cc>
 80048ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d15d      	bne.n	80049b2 <PCD_EP_ISR_Handler+0x6cc>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004904:	b29b      	uxth	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490a:	4413      	add	r3, r2
 800490c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800490e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	011a      	lsls	r2, r3, #4
 8004914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004916:	4413      	add	r3, r2
 8004918:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800491c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	2200      	movs	r2, #0
 8004922:	801a      	strh	r2, [r3, #0]
 8004924:	e045      	b.n	80049b2 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800492c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d126      	bne.n	8004982 <PCD_EP_ISR_Handler+0x69c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	637b      	str	r3, [r7, #52]	@ 0x34
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004948:	4413      	add	r3, r2
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
 800494c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	011a      	lsls	r2, r3, #4
 8004952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004954:	4413      	add	r3, r2
 8004956:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800495a:	633b      	str	r3, [r7, #48]	@ 0x30
 800495c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004966:	b29a      	uxth	r2, r3
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497a:	b29a      	uxth	r2, r3
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	e017      	b.n	80049b2 <PCD_EP_ISR_Handler+0x6cc>
 8004982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d113      	bne.n	80049b2 <PCD_EP_ISR_Handler+0x6cc>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004992:	b29b      	uxth	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004998:	4413      	add	r3, r2
 800499a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800499c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	011a      	lsls	r2, r3, #4
 80049a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a4:	4413      	add	r3, r2
 80049a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ae:	2200      	movs	r2, #0
 80049b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f006 f900 	bl	800abbe <HAL_PCD_DataInStageCallback>
 80049be:	e053      	b.n	8004a68 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80049c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80049c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d146      	bne.n	8004a5a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4413      	add	r3, r2
 80049e0:	3302      	adds	r3, #2
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80049f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d907      	bls.n	8004a14 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a0c:	1ad2      	subs	r2, r2, r3
 8004a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a10:	619a      	str	r2, [r3, #24]
 8004a12:	e002      	b.n	8004a1a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a16:	2200      	movs	r2, #0
 8004a18:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	4619      	mov	r1, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f006 f8c8 	bl	800abbe <HAL_PCD_DataInStageCallback>
 8004a2e:	e01b      	b.n	8004a68 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a38:	441a      	add	r2, r3
 8004a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a3c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a46:	441a      	add	r2, r3
 8004a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a4a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a52:	4618      	mov	r0, r3
 8004a54:	f002 fd80 	bl	8007558 <USB_EPStartXfer>
 8004a58:	e006      	b.n	8004a68 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004a5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f91b 	bl	8004c9e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	b21b      	sxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f6ff ac3b 	blt.w	80042f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3758      	adds	r7, #88	@ 0x58
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d07e      	beq.n	8004b9a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	8b7b      	ldrh	r3, [r7, #26]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d306      	bcc.n	8004ade <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	8b7b      	ldrh	r3, [r7, #26]
 8004ad6:	1ad2      	subs	r2, r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	619a      	str	r2, [r3, #24]
 8004adc:	e002      	b.n	8004ae4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d123      	bne.n	8004b34 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b06:	833b      	strh	r3, [r7, #24]
 8004b08:	8b3b      	ldrh	r3, [r7, #24]
 8004b0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b0e:	833b      	strh	r3, [r7, #24]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	8b3b      	ldrh	r3, [r7, #24]
 8004b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01f      	beq.n	8004b7e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b58:	82fb      	strh	r3, [r7, #22]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	8afb      	ldrh	r3, [r7, #22]
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b7e:	8b7b      	ldrh	r3, [r7, #26]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8087 	beq.w	8004c94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6959      	ldr	r1, [r3, #20]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	891a      	ldrh	r2, [r3, #8]
 8004b92:	8b7b      	ldrh	r3, [r7, #26]
 8004b94:	f004 fa14 	bl	8008fc0 <USB_ReadPMA>
 8004b98:	e07c      	b.n	8004c94 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	3306      	adds	r3, #6
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	8b7b      	ldrh	r3, [r7, #26]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d306      	bcc.n	8004bdc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	8b7b      	ldrh	r3, [r7, #26]
 8004bd4:	1ad2      	subs	r2, r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	619a      	str	r2, [r3, #24]
 8004bda:	e002      	b.n	8004be2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2200      	movs	r2, #0
 8004be0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d123      	bne.n	8004c32 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c04:	83fb      	strh	r3, [r7, #30]
 8004c06:	8bfb      	ldrh	r3, [r7, #30]
 8004c08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c0c:	83fb      	strh	r3, [r7, #30]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	8bfb      	ldrh	r3, [r7, #30]
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d11f      	bne.n	8004c7c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c56:	83bb      	strh	r3, [r7, #28]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	8bbb      	ldrh	r3, [r7, #28]
 8004c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004c7c:	8b7b      	ldrh	r3, [r7, #26]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6959      	ldr	r1, [r3, #20]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	895a      	ldrh	r2, [r3, #10]
 8004c8e:	8b7b      	ldrh	r3, [r7, #26]
 8004c90:	f004 f996 	bl	8008fc0 <USB_ReadPMA>
    }
  }

  return count;
 8004c94:	8b7b      	ldrh	r3, [r7, #26]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b0a4      	sub	sp, #144	@ 0x90
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 81dd 	beq.w	8005072 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4413      	add	r3, r2
 8004ccc:	3302      	adds	r3, #2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ce0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d907      	bls.n	8004d00 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cf8:	1ad2      	subs	r2, r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	619a      	str	r2, [r3, #24]
 8004cfe:	e002      	b.n	8004d06 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2200      	movs	r2, #0
 8004d04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f040 80b9 	bne.w	8004e82 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d126      	bne.n	8004d66 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2c:	4413      	add	r3, r2
 8004d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	011a      	lsls	r2, r3, #4
 8004d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d38:	4413      	add	r3, r2
 8004d3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	801a      	strh	r2, [r3, #0]
 8004d64:	e01a      	b.n	8004d9c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d116      	bne.n	8004d9c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d82:	4413      	add	r3, r2
 8004d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	011a      	lsls	r2, r3, #4
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8e:	4413      	add	r3, r2
 8004d90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	2200      	movs	r2, #0
 8004d9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d126      	bne.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	011a      	lsls	r2, r3, #4
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	e017      	b.n	8004e28 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	785b      	ldrb	r3, [r3, #1]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d113      	bne.n	8004e28 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	4413      	add	r3, r2
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	011a      	lsls	r2, r3, #4
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e20:	623b      	str	r3, [r7, #32]
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	2200      	movs	r2, #0
 8004e26:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f005 fec5 	bl	800abbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 82fc 	beq.w	8005438 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5a:	82fb      	strh	r3, [r7, #22]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	8afb      	ldrh	r3, [r7, #22]
 8004e6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	8013      	strh	r3, [r2, #0]
 8004e80:	e2da      	b.n	8005438 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d021      	beq.n	8004ed0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	f040 82ae 	bne.w	8005438 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ef2:	441a      	add	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d30b      	bcc.n	8004f1c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	621a      	str	r2, [r3, #32]
 8004f1a:	e017      	b.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d108      	bne.n	8004f36 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004f24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004f34:	e00a      	b.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d165      	bne.n	8005020 <HAL_PCD_EP_DB_Transmit+0x382>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f68:	4413      	add	r3, r2
 8004f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	011a      	lsls	r2, r3, #4
 8004f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f74:	4413      	add	r3, r2
 8004f76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f90:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f92:	d91d      	bls.n	8004fd0 <HAL_PCD_EP_DB_Transmit+0x332>
 8004f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <HAL_PCD_EP_DB_Transmit+0x310>
 8004fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004faa:	3b01      	subs	r3, #1
 8004fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	029b      	lsls	r3, r3, #10
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	e044      	b.n	800505a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <HAL_PCD_EP_DB_Transmit+0x350>
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e035      	b.n	800505a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_PCD_EP_DB_Transmit+0x36a>
 8005002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005004:	3301      	adds	r3, #1
 8005006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29a      	uxth	r2, r3
 800500e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005010:	b29b      	uxth	r3, r3
 8005012:	029b      	lsls	r3, r3, #10
 8005014:	b29b      	uxth	r3, r3
 8005016:	4313      	orrs	r3, r2
 8005018:	b29a      	uxth	r2, r3
 800501a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e01c      	b.n	800505a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d118      	bne.n	800505a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	647b      	str	r3, [r7, #68]	@ 0x44
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800503c:	4413      	add	r3, r2
 800503e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	011a      	lsls	r2, r3, #4
 8005046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005048:	4413      	add	r3, r2
 800504a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800504e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005054:	b29a      	uxth	r2, r3
 8005056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005058:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6959      	ldr	r1, [r3, #20]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	891a      	ldrh	r2, [r3, #8]
 8005066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800506a:	b29b      	uxth	r3, r3
 800506c:	f003 ff63 	bl	8008f36 <USB_WritePMA>
 8005070:	e1e2      	b.n	8005438 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800507a:	b29b      	uxth	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4413      	add	r3, r2
 8005086:	3306      	adds	r3, #6
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800509a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d307      	bcc.n	80050ba <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80050b2:	1ad2      	subs	r2, r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	619a      	str	r2, [r3, #24]
 80050b8:	e002      	b.n	80050c0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2200      	movs	r2, #0
 80050be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f040 80c0 	bne.w	800524a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d126      	bne.n	8005120 <HAL_PCD_EP_DB_Transmit+0x482>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050e6:	4413      	add	r3, r2
 80050e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	011a      	lsls	r2, r3, #4
 80050f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050f2:	4413      	add	r3, r2
 80050f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005104:	b29a      	uxth	r2, r3
 8005106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005118:	b29a      	uxth	r2, r3
 800511a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	e01a      	b.n	8005156 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d116      	bne.n	8005156 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	667b      	str	r3, [r7, #100]	@ 0x64
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800513c:	4413      	add	r3, r2
 800513e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	011a      	lsls	r2, r3, #4
 8005146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005148:	4413      	add	r3, r2
 800514a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800514e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005150:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005152:	2200      	movs	r2, #0
 8005154:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	677b      	str	r3, [r7, #116]	@ 0x74
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d12b      	bne.n	80051bc <HAL_PCD_EP_DB_Transmit+0x51e>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005178:	4413      	add	r3, r2
 800517a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	011a      	lsls	r2, r3, #4
 8005182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005184:	4413      	add	r3, r2
 8005186:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800518a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800518e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800519a:	b29a      	uxth	r2, r3
 800519c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	e017      	b.n	80051ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d113      	bne.n	80051ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051d2:	4413      	add	r3, r2
 80051d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	011a      	lsls	r2, r3, #4
 80051dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051de:	4413      	add	r3, r2
 80051e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80051e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051e8:	2200      	movs	r2, #0
 80051ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	4619      	mov	r1, r3
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f005 fce3 	bl	800abbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 811a 	bne.w	8005438 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800523c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005244:	b29b      	uxth	r3, r3
 8005246:	8013      	strh	r3, [r2, #0]
 8005248:	e0f6      	b.n	8005438 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d121      	bne.n	8005298 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800526a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	441a      	add	r2, r3
 8005280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800528c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005294:	b29b      	uxth	r3, r3
 8005296:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800529e:	2b01      	cmp	r3, #1
 80052a0:	f040 80ca 	bne.w	8005438 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052ac:	441a      	add	r2, r3
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	69da      	ldr	r2, [r3, #28]
 80052b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052ba:	441a      	add	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d30b      	bcc.n	80052e4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6a1a      	ldr	r2, [r3, #32]
 80052d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052dc:	1ad2      	subs	r2, r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	621a      	str	r2, [r3, #32]
 80052e2:	e017      	b.n	8005314 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d108      	bne.n	80052fe <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80052ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80052fc:	e00a      	b.n	8005314 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2200      	movs	r2, #0
 800530a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	657b      	str	r3, [r7, #84]	@ 0x54
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d165      	bne.n	80053ee <HAL_PCD_EP_DB_Transmit+0x750>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005336:	4413      	add	r3, r2
 8005338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	011a      	lsls	r2, r3, #4
 8005340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005342:	4413      	add	r3, r2
 8005344:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005348:	65bb      	str	r3, [r7, #88]	@ 0x58
 800534a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005354:	b29a      	uxth	r2, r3
 8005356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800535e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005360:	d91d      	bls.n	800539e <HAL_PCD_EP_DB_Transmit+0x700>
 8005362:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	66bb      	str	r3, [r7, #104]	@ 0x68
 800536a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <HAL_PCD_EP_DB_Transmit+0x6de>
 8005376:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005378:	3b01      	subs	r3, #1
 800537a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800537c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29a      	uxth	r2, r3
 8005382:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005384:	b29b      	uxth	r3, r3
 8005386:	029b      	lsls	r3, r3, #10
 8005388:	b29b      	uxth	r3, r3
 800538a:	4313      	orrs	r3, r2
 800538c:	b29b      	uxth	r3, r3
 800538e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005396:	b29a      	uxth	r2, r3
 8005398:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	e041      	b.n	8005422 <HAL_PCD_EP_DB_Transmit+0x784>
 800539e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <HAL_PCD_EP_DB_Transmit+0x71e>
 80053a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e032      	b.n	8005422 <HAL_PCD_EP_DB_Transmit+0x784>
 80053bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_PCD_EP_DB_Transmit+0x738>
 80053d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053d2:	3301      	adds	r3, #1
 80053d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29a      	uxth	r2, r3
 80053dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053de:	b29b      	uxth	r3, r3
 80053e0:	029b      	lsls	r3, r3, #10
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e019      	b.n	8005422 <HAL_PCD_EP_DB_Transmit+0x784>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d115      	bne.n	8005422 <HAL_PCD_EP_DB_Transmit+0x784>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053fe:	b29b      	uxth	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005404:	4413      	add	r3, r2
 8005406:	657b      	str	r3, [r7, #84]	@ 0x54
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	011a      	lsls	r2, r3, #4
 800540e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005410:	4413      	add	r3, r2
 8005412:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005416:	653b      	str	r3, [r7, #80]	@ 0x50
 8005418:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800541c:	b29a      	uxth	r2, r3
 800541e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005420:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6959      	ldr	r1, [r3, #20]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	895a      	ldrh	r2, [r3, #10]
 800542e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005432:	b29b      	uxth	r3, r3
 8005434:	f003 fd7f 	bl	8008f36 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800544e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005452:	82bb      	strh	r3, [r7, #20]
 8005454:	8abb      	ldrh	r3, [r7, #20]
 8005456:	f083 0310 	eor.w	r3, r3, #16
 800545a:	82bb      	strh	r3, [r7, #20]
 800545c:	8abb      	ldrh	r3, [r7, #20]
 800545e:	f083 0320 	eor.w	r3, r3, #32
 8005462:	82bb      	strh	r3, [r7, #20]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	8abb      	ldrh	r3, [r7, #20]
 8005474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800547c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005484:	b29b      	uxth	r3, r3
 8005486:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3790      	adds	r7, #144	@ 0x90
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005492:	b480      	push	{r7}
 8005494:	b087      	sub	sp, #28
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	607b      	str	r3, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	817b      	strh	r3, [r7, #10]
 80054a0:	4613      	mov	r3, r2
 80054a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80054a4:	897b      	ldrh	r3, [r7, #10]
 80054a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054b0:	897b      	ldrh	r3, [r7, #10]
 80054b2:	f003 0207 	and.w	r2, r3, #7
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	3310      	adds	r3, #16
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e009      	b.n	80054dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054c8:	897a      	ldrh	r2, [r7, #10]
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2200      	movs	r2, #0
 80054e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	80da      	strh	r2, [r3, #6]
 80054f0:	e00b      	b.n	800550a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2201      	movs	r2, #1
 80054f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0c1b      	lsrs	r3, r3, #16
 8005504:	b29a      	uxth	r2, r3
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr
	...

08005518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e272      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8087 	beq.w	8005646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005538:	4b92      	ldr	r3, [pc, #584]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 030c 	and.w	r3, r3, #12
 8005540:	2b04      	cmp	r3, #4
 8005542:	d00c      	beq.n	800555e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005544:	4b8f      	ldr	r3, [pc, #572]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 030c 	and.w	r3, r3, #12
 800554c:	2b08      	cmp	r3, #8
 800554e:	d112      	bne.n	8005576 <HAL_RCC_OscConfig+0x5e>
 8005550:	4b8c      	ldr	r3, [pc, #560]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800555c:	d10b      	bne.n	8005576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800555e:	4b89      	ldr	r3, [pc, #548]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d06c      	beq.n	8005644 <HAL_RCC_OscConfig+0x12c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d168      	bne.n	8005644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e24c      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800557e:	d106      	bne.n	800558e <HAL_RCC_OscConfig+0x76>
 8005580:	4b80      	ldr	r3, [pc, #512]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a7f      	ldr	r2, [pc, #508]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	e02e      	b.n	80055ec <HAL_RCC_OscConfig+0xd4>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10c      	bne.n	80055b0 <HAL_RCC_OscConfig+0x98>
 8005596:	4b7b      	ldr	r3, [pc, #492]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a7a      	ldr	r2, [pc, #488]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 800559c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	4b78      	ldr	r3, [pc, #480]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a77      	ldr	r2, [pc, #476]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e01d      	b.n	80055ec <HAL_RCC_OscConfig+0xd4>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0xbc>
 80055ba:	4b72      	ldr	r3, [pc, #456]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a71      	ldr	r2, [pc, #452]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4b6f      	ldr	r3, [pc, #444]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e00b      	b.n	80055ec <HAL_RCC_OscConfig+0xd4>
 80055d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	4b68      	ldr	r3, [pc, #416]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a67      	ldr	r2, [pc, #412]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80055e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d013      	beq.n	800561c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f4:	f7fc ff16 	bl	8002424 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055fc:	f7fc ff12 	bl	8002424 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b64      	cmp	r3, #100	@ 0x64
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e200      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560e:	4b5d      	ldr	r3, [pc, #372]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0xe4>
 800561a:	e014      	b.n	8005646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7fc ff02 	bl	8002424 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005624:	f7fc fefe 	bl	8002424 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	@ 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e1ec      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005636:	4b53      	ldr	r3, [pc, #332]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x10c>
 8005642:	e000      	b.n	8005646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d063      	beq.n	800571a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005652:	4b4c      	ldr	r3, [pc, #304]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800565e:	4b49      	ldr	r3, [pc, #292]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b08      	cmp	r3, #8
 8005668:	d11c      	bne.n	80056a4 <HAL_RCC_OscConfig+0x18c>
 800566a:	4b46      	ldr	r3, [pc, #280]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d116      	bne.n	80056a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005676:	4b43      	ldr	r3, [pc, #268]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_RCC_OscConfig+0x176>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d001      	beq.n	800568e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e1c0      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568e:	4b3d      	ldr	r3, [pc, #244]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4939      	ldr	r1, [pc, #228]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a2:	e03a      	b.n	800571a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d020      	beq.n	80056ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056ac:	4b36      	ldr	r3, [pc, #216]	@ (8005788 <HAL_RCC_OscConfig+0x270>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b2:	f7fc feb7 	bl	8002424 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ba:	f7fc feb3 	bl	8002424 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e1a1      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4927      	ldr	r1, [pc, #156]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	600b      	str	r3, [r1, #0]
 80056ec:	e015      	b.n	800571a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ee:	4b26      	ldr	r3, [pc, #152]	@ (8005788 <HAL_RCC_OscConfig+0x270>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fc fe96 	bl	8002424 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056fc:	f7fc fe92 	bl	8002424 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e180      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800570e:	4b1d      	ldr	r3, [pc, #116]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d03a      	beq.n	800579c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d019      	beq.n	8005762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572e:	4b17      	ldr	r3, [pc, #92]	@ (800578c <HAL_RCC_OscConfig+0x274>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005734:	f7fc fe76 	bl	8002424 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800573c:	f7fc fe72 	bl	8002424 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e160      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800574e:	4b0d      	ldr	r3, [pc, #52]	@ (8005784 <HAL_RCC_OscConfig+0x26c>)
 8005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800575a:	2001      	movs	r0, #1
 800575c:	f000 faba 	bl	8005cd4 <RCC_Delay>
 8005760:	e01c      	b.n	800579c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005762:	4b0a      	ldr	r3, [pc, #40]	@ (800578c <HAL_RCC_OscConfig+0x274>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005768:	f7fc fe5c 	bl	8002424 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576e:	e00f      	b.n	8005790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005770:	f7fc fe58 	bl	8002424 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d908      	bls.n	8005790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e146      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
 8005782:	bf00      	nop
 8005784:	40021000 	.word	0x40021000
 8005788:	42420000 	.word	0x42420000
 800578c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005790:	4b92      	ldr	r3, [pc, #584]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e9      	bne.n	8005770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80a6 	beq.w	80058f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057aa:	2300      	movs	r3, #0
 80057ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ae:	4b8b      	ldr	r3, [pc, #556]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10d      	bne.n	80057d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ba:	4b88      	ldr	r3, [pc, #544]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	4a87      	ldr	r2, [pc, #540]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 80057c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c4:	61d3      	str	r3, [r2, #28]
 80057c6:	4b85      	ldr	r3, [pc, #532]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ce:	60bb      	str	r3, [r7, #8]
 80057d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d6:	4b82      	ldr	r3, [pc, #520]	@ (80059e0 <HAL_RCC_OscConfig+0x4c8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d118      	bne.n	8005814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057e2:	4b7f      	ldr	r3, [pc, #508]	@ (80059e0 <HAL_RCC_OscConfig+0x4c8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7e      	ldr	r2, [pc, #504]	@ (80059e0 <HAL_RCC_OscConfig+0x4c8>)
 80057e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ee:	f7fc fe19 	bl	8002424 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f6:	f7fc fe15 	bl	8002424 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b64      	cmp	r3, #100	@ 0x64
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e103      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005808:	4b75      	ldr	r3, [pc, #468]	@ (80059e0 <HAL_RCC_OscConfig+0x4c8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d106      	bne.n	800582a <HAL_RCC_OscConfig+0x312>
 800581c:	4b6f      	ldr	r3, [pc, #444]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	4a6e      	ldr	r2, [pc, #440]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	6213      	str	r3, [r2, #32]
 8005828:	e02d      	b.n	8005886 <HAL_RCC_OscConfig+0x36e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10c      	bne.n	800584c <HAL_RCC_OscConfig+0x334>
 8005832:	4b6a      	ldr	r3, [pc, #424]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	4a69      	ldr	r2, [pc, #420]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	6213      	str	r3, [r2, #32]
 800583e:	4b67      	ldr	r3, [pc, #412]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	4a66      	ldr	r2, [pc, #408]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005844:	f023 0304 	bic.w	r3, r3, #4
 8005848:	6213      	str	r3, [r2, #32]
 800584a:	e01c      	b.n	8005886 <HAL_RCC_OscConfig+0x36e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b05      	cmp	r3, #5
 8005852:	d10c      	bne.n	800586e <HAL_RCC_OscConfig+0x356>
 8005854:	4b61      	ldr	r3, [pc, #388]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	4a60      	ldr	r2, [pc, #384]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 800585a:	f043 0304 	orr.w	r3, r3, #4
 800585e:	6213      	str	r3, [r2, #32]
 8005860:	4b5e      	ldr	r3, [pc, #376]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	4a5d      	ldr	r2, [pc, #372]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6213      	str	r3, [r2, #32]
 800586c:	e00b      	b.n	8005886 <HAL_RCC_OscConfig+0x36e>
 800586e:	4b5b      	ldr	r3, [pc, #364]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	4a5a      	ldr	r2, [pc, #360]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	6213      	str	r3, [r2, #32]
 800587a:	4b58      	ldr	r3, [pc, #352]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	4a57      	ldr	r2, [pc, #348]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005880:	f023 0304 	bic.w	r3, r3, #4
 8005884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d015      	beq.n	80058ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588e:	f7fc fdc9 	bl	8002424 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005894:	e00a      	b.n	80058ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fc fdc5 	bl	8002424 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e0b1      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ac:	4b4b      	ldr	r3, [pc, #300]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0ee      	beq.n	8005896 <HAL_RCC_OscConfig+0x37e>
 80058b8:	e014      	b.n	80058e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ba:	f7fc fdb3 	bl	8002424 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c0:	e00a      	b.n	80058d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fc fdaf 	bl	8002424 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e09b      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d8:	4b40      	ldr	r3, [pc, #256]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ee      	bne.n	80058c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d105      	bne.n	80058f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ea:	4b3c      	ldr	r3, [pc, #240]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	4a3b      	ldr	r2, [pc, #236]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 80058f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 8087 	beq.w	8005a0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005900:	4b36      	ldr	r3, [pc, #216]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 030c 	and.w	r3, r3, #12
 8005908:	2b08      	cmp	r3, #8
 800590a:	d061      	beq.n	80059d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d146      	bne.n	80059a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005914:	4b33      	ldr	r3, [pc, #204]	@ (80059e4 <HAL_RCC_OscConfig+0x4cc>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591a:	f7fc fd83 	bl	8002424 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005922:	f7fc fd7f 	bl	8002424 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e06d      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005934:	4b29      	ldr	r3, [pc, #164]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f0      	bne.n	8005922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005948:	d108      	bne.n	800595c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800594a:	4b24      	ldr	r3, [pc, #144]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	4921      	ldr	r1, [pc, #132]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005958:	4313      	orrs	r3, r2
 800595a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800595c:	4b1f      	ldr	r3, [pc, #124]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a19      	ldr	r1, [r3, #32]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	430b      	orrs	r3, r1
 800596e:	491b      	ldr	r1, [pc, #108]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005974:	4b1b      	ldr	r3, [pc, #108]	@ (80059e4 <HAL_RCC_OscConfig+0x4cc>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597a:	f7fc fd53 	bl	8002424 <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005982:	f7fc fd4f 	bl	8002424 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e03d      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005994:	4b11      	ldr	r3, [pc, #68]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0f0      	beq.n	8005982 <HAL_RCC_OscConfig+0x46a>
 80059a0:	e035      	b.n	8005a0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a2:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <HAL_RCC_OscConfig+0x4cc>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fc fd3c 	bl	8002424 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fc fd38 	bl	8002424 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e026      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c2:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <HAL_RCC_OscConfig+0x4c4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x498>
 80059ce:	e01e      	b.n	8005a0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e019      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
 80059dc:	40021000 	.word	0x40021000
 80059e0:	40007000 	.word	0x40007000
 80059e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <HAL_RCC_OscConfig+0x500>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d106      	bne.n	8005a0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d001      	beq.n	8005a0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40021000 	.word	0x40021000

08005a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0d0      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a30:	4b6a      	ldr	r3, [pc, #424]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d910      	bls.n	8005a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b67      	ldr	r3, [pc, #412]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f023 0207 	bic.w	r2, r3, #7
 8005a46:	4965      	ldr	r1, [pc, #404]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4e:	4b63      	ldr	r3, [pc, #396]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0b8      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d020      	beq.n	8005aae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a78:	4b59      	ldr	r3, [pc, #356]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	4a58      	ldr	r2, [pc, #352]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a90:	4b53      	ldr	r3, [pc, #332]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4a52      	ldr	r2, [pc, #328]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005a9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a9c:	4b50      	ldr	r3, [pc, #320]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	494d      	ldr	r1, [pc, #308]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d040      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d107      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac2:	4b47      	ldr	r3, [pc, #284]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d115      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e07f      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d107      	bne.n	8005aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ada:	4b41      	ldr	r3, [pc, #260]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e073      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aea:	4b3d      	ldr	r3, [pc, #244]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e06b      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005afa:	4b39      	ldr	r3, [pc, #228]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f023 0203 	bic.w	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4936      	ldr	r1, [pc, #216]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b0c:	f7fc fc8a 	bl	8002424 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b14:	f7fc fc86 	bl	8002424 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e053      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f003 020c 	and.w	r2, r3, #12
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d1eb      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b27      	ldr	r3, [pc, #156]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d210      	bcs.n	8005b6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4b24      	ldr	r3, [pc, #144]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f023 0207 	bic.w	r2, r3, #7
 8005b52:	4922      	ldr	r1, [pc, #136]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5a:	4b20      	ldr	r3, [pc, #128]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e032      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b78:	4b19      	ldr	r3, [pc, #100]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4916      	ldr	r1, [pc, #88]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b96:	4b12      	ldr	r3, [pc, #72]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	490e      	ldr	r1, [pc, #56]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005baa:	f000 f821 	bl	8005bf0 <HAL_RCC_GetSysClockFreq>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	490a      	ldr	r1, [pc, #40]	@ (8005be4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bbc:	5ccb      	ldrb	r3, [r1, r3]
 8005bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc2:	4a09      	ldr	r2, [pc, #36]	@ (8005be8 <HAL_RCC_ClockConfig+0x1cc>)
 8005bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bc6:	4b09      	ldr	r3, [pc, #36]	@ (8005bec <HAL_RCC_ClockConfig+0x1d0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fc fbe8 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40022000 	.word	0x40022000
 8005be0:	40021000 	.word	0x40021000
 8005be4:	0800e480 	.word	0x0800e480
 8005be8:	20000090 	.word	0x20000090
 8005bec:	20000094 	.word	0x20000094

08005bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 030c 	and.w	r3, r3, #12
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d002      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x30>
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCC_GetSysClockFreq+0x36>
 8005c1e:	e027      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c20:	4b19      	ldr	r3, [pc, #100]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c22:	613b      	str	r3, [r7, #16]
      break;
 8005c24:	e027      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	0c9b      	lsrs	r3, r3, #18
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	4a17      	ldr	r2, [pc, #92]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c30:	5cd3      	ldrb	r3, [r2, r3]
 8005c32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d010      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c3e:	4b11      	ldr	r3, [pc, #68]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	0c5b      	lsrs	r3, r3, #17
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	4a11      	ldr	r2, [pc, #68]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c4a:	5cd3      	ldrb	r3, [r2, r3]
 8005c4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a0d      	ldr	r2, [pc, #52]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c52:	fb03 f202 	mul.w	r2, r3, r2
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e004      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a0c      	ldr	r2, [pc, #48]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c64:	fb02 f303 	mul.w	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	613b      	str	r3, [r7, #16]
      break;
 8005c6e:	e002      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c70:	4b05      	ldr	r3, [pc, #20]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c72:	613b      	str	r3, [r7, #16]
      break;
 8005c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c76:	693b      	ldr	r3, [r7, #16]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40021000 	.word	0x40021000
 8005c88:	007a1200 	.word	0x007a1200
 8005c8c:	0800e498 	.word	0x0800e498
 8005c90:	0800e4a8 	.word	0x0800e4a8
 8005c94:	003d0900 	.word	0x003d0900

08005c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c9c:	4b02      	ldr	r3, [pc, #8]	@ (8005ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr
 8005ca8:	20000090 	.word	0x20000090

08005cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cb0:	f7ff fff2 	bl	8005c98 <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	0a1b      	lsrs	r3, r3, #8
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4903      	ldr	r1, [pc, #12]	@ (8005cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	0800e490 	.word	0x0800e490

08005cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <RCC_Delay+0x34>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8005d0c <RCC_Delay+0x38>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	0a5b      	lsrs	r3, r3, #9
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005cf0:	bf00      	nop
  }
  while (Delay --);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1e5a      	subs	r2, r3, #1
 8005cf6:	60fa      	str	r2, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f9      	bne.n	8005cf0 <RCC_Delay+0x1c>
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr
 8005d08:	20000090 	.word	0x20000090
 8005d0c:	10624dd3 	.word	0x10624dd3

08005d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d07d      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d30:	4b4f      	ldr	r3, [pc, #316]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10d      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	4a4b      	ldr	r2, [pc, #300]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d46:	61d3      	str	r3, [r2, #28]
 8005d48:	4b49      	ldr	r3, [pc, #292]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d54:	2301      	movs	r3, #1
 8005d56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d58:	4b46      	ldr	r3, [pc, #280]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d118      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d64:	4b43      	ldr	r3, [pc, #268]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a42      	ldr	r2, [pc, #264]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d70:	f7fc fb58 	bl	8002424 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d76:	e008      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d78:	f7fc fb54 	bl	8002424 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	@ 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e06d      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0f0      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d96:	4b36      	ldr	r3, [pc, #216]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02e      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d027      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db4:	4b2e      	ldr	r3, [pc, #184]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dca:	4a29      	ldr	r2, [pc, #164]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d014      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dda:	f7fc fb23 	bl	8002424 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de0:	e00a      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de2:	f7fc fb1f 	bl	8002424 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e036      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ee      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e04:	4b1a      	ldr	r3, [pc, #104]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4917      	ldr	r1, [pc, #92]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d105      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e1c:	4b14      	ldr	r3, [pc, #80]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	4a13      	ldr	r2, [pc, #76]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e34:	4b0e      	ldr	r3, [pc, #56]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	490b      	ldr	r1, [pc, #44]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e52:	4b07      	ldr	r3, [pc, #28]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	4904      	ldr	r1, [pc, #16]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40007000 	.word	0x40007000
 8005e78:	42420440 	.word	0x42420440

08005e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e041      	b.n	8005f12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fc f998 	bl	80021d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f000 fac2 	bl	8006444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d109      	bne.n	8005f40 <HAL_TIM_PWM_Start+0x24>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	bf14      	ite	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	2300      	moveq	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	e022      	b.n	8005f86 <HAL_TIM_PWM_Start+0x6a>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d109      	bne.n	8005f5a <HAL_TIM_PWM_Start+0x3e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	bf14      	ite	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	2300      	moveq	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	e015      	b.n	8005f86 <HAL_TIM_PWM_Start+0x6a>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d109      	bne.n	8005f74 <HAL_TIM_PWM_Start+0x58>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	bf14      	ite	ne
 8005f6c:	2301      	movne	r3, #1
 8005f6e:	2300      	moveq	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	e008      	b.n	8005f86 <HAL_TIM_PWM_Start+0x6a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	bf14      	ite	ne
 8005f80:	2301      	movne	r3, #1
 8005f82:	2300      	moveq	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e05e      	b.n	800604c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_PWM_Start+0x82>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f9c:	e013      	b.n	8005fc6 <HAL_TIM_PWM_Start+0xaa>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_PWM_Start+0x92>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fac:	e00b      	b.n	8005fc6 <HAL_TIM_PWM_Start+0xaa>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_PWM_Start+0xa2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fbc:	e003      	b.n	8005fc6 <HAL_TIM_PWM_Start+0xaa>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fc2e 	bl	8006830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8006054 <HAL_TIM_PWM_Start+0x138>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d107      	bne.n	8005fee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a18      	ldr	r2, [pc, #96]	@ (8006054 <HAL_TIM_PWM_Start+0x138>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <HAL_TIM_PWM_Start+0xfa>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006000:	d009      	beq.n	8006016 <HAL_TIM_PWM_Start+0xfa>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a14      	ldr	r2, [pc, #80]	@ (8006058 <HAL_TIM_PWM_Start+0x13c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_TIM_PWM_Start+0xfa>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a12      	ldr	r2, [pc, #72]	@ (800605c <HAL_TIM_PWM_Start+0x140>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d111      	bne.n	800603a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b06      	cmp	r3, #6
 8006026:	d010      	beq.n	800604a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006038:	e007      	b.n	800604a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40012c00 	.word	0x40012c00
 8006058:	40000400 	.word	0x40000400
 800605c:	40000800 	.word	0x40000800

08006060 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e093      	b.n	800619c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fc f8c3 	bl	8002214 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060a4:	f023 0307 	bic.w	r3, r3, #7
 80060a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f000 f9c5 	bl	8006444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e2:	f023 0303 	bic.w	r3, r3, #3
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	4313      	orrs	r3, r2
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006100:	f023 030c 	bic.w	r3, r3, #12
 8006104:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800610c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	4313      	orrs	r3, r2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	011a      	lsls	r2, r3, #4
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	031b      	lsls	r3, r3, #12
 8006130:	4313      	orrs	r3, r2
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	4313      	orrs	r3, r2
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d110      	bne.n	80061f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d102      	bne.n	80061e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80061da:	7b7b      	ldrb	r3, [r7, #13]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d001      	beq.n	80061e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e069      	b.n	80062b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061f4:	e031      	b.n	800625a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d110      	bne.n	800621e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d102      	bne.n	8006208 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006202:	7b3b      	ldrb	r3, [r7, #12]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d001      	beq.n	800620c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e055      	b.n	80062b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800621c:	e01d      	b.n	800625a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d108      	bne.n	8006236 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d105      	bne.n	8006236 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800622a:	7b7b      	ldrb	r3, [r7, #13]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d102      	bne.n	8006236 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006230:	7b3b      	ldrb	r3, [r7, #12]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d001      	beq.n	800623a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e03e      	b.n	80062b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2202      	movs	r2, #2
 800624e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_TIM_Encoder_Start+0xc4>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b04      	cmp	r3, #4
 8006264:	d008      	beq.n	8006278 <HAL_TIM_Encoder_Start+0xd4>
 8006266:	e00f      	b.n	8006288 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2201      	movs	r2, #1
 800626e:	2100      	movs	r1, #0
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fadd 	bl	8006830 <TIM_CCxChannelCmd>
      break;
 8006276:	e016      	b.n	80062a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2201      	movs	r2, #1
 800627e:	2104      	movs	r1, #4
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fad5 	bl	8006830 <TIM_CCxChannelCmd>
      break;
 8006286:	e00e      	b.n	80062a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2201      	movs	r2, #1
 800628e:	2100      	movs	r1, #0
 8006290:	4618      	mov	r0, r3
 8006292:	f000 facd 	bl	8006830 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2201      	movs	r2, #1
 800629c:	2104      	movs	r1, #4
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fac6 	bl	8006830 <TIM_CCxChannelCmd>
      break;
 80062a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062da:	2302      	movs	r3, #2
 80062dc:	e0ae      	b.n	800643c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b0c      	cmp	r3, #12
 80062ea:	f200 809f 	bhi.w	800642c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062ee:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006329 	.word	0x08006329
 80062f8:	0800642d 	.word	0x0800642d
 80062fc:	0800642d 	.word	0x0800642d
 8006300:	0800642d 	.word	0x0800642d
 8006304:	08006369 	.word	0x08006369
 8006308:	0800642d 	.word	0x0800642d
 800630c:	0800642d 	.word	0x0800642d
 8006310:	0800642d 	.word	0x0800642d
 8006314:	080063ab 	.word	0x080063ab
 8006318:	0800642d 	.word	0x0800642d
 800631c:	0800642d 	.word	0x0800642d
 8006320:	0800642d 	.word	0x0800642d
 8006324:	080063eb 	.word	0x080063eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68b9      	ldr	r1, [r7, #8]
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f8f6 	bl	8006520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0208 	orr.w	r2, r2, #8
 8006342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0204 	bic.w	r2, r2, #4
 8006352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6999      	ldr	r1, [r3, #24]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	619a      	str	r2, [r3, #24]
      break;
 8006366:	e064      	b.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f93c 	bl	80065ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6999      	ldr	r1, [r3, #24]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	021a      	lsls	r2, r3, #8
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	619a      	str	r2, [r3, #24]
      break;
 80063a8:	e043      	b.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 f985 	bl	80066c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0208 	orr.w	r2, r2, #8
 80063c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0204 	bic.w	r2, r2, #4
 80063d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69d9      	ldr	r1, [r3, #28]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	61da      	str	r2, [r3, #28]
      break;
 80063e8:	e023      	b.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 f9cf 	bl	8006794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69d9      	ldr	r1, [r3, #28]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	021a      	lsls	r2, r3, #8
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	61da      	str	r2, [r3, #28]
      break;
 800642a:	e002      	b.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	75fb      	strb	r3, [r7, #23]
      break;
 8006430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a2f      	ldr	r2, [pc, #188]	@ (8006514 <TIM_Base_SetConfig+0xd0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00b      	beq.n	8006474 <TIM_Base_SetConfig+0x30>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006462:	d007      	beq.n	8006474 <TIM_Base_SetConfig+0x30>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a2c      	ldr	r2, [pc, #176]	@ (8006518 <TIM_Base_SetConfig+0xd4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_Base_SetConfig+0x30>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a2b      	ldr	r2, [pc, #172]	@ (800651c <TIM_Base_SetConfig+0xd8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d108      	bne.n	8006486 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800647a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a22      	ldr	r2, [pc, #136]	@ (8006514 <TIM_Base_SetConfig+0xd0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00b      	beq.n	80064a6 <TIM_Base_SetConfig+0x62>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006494:	d007      	beq.n	80064a6 <TIM_Base_SetConfig+0x62>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1f      	ldr	r2, [pc, #124]	@ (8006518 <TIM_Base_SetConfig+0xd4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_Base_SetConfig+0x62>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a1e      	ldr	r2, [pc, #120]	@ (800651c <TIM_Base_SetConfig+0xd8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d108      	bne.n	80064b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a0d      	ldr	r2, [pc, #52]	@ (8006514 <TIM_Base_SetConfig+0xd0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d103      	bne.n	80064ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f023 0201 	bic.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	611a      	str	r2, [r3, #16]
  }
}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	40012c00 	.word	0x40012c00
 8006518:	40000400 	.word	0x40000400
 800651c:	40000800 	.word	0x40000800

08006520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f023 0201 	bic.w	r2, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 0302 	bic.w	r3, r3, #2
 8006568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a1c      	ldr	r2, [pc, #112]	@ (80065e8 <TIM_OC1_SetConfig+0xc8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d10c      	bne.n	8006596 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0308 	bic.w	r3, r3, #8
 8006582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f023 0304 	bic.w	r3, r3, #4
 8006594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a13      	ldr	r2, [pc, #76]	@ (80065e8 <TIM_OC1_SetConfig+0xc8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d111      	bne.n	80065c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40012c00 	.word	0x40012c00

080065ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	f023 0210 	bic.w	r2, r3, #16
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f023 0320 	bic.w	r3, r3, #32
 8006636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1d      	ldr	r2, [pc, #116]	@ (80066bc <TIM_OC2_SetConfig+0xd0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d10d      	bne.n	8006668 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006666:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a14      	ldr	r2, [pc, #80]	@ (80066bc <TIM_OC2_SetConfig+0xd0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d113      	bne.n	8006698 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800667e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr
 80066bc:	40012c00 	.word	0x40012c00

080066c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a1d      	ldr	r2, [pc, #116]	@ (8006790 <TIM_OC3_SetConfig+0xd0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d10d      	bne.n	800673a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	021b      	lsls	r3, r3, #8
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a14      	ldr	r2, [pc, #80]	@ (8006790 <TIM_OC3_SetConfig+0xd0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d113      	bne.n	800676a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	621a      	str	r2, [r3, #32]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40012c00 	.word	0x40012c00

08006794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	031b      	lsls	r3, r3, #12
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a0f      	ldr	r2, [pc, #60]	@ (800682c <TIM_OC4_SetConfig+0x98>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d109      	bne.n	8006808 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	019b      	lsls	r3, r3, #6
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	621a      	str	r2, [r3, #32]
}
 8006822:	bf00      	nop
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00

08006830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2201      	movs	r2, #1
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1a      	ldr	r2, [r3, #32]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	43db      	mvns	r3, r3
 8006852:	401a      	ands	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a1a      	ldr	r2, [r3, #32]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	fa01 f303 	lsl.w	r3, r1, r3
 8006868:	431a      	orrs	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	621a      	str	r2, [r3, #32]
}
 800686e:	bf00      	nop
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800688c:	2302      	movs	r3, #2
 800688e:	e046      	b.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a16      	ldr	r2, [pc, #88]	@ (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068dc:	d009      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a12      	ldr	r2, [pc, #72]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d004      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a10      	ldr	r2, [pc, #64]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d10c      	bne.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	4313      	orrs	r3, r2
 8006902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800

08006934 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	4638      	mov	r0, r7
 800693e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr

0800694e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800695e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006962:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	b29a      	uxth	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006982:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006986:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	b29b      	uxth	r3, r3
 8006994:	43db      	mvns	r3, r3
 8006996:	b29b      	uxth	r3, r3
 8006998:	4013      	ands	r3, r2
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr

080069ae <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr

080069c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	4638      	mov	r0, r7
 80069d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr

08006a00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b09d      	sub	sp, #116	@ 0x74
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a26:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	78db      	ldrb	r3, [r3, #3]
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d81f      	bhi.n	8006a72 <USB_ActivateEndpoint+0x72>
 8006a32:	a201      	add	r2, pc, #4	@ (adr r2, 8006a38 <USB_ActivateEndpoint+0x38>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a49 	.word	0x08006a49
 8006a3c:	08006a65 	.word	0x08006a65
 8006a40:	08006a7b 	.word	0x08006a7b
 8006a44:	08006a57 	.word	0x08006a57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006a54:	e012      	b.n	8006a7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a5a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006a5e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006a62:	e00b      	b.n	8006a7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006a70:	e004      	b.n	8006a7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006a78:	e000      	b.n	8006a7c <USB_ActivateEndpoint+0x7c>
      break;
 8006a7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	7b1b      	ldrb	r3, [r3, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 8178 	bne.w	8006ddc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8084 	beq.w	8006bfe <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	4413      	add	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	011a      	lsls	r2, r3, #4
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	88db      	ldrh	r3, [r3, #6]
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	827b      	strh	r3, [r7, #18]
 8006b38:	8a7b      	ldrh	r3, [r7, #18]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01b      	beq.n	8006b7a <USB_ActivateEndpoint+0x17a>
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b58:	823b      	strh	r3, [r7, #16]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	8a3b      	ldrh	r3, [r7, #16]
 8006b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	78db      	ldrb	r3, [r3, #3]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d020      	beq.n	8006bc4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b98:	81bb      	strh	r3, [r7, #12]
 8006b9a:	89bb      	ldrh	r3, [r7, #12]
 8006b9c:	f083 0320 	eor.w	r3, r3, #32
 8006ba0:	81bb      	strh	r3, [r7, #12]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	441a      	add	r2, r3
 8006bac:	89bb      	ldrh	r3, [r7, #12]
 8006bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	8013      	strh	r3, [r2, #0]
 8006bc2:	e2d5      	b.n	8007170 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bda:	81fb      	strh	r3, [r7, #14]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	89fb      	ldrh	r3, [r7, #14]
 8006be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	8013      	strh	r3, [r2, #0]
 8006bfc:	e2b8      	b.n	8007170 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	4413      	add	r3, r2
 8006c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	011a      	lsls	r2, r3, #4
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	88db      	ldrh	r3, [r3, #6]
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c30:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	4413      	add	r3, r2
 8006c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	011a      	lsls	r2, r3, #4
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	4413      	add	r3, r2
 8006c50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	801a      	strh	r2, [r3, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c6c:	d91d      	bls.n	8006caa <USB_ActivateEndpoint+0x2aa>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <USB_ActivateEndpoint+0x288>
 8006c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c84:	3b01      	subs	r3, #1
 8006c86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	029b      	lsls	r3, r3, #10
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	4313      	orrs	r3, r2
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	e026      	b.n	8006cf8 <USB_ActivateEndpoint+0x2f8>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <USB_ActivateEndpoint+0x2c8>
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	801a      	strh	r2, [r3, #0]
 8006cc6:	e017      	b.n	8006cf8 <USB_ActivateEndpoint+0x2f8>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <USB_ActivateEndpoint+0x2e2>
 8006cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cde:	3301      	adds	r3, #1
 8006ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	029b      	lsls	r3, r3, #10
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01b      	beq.n	8006d48 <USB_ActivateEndpoint+0x348>
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d26:	843b      	strh	r3, [r7, #32]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	8c3b      	ldrh	r3, [r7, #32]
 8006d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d124      	bne.n	8006d9a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d66:	83bb      	strh	r3, [r7, #28]
 8006d68:	8bbb      	ldrh	r3, [r7, #28]
 8006d6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d6e:	83bb      	strh	r3, [r7, #28]
 8006d70:	8bbb      	ldrh	r3, [r7, #28]
 8006d72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d76:	83bb      	strh	r3, [r7, #28]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	8bbb      	ldrh	r3, [r7, #28]
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
 8006d98:	e1ea      	b.n	8007170 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db0:	83fb      	strh	r3, [r7, #30]
 8006db2:	8bfb      	ldrh	r3, [r7, #30]
 8006db4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006db8:	83fb      	strh	r3, [r7, #30]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	441a      	add	r2, r3
 8006dc4:	8bfb      	ldrh	r3, [r7, #30]
 8006dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	8013      	strh	r3, [r2, #0]
 8006dda:	e1c9      	b.n	8007170 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	78db      	ldrb	r3, [r3, #3]
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d11e      	bne.n	8006e22 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	441a      	add	r2, r3
 8006e08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e14:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	8013      	strh	r3, [r2, #0]
 8006e20:	e01d      	b.n	8006e5e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e38:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	441a      	add	r2, r3
 8006e46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e6e:	4413      	add	r3, r2
 8006e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	011a      	lsls	r2, r3, #4
 8006e78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	891b      	ldrh	r3, [r3, #8]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea2:	4413      	add	r3, r2
 8006ea4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	011a      	lsls	r2, r3, #4
 8006eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006eb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	895b      	ldrh	r3, [r3, #10]
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ec4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f040 8093 	bne.w	8006ff6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006ee0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006ee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01b      	beq.n	8006f24 <USB_ActivateEndpoint+0x524>
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	441a      	add	r2, r3
 8006f0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006f32:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01b      	beq.n	8006f74 <USB_ActivateEndpoint+0x574>
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f52:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	441a      	add	r2, r3
 8006f5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f8c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f8e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f92:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f94:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f9a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	441a      	add	r2, r3
 8006fa6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	441a      	add	r2, r3
 8006fde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	8013      	strh	r3, [r2, #0]
 8006ff4:	e0bc      	b.n	8007170 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007006:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800700a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d01d      	beq.n	800704e <USB_ActivateEndpoint+0x64e>
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007028:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	441a      	add	r2, r3
 8007036:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800703a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007042:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800704a:	b29b      	uxth	r3, r3
 800704c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800705e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01d      	beq.n	80070a6 <USB_ActivateEndpoint+0x6a6>
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800707c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007080:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	441a      	add	r2, r3
 800708e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800709a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800709e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	78db      	ldrb	r3, [r3, #3]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d024      	beq.n	80070f8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80070c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80070cc:	f083 0320 	eor.w	r3, r3, #32
 80070d0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80070e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	8013      	strh	r3, [r2, #0]
 80070f6:	e01d      	b.n	8007134 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800710a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800710e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	441a      	add	r2, r3
 800711c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800712c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007130:	b29b      	uxth	r3, r3
 8007132:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	441a      	add	r2, r3
 8007158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800715c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800716c:	b29b      	uxth	r3, r3
 800716e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007170:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007174:	4618      	mov	r0, r3
 8007176:	3774      	adds	r7, #116	@ 0x74
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop

08007180 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007180:	b480      	push	{r7}
 8007182:	b08d      	sub	sp, #52	@ 0x34
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	7b1b      	ldrb	r3, [r3, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f040 808e 	bne.w	80072b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	785b      	ldrb	r3, [r3, #1]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d044      	beq.n	8007226 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	81bb      	strh	r3, [r7, #12]
 80071aa:	89bb      	ldrh	r3, [r7, #12]
 80071ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01b      	beq.n	80071ec <USB_DeactivateEndpoint+0x6c>
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ca:	817b      	strh	r3, [r7, #10]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	441a      	add	r2, r3
 80071d6:	897b      	ldrh	r3, [r7, #10]
 80071d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007202:	813b      	strh	r3, [r7, #8]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	441a      	add	r2, r3
 800720e:	893b      	ldrh	r3, [r7, #8]
 8007210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800721c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007220:	b29b      	uxth	r3, r3
 8007222:	8013      	strh	r3, [r2, #0]
 8007224:	e192      	b.n	800754c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	827b      	strh	r3, [r7, #18]
 8007234:	8a7b      	ldrh	r3, [r7, #18]
 8007236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d01b      	beq.n	8007276 <USB_DeactivateEndpoint+0xf6>
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007254:	823b      	strh	r3, [r7, #16]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	441a      	add	r2, r3
 8007260:	8a3b      	ldrh	r3, [r7, #16]
 8007262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800726a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800726e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007272:	b29b      	uxth	r3, r3
 8007274:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728c:	81fb      	strh	r3, [r7, #14]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	441a      	add	r2, r3
 8007298:	89fb      	ldrh	r3, [r7, #14]
 800729a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800729e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	8013      	strh	r3, [r2, #0]
 80072ae:	e14d      	b.n	800754c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f040 80a5 	bne.w	8007404 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	843b      	strh	r3, [r7, #32]
 80072c8:	8c3b      	ldrh	r3, [r7, #32]
 80072ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01b      	beq.n	800730a <USB_DeactivateEndpoint+0x18a>
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e8:	83fb      	strh	r3, [r7, #30]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	8bfb      	ldrh	r3, [r7, #30]
 80072f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007306:	b29b      	uxth	r3, r3
 8007308:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	83bb      	strh	r3, [r7, #28]
 8007318:	8bbb      	ldrh	r3, [r7, #28]
 800731a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01b      	beq.n	800735a <USB_DeactivateEndpoint+0x1da>
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007338:	837b      	strh	r3, [r7, #26]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	441a      	add	r2, r3
 8007344:	8b7b      	ldrh	r3, [r7, #26]
 8007346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800734a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800734e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007356:	b29b      	uxth	r3, r3
 8007358:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800736c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007370:	833b      	strh	r3, [r7, #24]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	441a      	add	r2, r3
 800737c:	8b3b      	ldrh	r3, [r7, #24]
 800737e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800738a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800738e:	b29b      	uxth	r3, r3
 8007390:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a8:	82fb      	strh	r3, [r7, #22]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	441a      	add	r2, r3
 80073b4:	8afb      	ldrh	r3, [r7, #22]
 80073b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e0:	82bb      	strh	r3, [r7, #20]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	441a      	add	r2, r3
 80073ec:	8abb      	ldrh	r3, [r7, #20]
 80073ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073fe:	b29b      	uxth	r3, r3
 8007400:	8013      	strh	r3, [r2, #0]
 8007402:	e0a3      	b.n	800754c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007412:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01b      	beq.n	8007454 <USB_DeactivateEndpoint+0x2d4>
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800742e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007432:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800744c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007450:	b29b      	uxth	r3, r3
 8007452:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007462:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <USB_DeactivateEndpoint+0x324>
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800747e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007482:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	441a      	add	r2, r3
 800748e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800749c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	441a      	add	r2, r3
 80074fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800750c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007510:	b29b      	uxth	r3, r3
 8007512:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	441a      	add	r2, r3
 8007536:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800753c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007548:	b29b      	uxth	r3, r3
 800754a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3734      	adds	r7, #52	@ 0x34
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr

08007558 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b0c2      	sub	sp, #264	@ 0x108
 800755c:	af00      	add	r7, sp, #0
 800755e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007566:	6018      	str	r0, [r3, #0]
 8007568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007570:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	2b01      	cmp	r3, #1
 8007580:	f040 86b7 	bne.w	80082f2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699a      	ldr	r2, [r3, #24]
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	429a      	cmp	r2, r3
 800759e:	d908      	bls.n	80075b2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80075a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80075b0:	e007      	b.n	80075c2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80075b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	7b1b      	ldrb	r3, [r3, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d13a      	bne.n	8007648 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6959      	ldr	r1, [r3, #20]
 80075de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	88da      	ldrh	r2, [r3, #6]
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075f8:	6800      	ldr	r0, [r0, #0]
 80075fa:	f001 fc9c 	bl	8008f36 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007618:	b29b      	uxth	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	4413      	add	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	011a      	lsls	r2, r3, #4
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	4413      	add	r3, r2
 8007634:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	801a      	strh	r2, [r3, #0]
 8007644:	f000 be1f 	b.w	8008286 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	78db      	ldrb	r3, [r3, #3]
 8007654:	2b02      	cmp	r3, #2
 8007656:	f040 8462 	bne.w	8007f1e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800765a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6a1a      	ldr	r2, [r3, #32]
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	429a      	cmp	r2, r3
 8007674:	f240 83df 	bls.w	8007e36 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800769a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800769e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80076a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	441a      	add	r2, r3
 80076bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80076c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076c8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80076cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80076d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6a1a      	ldr	r2, [r3, #32]
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e4:	1ad2      	subs	r2, r2, r3
 80076e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29b      	uxth	r3, r3
 8007710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 81c7 	beq.w	8007aa8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800771a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	633b      	str	r3, [r7, #48]	@ 0x30
 8007726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	785b      	ldrb	r3, [r3, #1]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d177      	bne.n	8007826 <USB_EPStartXfer+0x2ce>
 8007736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007750:	b29b      	uxth	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007756:	4413      	add	r3, r2
 8007758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800775a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	011a      	lsls	r2, r3, #4
 8007768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776a:	4413      	add	r3, r2
 800776c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007770:	627b      	str	r3, [r7, #36]	@ 0x24
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777c:	b29a      	uxth	r2, r3
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007786:	2b3e      	cmp	r3, #62	@ 0x3e
 8007788:	d921      	bls.n	80077ce <USB_EPStartXfer+0x276>
 800778a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	f003 031f 	and.w	r3, r3, #31
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <USB_EPStartXfer+0x252>
 80077a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80077a4:	3b01      	subs	r3, #1
 80077a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	029b      	lsls	r3, r3, #10
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	4313      	orrs	r3, r2
 80077bc:	b29b      	uxth	r3, r3
 80077be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	e050      	b.n	8007870 <USB_EPStartXfer+0x318>
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10a      	bne.n	80077ec <USB_EPStartXfer+0x294>
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e041      	b.n	8007870 <USB_EPStartXfer+0x318>
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f0:	085b      	lsrs	r3, r3, #1
 80077f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <USB_EPStartXfer+0x2b4>
 8007802:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007806:	3301      	adds	r3, #1
 8007808:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29a      	uxth	r2, r3
 8007812:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007816:	b29b      	uxth	r3, r3
 8007818:	029b      	lsls	r3, r3, #10
 800781a:	b29b      	uxth	r3, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	b29a      	uxth	r2, r3
 8007820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e024      	b.n	8007870 <USB_EPStartXfer+0x318>
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d11c      	bne.n	8007870 <USB_EPStartXfer+0x318>
 8007836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007844:	b29b      	uxth	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	4413      	add	r3, r2
 800784c:	633b      	str	r3, [r7, #48]	@ 0x30
 800784e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	011a      	lsls	r2, r3, #4
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	4413      	add	r3, r2
 8007860:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786a:	b29a      	uxth	r2, r3
 800786c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	895b      	ldrh	r3, [r3, #10]
 800787c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6959      	ldr	r1, [r3, #20]
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007890:	b29b      	uxth	r3, r3
 8007892:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007896:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800789a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800789e:	6800      	ldr	r0, [r0, #0]
 80078a0:	f001 fb49 	bl	8008f36 <USB_WritePMA>
            ep->xfer_buff += len;
 80078a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695a      	ldr	r2, [r3, #20]
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b4:	441a      	add	r2, r3
 80078b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6a1a      	ldr	r2, [r3, #32]
 80078ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d90f      	bls.n	80078fe <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80078de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6a1a      	ldr	r2, [r3, #32]
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ee:	1ad2      	subs	r2, r2, r3
 80078f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	621a      	str	r2, [r3, #32]
 80078fc:	e00e      	b.n	800791c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80078fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800790e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2200      	movs	r2, #0
 800791a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d177      	bne.n	8007a1c <USB_EPStartXfer+0x4c4>
 800792c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007930:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	61bb      	str	r3, [r7, #24]
 8007938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007946:	b29b      	uxth	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	4413      	add	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
 8007950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	011a      	lsls	r2, r3, #4
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	4413      	add	r3, r2
 8007962:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	b29b      	uxth	r3, r3
 800796e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007972:	b29a      	uxth	r2, r3
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	801a      	strh	r2, [r3, #0]
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797c:	2b3e      	cmp	r3, #62	@ 0x3e
 800797e:	d921      	bls.n	80079c4 <USB_EPStartXfer+0x46c>
 8007980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800798a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798e:	f003 031f 	and.w	r3, r3, #31
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <USB_EPStartXfer+0x448>
 8007996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799a:	3b01      	subs	r3, #1
 800799c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	029b      	lsls	r3, r3, #10
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	4313      	orrs	r3, r2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079bc:	b29a      	uxth	r2, r3
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	801a      	strh	r2, [r3, #0]
 80079c2:	e056      	b.n	8007a72 <USB_EPStartXfer+0x51a>
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <USB_EPStartXfer+0x48a>
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079da:	b29a      	uxth	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e047      	b.n	8007a72 <USB_EPStartXfer+0x51a>
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e6:	085b      	lsrs	r3, r3, #1
 80079e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <USB_EPStartXfer+0x4aa>
 80079f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079fc:	3301      	adds	r3, #1
 80079fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	029b      	lsls	r3, r3, #10
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4313      	orrs	r3, r2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e02a      	b.n	8007a72 <USB_EPStartXfer+0x51a>
 8007a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d122      	bne.n	8007a72 <USB_EPStartXfer+0x51a>
 8007a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	623b      	str	r3, [r7, #32]
 8007a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	623b      	str	r3, [r7, #32]
 8007a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	011a      	lsls	r2, r3, #4
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	4413      	add	r3, r2
 8007a62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	891b      	ldrh	r3, [r3, #8]
 8007a7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6959      	ldr	r1, [r3, #20]
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007aa0:	6800      	ldr	r0, [r0, #0]
 8007aa2:	f001 fa48 	bl	8008f36 <USB_WritePMA>
 8007aa6:	e3ee      	b.n	8008286 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d177      	bne.n	8007ba8 <USB_EPStartXfer+0x650>
 8007ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ad8:	4413      	add	r3, r2
 8007ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	011a      	lsls	r2, r3, #4
 8007aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aec:	4413      	add	r3, r2
 8007aee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b08:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b0a:	d921      	bls.n	8007b50 <USB_EPStartXfer+0x5f8>
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <USB_EPStartXfer+0x5d4>
 8007b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b26:	3b01      	subs	r3, #1
 8007b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	029b      	lsls	r3, r3, #10
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b4c:	801a      	strh	r2, [r3, #0]
 8007b4e:	e056      	b.n	8007bfe <USB_EPStartXfer+0x6a6>
 8007b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <USB_EPStartXfer+0x616>
 8007b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	e047      	b.n	8007bfe <USB_EPStartXfer+0x6a6>
 8007b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b72:	085b      	lsrs	r3, r3, #1
 8007b74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <USB_EPStartXfer+0x636>
 8007b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b88:	3301      	adds	r3, #1
 8007b8a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	029b      	lsls	r3, r3, #10
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba4:	801a      	strh	r2, [r3, #0]
 8007ba6:	e02a      	b.n	8007bfe <USB_EPStartXfer+0x6a6>
 8007ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	785b      	ldrb	r3, [r3, #1]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d122      	bne.n	8007bfe <USB_EPStartXfer+0x6a6>
 8007bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bd8:	4413      	add	r3, r2
 8007bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	011a      	lsls	r2, r3, #4
 8007bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bec:	4413      	add	r3, r2
 8007bee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	891b      	ldrh	r3, [r3, #8]
 8007c0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6959      	ldr	r1, [r3, #20]
 8007c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c2c:	6800      	ldr	r0, [r0, #0]
 8007c2e:	f001 f982 	bl	8008f36 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695a      	ldr	r2, [r3, #20]
 8007c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c42:	441a      	add	r2, r3
 8007c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6a1a      	ldr	r2, [r3, #32]
 8007c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d90f      	bls.n	8007c8c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6a1a      	ldr	r2, [r3, #32]
 8007c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7c:	1ad2      	subs	r2, r2, r3
 8007c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	621a      	str	r2, [r3, #32]
 8007c8a:	e00e      	b.n	8007caa <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d177      	bne.n	8007db6 <USB_EPStartXfer+0x85e>
 8007cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce6:	4413      	add	r3, r2
 8007ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	011a      	lsls	r2, r3, #4
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d10:	801a      	strh	r2, [r3, #0]
 8007d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d16:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d18:	d921      	bls.n	8007d5e <USB_EPStartXfer+0x806>
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1e:	095b      	lsrs	r3, r3, #5
 8007d20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d104      	bne.n	8007d3a <USB_EPStartXfer+0x7e2>
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d34:	3b01      	subs	r3, #1
 8007d36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	029b      	lsls	r3, r3, #10
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5a:	801a      	strh	r2, [r3, #0]
 8007d5c:	e050      	b.n	8007e00 <USB_EPStartXfer+0x8a8>
 8007d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <USB_EPStartXfer+0x824>
 8007d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	e041      	b.n	8007e00 <USB_EPStartXfer+0x8a8>
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d80:	085b      	lsrs	r3, r3, #1
 8007d82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <USB_EPStartXfer+0x844>
 8007d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d96:	3301      	adds	r3, #1
 8007d98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	029b      	lsls	r3, r3, #10
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4313      	orrs	r3, r2
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	e024      	b.n	8007e00 <USB_EPStartXfer+0x8a8>
 8007db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d11c      	bne.n	8007e00 <USB_EPStartXfer+0x8a8>
 8007dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dda:	4413      	add	r3, r2
 8007ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	011a      	lsls	r2, r3, #4
 8007dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dee:	4413      	add	r3, r2
 8007df0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dfe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	895b      	ldrh	r3, [r3, #10]
 8007e0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6959      	ldr	r1, [r3, #20]
 8007e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e2e:	6800      	ldr	r0, [r0, #0]
 8007e30:	f001 f881 	bl	8008f36 <USB_WritePMA>
 8007e34:	e227      	b.n	8008286 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	441a      	add	r2, r3
 8007e8a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ec2:	4413      	add	r3, r2
 8007ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	011a      	lsls	r2, r3, #4
 8007ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007edc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ee6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	891b      	ldrh	r3, [r3, #8]
 8007ef4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6959      	ldr	r1, [r3, #20]
 8007f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f16:	6800      	ldr	r0, [r0, #0]
 8007f18:	f001 f80d 	bl	8008f36 <USB_WritePMA>
 8007f1c:	e1b3      	b.n	8008286 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6a1a      	ldr	r2, [r3, #32]
 8007f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2e:	1ad2      	subs	r2, r2, r3
 8007f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 80c6 	beq.w	80080f0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d177      	bne.n	8008070 <USB_EPStartXfer+0xb18>
 8007f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fa0:	4413      	add	r3, r2
 8007fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	011a      	lsls	r2, r3, #4
 8007fb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fba:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fca:	801a      	strh	r2, [r3, #0]
 8007fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fd2:	d921      	bls.n	8008018 <USB_EPStartXfer+0xac0>
 8007fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd8:	095b      	lsrs	r3, r3, #5
 8007fda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe2:	f003 031f 	and.w	r3, r3, #31
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d104      	bne.n	8007ff4 <USB_EPStartXfer+0xa9c>
 8007fea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	029b      	lsls	r3, r3, #10
 8008002:	b29b      	uxth	r3, r3
 8008004:	4313      	orrs	r3, r2
 8008006:	b29b      	uxth	r3, r3
 8008008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008010:	b29a      	uxth	r2, r3
 8008012:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008014:	801a      	strh	r2, [r3, #0]
 8008016:	e050      	b.n	80080ba <USB_EPStartXfer+0xb62>
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <USB_EPStartXfer+0xade>
 8008020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800802a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802e:	b29a      	uxth	r2, r3
 8008030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008032:	801a      	strh	r2, [r3, #0]
 8008034:	e041      	b.n	80080ba <USB_EPStartXfer+0xb62>
 8008036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <USB_EPStartXfer+0xafe>
 800804c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008050:	3301      	adds	r3, #1
 8008052:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29a      	uxth	r2, r3
 800805c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008060:	b29b      	uxth	r3, r3
 8008062:	029b      	lsls	r3, r3, #10
 8008064:	b29b      	uxth	r3, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	b29a      	uxth	r2, r3
 800806a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	e024      	b.n	80080ba <USB_EPStartXfer+0xb62>
 8008070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d11c      	bne.n	80080ba <USB_EPStartXfer+0xb62>
 8008080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800808e:	b29b      	uxth	r3, r3
 8008090:	461a      	mov	r2, r3
 8008092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008094:	4413      	add	r3, r2
 8008096:	673b      	str	r3, [r7, #112]	@ 0x70
 8008098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	011a      	lsls	r2, r3, #4
 80080a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080a8:	4413      	add	r3, r2
 80080aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80080ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	895b      	ldrh	r3, [r3, #10]
 80080c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6959      	ldr	r1, [r3, #20]
 80080d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080da:	b29b      	uxth	r3, r3
 80080dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80080e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80080e8:	6800      	ldr	r0, [r0, #0]
 80080ea:	f000 ff24 	bl	8008f36 <USB_WritePMA>
 80080ee:	e0ca      	b.n	8008286 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d177      	bne.n	80081f0 <USB_EPStartXfer+0xc98>
 8008100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800810c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811a:	b29b      	uxth	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008120:	4413      	add	r3, r2
 8008122:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	011a      	lsls	r2, r3, #4
 8008132:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008134:	4413      	add	r3, r2
 8008136:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800813a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800813c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008146:	b29a      	uxth	r2, r3
 8008148:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008150:	2b3e      	cmp	r3, #62	@ 0x3e
 8008152:	d921      	bls.n	8008198 <USB_EPStartXfer+0xc40>
 8008154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800815e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	2b00      	cmp	r3, #0
 8008168:	d104      	bne.n	8008174 <USB_EPStartXfer+0xc1c>
 800816a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800816e:	3b01      	subs	r3, #1
 8008170:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29a      	uxth	r2, r3
 800817a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800817e:	b29b      	uxth	r3, r3
 8008180:	029b      	lsls	r3, r3, #10
 8008182:	b29b      	uxth	r3, r3
 8008184:	4313      	orrs	r3, r2
 8008186:	b29b      	uxth	r3, r3
 8008188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008190:	b29a      	uxth	r2, r3
 8008192:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	e05c      	b.n	8008252 <USB_EPStartXfer+0xcfa>
 8008198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <USB_EPStartXfer+0xc5e>
 80081a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	e04d      	b.n	8008252 <USB_EPStartXfer+0xcfa>
 80081b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <USB_EPStartXfer+0xc7e>
 80081cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80081d0:	3301      	adds	r3, #1
 80081d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80081d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29a      	uxth	r2, r3
 80081dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	029b      	lsls	r3, r3, #10
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	4313      	orrs	r3, r2
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	e030      	b.n	8008252 <USB_EPStartXfer+0xcfa>
 80081f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d128      	bne.n	8008252 <USB_EPStartXfer+0xcfa>
 8008200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800820e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800821c:	b29b      	uxth	r3, r3
 800821e:	461a      	mov	r2, r3
 8008220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008224:	4413      	add	r3, r2
 8008226:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800822a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	011a      	lsls	r2, r3, #4
 8008238:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800823c:	4413      	add	r3, r2
 800823e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824a:	b29a      	uxth	r2, r3
 800824c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008250:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	891b      	ldrh	r3, [r3, #8]
 800825e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6959      	ldr	r1, [r3, #20]
 800826e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008272:	b29b      	uxth	r3, r3
 8008274:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008278:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800827c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008280:	6800      	ldr	r0, [r0, #0]
 8008282:	f000 fe58 	bl	8008f36 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800828a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ac:	817b      	strh	r3, [r7, #10]
 80082ae:	897b      	ldrh	r3, [r7, #10]
 80082b0:	f083 0310 	eor.w	r3, r3, #16
 80082b4:	817b      	strh	r3, [r7, #10]
 80082b6:	897b      	ldrh	r3, [r7, #10]
 80082b8:	f083 0320 	eor.w	r3, r3, #32
 80082bc:	817b      	strh	r3, [r7, #10]
 80082be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	441a      	add	r2, r3
 80082d8:	897b      	ldrh	r3, [r7, #10]
 80082da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	8013      	strh	r3, [r2, #0]
 80082ee:	f000 bcde 	b.w	8008cae <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	7b1b      	ldrb	r3, [r3, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f040 80bb 	bne.w	800847a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	699a      	ldr	r2, [r3, #24]
 8008310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	429a      	cmp	r2, r3
 800831e:	d917      	bls.n	8008350 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699a      	ldr	r2, [r3, #24]
 800833c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008340:	1ad2      	subs	r2, r2, r3
 8008342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	619a      	str	r2, [r3, #24]
 800834e:	e00e      	b.n	800836e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2200      	movs	r2, #0
 800836c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800836e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800837c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800838a:	b29b      	uxth	r3, r3
 800838c:	461a      	mov	r2, r3
 800838e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008392:	4413      	add	r3, r2
 8008394:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	011a      	lsls	r2, r3, #4
 80083a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083aa:	4413      	add	r3, r2
 80083ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80083ce:	d924      	bls.n	800841a <USB_EPStartXfer+0xec2>
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083de:	f003 031f 	and.w	r3, r3, #31
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <USB_EPStartXfer+0xe98>
 80083e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80083ea:	3b01      	subs	r3, #1
 80083ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	029b      	lsls	r3, r3, #10
 8008400:	b29b      	uxth	r3, r3
 8008402:	4313      	orrs	r3, r2
 8008404:	b29b      	uxth	r3, r3
 8008406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800840a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800840e:	b29a      	uxth	r2, r3
 8008410:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008414:	801a      	strh	r2, [r3, #0]
 8008416:	f000 bc10 	b.w	8008c3a <USB_EPStartXfer+0x16e2>
 800841a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10c      	bne.n	800843c <USB_EPStartXfer+0xee4>
 8008422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800842e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008432:	b29a      	uxth	r2, r3
 8008434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	e3fe      	b.n	8008c3a <USB_EPStartXfer+0x16e2>
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008440:	085b      	lsrs	r3, r3, #1
 8008442:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d004      	beq.n	800845c <USB_EPStartXfer+0xf04>
 8008452:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008456:	3301      	adds	r3, #1
 8008458:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800845c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29a      	uxth	r2, r3
 8008464:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008468:	b29b      	uxth	r3, r3
 800846a:	029b      	lsls	r3, r3, #10
 800846c:	b29b      	uxth	r3, r3
 800846e:	4313      	orrs	r3, r2
 8008470:	b29a      	uxth	r2, r3
 8008472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	e3df      	b.n	8008c3a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800847a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	78db      	ldrb	r3, [r3, #3]
 8008486:	2b02      	cmp	r3, #2
 8008488:	f040 8218 	bne.w	80088bc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800848c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 809d 	bne.w	80085d8 <USB_EPStartXfer+0x1080>
 800849e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c2:	4413      	add	r3, r2
 80084c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	011a      	lsls	r2, r3, #4
 80084d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084da:	4413      	add	r3, r2
 80084dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	2b3e      	cmp	r3, #62	@ 0x3e
 8008506:	d92b      	bls.n	8008560 <USB_EPStartXfer+0x1008>
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800851a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	2b00      	cmp	r3, #0
 800852c:	d104      	bne.n	8008538 <USB_EPStartXfer+0xfe0>
 800852e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008532:	3b01      	subs	r3, #1
 8008534:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29a      	uxth	r2, r3
 8008540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008544:	b29b      	uxth	r3, r3
 8008546:	029b      	lsls	r3, r3, #10
 8008548:	b29b      	uxth	r3, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	b29b      	uxth	r3, r3
 800854e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008556:	b29a      	uxth	r2, r3
 8008558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800855c:	801a      	strh	r2, [r3, #0]
 800855e:	e070      	b.n	8008642 <USB_EPStartXfer+0x10ea>
 8008560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10c      	bne.n	800858a <USB_EPStartXfer+0x1032>
 8008570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800857c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008580:	b29a      	uxth	r2, r3
 8008582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	e05b      	b.n	8008642 <USB_EPStartXfer+0x10ea>
 800858a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	085b      	lsrs	r3, r3, #1
 8008598:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800859c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <USB_EPStartXfer+0x1062>
 80085b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b4:	3301      	adds	r3, #1
 80085b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	029b      	lsls	r3, r3, #10
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	4313      	orrs	r3, r2
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	e034      	b.n	8008642 <USB_EPStartXfer+0x10ea>
 80085d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	785b      	ldrb	r3, [r3, #1]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d12c      	bne.n	8008642 <USB_EPStartXfer+0x10ea>
 80085e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008604:	b29b      	uxth	r3, r3
 8008606:	461a      	mov	r2, r3
 8008608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800860c:	4413      	add	r3, r2
 800860e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	011a      	lsls	r2, r3, #4
 8008620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008624:	4413      	add	r3, r2
 8008626:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800862a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800862e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	b29a      	uxth	r2, r3
 800863c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008640:	801a      	strh	r2, [r3, #0]
 8008642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	785b      	ldrb	r3, [r3, #1]
 800865c:	2b00      	cmp	r3, #0
 800865e:	f040 809d 	bne.w	800879c <USB_EPStartXfer+0x1244>
 8008662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800867e:	b29b      	uxth	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008686:	4413      	add	r3, r2
 8008688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800868c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	011a      	lsls	r2, r3, #4
 800869a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800869e:	4413      	add	r3, r2
 80086a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80086a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80086ca:	d92b      	bls.n	8008724 <USB_EPStartXfer+0x11cc>
 80086cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	095b      	lsrs	r3, r3, #5
 80086da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80086de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f003 031f 	and.w	r3, r3, #31
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d104      	bne.n	80086fc <USB_EPStartXfer+0x11a4>
 80086f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f6:	3b01      	subs	r3, #1
 80086f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80086fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29a      	uxth	r2, r3
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008708:	b29b      	uxth	r3, r3
 800870a:	029b      	lsls	r3, r3, #10
 800870c:	b29b      	uxth	r3, r3
 800870e:	4313      	orrs	r3, r2
 8008710:	b29b      	uxth	r3, r3
 8008712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800871a:	b29a      	uxth	r2, r3
 800871c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008720:	801a      	strh	r2, [r3, #0]
 8008722:	e069      	b.n	80087f8 <USB_EPStartXfer+0x12a0>
 8008724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10c      	bne.n	800874e <USB_EPStartXfer+0x11f6>
 8008734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	b29b      	uxth	r3, r3
 800873c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008744:	b29a      	uxth	r2, r3
 8008746:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800874a:	801a      	strh	r2, [r3, #0]
 800874c:	e054      	b.n	80087f8 <USB_EPStartXfer+0x12a0>
 800874e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <USB_EPStartXfer+0x1226>
 8008774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008778:	3301      	adds	r3, #1
 800877a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800877e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	b29a      	uxth	r2, r3
 8008786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800878a:	b29b      	uxth	r3, r3
 800878c:	029b      	lsls	r3, r3, #10
 800878e:	b29b      	uxth	r3, r3
 8008790:	4313      	orrs	r3, r2
 8008792:	b29a      	uxth	r2, r3
 8008794:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008798:	801a      	strh	r2, [r3, #0]
 800879a:	e02d      	b.n	80087f8 <USB_EPStartXfer+0x12a0>
 800879c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	785b      	ldrb	r3, [r3, #1]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d125      	bne.n	80087f8 <USB_EPStartXfer+0x12a0>
 80087ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	461a      	mov	r2, r3
 80087be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80087c2:	4413      	add	r3, r2
 80087c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80087c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	011a      	lsls	r2, r3, #4
 80087d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80087da:	4413      	add	r3, r2
 80087dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80087e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087f6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80087f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8218 	beq.w	8008c3a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800880a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800882a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800882e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <USB_EPStartXfer+0x12ea>
 8008836:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800883a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10d      	bne.n	800885e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008842:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800884a:	2b00      	cmp	r3, #0
 800884c:	f040 81f5 	bne.w	8008c3a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008850:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008858:	2b00      	cmp	r3, #0
 800885a:	f040 81ee 	bne.w	8008c3a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800885e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008884:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	441a      	add	r2, r3
 80088a2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80088a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	8013      	strh	r3, [r2, #0]
 80088ba:	e1be      	b.n	8008c3a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80088bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	78db      	ldrb	r3, [r3, #3]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	f040 81b4 	bne.w	8008c36 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80088ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d917      	bls.n	800891a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80088ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80088fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	699a      	ldr	r2, [r3, #24]
 8008906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800890a:	1ad2      	subs	r2, r2, r3
 800890c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	619a      	str	r2, [r3, #24]
 8008918:	e00e      	b.n	8008938 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800891a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800891e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800892a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800892e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2200      	movs	r2, #0
 8008936:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f040 8085 	bne.w	8008a54 <USB_EPStartXfer+0x14fc>
 800894a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800894e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008966:	b29b      	uxth	r3, r3
 8008968:	461a      	mov	r2, r3
 800896a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800896e:	4413      	add	r3, r2
 8008970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	011a      	lsls	r2, r3, #4
 8008982:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008986:	4413      	add	r3, r2
 8008988:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800898c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800899c:	b29a      	uxth	r2, r3
 800899e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089a2:	801a      	strh	r2, [r3, #0]
 80089a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80089aa:	d923      	bls.n	80089f4 <USB_EPStartXfer+0x149c>
 80089ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b0:	095b      	lsrs	r3, r3, #5
 80089b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80089b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <USB_EPStartXfer+0x1474>
 80089c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089c6:	3b01      	subs	r3, #1
 80089c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80089cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089d8:	b29b      	uxth	r3, r3
 80089da:	029b      	lsls	r3, r3, #10
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4313      	orrs	r3, r2
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	e060      	b.n	8008ab6 <USB_EPStartXfer+0x155e>
 80089f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10c      	bne.n	8008a16 <USB_EPStartXfer+0x14be>
 80089fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a12:	801a      	strh	r2, [r3, #0]
 8008a14:	e04f      	b.n	8008ab6 <USB_EPStartXfer+0x155e>
 8008a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a1a:	085b      	lsrs	r3, r3, #1
 8008a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d004      	beq.n	8008a36 <USB_EPStartXfer+0x14de>
 8008a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a30:	3301      	adds	r3, #1
 8008a32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	029b      	lsls	r3, r3, #10
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a50:	801a      	strh	r2, [r3, #0]
 8008a52:	e030      	b.n	8008ab6 <USB_EPStartXfer+0x155e>
 8008a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	785b      	ldrb	r3, [r3, #1]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d128      	bne.n	8008ab6 <USB_EPStartXfer+0x155e>
 8008a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	461a      	mov	r2, r3
 8008a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a88:	4413      	add	r3, r2
 8008a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	011a      	lsls	r2, r3, #4
 8008a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008aa6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f040 8085 	bne.w	8008be0 <USB_EPStartXfer+0x1688>
 8008ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ada:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	461a      	mov	r2, r3
 8008af6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008afa:	4413      	add	r3, r2
 8008afc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	011a      	lsls	r2, r3, #4
 8008b0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b12:	4413      	add	r3, r2
 8008b14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b2e:	801a      	strh	r2, [r3, #0]
 8008b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b34:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b36:	d923      	bls.n	8008b80 <USB_EPStartXfer+0x1628>
 8008b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b3c:	095b      	lsrs	r3, r3, #5
 8008b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b46:	f003 031f 	and.w	r3, r3, #31
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d104      	bne.n	8008b58 <USB_EPStartXfer+0x1600>
 8008b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b52:	3b01      	subs	r3, #1
 8008b54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	029b      	lsls	r3, r3, #10
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e05c      	b.n	8008c3a <USB_EPStartXfer+0x16e2>
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10c      	bne.n	8008ba2 <USB_EPStartXfer+0x164a>
 8008b88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b9e:	801a      	strh	r2, [r3, #0]
 8008ba0:	e04b      	b.n	8008c3a <USB_EPStartXfer+0x16e2>
 8008ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d004      	beq.n	8008bc2 <USB_EPStartXfer+0x166a>
 8008bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	029b      	lsls	r3, r3, #10
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bdc:	801a      	strh	r2, [r3, #0]
 8008bde:	e02c      	b.n	8008c3a <USB_EPStartXfer+0x16e2>
 8008be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	785b      	ldrb	r3, [r3, #1]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d124      	bne.n	8008c3a <USB_EPStartXfer+0x16e2>
 8008bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	461a      	mov	r2, r3
 8008c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008c06:	4413      	add	r3, r2
 8008c08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	011a      	lsls	r2, r3, #4
 8008c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008c1e:	4413      	add	r3, r2
 8008c20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c32:	801a      	strh	r2, [r3, #0]
 8008c34:	e001      	b.n	8008c3a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e03a      	b.n	8008cb0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	441a      	add	r2, r3
 8008c96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	785b      	ldrb	r3, [r3, #1]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d020      	beq.n	8008d0e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ce2:	81bb      	strh	r3, [r7, #12]
 8008ce4:	89bb      	ldrh	r3, [r7, #12]
 8008ce6:	f083 0310 	eor.w	r3, r3, #16
 8008cea:	81bb      	strh	r3, [r7, #12]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	441a      	add	r2, r3
 8008cf6:	89bb      	ldrh	r3, [r7, #12]
 8008cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	8013      	strh	r3, [r2, #0]
 8008d0c:	e01f      	b.n	8008d4e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d24:	81fb      	strh	r3, [r7, #14]
 8008d26:	89fb      	ldrh	r3, [r7, #14]
 8008d28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d2c:	81fb      	strh	r3, [r7, #14]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	441a      	add	r2, r3
 8008d38:	89fb      	ldrh	r3, [r7, #14]
 8008d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr

08008d5a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b087      	sub	sp, #28
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	7b1b      	ldrb	r3, [r3, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f040 809d 	bne.w	8008ea8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d04c      	beq.n	8008e10 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	823b      	strh	r3, [r7, #16]
 8008d84:	8a3b      	ldrh	r3, [r7, #16]
 8008d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d01b      	beq.n	8008dc6 <USB_EPClearStall+0x6c>
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da4:	81fb      	strh	r3, [r7, #14]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	441a      	add	r2, r3
 8008db0:	89fb      	ldrh	r3, [r7, #14]
 8008db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	78db      	ldrb	r3, [r3, #3]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d06c      	beq.n	8008ea8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008de4:	81bb      	strh	r3, [r7, #12]
 8008de6:	89bb      	ldrh	r3, [r7, #12]
 8008de8:	f083 0320 	eor.w	r3, r3, #32
 8008dec:	81bb      	strh	r3, [r7, #12]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	441a      	add	r2, r3
 8008df8:	89bb      	ldrh	r3, [r7, #12]
 8008dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	8013      	strh	r3, [r2, #0]
 8008e0e:	e04b      	b.n	8008ea8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	82fb      	strh	r3, [r7, #22]
 8008e1e:	8afb      	ldrh	r3, [r7, #22]
 8008e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01b      	beq.n	8008e60 <USB_EPClearStall+0x106>
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e3e:	82bb      	strh	r3, [r7, #20]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	441a      	add	r2, r3
 8008e4a:	8abb      	ldrh	r3, [r7, #20]
 8008e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e76:	827b      	strh	r3, [r7, #18]
 8008e78:	8a7b      	ldrh	r3, [r7, #18]
 8008e7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e7e:	827b      	strh	r3, [r7, #18]
 8008e80:	8a7b      	ldrh	r3, [r7, #18]
 8008e82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e86:	827b      	strh	r3, [r7, #18]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	441a      	add	r2, r3
 8008e92:	8a7b      	ldrh	r3, [r7, #18]
 8008e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bc80      	pop	{r7}
 8008eb2:	4770      	bx	lr

08008eb4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ec0:	78fb      	ldrb	r3, [r7, #3]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d103      	bne.n	8008ece <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2280      	movs	r2, #128	@ 0x80
 8008eca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bc80      	pop	{r7}
 8008ed8:	4770      	bx	lr

08008eda <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr

08008eee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bc80      	pop	{r7}
 8008f00:	4770      	bx	lr

08008f02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b085      	sub	sp, #20
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f14:	68fb      	ldr	r3, [r7, #12]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bc80      	pop	{r7}
 8008f1e:	4770      	bx	lr

08008f20 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bc80      	pop	{r7}
 8008f34:	4770      	bx	lr

08008f36 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b08b      	sub	sp, #44	@ 0x2c
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	4611      	mov	r1, r2
 8008f42:	461a      	mov	r2, r3
 8008f44:	460b      	mov	r3, r1
 8008f46:	80fb      	strh	r3, [r7, #6]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f4c:	88bb      	ldrh	r3, [r7, #4]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	085b      	lsrs	r3, r3, #1
 8008f52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f5c:	88fb      	ldrh	r3, [r7, #6]
 8008f5e:	005a      	lsls	r2, r3, #1
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f68:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f6e:	e01e      	b.n	8008fae <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	021b      	lsls	r3, r3, #8
 8008f7e:	b21a      	sxth	r2, r3
 8008f80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	b21b      	sxth	r3, r3
 8008f88:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	8a7a      	ldrh	r2, [r7, #18]
 8008f8e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	3302      	adds	r3, #2
 8008f94:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	3302      	adds	r3, #2
 8008f9a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008faa:	3b01      	subs	r3, #1
 8008fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1dd      	bne.n	8008f70 <USB_WritePMA+0x3a>
  }
}
 8008fb4:	bf00      	nop
 8008fb6:	bf00      	nop
 8008fb8:	372c      	adds	r7, #44	@ 0x2c
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bc80      	pop	{r7}
 8008fbe:	4770      	bx	lr

08008fc0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b08b      	sub	sp, #44	@ 0x2c
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	4611      	mov	r1, r2
 8008fcc:	461a      	mov	r2, r3
 8008fce:	460b      	mov	r3, r1
 8008fd0:	80fb      	strh	r3, [r7, #6]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008fd6:	88bb      	ldrh	r3, [r7, #4]
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	005a      	lsls	r2, r3, #1
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ff2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ff8:	e01b      	b.n	8009032 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	3302      	adds	r3, #2
 8009006:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	b2da      	uxtb	r2, r3
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	3301      	adds	r3, #1
 8009014:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	0a1b      	lsrs	r3, r3, #8
 800901a:	b2da      	uxtb	r2, r3
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	3301      	adds	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	3302      	adds	r3, #2
 800902a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800902c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902e:	3b01      	subs	r3, #1
 8009030:	627b      	str	r3, [r7, #36]	@ 0x24
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e0      	bne.n	8008ffa <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009038:	88bb      	ldrh	r3, [r7, #4]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	b29b      	uxth	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29b      	uxth	r3, r3
 800904a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	b2da      	uxtb	r2, r3
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	701a      	strb	r2, [r3, #0]
  }
}
 8009054:	bf00      	nop
 8009056:	372c      	adds	r7, #44	@ 0x2c
 8009058:	46bd      	mov	sp, r7
 800905a:	bc80      	pop	{r7}
 800905c:	4770      	bx	lr

0800905e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	7c1b      	ldrb	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d115      	bne.n	80090a2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009076:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800907a:	2202      	movs	r2, #2
 800907c:	2181      	movs	r1, #129	@ 0x81
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 fe81 	bl	800ad86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800908a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800908e:	2202      	movs	r2, #2
 8009090:	2101      	movs	r1, #1
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 fe77 	bl	800ad86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80090a0:	e012      	b.n	80090c8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090a2:	2340      	movs	r3, #64	@ 0x40
 80090a4:	2202      	movs	r2, #2
 80090a6:	2181      	movs	r1, #129	@ 0x81
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 fe6c 	bl	800ad86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090b4:	2340      	movs	r3, #64	@ 0x40
 80090b6:	2202      	movs	r2, #2
 80090b8:	2101      	movs	r1, #1
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 fe63 	bl	800ad86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090c8:	2308      	movs	r3, #8
 80090ca:	2203      	movs	r2, #3
 80090cc:	2182      	movs	r1, #130	@ 0x82
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 fe59 	bl	800ad86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090da:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80090de:	f001 ff79 	bl	800afd4 <USBD_static_malloc>
 80090e2:	4602      	mov	r2, r0
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80090f4:	2301      	movs	r3, #1
 80090f6:	73fb      	strb	r3, [r7, #15]
 80090f8:	e026      	b.n	8009148 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009100:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	7c1b      	ldrb	r3, [r3, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d109      	bne.n	8009138 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800912a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800912e:	2101      	movs	r1, #1
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 ff18 	bl	800af66 <USBD_LL_PrepareReceive>
 8009136:	e007      	b.n	8009148 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800913e:	2340      	movs	r3, #64	@ 0x40
 8009140:	2101      	movs	r1, #1
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 ff0f 	bl	800af66 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	460b      	mov	r3, r1
 800915c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009162:	2181      	movs	r1, #129	@ 0x81
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 fe34 	bl	800add2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009170:	2101      	movs	r1, #1
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 fe2d 	bl	800add2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009180:	2182      	movs	r1, #130	@ 0x82
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 fe25 	bl	800add2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00e      	beq.n	80091b6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 ff1f 	bl	800afec <USBD_static_free>
    pdev->pClassData = NULL;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d039      	beq.n	800925e <USBD_CDC_Setup+0x9e>
 80091ea:	2b20      	cmp	r3, #32
 80091ec:	d17f      	bne.n	80092ee <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	88db      	ldrh	r3, [r3, #6]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d029      	beq.n	800924a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b25b      	sxtb	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	da11      	bge.n	8009224 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800920c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	88d2      	ldrh	r2, [r2, #6]
 8009212:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009214:	6939      	ldr	r1, [r7, #16]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	88db      	ldrh	r3, [r3, #6]
 800921a:	461a      	mov	r2, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f001 fa05 	bl	800a62c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009222:	e06b      	b.n	80092fc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	785a      	ldrb	r2, [r3, #1]
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	88db      	ldrh	r3, [r3, #6]
 8009232:	b2da      	uxtb	r2, r3
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800923a:	6939      	ldr	r1, [r7, #16]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	88db      	ldrh	r3, [r3, #6]
 8009240:	461a      	mov	r2, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 fa20 	bl	800a688 <USBD_CtlPrepareRx>
      break;
 8009248:	e058      	b.n	80092fc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	7850      	ldrb	r0, [r2, #1]
 8009256:	2200      	movs	r2, #0
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	4798      	blx	r3
      break;
 800925c:	e04e      	b.n	80092fc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	785b      	ldrb	r3, [r3, #1]
 8009262:	2b0b      	cmp	r3, #11
 8009264:	d02e      	beq.n	80092c4 <USBD_CDC_Setup+0x104>
 8009266:	2b0b      	cmp	r3, #11
 8009268:	dc38      	bgt.n	80092dc <USBD_CDC_Setup+0x11c>
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <USBD_CDC_Setup+0xb4>
 800926e:	2b0a      	cmp	r3, #10
 8009270:	d014      	beq.n	800929c <USBD_CDC_Setup+0xdc>
 8009272:	e033      	b.n	80092dc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800927a:	2b03      	cmp	r3, #3
 800927c:	d107      	bne.n	800928e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800927e:	f107 030c 	add.w	r3, r7, #12
 8009282:	2202      	movs	r2, #2
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 f9d0 	bl	800a62c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800928c:	e02e      	b.n	80092ec <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 f961 	bl	800a558 <USBD_CtlError>
            ret = USBD_FAIL;
 8009296:	2302      	movs	r3, #2
 8009298:	75fb      	strb	r3, [r7, #23]
          break;
 800929a:	e027      	b.n	80092ec <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d107      	bne.n	80092b6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80092a6:	f107 030f 	add.w	r3, r7, #15
 80092aa:	2201      	movs	r2, #1
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f001 f9bc 	bl	800a62c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092b4:	e01a      	b.n	80092ec <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 f94d 	bl	800a558 <USBD_CtlError>
            ret = USBD_FAIL;
 80092be:	2302      	movs	r3, #2
 80092c0:	75fb      	strb	r3, [r7, #23]
          break;
 80092c2:	e013      	b.n	80092ec <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d00d      	beq.n	80092ea <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f941 	bl	800a558 <USBD_CtlError>
            ret = USBD_FAIL;
 80092d6:	2302      	movs	r3, #2
 80092d8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80092da:	e006      	b.n	80092ea <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 f93a 	bl	800a558 <USBD_CtlError>
          ret = USBD_FAIL;
 80092e4:	2302      	movs	r3, #2
 80092e6:	75fb      	strb	r3, [r7, #23]
          break;
 80092e8:	e000      	b.n	80092ec <USBD_CDC_Setup+0x12c>
          break;
 80092ea:	bf00      	nop
      }
      break;
 80092ec:	e006      	b.n	80092fc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 f931 	bl	800a558 <USBD_CtlError>
      ret = USBD_FAIL;
 80092f6:	2302      	movs	r3, #2
 80092f8:	75fb      	strb	r3, [r7, #23]
      break;
 80092fa:	bf00      	nop
  }

  return ret;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009318:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009320:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009328:	2b00      	cmp	r3, #0
 800932a:	d03a      	beq.n	80093a2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800932c:	78fa      	ldrb	r2, [r7, #3]
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	440b      	add	r3, r1
 800933a:	331c      	adds	r3, #28
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d029      	beq.n	8009396 <USBD_CDC_DataIn+0x90>
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	440b      	add	r3, r1
 8009350:	331c      	adds	r3, #28
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	78f9      	ldrb	r1, [r7, #3]
 8009356:	68b8      	ldr	r0, [r7, #8]
 8009358:	460b      	mov	r3, r1
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	4403      	add	r3, r0
 8009362:	3320      	adds	r3, #32
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	fbb2 f1f3 	udiv	r1, r2, r3
 800936a:	fb01 f303 	mul.w	r3, r1, r3
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	d110      	bne.n	8009396 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	331c      	adds	r3, #28
 8009384:	2200      	movs	r2, #0
 8009386:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009388:	78f9      	ldrb	r1, [r7, #3]
 800938a:	2300      	movs	r3, #0
 800938c:	2200      	movs	r2, #0
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 fdc6 	bl	800af20 <USBD_LL_Transmit>
 8009394:	e003      	b.n	800939e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	e000      	b.n	80093a4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80093a2:	2302      	movs	r3, #2
  }
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093be:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 fdf1 	bl	800afac <USBD_LL_GetRxDataSize>
 80093ca:	4602      	mov	r2, r0
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00d      	beq.n	80093f8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80093f0:	4611      	mov	r1, r2
 80093f2:	4798      	blx	r3

    return USBD_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	e000      	b.n	80093fa <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80093f8:	2302      	movs	r3, #2
  }
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009410:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009418:	2b00      	cmp	r3, #0
 800941a:	d014      	beq.n	8009446 <USBD_CDC_EP0_RxReady+0x44>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009422:	2bff      	cmp	r3, #255	@ 0xff
 8009424:	d00f      	beq.n	8009446 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009434:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800943c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	22ff      	movs	r2, #255	@ 0xff
 8009442:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2243      	movs	r2, #67	@ 0x43
 800945c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800945e:	4b03      	ldr	r3, [pc, #12]	@ (800946c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	bc80      	pop	{r7}
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	20000124 	.word	0x20000124

08009470 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2243      	movs	r2, #67	@ 0x43
 800947c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800947e:	4b03      	ldr	r3, [pc, #12]	@ (800948c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	200000e0 	.word	0x200000e0

08009490 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2243      	movs	r2, #67	@ 0x43
 800949c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800949e:	4b03      	ldr	r3, [pc, #12]	@ (80094ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20000168 	.word	0x20000168

080094b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	220a      	movs	r2, #10
 80094bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80094be:	4b03      	ldr	r3, [pc, #12]	@ (80094cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bc80      	pop	{r7}
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	2000009c 	.word	0x2000009c

080094d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80094da:	2302      	movs	r3, #2
 80094dc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bc80      	pop	{r7}
 80094fa:	4770      	bx	lr

080094fc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009510:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800951a:	88fa      	ldrh	r2, [r7, #6]
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	371c      	adds	r7, #28
 8009528:	46bd      	mov	sp, r7
 800952a:	bc80      	pop	{r7}
 800952c:	4770      	bx	lr

0800952e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800952e:	b480      	push	{r7}
 8009530:	b085      	sub	sp, #20
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800953e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	bc80      	pop	{r7}
 8009552:	4770      	bx	lr

08009554 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009562:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800956a:	2b00      	cmp	r3, #0
 800956c:	d01c      	beq.n	80095a8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009574:	2b00      	cmp	r3, #0
 8009576:	d115      	bne.n	80095a4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2201      	movs	r2, #1
 800957c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009596:	b29b      	uxth	r3, r3
 8009598:	2181      	movs	r1, #129	@ 0x81
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 fcc0 	bl	800af20 <USBD_LL_Transmit>

      return USBD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e002      	b.n	80095aa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e000      	b.n	80095aa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80095a8:	2302      	movs	r3, #2
  }
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d017      	beq.n	80095fc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	7c1b      	ldrb	r3, [r3, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d109      	bne.n	80095e8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095de:	2101      	movs	r1, #1
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 fcc0 	bl	800af66 <USBD_LL_PrepareReceive>
 80095e6:	e007      	b.n	80095f8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095ee:	2340      	movs	r3, #64	@ 0x40
 80095f0:	2101      	movs	r1, #1
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fcb7 	bl	800af66 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	e000      	b.n	80095fe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80095fc:	2302      	movs	r3, #2
  }
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	4613      	mov	r3, r2
 8009612:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800961a:	2302      	movs	r3, #2
 800961c:	e01a      	b.n	8009654 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009624:	2b00      	cmp	r3, #0
 8009626:	d003      	beq.n	8009630 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	79fa      	ldrb	r2, [r7, #7]
 800964a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f001 fb25 	bl	800ac9c <USBD_LL_Init>

  return USBD_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d006      	beq.n	800967e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
 800967c:	e001      	b.n	8009682 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800967e:	2302      	movs	r3, #2
 8009680:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	bc80      	pop	{r7}
 800968c:	4770      	bx	lr

0800968e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 fb5a 	bl	800ad50 <USBD_LL_Start>

  return USBD_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bc80      	pop	{r7}
 80096b8:	4770      	bx	lr

080096ba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80096c6:	2302      	movs	r3, #2
 80096c8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00c      	beq.n	80096ee <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	78fa      	ldrb	r2, [r7, #3]
 80096de:	4611      	mov	r1, r2
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	78fa      	ldrb	r2, [r7, #3]
 800970e:	4611      	mov	r1, r2
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4798      	blx	r3

  return USBD_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 fed8 	bl	800a4e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009744:	461a      	mov	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009752:	f003 031f 	and.w	r3, r3, #31
 8009756:	2b02      	cmp	r3, #2
 8009758:	d016      	beq.n	8009788 <USBD_LL_SetupStage+0x6a>
 800975a:	2b02      	cmp	r3, #2
 800975c:	d81c      	bhi.n	8009798 <USBD_LL_SetupStage+0x7a>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <USBD_LL_SetupStage+0x4a>
 8009762:	2b01      	cmp	r3, #1
 8009764:	d008      	beq.n	8009778 <USBD_LL_SetupStage+0x5a>
 8009766:	e017      	b.n	8009798 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f9cb 	bl	8009b0c <USBD_StdDevReq>
      break;
 8009776:	e01a      	b.n	80097ae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fa2d 	bl	8009be0 <USBD_StdItfReq>
      break;
 8009786:	e012      	b.n	80097ae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fa6d 	bl	8009c70 <USBD_StdEPReq>
      break;
 8009796:	e00a      	b.n	80097ae <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800979e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 fb32 	bl	800ae10 <USBD_LL_StallEP>
      break;
 80097ac:	bf00      	nop
  }

  return USBD_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	460b      	mov	r3, r1
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80097c6:	7afb      	ldrb	r3, [r7, #11]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d14b      	bne.n	8009864 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80097d2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d134      	bne.n	8009848 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	68da      	ldr	r2, [r3, #12]
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d919      	bls.n	800981e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	1ad2      	subs	r2, r2, r3
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009800:	429a      	cmp	r2, r3
 8009802:	d203      	bcs.n	800980c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009808:	b29b      	uxth	r3, r3
 800980a:	e002      	b.n	8009812 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009810:	b29b      	uxth	r3, r3
 8009812:	461a      	mov	r2, r3
 8009814:	6879      	ldr	r1, [r7, #4]
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 ff54 	bl	800a6c4 <USBD_CtlContinueRx>
 800981c:	e038      	b.n	8009890 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009830:	2b03      	cmp	r3, #3
 8009832:	d105      	bne.n	8009840 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 ff51 	bl	800a6e8 <USBD_CtlSendStatus>
 8009846:	e023      	b.n	8009890 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800984e:	2b05      	cmp	r3, #5
 8009850:	d11e      	bne.n	8009890 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800985a:	2100      	movs	r1, #0
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f001 fad7 	bl	800ae10 <USBD_LL_StallEP>
 8009862:	e015      	b.n	8009890 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00d      	beq.n	800988c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009876:	2b03      	cmp	r3, #3
 8009878:	d108      	bne.n	800988c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	7afa      	ldrb	r2, [r7, #11]
 8009884:	4611      	mov	r1, r2
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	4798      	blx	r3
 800988a:	e001      	b.n	8009890 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800988c:	2302      	movs	r3, #2
 800988e:	e000      	b.n	8009892 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b086      	sub	sp, #24
 800989e:	af00      	add	r7, sp, #0
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	460b      	mov	r3, r1
 80098a4:	607a      	str	r2, [r7, #4]
 80098a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d17f      	bne.n	80099ae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3314      	adds	r3, #20
 80098b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d15c      	bne.n	8009978 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d915      	bls.n	80098f6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	1ad2      	subs	r2, r2, r3
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	461a      	mov	r2, r3
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 febe 	bl	800a664 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098e8:	2300      	movs	r3, #0
 80098ea:	2200      	movs	r2, #0
 80098ec:	2100      	movs	r1, #0
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f001 fb39 	bl	800af66 <USBD_LL_PrepareReceive>
 80098f4:	e04e      	b.n	8009994 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	6912      	ldr	r2, [r2, #16]
 80098fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009902:	fb01 f202 	mul.w	r2, r1, r2
 8009906:	1a9b      	subs	r3, r3, r2
 8009908:	2b00      	cmp	r3, #0
 800990a:	d11c      	bne.n	8009946 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009914:	429a      	cmp	r2, r3
 8009916:	d316      	bcc.n	8009946 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009922:	429a      	cmp	r2, r3
 8009924:	d20f      	bcs.n	8009946 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009926:	2200      	movs	r2, #0
 8009928:	2100      	movs	r1, #0
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f000 fe9a 	bl	800a664 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009938:	2300      	movs	r3, #0
 800993a:	2200      	movs	r2, #0
 800993c:	2100      	movs	r1, #0
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f001 fb11 	bl	800af66 <USBD_LL_PrepareReceive>
 8009944:	e026      	b.n	8009994 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009958:	2b03      	cmp	r3, #3
 800995a:	d105      	bne.n	8009968 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009968:	2180      	movs	r1, #128	@ 0x80
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f001 fa50 	bl	800ae10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fecc 	bl	800a70e <USBD_CtlReceiveStatus>
 8009976:	e00d      	b.n	8009994 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800997e:	2b04      	cmp	r3, #4
 8009980:	d004      	beq.n	800998c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009988:	2b00      	cmp	r3, #0
 800998a:	d103      	bne.n	8009994 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800998c:	2180      	movs	r1, #128	@ 0x80
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f001 fa3e 	bl	800ae10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800999a:	2b01      	cmp	r3, #1
 800999c:	d11d      	bne.n	80099da <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7ff fe81 	bl	80096a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80099ac:	e015      	b.n	80099da <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00d      	beq.n	80099d6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d108      	bne.n	80099d6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	7afa      	ldrb	r2, [r7, #11]
 80099ce:	4611      	mov	r1, r2
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	4798      	blx	r3
 80099d4:	e001      	b.n	80099da <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80099d6:	2302      	movs	r3, #2
 80099d8:	e000      	b.n	80099dc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099ec:	2340      	movs	r3, #64	@ 0x40
 80099ee:	2200      	movs	r2, #0
 80099f0:	2100      	movs	r1, #0
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 f9c7 	bl	800ad86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2240      	movs	r2, #64	@ 0x40
 8009a04:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a08:	2340      	movs	r3, #64	@ 0x40
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2180      	movs	r1, #128	@ 0x80
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 f9b9 	bl	800ad86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2240      	movs	r2, #64	@ 0x40
 8009a1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d009      	beq.n	8009a5c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6852      	ldr	r2, [r2, #4]
 8009a54:	b2d2      	uxtb	r2, r2
 8009a56:	4611      	mov	r1, r2
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
  }

  return USBD_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	78fa      	ldrb	r2, [r7, #3]
 8009a76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bc80      	pop	{r7}
 8009a82:	4770      	bx	lr

08009a84 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bc80      	pop	{r7}
 8009aaa:	4770      	bx	lr

08009aac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d105      	bne.n	8009aca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bc80      	pop	{r7}
 8009ad4:	4770      	bx	lr

08009ad6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d10b      	bne.n	8009b00 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d005      	beq.n	8009b00 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b22:	2b40      	cmp	r3, #64	@ 0x40
 8009b24:	d005      	beq.n	8009b32 <USBD_StdDevReq+0x26>
 8009b26:	2b40      	cmp	r3, #64	@ 0x40
 8009b28:	d84f      	bhi.n	8009bca <USBD_StdDevReq+0xbe>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d009      	beq.n	8009b42 <USBD_StdDevReq+0x36>
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	d14b      	bne.n	8009bca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
      break;
 8009b40:	e048      	b.n	8009bd4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	785b      	ldrb	r3, [r3, #1]
 8009b46:	2b09      	cmp	r3, #9
 8009b48:	d839      	bhi.n	8009bbe <USBD_StdDevReq+0xb2>
 8009b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <USBD_StdDevReq+0x44>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009ba1 	.word	0x08009ba1
 8009b54:	08009bb5 	.word	0x08009bb5
 8009b58:	08009bbf 	.word	0x08009bbf
 8009b5c:	08009bab 	.word	0x08009bab
 8009b60:	08009bbf 	.word	0x08009bbf
 8009b64:	08009b83 	.word	0x08009b83
 8009b68:	08009b79 	.word	0x08009b79
 8009b6c:	08009bbf 	.word	0x08009bbf
 8009b70:	08009b97 	.word	0x08009b97
 8009b74:	08009b8d 	.word	0x08009b8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f9dc 	bl	8009f38 <USBD_GetDescriptor>
          break;
 8009b80:	e022      	b.n	8009bc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fb3f 	bl	800a208 <USBD_SetAddress>
          break;
 8009b8a:	e01d      	b.n	8009bc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fb7e 	bl	800a290 <USBD_SetConfig>
          break;
 8009b94:	e018      	b.n	8009bc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc07 	bl	800a3ac <USBD_GetConfig>
          break;
 8009b9e:	e013      	b.n	8009bc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fc37 	bl	800a416 <USBD_GetStatus>
          break;
 8009ba8:	e00e      	b.n	8009bc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fc65 	bl	800a47c <USBD_SetFeature>
          break;
 8009bb2:	e009      	b.n	8009bc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fc74 	bl	800a4a4 <USBD_ClrFeature>
          break;
 8009bbc:	e004      	b.n	8009bc8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fcc9 	bl	800a558 <USBD_CtlError>
          break;
 8009bc6:	bf00      	nop
      }
      break;
 8009bc8:	e004      	b.n	8009bd4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fcc3 	bl	800a558 <USBD_CtlError>
      break;
 8009bd2:	bf00      	nop
  }

  return ret;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop

08009be0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bf6:	2b40      	cmp	r3, #64	@ 0x40
 8009bf8:	d005      	beq.n	8009c06 <USBD_StdItfReq+0x26>
 8009bfa:	2b40      	cmp	r3, #64	@ 0x40
 8009bfc:	d82e      	bhi.n	8009c5c <USBD_StdItfReq+0x7c>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <USBD_StdItfReq+0x26>
 8009c02:	2b20      	cmp	r3, #32
 8009c04:	d12a      	bne.n	8009c5c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d81d      	bhi.n	8009c4e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	889b      	ldrh	r3, [r3, #4]
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d813      	bhi.n	8009c44 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	4798      	blx	r3
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	88db      	ldrh	r3, [r3, #6]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d110      	bne.n	8009c58 <USBD_StdItfReq+0x78>
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10d      	bne.n	8009c58 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fd53 	bl	800a6e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c42:	e009      	b.n	8009c58 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fc86 	bl	800a558 <USBD_CtlError>
          break;
 8009c4c:	e004      	b.n	8009c58 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fc81 	bl	800a558 <USBD_CtlError>
          break;
 8009c56:	e000      	b.n	8009c5a <USBD_StdItfReq+0x7a>
          break;
 8009c58:	bf00      	nop
      }
      break;
 8009c5a:	e004      	b.n	8009c66 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fc7a 	bl	800a558 <USBD_CtlError>
      break;
 8009c64:	bf00      	nop
  }

  return USBD_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	889b      	ldrh	r3, [r3, #4]
 8009c82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c8c:	2b40      	cmp	r3, #64	@ 0x40
 8009c8e:	d007      	beq.n	8009ca0 <USBD_StdEPReq+0x30>
 8009c90:	2b40      	cmp	r3, #64	@ 0x40
 8009c92:	f200 8146 	bhi.w	8009f22 <USBD_StdEPReq+0x2b2>
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00a      	beq.n	8009cb0 <USBD_StdEPReq+0x40>
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	f040 8141 	bne.w	8009f22 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
      break;
 8009cae:	e13d      	b.n	8009f2c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d10a      	bne.n	8009cd2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	4798      	blx	r3
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	e12d      	b.n	8009f2e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	785b      	ldrb	r3, [r3, #1]
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d007      	beq.n	8009cea <USBD_StdEPReq+0x7a>
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	f300 811b 	bgt.w	8009f16 <USBD_StdEPReq+0x2a6>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d072      	beq.n	8009dca <USBD_StdEPReq+0x15a>
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d03a      	beq.n	8009d5e <USBD_StdEPReq+0xee>
 8009ce8:	e115      	b.n	8009f16 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d002      	beq.n	8009cfa <USBD_StdEPReq+0x8a>
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d015      	beq.n	8009d24 <USBD_StdEPReq+0xb4>
 8009cf8:	e02b      	b.n	8009d52 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00c      	beq.n	8009d1a <USBD_StdEPReq+0xaa>
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	2b80      	cmp	r3, #128	@ 0x80
 8009d04:	d009      	beq.n	8009d1a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f001 f880 	bl	800ae10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d10:	2180      	movs	r1, #128	@ 0x80
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 f87c 	bl	800ae10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d18:	e020      	b.n	8009d5c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fc1b 	bl	800a558 <USBD_CtlError>
              break;
 8009d22:	e01b      	b.n	8009d5c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	885b      	ldrh	r3, [r3, #2]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10e      	bne.n	8009d4a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00b      	beq.n	8009d4a <USBD_StdEPReq+0xda>
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	2b80      	cmp	r3, #128	@ 0x80
 8009d36:	d008      	beq.n	8009d4a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	88db      	ldrh	r3, [r3, #6]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d104      	bne.n	8009d4a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 f863 	bl	800ae10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fccc 	bl	800a6e8 <USBD_CtlSendStatus>

              break;
 8009d50:	e004      	b.n	8009d5c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fbff 	bl	800a558 <USBD_CtlError>
              break;
 8009d5a:	bf00      	nop
          }
          break;
 8009d5c:	e0e0      	b.n	8009f20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d002      	beq.n	8009d6e <USBD_StdEPReq+0xfe>
 8009d68:	2b03      	cmp	r3, #3
 8009d6a:	d015      	beq.n	8009d98 <USBD_StdEPReq+0x128>
 8009d6c:	e026      	b.n	8009dbc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00c      	beq.n	8009d8e <USBD_StdEPReq+0x11e>
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
 8009d76:	2b80      	cmp	r3, #128	@ 0x80
 8009d78:	d009      	beq.n	8009d8e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f001 f846 	bl	800ae10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d84:	2180      	movs	r1, #128	@ 0x80
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 f842 	bl	800ae10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d8c:	e01c      	b.n	8009dc8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fbe1 	bl	800a558 <USBD_CtlError>
              break;
 8009d96:	e017      	b.n	8009dc8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	885b      	ldrh	r3, [r3, #2]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d112      	bne.n	8009dc6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f001 f84d 	bl	800ae4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fc97 	bl	800a6e8 <USBD_CtlSendStatus>
              }
              break;
 8009dba:	e004      	b.n	8009dc6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fbca 	bl	800a558 <USBD_CtlError>
              break;
 8009dc4:	e000      	b.n	8009dc8 <USBD_StdEPReq+0x158>
              break;
 8009dc6:	bf00      	nop
          }
          break;
 8009dc8:	e0aa      	b.n	8009f20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d002      	beq.n	8009dda <USBD_StdEPReq+0x16a>
 8009dd4:	2b03      	cmp	r3, #3
 8009dd6:	d032      	beq.n	8009e3e <USBD_StdEPReq+0x1ce>
 8009dd8:	e097      	b.n	8009f0a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d007      	beq.n	8009df0 <USBD_StdEPReq+0x180>
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
 8009de2:	2b80      	cmp	r3, #128	@ 0x80
 8009de4:	d004      	beq.n	8009df0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009de6:	6839      	ldr	r1, [r7, #0]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fbb5 	bl	800a558 <USBD_CtlError>
                break;
 8009dee:	e091      	b.n	8009f14 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	da0b      	bge.n	8009e10 <USBD_StdEPReq+0x1a0>
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	3310      	adds	r3, #16
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	e00b      	b.n	8009e28 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	4413      	add	r3, r2
 8009e26:	3304      	adds	r3, #4
 8009e28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2202      	movs	r2, #2
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fbf8 	bl	800a62c <USBD_CtlSendData>
              break;
 8009e3c:	e06a      	b.n	8009f14 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	da11      	bge.n	8009e6a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	f003 020f 	and.w	r2, r3, #15
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	3318      	adds	r3, #24
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d117      	bne.n	8009e90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fb78 	bl	800a558 <USBD_CtlError>
                  break;
 8009e68:	e054      	b.n	8009f14 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	f003 020f 	and.w	r2, r3, #15
 8009e70:	6879      	ldr	r1, [r7, #4]
 8009e72:	4613      	mov	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	440b      	add	r3, r1
 8009e7c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d104      	bne.n	8009e90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fb65 	bl	800a558 <USBD_CtlError>
                  break;
 8009e8e:	e041      	b.n	8009f14 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	da0b      	bge.n	8009eb0 <USBD_StdEPReq+0x240>
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	3310      	adds	r3, #16
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	4413      	add	r3, r2
 8009eac:	3304      	adds	r3, #4
 8009eae:	e00b      	b.n	8009ec8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <USBD_StdEPReq+0x266>
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	2b80      	cmp	r3, #128	@ 0x80
 8009ed4:	d103      	bne.n	8009ede <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	e00e      	b.n	8009efc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 ffd2 	bl	800ae8c <USBD_LL_IsStallEP>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d003      	beq.n	8009ef6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	e002      	b.n	8009efc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2202      	movs	r2, #2
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fb92 	bl	800a62c <USBD_CtlSendData>
              break;
 8009f08:	e004      	b.n	8009f14 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fb23 	bl	800a558 <USBD_CtlError>
              break;
 8009f12:	bf00      	nop
          }
          break;
 8009f14:	e004      	b.n	8009f20 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fb1d 	bl	800a558 <USBD_CtlError>
          break;
 8009f1e:	bf00      	nop
      }
      break;
 8009f20:	e004      	b.n	8009f2c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fb17 	bl	800a558 <USBD_CtlError>
      break;
 8009f2a:	bf00      	nop
  }

  return ret;
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f42:	2300      	movs	r3, #0
 8009f44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	885b      	ldrh	r3, [r3, #2]
 8009f52:	0a1b      	lsrs	r3, r3, #8
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	3b01      	subs	r3, #1
 8009f58:	2b06      	cmp	r3, #6
 8009f5a:	f200 8128 	bhi.w	800a1ae <USBD_GetDescriptor+0x276>
 8009f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f64 <USBD_GetDescriptor+0x2c>)
 8009f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f64:	08009f81 	.word	0x08009f81
 8009f68:	08009f99 	.word	0x08009f99
 8009f6c:	08009fd9 	.word	0x08009fd9
 8009f70:	0800a1af 	.word	0x0800a1af
 8009f74:	0800a1af 	.word	0x0800a1af
 8009f78:	0800a14f 	.word	0x0800a14f
 8009f7c:	0800a17b 	.word	0x0800a17b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	7c12      	ldrb	r2, [r2, #16]
 8009f8c:	f107 0108 	add.w	r1, r7, #8
 8009f90:	4610      	mov	r0, r2
 8009f92:	4798      	blx	r3
 8009f94:	60f8      	str	r0, [r7, #12]
      break;
 8009f96:	e112      	b.n	800a1be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	7c1b      	ldrb	r3, [r3, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10d      	bne.n	8009fbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa8:	f107 0208 	add.w	r2, r7, #8
 8009fac:	4610      	mov	r0, r2
 8009fae:	4798      	blx	r3
 8009fb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009fba:	e100      	b.n	800a1be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	f107 0208 	add.w	r2, r7, #8
 8009fc8:	4610      	mov	r0, r2
 8009fca:	4798      	blx	r3
 8009fcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	701a      	strb	r2, [r3, #0]
      break;
 8009fd6:	e0f2      	b.n	800a1be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	885b      	ldrh	r3, [r3, #2]
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b05      	cmp	r3, #5
 8009fe0:	f200 80ac 	bhi.w	800a13c <USBD_GetDescriptor+0x204>
 8009fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8009fec <USBD_GetDescriptor+0xb4>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	0800a005 	.word	0x0800a005
 8009ff0:	0800a039 	.word	0x0800a039
 8009ff4:	0800a06d 	.word	0x0800a06d
 8009ff8:	0800a0a1 	.word	0x0800a0a1
 8009ffc:	0800a0d5 	.word	0x0800a0d5
 800a000:	0800a109 	.word	0x0800a109
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00b      	beq.n	800a028 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	7c12      	ldrb	r2, [r2, #16]
 800a01c:	f107 0108 	add.w	r1, r7, #8
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
 800a024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a026:	e091      	b.n	800a14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fa94 	bl	800a558 <USBD_CtlError>
            err++;
 800a030:	7afb      	ldrb	r3, [r7, #11]
 800a032:	3301      	adds	r3, #1
 800a034:	72fb      	strb	r3, [r7, #11]
          break;
 800a036:	e089      	b.n	800a14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00b      	beq.n	800a05c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	7c12      	ldrb	r2, [r2, #16]
 800a050:	f107 0108 	add.w	r1, r7, #8
 800a054:	4610      	mov	r0, r2
 800a056:	4798      	blx	r3
 800a058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a05a:	e077      	b.n	800a14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fa7a 	bl	800a558 <USBD_CtlError>
            err++;
 800a064:	7afb      	ldrb	r3, [r7, #11]
 800a066:	3301      	adds	r3, #1
 800a068:	72fb      	strb	r3, [r7, #11]
          break;
 800a06a:	e06f      	b.n	800a14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00b      	beq.n	800a090 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	7c12      	ldrb	r2, [r2, #16]
 800a084:	f107 0108 	add.w	r1, r7, #8
 800a088:	4610      	mov	r0, r2
 800a08a:	4798      	blx	r3
 800a08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a08e:	e05d      	b.n	800a14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa60 	bl	800a558 <USBD_CtlError>
            err++;
 800a098:	7afb      	ldrb	r3, [r7, #11]
 800a09a:	3301      	adds	r3, #1
 800a09c:	72fb      	strb	r3, [r7, #11]
          break;
 800a09e:	e055      	b.n	800a14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00b      	beq.n	800a0c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	7c12      	ldrb	r2, [r2, #16]
 800a0b8:	f107 0108 	add.w	r1, r7, #8
 800a0bc:	4610      	mov	r0, r2
 800a0be:	4798      	blx	r3
 800a0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0c2:	e043      	b.n	800a14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fa46 	bl	800a558 <USBD_CtlError>
            err++;
 800a0cc:	7afb      	ldrb	r3, [r7, #11]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0d2:	e03b      	b.n	800a14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00b      	beq.n	800a0f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	7c12      	ldrb	r2, [r2, #16]
 800a0ec:	f107 0108 	add.w	r1, r7, #8
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
 800a0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0f6:	e029      	b.n	800a14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fa2c 	bl	800a558 <USBD_CtlError>
            err++;
 800a100:	7afb      	ldrb	r3, [r7, #11]
 800a102:	3301      	adds	r3, #1
 800a104:	72fb      	strb	r3, [r7, #11]
          break;
 800a106:	e021      	b.n	800a14c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	7c12      	ldrb	r2, [r2, #16]
 800a120:	f107 0108 	add.w	r1, r7, #8
 800a124:	4610      	mov	r0, r2
 800a126:	4798      	blx	r3
 800a128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a12a:	e00f      	b.n	800a14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa12 	bl	800a558 <USBD_CtlError>
            err++;
 800a134:	7afb      	ldrb	r3, [r7, #11]
 800a136:	3301      	adds	r3, #1
 800a138:	72fb      	strb	r3, [r7, #11]
          break;
 800a13a:	e007      	b.n	800a14c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa0a 	bl	800a558 <USBD_CtlError>
          err++;
 800a144:	7afb      	ldrb	r3, [r7, #11]
 800a146:	3301      	adds	r3, #1
 800a148:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a14a:	e038      	b.n	800a1be <USBD_GetDescriptor+0x286>
 800a14c:	e037      	b.n	800a1be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	7c1b      	ldrb	r3, [r3, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d109      	bne.n	800a16a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a15e:	f107 0208 	add.w	r2, r7, #8
 800a162:	4610      	mov	r0, r2
 800a164:	4798      	blx	r3
 800a166:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a168:	e029      	b.n	800a1be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f9f3 	bl	800a558 <USBD_CtlError>
        err++;
 800a172:	7afb      	ldrb	r3, [r7, #11]
 800a174:	3301      	adds	r3, #1
 800a176:	72fb      	strb	r3, [r7, #11]
      break;
 800a178:	e021      	b.n	800a1be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	7c1b      	ldrb	r3, [r3, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10d      	bne.n	800a19e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18a:	f107 0208 	add.w	r2, r7, #8
 800a18e:	4610      	mov	r0, r2
 800a190:	4798      	blx	r3
 800a192:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3301      	adds	r3, #1
 800a198:	2207      	movs	r2, #7
 800a19a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a19c:	e00f      	b.n	800a1be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f9d9 	bl	800a558 <USBD_CtlError>
        err++;
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a1ac:	e007      	b.n	800a1be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f9d1 	bl	800a558 <USBD_CtlError>
      err++;
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a1bc:	bf00      	nop
  }

  if (err != 0U)
 800a1be:	7afb      	ldrb	r3, [r7, #11]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d11c      	bne.n	800a1fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a1c4:	893b      	ldrh	r3, [r7, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d011      	beq.n	800a1ee <USBD_GetDescriptor+0x2b6>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	88db      	ldrh	r3, [r3, #6]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00d      	beq.n	800a1ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	88da      	ldrh	r2, [r3, #6]
 800a1d6:	893b      	ldrh	r3, [r7, #8]
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	bf28      	it	cs
 800a1dc:	4613      	movcs	r3, r2
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1e2:	893b      	ldrh	r3, [r7, #8]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa1f 	bl	800a62c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	88db      	ldrh	r3, [r3, #6]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d104      	bne.n	800a200 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fa76 	bl	800a6e8 <USBD_CtlSendStatus>
 800a1fc:	e000      	b.n	800a200 <USBD_GetDescriptor+0x2c8>
    return;
 800a1fe:	bf00      	nop
    }
  }
}
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop

0800a208 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	889b      	ldrh	r3, [r3, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d130      	bne.n	800a27c <USBD_SetAddress+0x74>
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	88db      	ldrh	r3, [r3, #6]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d12c      	bne.n	800a27c <USBD_SetAddress+0x74>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	885b      	ldrh	r3, [r3, #2]
 800a226:	2b7f      	cmp	r3, #127	@ 0x7f
 800a228:	d828      	bhi.n	800a27c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	885b      	ldrh	r3, [r3, #2]
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a234:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a23c:	2b03      	cmp	r3, #3
 800a23e:	d104      	bne.n	800a24a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f988 	bl	800a558 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a248:	e01d      	b.n	800a286 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	7bfa      	ldrb	r2, [r7, #15]
 800a24e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a252:	7bfb      	ldrb	r3, [r7, #15]
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fe43 	bl	800aee2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fa43 	bl	800a6e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a270:	e009      	b.n	800a286 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a27a:	e004      	b.n	800a286 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f96a 	bl	800a558 <USBD_CtlError>
  }
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
	...

0800a290 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	885b      	ldrh	r3, [r3, #2]
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	4b41      	ldr	r3, [pc, #260]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a2a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2a4:	4b40      	ldr	r3, [pc, #256]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d904      	bls.n	800a2b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f952 	bl	800a558 <USBD_CtlError>
 800a2b4:	e075      	b.n	800a3a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d002      	beq.n	800a2c6 <USBD_SetConfig+0x36>
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d023      	beq.n	800a30c <USBD_SetConfig+0x7c>
 800a2c4:	e062      	b.n	800a38c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a2c6:	4b38      	ldr	r3, [pc, #224]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d01a      	beq.n	800a304 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a2ce:	4b36      	ldr	r3, [pc, #216]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2203      	movs	r2, #3
 800a2dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a2e0:	4b31      	ldr	r3, [pc, #196]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff f9e7 	bl	80096ba <USBD_SetClassConfig>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d104      	bne.n	800a2fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f92f 	bl	800a558 <USBD_CtlError>
            return;
 800a2fa:	e052      	b.n	800a3a2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f9f3 	bl	800a6e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a302:	e04e      	b.n	800a3a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f9ef 	bl	800a6e8 <USBD_CtlSendStatus>
        break;
 800a30a:	e04a      	b.n	800a3a2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a30c:	4b26      	ldr	r3, [pc, #152]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d112      	bne.n	800a33a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a31c:	4b22      	ldr	r3, [pc, #136]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	461a      	mov	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a326:	4b20      	ldr	r3, [pc, #128]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff f9e3 	bl	80096f8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f9d8 	bl	800a6e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a338:	e033      	b.n	800a3a2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a33a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	429a      	cmp	r2, r3
 800a346:	d01d      	beq.n	800a384 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff f9d1 	bl	80096f8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a356:	4b14      	ldr	r3, [pc, #80]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a360:	4b11      	ldr	r3, [pc, #68]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff f9a7 	bl	80096ba <USBD_SetClassConfig>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d104      	bne.n	800a37c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f8ef 	bl	800a558 <USBD_CtlError>
            return;
 800a37a:	e012      	b.n	800a3a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f9b3 	bl	800a6e8 <USBD_CtlSendStatus>
        break;
 800a382:	e00e      	b.n	800a3a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f9af 	bl	800a6e8 <USBD_CtlSendStatus>
        break;
 800a38a:	e00a      	b.n	800a3a2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f8e2 	bl	800a558 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a394:	4b04      	ldr	r3, [pc, #16]	@ (800a3a8 <USBD_SetConfig+0x118>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff f9ac 	bl	80096f8 <USBD_ClrClassConfig>
        break;
 800a3a0:	bf00      	nop
    }
  }
}
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20000578 	.word	0x20000578

0800a3ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	88db      	ldrh	r3, [r3, #6]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d004      	beq.n	800a3c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3be:	6839      	ldr	r1, [r7, #0]
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f8c9 	bl	800a558 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3c6:	e022      	b.n	800a40e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	dc02      	bgt.n	800a3d8 <USBD_GetConfig+0x2c>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	dc03      	bgt.n	800a3de <USBD_GetConfig+0x32>
 800a3d6:	e015      	b.n	800a404 <USBD_GetConfig+0x58>
 800a3d8:	2b03      	cmp	r3, #3
 800a3da:	d00b      	beq.n	800a3f4 <USBD_GetConfig+0x48>
 800a3dc:	e012      	b.n	800a404 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f91d 	bl	800a62c <USBD_CtlSendData>
        break;
 800a3f2:	e00c      	b.n	800a40e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f915 	bl	800a62c <USBD_CtlSendData>
        break;
 800a402:	e004      	b.n	800a40e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f8a6 	bl	800a558 <USBD_CtlError>
        break;
 800a40c:	bf00      	nop
}
 800a40e:	bf00      	nop
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a426:	3b01      	subs	r3, #1
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d81e      	bhi.n	800a46a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	88db      	ldrh	r3, [r3, #6]
 800a430:	2b02      	cmp	r3, #2
 800a432:	d004      	beq.n	800a43e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f88e 	bl	800a558 <USBD_CtlError>
        break;
 800a43c:	e01a      	b.n	800a474 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d005      	beq.n	800a45a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	f043 0202 	orr.w	r2, r3, #2
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	330c      	adds	r3, #12
 800a45e:	2202      	movs	r2, #2
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f8e2 	bl	800a62c <USBD_CtlSendData>
      break;
 800a468:	e004      	b.n	800a474 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f873 	bl	800a558 <USBD_CtlError>
      break;
 800a472:	bf00      	nop
  }
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	885b      	ldrh	r3, [r3, #2]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d106      	bne.n	800a49c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f926 	bl	800a6e8 <USBD_CtlSendStatus>
  }
}
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d80b      	bhi.n	800a4d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	885b      	ldrh	r3, [r3, #2]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d10c      	bne.n	800a4dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f90c 	bl	800a6e8 <USBD_CtlSendStatus>
      }
      break;
 800a4d0:	e004      	b.n	800a4dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f83f 	bl	800a558 <USBD_CtlError>
      break;
 800a4da:	e000      	b.n	800a4de <USBD_ClrFeature+0x3a>
      break;
 800a4dc:	bf00      	nop
  }
}
 800a4de:	bf00      	nop
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	781a      	ldrb	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	785a      	ldrb	r2, [r3, #1]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	3302      	adds	r3, #2
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	3303      	adds	r3, #3
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	021b      	lsls	r3, r3, #8
 800a510:	b29b      	uxth	r3, r3
 800a512:	4413      	add	r3, r2
 800a514:	b29a      	uxth	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	3304      	adds	r3, #4
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	461a      	mov	r2, r3
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	3305      	adds	r3, #5
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	4413      	add	r3, r2
 800a52e:	b29a      	uxth	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	3306      	adds	r3, #6
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	3307      	adds	r3, #7
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	b29b      	uxth	r3, r3
 800a546:	4413      	add	r3, r2
 800a548:	b29a      	uxth	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	80da      	strh	r2, [r3, #6]

}
 800a54e:	bf00      	nop
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	bc80      	pop	{r7}
 800a556:	4770      	bx	lr

0800a558 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a562:	2180      	movs	r1, #128	@ 0x80
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fc53 	bl	800ae10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a56a:	2100      	movs	r1, #0
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fc4f 	bl	800ae10 <USBD_LL_StallEP>
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b086      	sub	sp, #24
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a586:	2300      	movs	r3, #0
 800a588:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d032      	beq.n	800a5f6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 f834 	bl	800a5fe <USBD_GetLen>
 800a596:	4603      	mov	r3, r0
 800a598:	3301      	adds	r3, #1
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	75fa      	strb	r2, [r7, #23]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	7812      	ldrb	r2, [r2, #0]
 800a5b4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	75fa      	strb	r2, [r7, #23]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	2203      	movs	r2, #3
 800a5c4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a5c6:	e012      	b.n	800a5ee <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	60fa      	str	r2, [r7, #12]
 800a5ce:	7dfa      	ldrb	r2, [r7, #23]
 800a5d0:	1c51      	adds	r1, r2, #1
 800a5d2:	75f9      	strb	r1, [r7, #23]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	440a      	add	r2, r1
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	75fa      	strb	r2, [r7, #23]
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1e8      	bne.n	800a5c8 <USBD_GetString+0x4e>
    }
  }
}
 800a5f6:	bf00      	nop
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b085      	sub	sp, #20
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a60a:	e005      	b.n	800a618 <USBD_GetLen+0x1a>
  {
    len++;
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
 800a60e:	3301      	adds	r3, #1
 800a610:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3301      	adds	r3, #1
 800a616:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1f5      	bne.n	800a60c <USBD_GetLen+0xe>
  }

  return len;
 800a620:	7bfb      	ldrb	r3, [r7, #15]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	bc80      	pop	{r7}
 800a62a:	4770      	bx	lr

0800a62c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	4613      	mov	r3, r2
 800a638:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2202      	movs	r2, #2
 800a63e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a642:	88fa      	ldrh	r2, [r7, #6]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a648:	88fa      	ldrh	r2, [r7, #6]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a64e:	88fb      	ldrh	r3, [r7, #6]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	2100      	movs	r1, #0
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 fc63 	bl	800af20 <USBD_LL_Transmit>

  return USBD_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	4613      	mov	r3, r2
 800a670:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a672:	88fb      	ldrh	r3, [r7, #6]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	2100      	movs	r1, #0
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 fc51 	bl	800af20 <USBD_LL_Transmit>

  return USBD_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	4613      	mov	r3, r2
 800a694:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2203      	movs	r2, #3
 800a69a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a69e:	88fa      	ldrh	r2, [r7, #6]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a6a6:	88fa      	ldrh	r2, [r7, #6]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6ae:	88fb      	ldrh	r3, [r7, #6]
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 fc56 	bl	800af66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6d2:	88fb      	ldrh	r3, [r7, #6]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 fc44 	bl	800af66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2204      	movs	r2, #4
 800a6f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fc0e 	bl	800af20 <USBD_LL_Transmit>

  return USBD_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2205      	movs	r2, #5
 800a71a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a71e:	2300      	movs	r3, #0
 800a720:	2200      	movs	r2, #0
 800a722:	2100      	movs	r1, #0
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fc1e 	bl	800af66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a738:	2200      	movs	r2, #0
 800a73a:	4912      	ldr	r1, [pc, #72]	@ (800a784 <MX_USB_DEVICE_Init+0x50>)
 800a73c:	4812      	ldr	r0, [pc, #72]	@ (800a788 <MX_USB_DEVICE_Init+0x54>)
 800a73e:	f7fe ff62 	bl	8009606 <USBD_Init>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a748:	f7f6 ffb8 	bl	80016bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a74c:	490f      	ldr	r1, [pc, #60]	@ (800a78c <MX_USB_DEVICE_Init+0x58>)
 800a74e:	480e      	ldr	r0, [pc, #56]	@ (800a788 <MX_USB_DEVICE_Init+0x54>)
 800a750:	f7fe ff84 	bl	800965c <USBD_RegisterClass>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a75a:	f7f6 ffaf 	bl	80016bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a75e:	490c      	ldr	r1, [pc, #48]	@ (800a790 <MX_USB_DEVICE_Init+0x5c>)
 800a760:	4809      	ldr	r0, [pc, #36]	@ (800a788 <MX_USB_DEVICE_Init+0x54>)
 800a762:	f7fe feb5 	bl	80094d0 <USBD_CDC_RegisterInterface>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a76c:	f7f6 ffa6 	bl	80016bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a770:	4805      	ldr	r0, [pc, #20]	@ (800a788 <MX_USB_DEVICE_Init+0x54>)
 800a772:	f7fe ff8c 	bl	800968e <USBD_Start>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a77c:	f7f6 ff9e 	bl	80016bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a780:	bf00      	nop
 800a782:	bd80      	pop	{r7, pc}
 800a784:	200001bc 	.word	0x200001bc
 800a788:	2000057c 	.word	0x2000057c
 800a78c:	200000a8 	.word	0x200000a8
 800a790:	200001ac 	.word	0x200001ac

0800a794 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a798:	2200      	movs	r2, #0
 800a79a:	4905      	ldr	r1, [pc, #20]	@ (800a7b0 <CDC_Init_FS+0x1c>)
 800a79c:	4805      	ldr	r0, [pc, #20]	@ (800a7b4 <CDC_Init_FS+0x20>)
 800a79e:	f7fe fead 	bl	80094fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7a2:	4905      	ldr	r1, [pc, #20]	@ (800a7b8 <CDC_Init_FS+0x24>)
 800a7a4:	4803      	ldr	r0, [pc, #12]	@ (800a7b4 <CDC_Init_FS+0x20>)
 800a7a6:	f7fe fec2 	bl	800952e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20000c40 	.word	0x20000c40
 800a7b4:	2000057c 	.word	0x2000057c
 800a7b8:	20000840 	.word	0x20000840

0800a7bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bc80      	pop	{r7}
 800a7c8:	4770      	bx	lr
	...

0800a7cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	6039      	str	r1, [r7, #0]
 800a7d6:	71fb      	strb	r3, [r7, #7]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	2b23      	cmp	r3, #35	@ 0x23
 800a7e0:	d84a      	bhi.n	800a878 <CDC_Control_FS+0xac>
 800a7e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e8 <CDC_Control_FS+0x1c>)
 800a7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e8:	0800a879 	.word	0x0800a879
 800a7ec:	0800a879 	.word	0x0800a879
 800a7f0:	0800a879 	.word	0x0800a879
 800a7f4:	0800a879 	.word	0x0800a879
 800a7f8:	0800a879 	.word	0x0800a879
 800a7fc:	0800a879 	.word	0x0800a879
 800a800:	0800a879 	.word	0x0800a879
 800a804:	0800a879 	.word	0x0800a879
 800a808:	0800a879 	.word	0x0800a879
 800a80c:	0800a879 	.word	0x0800a879
 800a810:	0800a879 	.word	0x0800a879
 800a814:	0800a879 	.word	0x0800a879
 800a818:	0800a879 	.word	0x0800a879
 800a81c:	0800a879 	.word	0x0800a879
 800a820:	0800a879 	.word	0x0800a879
 800a824:	0800a879 	.word	0x0800a879
 800a828:	0800a879 	.word	0x0800a879
 800a82c:	0800a879 	.word	0x0800a879
 800a830:	0800a879 	.word	0x0800a879
 800a834:	0800a879 	.word	0x0800a879
 800a838:	0800a879 	.word	0x0800a879
 800a83c:	0800a879 	.word	0x0800a879
 800a840:	0800a879 	.word	0x0800a879
 800a844:	0800a879 	.word	0x0800a879
 800a848:	0800a879 	.word	0x0800a879
 800a84c:	0800a879 	.word	0x0800a879
 800a850:	0800a879 	.word	0x0800a879
 800a854:	0800a879 	.word	0x0800a879
 800a858:	0800a879 	.word	0x0800a879
 800a85c:	0800a879 	.word	0x0800a879
 800a860:	0800a879 	.word	0x0800a879
 800a864:	0800a879 	.word	0x0800a879
 800a868:	0800a879 	.word	0x0800a879
 800a86c:	0800a879 	.word	0x0800a879
 800a870:	0800a879 	.word	0x0800a879
 800a874:	0800a879 	.word	0x0800a879
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a878:	bf00      	nop
  }

  return (USBD_OK);
 800a87a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	bc80      	pop	{r7}
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop

0800a888 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	4805      	ldr	r0, [pc, #20]	@ (800a8ac <CDC_Receive_FS+0x24>)
 800a896:	f7fe fe4a 	bl	800952e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a89a:	4804      	ldr	r0, [pc, #16]	@ (800a8ac <CDC_Receive_FS+0x24>)
 800a89c:	f7fe fe89 	bl	80095b2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a8a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	2000057c 	.word	0x2000057c

0800a8b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a8c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f8 <CDC_Transmit_FS+0x48>)
 800a8c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e00b      	b.n	800a8ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a8d6:	887b      	ldrh	r3, [r7, #2]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	4806      	ldr	r0, [pc, #24]	@ (800a8f8 <CDC_Transmit_FS+0x48>)
 800a8de:	f7fe fe0d 	bl	80094fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a8e2:	4805      	ldr	r0, [pc, #20]	@ (800a8f8 <CDC_Transmit_FS+0x48>)
 800a8e4:	f7fe fe36 	bl	8009554 <USBD_CDC_TransmitPacket>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	2000057c 	.word	0x2000057c

0800a8fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	4603      	mov	r3, r0
 800a904:	6039      	str	r1, [r7, #0]
 800a906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	2212      	movs	r2, #18
 800a90c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a90e:	4b03      	ldr	r3, [pc, #12]	@ (800a91c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	bc80      	pop	{r7}
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	200001d8 	.word	0x200001d8

0800a920 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	4603      	mov	r3, r0
 800a928:	6039      	str	r1, [r7, #0]
 800a92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2204      	movs	r2, #4
 800a930:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a932:	4b03      	ldr	r3, [pc, #12]	@ (800a940 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	bc80      	pop	{r7}
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	200001ec 	.word	0x200001ec

0800a944 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	6039      	str	r1, [r7, #0]
 800a94e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d105      	bne.n	800a962 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	4907      	ldr	r1, [pc, #28]	@ (800a978 <USBD_FS_ProductStrDescriptor+0x34>)
 800a95a:	4808      	ldr	r0, [pc, #32]	@ (800a97c <USBD_FS_ProductStrDescriptor+0x38>)
 800a95c:	f7ff fe0d 	bl	800a57a <USBD_GetString>
 800a960:	e004      	b.n	800a96c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	4904      	ldr	r1, [pc, #16]	@ (800a978 <USBD_FS_ProductStrDescriptor+0x34>)
 800a966:	4805      	ldr	r0, [pc, #20]	@ (800a97c <USBD_FS_ProductStrDescriptor+0x38>)
 800a968:	f7ff fe07 	bl	800a57a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a96c:	4b02      	ldr	r3, [pc, #8]	@ (800a978 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20001040 	.word	0x20001040
 800a97c:	0800e438 	.word	0x0800e438

0800a980 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	6039      	str	r1, [r7, #0]
 800a98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	4904      	ldr	r1, [pc, #16]	@ (800a9a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a990:	4804      	ldr	r0, [pc, #16]	@ (800a9a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a992:	f7ff fdf2 	bl	800a57a <USBD_GetString>
  return USBD_StrDesc;
 800a996:	4b02      	ldr	r3, [pc, #8]	@ (800a9a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20001040 	.word	0x20001040
 800a9a4:	0800e450 	.word	0x0800e450

0800a9a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	6039      	str	r1, [r7, #0]
 800a9b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	221a      	movs	r2, #26
 800a9b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9ba:	f000 f843 	bl	800aa44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a9be:	4b02      	ldr	r3, [pc, #8]	@ (800a9c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	200001f0 	.word	0x200001f0

0800a9cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	6039      	str	r1, [r7, #0]
 800a9d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9d8:	79fb      	ldrb	r3, [r7, #7]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d105      	bne.n	800a9ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	4907      	ldr	r1, [pc, #28]	@ (800aa00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9e2:	4808      	ldr	r0, [pc, #32]	@ (800aa04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9e4:	f7ff fdc9 	bl	800a57a <USBD_GetString>
 800a9e8:	e004      	b.n	800a9f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4904      	ldr	r1, [pc, #16]	@ (800aa00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9ee:	4805      	ldr	r0, [pc, #20]	@ (800aa04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9f0:	f7ff fdc3 	bl	800a57a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9f4:	4b02      	ldr	r3, [pc, #8]	@ (800aa00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20001040 	.word	0x20001040
 800aa04:	0800e464 	.word	0x0800e464

0800aa08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	6039      	str	r1, [r7, #0]
 800aa12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d105      	bne.n	800aa26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	4907      	ldr	r1, [pc, #28]	@ (800aa3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa1e:	4808      	ldr	r0, [pc, #32]	@ (800aa40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa20:	f7ff fdab 	bl	800a57a <USBD_GetString>
 800aa24:	e004      	b.n	800aa30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	4904      	ldr	r1, [pc, #16]	@ (800aa3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa2a:	4805      	ldr	r0, [pc, #20]	@ (800aa40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa2c:	f7ff fda5 	bl	800a57a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa30:	4b02      	ldr	r3, [pc, #8]	@ (800aa3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20001040 	.word	0x20001040
 800aa40:	0800e470 	.word	0x0800e470

0800aa44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa4a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa88 <Get_SerialNum+0x44>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa50:	4b0e      	ldr	r3, [pc, #56]	@ (800aa8c <Get_SerialNum+0x48>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa56:	4b0e      	ldr	r3, [pc, #56]	@ (800aa90 <Get_SerialNum+0x4c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4413      	add	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa6a:	2208      	movs	r2, #8
 800aa6c:	4909      	ldr	r1, [pc, #36]	@ (800aa94 <Get_SerialNum+0x50>)
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f000 f814 	bl	800aa9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa74:	2204      	movs	r2, #4
 800aa76:	4908      	ldr	r1, [pc, #32]	@ (800aa98 <Get_SerialNum+0x54>)
 800aa78:	68b8      	ldr	r0, [r7, #8]
 800aa7a:	f000 f80f 	bl	800aa9c <IntToUnicode>
  }
}
 800aa7e:	bf00      	nop
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	1ffff7e8 	.word	0x1ffff7e8
 800aa8c:	1ffff7ec 	.word	0x1ffff7ec
 800aa90:	1ffff7f0 	.word	0x1ffff7f0
 800aa94:	200001f2 	.word	0x200001f2
 800aa98:	20000202 	.word	0x20000202

0800aa9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]
 800aab2:	e027      	b.n	800ab04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	0f1b      	lsrs	r3, r3, #28
 800aab8:	2b09      	cmp	r3, #9
 800aaba:	d80b      	bhi.n	800aad4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	0f1b      	lsrs	r3, r3, #28
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	4619      	mov	r1, r3
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	440b      	add	r3, r1
 800aacc:	3230      	adds	r2, #48	@ 0x30
 800aace:	b2d2      	uxtb	r2, r2
 800aad0:	701a      	strb	r2, [r3, #0]
 800aad2:	e00a      	b.n	800aaea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	0f1b      	lsrs	r3, r3, #28
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	4619      	mov	r1, r3
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	440b      	add	r3, r1
 800aae4:	3237      	adds	r2, #55	@ 0x37
 800aae6:	b2d2      	uxtb	r2, r2
 800aae8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	011b      	lsls	r3, r3, #4
 800aaee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	4413      	add	r3, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	3301      	adds	r3, #1
 800ab02:	75fb      	strb	r3, [r7, #23]
 800ab04:	7dfa      	ldrb	r2, [r7, #23]
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d3d3      	bcc.n	800aab4 <IntToUnicode+0x18>
  }
}
 800ab0c:	bf00      	nop
 800ab0e:	bf00      	nop
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bc80      	pop	{r7}
 800ab16:	4770      	bx	lr

0800ab18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a0d      	ldr	r2, [pc, #52]	@ (800ab5c <HAL_PCD_MspInit+0x44>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d113      	bne.n	800ab52 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab60 <HAL_PCD_MspInit+0x48>)
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ab60 <HAL_PCD_MspInit+0x48>)
 800ab30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ab34:	61d3      	str	r3, [r2, #28]
 800ab36:	4b0a      	ldr	r3, [pc, #40]	@ (800ab60 <HAL_PCD_MspInit+0x48>)
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab3e:	60fb      	str	r3, [r7, #12]
 800ab40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ab42:	2200      	movs	r2, #0
 800ab44:	2100      	movs	r1, #0
 800ab46:	2014      	movs	r0, #20
 800ab48:	f7f7 fd4d 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ab4c:	2014      	movs	r0, #20
 800ab4e:	f7f7 fd66 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ab52:	bf00      	nop
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	40005c00 	.word	0x40005c00
 800ab60:	40021000 	.word	0x40021000

0800ab64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	f7fe fdcf 	bl	800971e <USBD_LL_SetupStage>
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ab9a:	78fa      	ldrb	r2, [r7, #3]
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	440b      	add	r3, r1
 800aba8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	78fb      	ldrb	r3, [r7, #3]
 800abb0:	4619      	mov	r1, r3
 800abb2:	f7fe fe01 	bl	80097b8 <USBD_LL_DataOutStage>
}
 800abb6:	bf00      	nop
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b082      	sub	sp, #8
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800abd0:	78fa      	ldrb	r2, [r7, #3]
 800abd2:	6879      	ldr	r1, [r7, #4]
 800abd4:	4613      	mov	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4413      	add	r3, r2
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	440b      	add	r3, r1
 800abde:	3324      	adds	r3, #36	@ 0x24
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	78fb      	ldrb	r3, [r7, #3]
 800abe4:	4619      	mov	r1, r3
 800abe6:	f7fe fe58 	bl	800989a <USBD_LL_DataInStage>
}
 800abea:	bf00      	nop
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b082      	sub	sp, #8
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe ff68 	bl	8009ad6 <USBD_LL_SOF>
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac16:	2301      	movs	r3, #1
 800ac18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	799b      	ldrb	r3, [r3, #6]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d001      	beq.n	800ac26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ac22:	f7f6 fd4b 	bl	80016bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac2c:	7bfa      	ldrb	r2, [r7, #15]
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fe ff18 	bl	8009a66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe fed1 	bl	80099e4 <USBD_LL_Reset>
}
 800ac42:	bf00      	nop
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe ff12 	bl	8009a84 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	7a9b      	ldrb	r3, [r3, #10]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d005      	beq.n	800ac74 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac68:	4b04      	ldr	r3, [pc, #16]	@ (800ac7c <HAL_PCD_SuspendCallback+0x30>)
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	4a03      	ldr	r2, [pc, #12]	@ (800ac7c <HAL_PCD_SuspendCallback+0x30>)
 800ac6e:	f043 0306 	orr.w	r3, r3, #6
 800ac72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	e000ed00 	.word	0xe000ed00

0800ac80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe ff0c 	bl	8009aac <USBD_LL_Resume>
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aca4:	4a28      	ldr	r2, [pc, #160]	@ (800ad48 <USBD_LL_Init+0xac>)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a26      	ldr	r2, [pc, #152]	@ (800ad48 <USBD_LL_Init+0xac>)
 800acb0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800acb4:	4b24      	ldr	r3, [pc, #144]	@ (800ad48 <USBD_LL_Init+0xac>)
 800acb6:	4a25      	ldr	r2, [pc, #148]	@ (800ad4c <USBD_LL_Init+0xb0>)
 800acb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800acba:	4b23      	ldr	r3, [pc, #140]	@ (800ad48 <USBD_LL_Init+0xac>)
 800acbc:	2208      	movs	r2, #8
 800acbe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800acc0:	4b21      	ldr	r3, [pc, #132]	@ (800ad48 <USBD_LL_Init+0xac>)
 800acc2:	2202      	movs	r2, #2
 800acc4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800acc6:	4b20      	ldr	r3, [pc, #128]	@ (800ad48 <USBD_LL_Init+0xac>)
 800acc8:	2200      	movs	r2, #0
 800acca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800accc:	4b1e      	ldr	r3, [pc, #120]	@ (800ad48 <USBD_LL_Init+0xac>)
 800acce:	2200      	movs	r2, #0
 800acd0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800acd2:	4b1d      	ldr	r3, [pc, #116]	@ (800ad48 <USBD_LL_Init+0xac>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800acd8:	481b      	ldr	r0, [pc, #108]	@ (800ad48 <USBD_LL_Init+0xac>)
 800acda:	f7f8 febc 	bl	8003a56 <HAL_PCD_Init>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ace4:	f7f6 fcea 	bl	80016bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800acee:	2318      	movs	r3, #24
 800acf0:	2200      	movs	r2, #0
 800acf2:	2100      	movs	r1, #0
 800acf4:	f7fa fbcd 	bl	8005492 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800acfe:	2358      	movs	r3, #88	@ 0x58
 800ad00:	2200      	movs	r2, #0
 800ad02:	2180      	movs	r1, #128	@ 0x80
 800ad04:	f7fa fbc5 	bl	8005492 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad0e:	23c0      	movs	r3, #192	@ 0xc0
 800ad10:	2200      	movs	r2, #0
 800ad12:	2181      	movs	r1, #129	@ 0x81
 800ad14:	f7fa fbbd 	bl	8005492 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad1e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ad22:	2200      	movs	r2, #0
 800ad24:	2101      	movs	r1, #1
 800ad26:	f7fa fbb4 	bl	8005492 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad34:	2200      	movs	r2, #0
 800ad36:	2182      	movs	r1, #130	@ 0x82
 800ad38:	f7fa fbab 	bl	8005492 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20001240 	.word	0x20001240
 800ad4c:	40005c00 	.word	0x40005c00

0800ad50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7f8 ff6b 	bl	8003c42 <HAL_PCD_Start>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 f94e 	bl	800b014 <USBD_Get_USB_Status>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	4608      	mov	r0, r1
 800ad90:	4611      	mov	r1, r2
 800ad92:	461a      	mov	r2, r3
 800ad94:	4603      	mov	r3, r0
 800ad96:	70fb      	strb	r3, [r7, #3]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70bb      	strb	r3, [r7, #2]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800adae:	78bb      	ldrb	r3, [r7, #2]
 800adb0:	883a      	ldrh	r2, [r7, #0]
 800adb2:	78f9      	ldrb	r1, [r7, #3]
 800adb4:	f7f9 f8bf 	bl	8003f36 <HAL_PCD_EP_Open>
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 f928 	bl	800b014 <USBD_Get_USB_Status>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b084      	sub	sp, #16
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	460b      	mov	r3, r1
 800addc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800adec:	78fa      	ldrb	r2, [r7, #3]
 800adee:	4611      	mov	r1, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7f9 f8fd 	bl	8003ff0 <HAL_PCD_EP_Close>
 800adf6:	4603      	mov	r3, r0
 800adf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 f909 	bl	800b014 <USBD_Get_USB_Status>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae2a:	78fa      	ldrb	r2, [r7, #3]
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7f9 f9a5 	bl	800417e <HAL_PCD_EP_SetStall>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 f8ea 	bl	800b014 <USBD_Get_USB_Status>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b084      	sub	sp, #16
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	460b      	mov	r3, r1
 800ae58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae68:	78fa      	ldrb	r2, [r7, #3]
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7f9 f9e6 	bl	800423e <HAL_PCD_EP_ClrStall>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 f8cb 	bl	800b014 <USBD_Get_USB_Status>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	460b      	mov	r3, r1
 800ae96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	da0b      	bge.n	800aec0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aea8:	78fb      	ldrb	r3, [r7, #3]
 800aeaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aeae:	68f9      	ldr	r1, [r7, #12]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4413      	add	r3, r2
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	440b      	add	r3, r1
 800aeba:	3312      	adds	r3, #18
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	e00b      	b.n	800aed8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aec0:	78fb      	ldrb	r3, [r7, #3]
 800aec2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	4613      	mov	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	440b      	add	r3, r1
 800aed2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800aed6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	bc80      	pop	{r7}
 800aee0:	4770      	bx	lr

0800aee2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	460b      	mov	r3, r1
 800aeec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aefc:	78fa      	ldrb	r2, [r7, #3]
 800aefe:	4611      	mov	r1, r2
 800af00:	4618      	mov	r0, r3
 800af02:	f7f8 fff4 	bl	8003eee <HAL_PCD_SetAddress>
 800af06:	4603      	mov	r3, r0
 800af08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 f881 	bl	800b014 <USBD_Get_USB_Status>
 800af12:	4603      	mov	r3, r0
 800af14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af16:	7bbb      	ldrb	r3, [r7, #14]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	607a      	str	r2, [r7, #4]
 800af2a:	461a      	mov	r2, r3
 800af2c:	460b      	mov	r3, r1
 800af2e:	72fb      	strb	r3, [r7, #11]
 800af30:	4613      	mov	r3, r2
 800af32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af42:	893b      	ldrh	r3, [r7, #8]
 800af44:	7af9      	ldrb	r1, [r7, #11]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	f7f9 f8e2 	bl	8004110 <HAL_PCD_EP_Transmit>
 800af4c:	4603      	mov	r3, r0
 800af4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af50:	7dfb      	ldrb	r3, [r7, #23]
 800af52:	4618      	mov	r0, r3
 800af54:	f000 f85e 	bl	800b014 <USBD_Get_USB_Status>
 800af58:	4603      	mov	r3, r0
 800af5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b086      	sub	sp, #24
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	461a      	mov	r2, r3
 800af72:	460b      	mov	r3, r1
 800af74:	72fb      	strb	r3, [r7, #11]
 800af76:	4613      	mov	r3, r2
 800af78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af7e:	2300      	movs	r3, #0
 800af80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af88:	893b      	ldrh	r3, [r7, #8]
 800af8a:	7af9      	ldrb	r1, [r7, #11]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	f7f9 f877 	bl	8004080 <HAL_PCD_EP_Receive>
 800af92:	4603      	mov	r3, r0
 800af94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af96:	7dfb      	ldrb	r3, [r7, #23]
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 f83b 	bl	800b014 <USBD_Get_USB_Status>
 800af9e:	4603      	mov	r3, r0
 800afa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afa2:	7dbb      	ldrb	r3, [r7, #22]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3718      	adds	r7, #24
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800afbe:	78fa      	ldrb	r2, [r7, #3]
 800afc0:	4611      	mov	r1, r2
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7f9 f88d 	bl	80040e2 <HAL_PCD_EP_GetRxCount>
 800afc8:	4603      	mov	r3, r0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800afdc:	4b02      	ldr	r3, [pc, #8]	@ (800afe8 <USBD_static_malloc+0x14>)
}
 800afde:	4618      	mov	r0, r3
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bc80      	pop	{r7}
 800afe6:	4770      	bx	lr
 800afe8:	20001518 	.word	0x20001518

0800afec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]

}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	bc80      	pop	{r7}
 800affc:	4770      	bx	lr

0800affe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800affe:	b480      	push	{r7}
 800b000:	b083      	sub	sp, #12
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	460b      	mov	r3, r1
 800b008:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b00a:	bf00      	nop
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr

0800b014 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4603      	mov	r3, r0
 800b01c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b022:	79fb      	ldrb	r3, [r7, #7]
 800b024:	2b03      	cmp	r3, #3
 800b026:	d817      	bhi.n	800b058 <USBD_Get_USB_Status+0x44>
 800b028:	a201      	add	r2, pc, #4	@ (adr r2, 800b030 <USBD_Get_USB_Status+0x1c>)
 800b02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02e:	bf00      	nop
 800b030:	0800b041 	.word	0x0800b041
 800b034:	0800b047 	.word	0x0800b047
 800b038:	0800b04d 	.word	0x0800b04d
 800b03c:	0800b053 	.word	0x0800b053
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
    break;
 800b044:	e00b      	b.n	800b05e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b046:	2302      	movs	r3, #2
 800b048:	73fb      	strb	r3, [r7, #15]
    break;
 800b04a:	e008      	b.n	800b05e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b04c:	2301      	movs	r3, #1
 800b04e:	73fb      	strb	r3, [r7, #15]
    break;
 800b050:	e005      	b.n	800b05e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b052:	2302      	movs	r3, #2
 800b054:	73fb      	strb	r3, [r7, #15]
    break;
 800b056:	e002      	b.n	800b05e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b058:	2302      	movs	r3, #2
 800b05a:	73fb      	strb	r3, [r7, #15]
    break;
 800b05c:	bf00      	nop
  }
  return usb_status;
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	bc80      	pop	{r7}
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop

0800b06c <__cvt>:
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b072:	461d      	mov	r5, r3
 800b074:	bfbb      	ittet	lt
 800b076:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b07a:	461d      	movlt	r5, r3
 800b07c:	2300      	movge	r3, #0
 800b07e:	232d      	movlt	r3, #45	@ 0x2d
 800b080:	b088      	sub	sp, #32
 800b082:	4614      	mov	r4, r2
 800b084:	bfb8      	it	lt
 800b086:	4614      	movlt	r4, r2
 800b088:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b08a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b08c:	7013      	strb	r3, [r2, #0]
 800b08e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b090:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b094:	f023 0820 	bic.w	r8, r3, #32
 800b098:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b09c:	d005      	beq.n	800b0aa <__cvt+0x3e>
 800b09e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b0a2:	d100      	bne.n	800b0a6 <__cvt+0x3a>
 800b0a4:	3601      	adds	r6, #1
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	e000      	b.n	800b0ac <__cvt+0x40>
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	aa07      	add	r2, sp, #28
 800b0ae:	9204      	str	r2, [sp, #16]
 800b0b0:	aa06      	add	r2, sp, #24
 800b0b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b0b6:	e9cd 3600 	strd	r3, r6, [sp]
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	462b      	mov	r3, r5
 800b0be:	f000 fe83 	bl	800bdc8 <_dtoa_r>
 800b0c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	d119      	bne.n	800b0fe <__cvt+0x92>
 800b0ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b0cc:	07db      	lsls	r3, r3, #31
 800b0ce:	d50e      	bpl.n	800b0ee <__cvt+0x82>
 800b0d0:	eb00 0906 	add.w	r9, r0, r6
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	4620      	mov	r0, r4
 800b0da:	4629      	mov	r1, r5
 800b0dc:	f7f5 fc64 	bl	80009a8 <__aeabi_dcmpeq>
 800b0e0:	b108      	cbz	r0, 800b0e6 <__cvt+0x7a>
 800b0e2:	f8cd 901c 	str.w	r9, [sp, #28]
 800b0e6:	2230      	movs	r2, #48	@ 0x30
 800b0e8:	9b07      	ldr	r3, [sp, #28]
 800b0ea:	454b      	cmp	r3, r9
 800b0ec:	d31e      	bcc.n	800b12c <__cvt+0xc0>
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	9b07      	ldr	r3, [sp, #28]
 800b0f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b0f4:	1bdb      	subs	r3, r3, r7
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	b008      	add	sp, #32
 800b0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b102:	eb00 0906 	add.w	r9, r0, r6
 800b106:	d1e5      	bne.n	800b0d4 <__cvt+0x68>
 800b108:	7803      	ldrb	r3, [r0, #0]
 800b10a:	2b30      	cmp	r3, #48	@ 0x30
 800b10c:	d10a      	bne.n	800b124 <__cvt+0xb8>
 800b10e:	2200      	movs	r2, #0
 800b110:	2300      	movs	r3, #0
 800b112:	4620      	mov	r0, r4
 800b114:	4629      	mov	r1, r5
 800b116:	f7f5 fc47 	bl	80009a8 <__aeabi_dcmpeq>
 800b11a:	b918      	cbnz	r0, 800b124 <__cvt+0xb8>
 800b11c:	f1c6 0601 	rsb	r6, r6, #1
 800b120:	f8ca 6000 	str.w	r6, [sl]
 800b124:	f8da 3000 	ldr.w	r3, [sl]
 800b128:	4499      	add	r9, r3
 800b12a:	e7d3      	b.n	800b0d4 <__cvt+0x68>
 800b12c:	1c59      	adds	r1, r3, #1
 800b12e:	9107      	str	r1, [sp, #28]
 800b130:	701a      	strb	r2, [r3, #0]
 800b132:	e7d9      	b.n	800b0e8 <__cvt+0x7c>

0800b134 <__exponent>:
 800b134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b136:	2900      	cmp	r1, #0
 800b138:	bfb6      	itet	lt
 800b13a:	232d      	movlt	r3, #45	@ 0x2d
 800b13c:	232b      	movge	r3, #43	@ 0x2b
 800b13e:	4249      	neglt	r1, r1
 800b140:	2909      	cmp	r1, #9
 800b142:	7002      	strb	r2, [r0, #0]
 800b144:	7043      	strb	r3, [r0, #1]
 800b146:	dd29      	ble.n	800b19c <__exponent+0x68>
 800b148:	f10d 0307 	add.w	r3, sp, #7
 800b14c:	461d      	mov	r5, r3
 800b14e:	270a      	movs	r7, #10
 800b150:	fbb1 f6f7 	udiv	r6, r1, r7
 800b154:	461a      	mov	r2, r3
 800b156:	fb07 1416 	mls	r4, r7, r6, r1
 800b15a:	3430      	adds	r4, #48	@ 0x30
 800b15c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b160:	460c      	mov	r4, r1
 800b162:	2c63      	cmp	r4, #99	@ 0x63
 800b164:	4631      	mov	r1, r6
 800b166:	f103 33ff 	add.w	r3, r3, #4294967295
 800b16a:	dcf1      	bgt.n	800b150 <__exponent+0x1c>
 800b16c:	3130      	adds	r1, #48	@ 0x30
 800b16e:	1e94      	subs	r4, r2, #2
 800b170:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b174:	4623      	mov	r3, r4
 800b176:	1c41      	adds	r1, r0, #1
 800b178:	42ab      	cmp	r3, r5
 800b17a:	d30a      	bcc.n	800b192 <__exponent+0x5e>
 800b17c:	f10d 0309 	add.w	r3, sp, #9
 800b180:	1a9b      	subs	r3, r3, r2
 800b182:	42ac      	cmp	r4, r5
 800b184:	bf88      	it	hi
 800b186:	2300      	movhi	r3, #0
 800b188:	3302      	adds	r3, #2
 800b18a:	4403      	add	r3, r0
 800b18c:	1a18      	subs	r0, r3, r0
 800b18e:	b003      	add	sp, #12
 800b190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b192:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b196:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b19a:	e7ed      	b.n	800b178 <__exponent+0x44>
 800b19c:	2330      	movs	r3, #48	@ 0x30
 800b19e:	3130      	adds	r1, #48	@ 0x30
 800b1a0:	7083      	strb	r3, [r0, #2]
 800b1a2:	70c1      	strb	r1, [r0, #3]
 800b1a4:	1d03      	adds	r3, r0, #4
 800b1a6:	e7f1      	b.n	800b18c <__exponent+0x58>

0800b1a8 <_printf_float>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	b091      	sub	sp, #68	@ 0x44
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b1b4:	4616      	mov	r6, r2
 800b1b6:	461f      	mov	r7, r3
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	f000 fcf5 	bl	800bba8 <_localeconv_r>
 800b1be:	6803      	ldr	r3, [r0, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	9308      	str	r3, [sp, #32]
 800b1c4:	f7f4 ffc4 	bl	8000150 <strlen>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	930e      	str	r3, [sp, #56]	@ 0x38
 800b1cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1d0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b1d2:	3307      	adds	r3, #7
 800b1d4:	f023 0307 	bic.w	r3, r3, #7
 800b1d8:	f103 0208 	add.w	r2, r3, #8
 800b1dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b1e0:	f8d4 b000 	ldr.w	fp, [r4]
 800b1e4:	f8c8 2000 	str.w	r2, [r8]
 800b1e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b1f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1f2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b202:	4b9c      	ldr	r3, [pc, #624]	@ (800b474 <_printf_float+0x2cc>)
 800b204:	f7f5 fc02 	bl	8000a0c <__aeabi_dcmpun>
 800b208:	bb70      	cbnz	r0, 800b268 <_printf_float+0xc0>
 800b20a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b20e:	f04f 32ff 	mov.w	r2, #4294967295
 800b212:	4b98      	ldr	r3, [pc, #608]	@ (800b474 <_printf_float+0x2cc>)
 800b214:	f7f5 fbdc 	bl	80009d0 <__aeabi_dcmple>
 800b218:	bb30      	cbnz	r0, 800b268 <_printf_float+0xc0>
 800b21a:	2200      	movs	r2, #0
 800b21c:	2300      	movs	r3, #0
 800b21e:	4640      	mov	r0, r8
 800b220:	4649      	mov	r1, r9
 800b222:	f7f5 fbcb 	bl	80009bc <__aeabi_dcmplt>
 800b226:	b110      	cbz	r0, 800b22e <_printf_float+0x86>
 800b228:	232d      	movs	r3, #45	@ 0x2d
 800b22a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b22e:	4a92      	ldr	r2, [pc, #584]	@ (800b478 <_printf_float+0x2d0>)
 800b230:	4b92      	ldr	r3, [pc, #584]	@ (800b47c <_printf_float+0x2d4>)
 800b232:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b236:	bf94      	ite	ls
 800b238:	4690      	movls	r8, r2
 800b23a:	4698      	movhi	r8, r3
 800b23c:	2303      	movs	r3, #3
 800b23e:	f04f 0900 	mov.w	r9, #0
 800b242:	6123      	str	r3, [r4, #16]
 800b244:	f02b 0304 	bic.w	r3, fp, #4
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	4633      	mov	r3, r6
 800b24c:	4621      	mov	r1, r4
 800b24e:	4628      	mov	r0, r5
 800b250:	9700      	str	r7, [sp, #0]
 800b252:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b254:	f000 f9d4 	bl	800b600 <_printf_common>
 800b258:	3001      	adds	r0, #1
 800b25a:	f040 8090 	bne.w	800b37e <_printf_float+0x1d6>
 800b25e:	f04f 30ff 	mov.w	r0, #4294967295
 800b262:	b011      	add	sp, #68	@ 0x44
 800b264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b268:	4642      	mov	r2, r8
 800b26a:	464b      	mov	r3, r9
 800b26c:	4640      	mov	r0, r8
 800b26e:	4649      	mov	r1, r9
 800b270:	f7f5 fbcc 	bl	8000a0c <__aeabi_dcmpun>
 800b274:	b148      	cbz	r0, 800b28a <_printf_float+0xe2>
 800b276:	464b      	mov	r3, r9
 800b278:	2b00      	cmp	r3, #0
 800b27a:	bfb8      	it	lt
 800b27c:	232d      	movlt	r3, #45	@ 0x2d
 800b27e:	4a80      	ldr	r2, [pc, #512]	@ (800b480 <_printf_float+0x2d8>)
 800b280:	bfb8      	it	lt
 800b282:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b286:	4b7f      	ldr	r3, [pc, #508]	@ (800b484 <_printf_float+0x2dc>)
 800b288:	e7d3      	b.n	800b232 <_printf_float+0x8a>
 800b28a:	6863      	ldr	r3, [r4, #4]
 800b28c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	d13f      	bne.n	800b314 <_printf_float+0x16c>
 800b294:	2306      	movs	r3, #6
 800b296:	6063      	str	r3, [r4, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	9206      	str	r2, [sp, #24]
 800b2a2:	aa0e      	add	r2, sp, #56	@ 0x38
 800b2a4:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b2a8:	aa0d      	add	r2, sp, #52	@ 0x34
 800b2aa:	9203      	str	r2, [sp, #12]
 800b2ac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b2b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b2b4:	6863      	ldr	r3, [r4, #4]
 800b2b6:	4642      	mov	r2, r8
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	464b      	mov	r3, r9
 800b2be:	910a      	str	r1, [sp, #40]	@ 0x28
 800b2c0:	f7ff fed4 	bl	800b06c <__cvt>
 800b2c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2c6:	4680      	mov	r8, r0
 800b2c8:	2947      	cmp	r1, #71	@ 0x47
 800b2ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b2cc:	d128      	bne.n	800b320 <_printf_float+0x178>
 800b2ce:	1cc8      	adds	r0, r1, #3
 800b2d0:	db02      	blt.n	800b2d8 <_printf_float+0x130>
 800b2d2:	6863      	ldr	r3, [r4, #4]
 800b2d4:	4299      	cmp	r1, r3
 800b2d6:	dd40      	ble.n	800b35a <_printf_float+0x1b2>
 800b2d8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b2dc:	fa5f fa8a 	uxtb.w	sl, sl
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	3901      	subs	r1, #1
 800b2e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b2e8:	910d      	str	r1, [sp, #52]	@ 0x34
 800b2ea:	f7ff ff23 	bl	800b134 <__exponent>
 800b2ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2f0:	4681      	mov	r9, r0
 800b2f2:	1813      	adds	r3, r2, r0
 800b2f4:	2a01      	cmp	r2, #1
 800b2f6:	6123      	str	r3, [r4, #16]
 800b2f8:	dc02      	bgt.n	800b300 <_printf_float+0x158>
 800b2fa:	6822      	ldr	r2, [r4, #0]
 800b2fc:	07d2      	lsls	r2, r2, #31
 800b2fe:	d501      	bpl.n	800b304 <_printf_float+0x15c>
 800b300:	3301      	adds	r3, #1
 800b302:	6123      	str	r3, [r4, #16]
 800b304:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d09e      	beq.n	800b24a <_printf_float+0xa2>
 800b30c:	232d      	movs	r3, #45	@ 0x2d
 800b30e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b312:	e79a      	b.n	800b24a <_printf_float+0xa2>
 800b314:	2947      	cmp	r1, #71	@ 0x47
 800b316:	d1bf      	bne.n	800b298 <_printf_float+0xf0>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1bd      	bne.n	800b298 <_printf_float+0xf0>
 800b31c:	2301      	movs	r3, #1
 800b31e:	e7ba      	b.n	800b296 <_printf_float+0xee>
 800b320:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b324:	d9dc      	bls.n	800b2e0 <_printf_float+0x138>
 800b326:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b32a:	d118      	bne.n	800b35e <_printf_float+0x1b6>
 800b32c:	2900      	cmp	r1, #0
 800b32e:	6863      	ldr	r3, [r4, #4]
 800b330:	dd0b      	ble.n	800b34a <_printf_float+0x1a2>
 800b332:	6121      	str	r1, [r4, #16]
 800b334:	b913      	cbnz	r3, 800b33c <_printf_float+0x194>
 800b336:	6822      	ldr	r2, [r4, #0]
 800b338:	07d0      	lsls	r0, r2, #31
 800b33a:	d502      	bpl.n	800b342 <_printf_float+0x19a>
 800b33c:	3301      	adds	r3, #1
 800b33e:	440b      	add	r3, r1
 800b340:	6123      	str	r3, [r4, #16]
 800b342:	f04f 0900 	mov.w	r9, #0
 800b346:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b348:	e7dc      	b.n	800b304 <_printf_float+0x15c>
 800b34a:	b913      	cbnz	r3, 800b352 <_printf_float+0x1aa>
 800b34c:	6822      	ldr	r2, [r4, #0]
 800b34e:	07d2      	lsls	r2, r2, #31
 800b350:	d501      	bpl.n	800b356 <_printf_float+0x1ae>
 800b352:	3302      	adds	r3, #2
 800b354:	e7f4      	b.n	800b340 <_printf_float+0x198>
 800b356:	2301      	movs	r3, #1
 800b358:	e7f2      	b.n	800b340 <_printf_float+0x198>
 800b35a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b35e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b360:	4299      	cmp	r1, r3
 800b362:	db05      	blt.n	800b370 <_printf_float+0x1c8>
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	6121      	str	r1, [r4, #16]
 800b368:	07d8      	lsls	r0, r3, #31
 800b36a:	d5ea      	bpl.n	800b342 <_printf_float+0x19a>
 800b36c:	1c4b      	adds	r3, r1, #1
 800b36e:	e7e7      	b.n	800b340 <_printf_float+0x198>
 800b370:	2900      	cmp	r1, #0
 800b372:	bfcc      	ite	gt
 800b374:	2201      	movgt	r2, #1
 800b376:	f1c1 0202 	rsble	r2, r1, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	e7e0      	b.n	800b340 <_printf_float+0x198>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	055a      	lsls	r2, r3, #21
 800b382:	d407      	bmi.n	800b394 <_printf_float+0x1ec>
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	4642      	mov	r2, r8
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	d12b      	bne.n	800b3ea <_printf_float+0x242>
 800b392:	e764      	b.n	800b25e <_printf_float+0xb6>
 800b394:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b398:	f240 80dc 	bls.w	800b554 <_printf_float+0x3ac>
 800b39c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f7f5 fb00 	bl	80009a8 <__aeabi_dcmpeq>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d033      	beq.n	800b414 <_printf_float+0x26c>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	4631      	mov	r1, r6
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	4a35      	ldr	r2, [pc, #212]	@ (800b488 <_printf_float+0x2e0>)
 800b3b4:	47b8      	blx	r7
 800b3b6:	3001      	adds	r0, #1
 800b3b8:	f43f af51 	beq.w	800b25e <_printf_float+0xb6>
 800b3bc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b3c0:	4543      	cmp	r3, r8
 800b3c2:	db02      	blt.n	800b3ca <_printf_float+0x222>
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	07d8      	lsls	r0, r3, #31
 800b3c8:	d50f      	bpl.n	800b3ea <_printf_float+0x242>
 800b3ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	47b8      	blx	r7
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	f43f af42 	beq.w	800b25e <_printf_float+0xb6>
 800b3da:	f04f 0900 	mov.w	r9, #0
 800b3de:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3e2:	f104 0a1a 	add.w	sl, r4, #26
 800b3e6:	45c8      	cmp	r8, r9
 800b3e8:	dc09      	bgt.n	800b3fe <_printf_float+0x256>
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	079b      	lsls	r3, r3, #30
 800b3ee:	f100 8102 	bmi.w	800b5f6 <_printf_float+0x44e>
 800b3f2:	68e0      	ldr	r0, [r4, #12]
 800b3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3f6:	4298      	cmp	r0, r3
 800b3f8:	bfb8      	it	lt
 800b3fa:	4618      	movlt	r0, r3
 800b3fc:	e731      	b.n	800b262 <_printf_float+0xba>
 800b3fe:	2301      	movs	r3, #1
 800b400:	4652      	mov	r2, sl
 800b402:	4631      	mov	r1, r6
 800b404:	4628      	mov	r0, r5
 800b406:	47b8      	blx	r7
 800b408:	3001      	adds	r0, #1
 800b40a:	f43f af28 	beq.w	800b25e <_printf_float+0xb6>
 800b40e:	f109 0901 	add.w	r9, r9, #1
 800b412:	e7e8      	b.n	800b3e6 <_printf_float+0x23e>
 800b414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b416:	2b00      	cmp	r3, #0
 800b418:	dc38      	bgt.n	800b48c <_printf_float+0x2e4>
 800b41a:	2301      	movs	r3, #1
 800b41c:	4631      	mov	r1, r6
 800b41e:	4628      	mov	r0, r5
 800b420:	4a19      	ldr	r2, [pc, #100]	@ (800b488 <_printf_float+0x2e0>)
 800b422:	47b8      	blx	r7
 800b424:	3001      	adds	r0, #1
 800b426:	f43f af1a 	beq.w	800b25e <_printf_float+0xb6>
 800b42a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b42e:	ea59 0303 	orrs.w	r3, r9, r3
 800b432:	d102      	bne.n	800b43a <_printf_float+0x292>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	07d9      	lsls	r1, r3, #31
 800b438:	d5d7      	bpl.n	800b3ea <_printf_float+0x242>
 800b43a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b43e:	4631      	mov	r1, r6
 800b440:	4628      	mov	r0, r5
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	f43f af0a 	beq.w	800b25e <_printf_float+0xb6>
 800b44a:	f04f 0a00 	mov.w	sl, #0
 800b44e:	f104 0b1a 	add.w	fp, r4, #26
 800b452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b454:	425b      	negs	r3, r3
 800b456:	4553      	cmp	r3, sl
 800b458:	dc01      	bgt.n	800b45e <_printf_float+0x2b6>
 800b45a:	464b      	mov	r3, r9
 800b45c:	e793      	b.n	800b386 <_printf_float+0x1de>
 800b45e:	2301      	movs	r3, #1
 800b460:	465a      	mov	r2, fp
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	47b8      	blx	r7
 800b468:	3001      	adds	r0, #1
 800b46a:	f43f aef8 	beq.w	800b25e <_printf_float+0xb6>
 800b46e:	f10a 0a01 	add.w	sl, sl, #1
 800b472:	e7ee      	b.n	800b452 <_printf_float+0x2aa>
 800b474:	7fefffff 	.word	0x7fefffff
 800b478:	0800e4aa 	.word	0x0800e4aa
 800b47c:	0800e4ae 	.word	0x0800e4ae
 800b480:	0800e4b2 	.word	0x0800e4b2
 800b484:	0800e4b6 	.word	0x0800e4b6
 800b488:	0800e4ba 	.word	0x0800e4ba
 800b48c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b48e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b492:	4553      	cmp	r3, sl
 800b494:	bfa8      	it	ge
 800b496:	4653      	movge	r3, sl
 800b498:	2b00      	cmp	r3, #0
 800b49a:	4699      	mov	r9, r3
 800b49c:	dc36      	bgt.n	800b50c <_printf_float+0x364>
 800b49e:	f04f 0b00 	mov.w	fp, #0
 800b4a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4a6:	f104 021a 	add.w	r2, r4, #26
 800b4aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b4ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4ae:	eba3 0309 	sub.w	r3, r3, r9
 800b4b2:	455b      	cmp	r3, fp
 800b4b4:	dc31      	bgt.n	800b51a <_printf_float+0x372>
 800b4b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4b8:	459a      	cmp	sl, r3
 800b4ba:	dc3a      	bgt.n	800b532 <_printf_float+0x38a>
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	07da      	lsls	r2, r3, #31
 800b4c0:	d437      	bmi.n	800b532 <_printf_float+0x38a>
 800b4c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4c4:	ebaa 0903 	sub.w	r9, sl, r3
 800b4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ca:	ebaa 0303 	sub.w	r3, sl, r3
 800b4ce:	4599      	cmp	r9, r3
 800b4d0:	bfa8      	it	ge
 800b4d2:	4699      	movge	r9, r3
 800b4d4:	f1b9 0f00 	cmp.w	r9, #0
 800b4d8:	dc33      	bgt.n	800b542 <_printf_float+0x39a>
 800b4da:	f04f 0800 	mov.w	r8, #0
 800b4de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4e2:	f104 0b1a 	add.w	fp, r4, #26
 800b4e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b4ec:	eba3 0309 	sub.w	r3, r3, r9
 800b4f0:	4543      	cmp	r3, r8
 800b4f2:	f77f af7a 	ble.w	800b3ea <_printf_float+0x242>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	465a      	mov	r2, fp
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47b8      	blx	r7
 800b500:	3001      	adds	r0, #1
 800b502:	f43f aeac 	beq.w	800b25e <_printf_float+0xb6>
 800b506:	f108 0801 	add.w	r8, r8, #1
 800b50a:	e7ec      	b.n	800b4e6 <_printf_float+0x33e>
 800b50c:	4642      	mov	r2, r8
 800b50e:	4631      	mov	r1, r6
 800b510:	4628      	mov	r0, r5
 800b512:	47b8      	blx	r7
 800b514:	3001      	adds	r0, #1
 800b516:	d1c2      	bne.n	800b49e <_printf_float+0x2f6>
 800b518:	e6a1      	b.n	800b25e <_printf_float+0xb6>
 800b51a:	2301      	movs	r3, #1
 800b51c:	4631      	mov	r1, r6
 800b51e:	4628      	mov	r0, r5
 800b520:	920a      	str	r2, [sp, #40]	@ 0x28
 800b522:	47b8      	blx	r7
 800b524:	3001      	adds	r0, #1
 800b526:	f43f ae9a 	beq.w	800b25e <_printf_float+0xb6>
 800b52a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b52c:	f10b 0b01 	add.w	fp, fp, #1
 800b530:	e7bb      	b.n	800b4aa <_printf_float+0x302>
 800b532:	4631      	mov	r1, r6
 800b534:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	d1c0      	bne.n	800b4c2 <_printf_float+0x31a>
 800b540:	e68d      	b.n	800b25e <_printf_float+0xb6>
 800b542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b544:	464b      	mov	r3, r9
 800b546:	4631      	mov	r1, r6
 800b548:	4628      	mov	r0, r5
 800b54a:	4442      	add	r2, r8
 800b54c:	47b8      	blx	r7
 800b54e:	3001      	adds	r0, #1
 800b550:	d1c3      	bne.n	800b4da <_printf_float+0x332>
 800b552:	e684      	b.n	800b25e <_printf_float+0xb6>
 800b554:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b558:	f1ba 0f01 	cmp.w	sl, #1
 800b55c:	dc01      	bgt.n	800b562 <_printf_float+0x3ba>
 800b55e:	07db      	lsls	r3, r3, #31
 800b560:	d536      	bpl.n	800b5d0 <_printf_float+0x428>
 800b562:	2301      	movs	r3, #1
 800b564:	4642      	mov	r2, r8
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	f43f ae76 	beq.w	800b25e <_printf_float+0xb6>
 800b572:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b576:	4631      	mov	r1, r6
 800b578:	4628      	mov	r0, r5
 800b57a:	47b8      	blx	r7
 800b57c:	3001      	adds	r0, #1
 800b57e:	f43f ae6e 	beq.w	800b25e <_printf_float+0xb6>
 800b582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b586:	2200      	movs	r2, #0
 800b588:	2300      	movs	r3, #0
 800b58a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b58e:	f7f5 fa0b 	bl	80009a8 <__aeabi_dcmpeq>
 800b592:	b9c0      	cbnz	r0, 800b5c6 <_printf_float+0x41e>
 800b594:	4653      	mov	r3, sl
 800b596:	f108 0201 	add.w	r2, r8, #1
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	47b8      	blx	r7
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	d10c      	bne.n	800b5be <_printf_float+0x416>
 800b5a4:	e65b      	b.n	800b25e <_printf_float+0xb6>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	465a      	mov	r2, fp
 800b5aa:	4631      	mov	r1, r6
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	47b8      	blx	r7
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	f43f ae54 	beq.w	800b25e <_printf_float+0xb6>
 800b5b6:	f108 0801 	add.w	r8, r8, #1
 800b5ba:	45d0      	cmp	r8, sl
 800b5bc:	dbf3      	blt.n	800b5a6 <_printf_float+0x3fe>
 800b5be:	464b      	mov	r3, r9
 800b5c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b5c4:	e6e0      	b.n	800b388 <_printf_float+0x1e0>
 800b5c6:	f04f 0800 	mov.w	r8, #0
 800b5ca:	f104 0b1a 	add.w	fp, r4, #26
 800b5ce:	e7f4      	b.n	800b5ba <_printf_float+0x412>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	4642      	mov	r2, r8
 800b5d4:	e7e1      	b.n	800b59a <_printf_float+0x3f2>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	464a      	mov	r2, r9
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b8      	blx	r7
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	f43f ae3c 	beq.w	800b25e <_printf_float+0xb6>
 800b5e6:	f108 0801 	add.w	r8, r8, #1
 800b5ea:	68e3      	ldr	r3, [r4, #12]
 800b5ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b5ee:	1a5b      	subs	r3, r3, r1
 800b5f0:	4543      	cmp	r3, r8
 800b5f2:	dcf0      	bgt.n	800b5d6 <_printf_float+0x42e>
 800b5f4:	e6fd      	b.n	800b3f2 <_printf_float+0x24a>
 800b5f6:	f04f 0800 	mov.w	r8, #0
 800b5fa:	f104 0919 	add.w	r9, r4, #25
 800b5fe:	e7f4      	b.n	800b5ea <_printf_float+0x442>

0800b600 <_printf_common>:
 800b600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b604:	4616      	mov	r6, r2
 800b606:	4698      	mov	r8, r3
 800b608:	688a      	ldr	r2, [r1, #8]
 800b60a:	690b      	ldr	r3, [r1, #16]
 800b60c:	4607      	mov	r7, r0
 800b60e:	4293      	cmp	r3, r2
 800b610:	bfb8      	it	lt
 800b612:	4613      	movlt	r3, r2
 800b614:	6033      	str	r3, [r6, #0]
 800b616:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b61a:	460c      	mov	r4, r1
 800b61c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b620:	b10a      	cbz	r2, 800b626 <_printf_common+0x26>
 800b622:	3301      	adds	r3, #1
 800b624:	6033      	str	r3, [r6, #0]
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	0699      	lsls	r1, r3, #26
 800b62a:	bf42      	ittt	mi
 800b62c:	6833      	ldrmi	r3, [r6, #0]
 800b62e:	3302      	addmi	r3, #2
 800b630:	6033      	strmi	r3, [r6, #0]
 800b632:	6825      	ldr	r5, [r4, #0]
 800b634:	f015 0506 	ands.w	r5, r5, #6
 800b638:	d106      	bne.n	800b648 <_printf_common+0x48>
 800b63a:	f104 0a19 	add.w	sl, r4, #25
 800b63e:	68e3      	ldr	r3, [r4, #12]
 800b640:	6832      	ldr	r2, [r6, #0]
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	42ab      	cmp	r3, r5
 800b646:	dc2b      	bgt.n	800b6a0 <_printf_common+0xa0>
 800b648:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b64c:	6822      	ldr	r2, [r4, #0]
 800b64e:	3b00      	subs	r3, #0
 800b650:	bf18      	it	ne
 800b652:	2301      	movne	r3, #1
 800b654:	0692      	lsls	r2, r2, #26
 800b656:	d430      	bmi.n	800b6ba <_printf_common+0xba>
 800b658:	4641      	mov	r1, r8
 800b65a:	4638      	mov	r0, r7
 800b65c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b660:	47c8      	blx	r9
 800b662:	3001      	adds	r0, #1
 800b664:	d023      	beq.n	800b6ae <_printf_common+0xae>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	6922      	ldr	r2, [r4, #16]
 800b66a:	f003 0306 	and.w	r3, r3, #6
 800b66e:	2b04      	cmp	r3, #4
 800b670:	bf14      	ite	ne
 800b672:	2500      	movne	r5, #0
 800b674:	6833      	ldreq	r3, [r6, #0]
 800b676:	f04f 0600 	mov.w	r6, #0
 800b67a:	bf08      	it	eq
 800b67c:	68e5      	ldreq	r5, [r4, #12]
 800b67e:	f104 041a 	add.w	r4, r4, #26
 800b682:	bf08      	it	eq
 800b684:	1aed      	subeq	r5, r5, r3
 800b686:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b68a:	bf08      	it	eq
 800b68c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b690:	4293      	cmp	r3, r2
 800b692:	bfc4      	itt	gt
 800b694:	1a9b      	subgt	r3, r3, r2
 800b696:	18ed      	addgt	r5, r5, r3
 800b698:	42b5      	cmp	r5, r6
 800b69a:	d11a      	bne.n	800b6d2 <_printf_common+0xd2>
 800b69c:	2000      	movs	r0, #0
 800b69e:	e008      	b.n	800b6b2 <_printf_common+0xb2>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	4652      	mov	r2, sl
 800b6a4:	4641      	mov	r1, r8
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	47c8      	blx	r9
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	d103      	bne.n	800b6b6 <_printf_common+0xb6>
 800b6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b6:	3501      	adds	r5, #1
 800b6b8:	e7c1      	b.n	800b63e <_printf_common+0x3e>
 800b6ba:	2030      	movs	r0, #48	@ 0x30
 800b6bc:	18e1      	adds	r1, r4, r3
 800b6be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6c8:	4422      	add	r2, r4
 800b6ca:	3302      	adds	r3, #2
 800b6cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6d0:	e7c2      	b.n	800b658 <_printf_common+0x58>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	4641      	mov	r1, r8
 800b6d8:	4638      	mov	r0, r7
 800b6da:	47c8      	blx	r9
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d0e6      	beq.n	800b6ae <_printf_common+0xae>
 800b6e0:	3601      	adds	r6, #1
 800b6e2:	e7d9      	b.n	800b698 <_printf_common+0x98>

0800b6e4 <_printf_i>:
 800b6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	7e0f      	ldrb	r7, [r1, #24]
 800b6ea:	4691      	mov	r9, r2
 800b6ec:	2f78      	cmp	r7, #120	@ 0x78
 800b6ee:	4680      	mov	r8, r0
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	469a      	mov	sl, r3
 800b6f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6fa:	d807      	bhi.n	800b70c <_printf_i+0x28>
 800b6fc:	2f62      	cmp	r7, #98	@ 0x62
 800b6fe:	d80a      	bhi.n	800b716 <_printf_i+0x32>
 800b700:	2f00      	cmp	r7, #0
 800b702:	f000 80d3 	beq.w	800b8ac <_printf_i+0x1c8>
 800b706:	2f58      	cmp	r7, #88	@ 0x58
 800b708:	f000 80ba 	beq.w	800b880 <_printf_i+0x19c>
 800b70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b714:	e03a      	b.n	800b78c <_printf_i+0xa8>
 800b716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b71a:	2b15      	cmp	r3, #21
 800b71c:	d8f6      	bhi.n	800b70c <_printf_i+0x28>
 800b71e:	a101      	add	r1, pc, #4	@ (adr r1, 800b724 <_printf_i+0x40>)
 800b720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b724:	0800b77d 	.word	0x0800b77d
 800b728:	0800b791 	.word	0x0800b791
 800b72c:	0800b70d 	.word	0x0800b70d
 800b730:	0800b70d 	.word	0x0800b70d
 800b734:	0800b70d 	.word	0x0800b70d
 800b738:	0800b70d 	.word	0x0800b70d
 800b73c:	0800b791 	.word	0x0800b791
 800b740:	0800b70d 	.word	0x0800b70d
 800b744:	0800b70d 	.word	0x0800b70d
 800b748:	0800b70d 	.word	0x0800b70d
 800b74c:	0800b70d 	.word	0x0800b70d
 800b750:	0800b893 	.word	0x0800b893
 800b754:	0800b7bb 	.word	0x0800b7bb
 800b758:	0800b84d 	.word	0x0800b84d
 800b75c:	0800b70d 	.word	0x0800b70d
 800b760:	0800b70d 	.word	0x0800b70d
 800b764:	0800b8b5 	.word	0x0800b8b5
 800b768:	0800b70d 	.word	0x0800b70d
 800b76c:	0800b7bb 	.word	0x0800b7bb
 800b770:	0800b70d 	.word	0x0800b70d
 800b774:	0800b70d 	.word	0x0800b70d
 800b778:	0800b855 	.word	0x0800b855
 800b77c:	6833      	ldr	r3, [r6, #0]
 800b77e:	1d1a      	adds	r2, r3, #4
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6032      	str	r2, [r6, #0]
 800b784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b78c:	2301      	movs	r3, #1
 800b78e:	e09e      	b.n	800b8ce <_printf_i+0x1ea>
 800b790:	6833      	ldr	r3, [r6, #0]
 800b792:	6820      	ldr	r0, [r4, #0]
 800b794:	1d19      	adds	r1, r3, #4
 800b796:	6031      	str	r1, [r6, #0]
 800b798:	0606      	lsls	r6, r0, #24
 800b79a:	d501      	bpl.n	800b7a0 <_printf_i+0xbc>
 800b79c:	681d      	ldr	r5, [r3, #0]
 800b79e:	e003      	b.n	800b7a8 <_printf_i+0xc4>
 800b7a0:	0645      	lsls	r5, r0, #25
 800b7a2:	d5fb      	bpl.n	800b79c <_printf_i+0xb8>
 800b7a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7a8:	2d00      	cmp	r5, #0
 800b7aa:	da03      	bge.n	800b7b4 <_printf_i+0xd0>
 800b7ac:	232d      	movs	r3, #45	@ 0x2d
 800b7ae:	426d      	negs	r5, r5
 800b7b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7b4:	230a      	movs	r3, #10
 800b7b6:	4859      	ldr	r0, [pc, #356]	@ (800b91c <_printf_i+0x238>)
 800b7b8:	e011      	b.n	800b7de <_printf_i+0xfa>
 800b7ba:	6821      	ldr	r1, [r4, #0]
 800b7bc:	6833      	ldr	r3, [r6, #0]
 800b7be:	0608      	lsls	r0, r1, #24
 800b7c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7c4:	d402      	bmi.n	800b7cc <_printf_i+0xe8>
 800b7c6:	0649      	lsls	r1, r1, #25
 800b7c8:	bf48      	it	mi
 800b7ca:	b2ad      	uxthmi	r5, r5
 800b7cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7ce:	6033      	str	r3, [r6, #0]
 800b7d0:	bf14      	ite	ne
 800b7d2:	230a      	movne	r3, #10
 800b7d4:	2308      	moveq	r3, #8
 800b7d6:	4851      	ldr	r0, [pc, #324]	@ (800b91c <_printf_i+0x238>)
 800b7d8:	2100      	movs	r1, #0
 800b7da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7de:	6866      	ldr	r6, [r4, #4]
 800b7e0:	2e00      	cmp	r6, #0
 800b7e2:	bfa8      	it	ge
 800b7e4:	6821      	ldrge	r1, [r4, #0]
 800b7e6:	60a6      	str	r6, [r4, #8]
 800b7e8:	bfa4      	itt	ge
 800b7ea:	f021 0104 	bicge.w	r1, r1, #4
 800b7ee:	6021      	strge	r1, [r4, #0]
 800b7f0:	b90d      	cbnz	r5, 800b7f6 <_printf_i+0x112>
 800b7f2:	2e00      	cmp	r6, #0
 800b7f4:	d04b      	beq.n	800b88e <_printf_i+0x1aa>
 800b7f6:	4616      	mov	r6, r2
 800b7f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7fc:	fb03 5711 	mls	r7, r3, r1, r5
 800b800:	5dc7      	ldrb	r7, [r0, r7]
 800b802:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b806:	462f      	mov	r7, r5
 800b808:	42bb      	cmp	r3, r7
 800b80a:	460d      	mov	r5, r1
 800b80c:	d9f4      	bls.n	800b7f8 <_printf_i+0x114>
 800b80e:	2b08      	cmp	r3, #8
 800b810:	d10b      	bne.n	800b82a <_printf_i+0x146>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	07df      	lsls	r7, r3, #31
 800b816:	d508      	bpl.n	800b82a <_printf_i+0x146>
 800b818:	6923      	ldr	r3, [r4, #16]
 800b81a:	6861      	ldr	r1, [r4, #4]
 800b81c:	4299      	cmp	r1, r3
 800b81e:	bfde      	ittt	le
 800b820:	2330      	movle	r3, #48	@ 0x30
 800b822:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b826:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b82a:	1b92      	subs	r2, r2, r6
 800b82c:	6122      	str	r2, [r4, #16]
 800b82e:	464b      	mov	r3, r9
 800b830:	4621      	mov	r1, r4
 800b832:	4640      	mov	r0, r8
 800b834:	f8cd a000 	str.w	sl, [sp]
 800b838:	aa03      	add	r2, sp, #12
 800b83a:	f7ff fee1 	bl	800b600 <_printf_common>
 800b83e:	3001      	adds	r0, #1
 800b840:	d14a      	bne.n	800b8d8 <_printf_i+0x1f4>
 800b842:	f04f 30ff 	mov.w	r0, #4294967295
 800b846:	b004      	add	sp, #16
 800b848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	f043 0320 	orr.w	r3, r3, #32
 800b852:	6023      	str	r3, [r4, #0]
 800b854:	2778      	movs	r7, #120	@ 0x78
 800b856:	4832      	ldr	r0, [pc, #200]	@ (800b920 <_printf_i+0x23c>)
 800b858:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	6831      	ldr	r1, [r6, #0]
 800b860:	061f      	lsls	r7, r3, #24
 800b862:	f851 5b04 	ldr.w	r5, [r1], #4
 800b866:	d402      	bmi.n	800b86e <_printf_i+0x18a>
 800b868:	065f      	lsls	r7, r3, #25
 800b86a:	bf48      	it	mi
 800b86c:	b2ad      	uxthmi	r5, r5
 800b86e:	6031      	str	r1, [r6, #0]
 800b870:	07d9      	lsls	r1, r3, #31
 800b872:	bf44      	itt	mi
 800b874:	f043 0320 	orrmi.w	r3, r3, #32
 800b878:	6023      	strmi	r3, [r4, #0]
 800b87a:	b11d      	cbz	r5, 800b884 <_printf_i+0x1a0>
 800b87c:	2310      	movs	r3, #16
 800b87e:	e7ab      	b.n	800b7d8 <_printf_i+0xf4>
 800b880:	4826      	ldr	r0, [pc, #152]	@ (800b91c <_printf_i+0x238>)
 800b882:	e7e9      	b.n	800b858 <_printf_i+0x174>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	f023 0320 	bic.w	r3, r3, #32
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	e7f6      	b.n	800b87c <_printf_i+0x198>
 800b88e:	4616      	mov	r6, r2
 800b890:	e7bd      	b.n	800b80e <_printf_i+0x12a>
 800b892:	6833      	ldr	r3, [r6, #0]
 800b894:	6825      	ldr	r5, [r4, #0]
 800b896:	1d18      	adds	r0, r3, #4
 800b898:	6961      	ldr	r1, [r4, #20]
 800b89a:	6030      	str	r0, [r6, #0]
 800b89c:	062e      	lsls	r6, r5, #24
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	d501      	bpl.n	800b8a6 <_printf_i+0x1c2>
 800b8a2:	6019      	str	r1, [r3, #0]
 800b8a4:	e002      	b.n	800b8ac <_printf_i+0x1c8>
 800b8a6:	0668      	lsls	r0, r5, #25
 800b8a8:	d5fb      	bpl.n	800b8a2 <_printf_i+0x1be>
 800b8aa:	8019      	strh	r1, [r3, #0]
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4616      	mov	r6, r2
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	e7bc      	b.n	800b82e <_printf_i+0x14a>
 800b8b4:	6833      	ldr	r3, [r6, #0]
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	1d1a      	adds	r2, r3, #4
 800b8ba:	6032      	str	r2, [r6, #0]
 800b8bc:	681e      	ldr	r6, [r3, #0]
 800b8be:	6862      	ldr	r2, [r4, #4]
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f000 f9e8 	bl	800bc96 <memchr>
 800b8c6:	b108      	cbz	r0, 800b8cc <_printf_i+0x1e8>
 800b8c8:	1b80      	subs	r0, r0, r6
 800b8ca:	6060      	str	r0, [r4, #4]
 800b8cc:	6863      	ldr	r3, [r4, #4]
 800b8ce:	6123      	str	r3, [r4, #16]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8d6:	e7aa      	b.n	800b82e <_printf_i+0x14a>
 800b8d8:	4632      	mov	r2, r6
 800b8da:	4649      	mov	r1, r9
 800b8dc:	4640      	mov	r0, r8
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	47d0      	blx	sl
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	d0ad      	beq.n	800b842 <_printf_i+0x15e>
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	079b      	lsls	r3, r3, #30
 800b8ea:	d413      	bmi.n	800b914 <_printf_i+0x230>
 800b8ec:	68e0      	ldr	r0, [r4, #12]
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	4298      	cmp	r0, r3
 800b8f2:	bfb8      	it	lt
 800b8f4:	4618      	movlt	r0, r3
 800b8f6:	e7a6      	b.n	800b846 <_printf_i+0x162>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	4632      	mov	r2, r6
 800b8fc:	4649      	mov	r1, r9
 800b8fe:	4640      	mov	r0, r8
 800b900:	47d0      	blx	sl
 800b902:	3001      	adds	r0, #1
 800b904:	d09d      	beq.n	800b842 <_printf_i+0x15e>
 800b906:	3501      	adds	r5, #1
 800b908:	68e3      	ldr	r3, [r4, #12]
 800b90a:	9903      	ldr	r1, [sp, #12]
 800b90c:	1a5b      	subs	r3, r3, r1
 800b90e:	42ab      	cmp	r3, r5
 800b910:	dcf2      	bgt.n	800b8f8 <_printf_i+0x214>
 800b912:	e7eb      	b.n	800b8ec <_printf_i+0x208>
 800b914:	2500      	movs	r5, #0
 800b916:	f104 0619 	add.w	r6, r4, #25
 800b91a:	e7f5      	b.n	800b908 <_printf_i+0x224>
 800b91c:	0800e4bc 	.word	0x0800e4bc
 800b920:	0800e4cd 	.word	0x0800e4cd

0800b924 <std>:
 800b924:	2300      	movs	r3, #0
 800b926:	b510      	push	{r4, lr}
 800b928:	4604      	mov	r4, r0
 800b92a:	e9c0 3300 	strd	r3, r3, [r0]
 800b92e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b932:	6083      	str	r3, [r0, #8]
 800b934:	8181      	strh	r1, [r0, #12]
 800b936:	6643      	str	r3, [r0, #100]	@ 0x64
 800b938:	81c2      	strh	r2, [r0, #14]
 800b93a:	6183      	str	r3, [r0, #24]
 800b93c:	4619      	mov	r1, r3
 800b93e:	2208      	movs	r2, #8
 800b940:	305c      	adds	r0, #92	@ 0x5c
 800b942:	f000 f928 	bl	800bb96 <memset>
 800b946:	4b0d      	ldr	r3, [pc, #52]	@ (800b97c <std+0x58>)
 800b948:	6224      	str	r4, [r4, #32]
 800b94a:	6263      	str	r3, [r4, #36]	@ 0x24
 800b94c:	4b0c      	ldr	r3, [pc, #48]	@ (800b980 <std+0x5c>)
 800b94e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b950:	4b0c      	ldr	r3, [pc, #48]	@ (800b984 <std+0x60>)
 800b952:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b954:	4b0c      	ldr	r3, [pc, #48]	@ (800b988 <std+0x64>)
 800b956:	6323      	str	r3, [r4, #48]	@ 0x30
 800b958:	4b0c      	ldr	r3, [pc, #48]	@ (800b98c <std+0x68>)
 800b95a:	429c      	cmp	r4, r3
 800b95c:	d006      	beq.n	800b96c <std+0x48>
 800b95e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b962:	4294      	cmp	r4, r2
 800b964:	d002      	beq.n	800b96c <std+0x48>
 800b966:	33d0      	adds	r3, #208	@ 0xd0
 800b968:	429c      	cmp	r4, r3
 800b96a:	d105      	bne.n	800b978 <std+0x54>
 800b96c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b974:	f000 b98c 	b.w	800bc90 <__retarget_lock_init_recursive>
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	bf00      	nop
 800b97c:	0800bb11 	.word	0x0800bb11
 800b980:	0800bb33 	.word	0x0800bb33
 800b984:	0800bb6b 	.word	0x0800bb6b
 800b988:	0800bb8f 	.word	0x0800bb8f
 800b98c:	20001738 	.word	0x20001738

0800b990 <stdio_exit_handler>:
 800b990:	4a02      	ldr	r2, [pc, #8]	@ (800b99c <stdio_exit_handler+0xc>)
 800b992:	4903      	ldr	r1, [pc, #12]	@ (800b9a0 <stdio_exit_handler+0x10>)
 800b994:	4803      	ldr	r0, [pc, #12]	@ (800b9a4 <stdio_exit_handler+0x14>)
 800b996:	f000 b869 	b.w	800ba6c <_fwalk_sglue>
 800b99a:	bf00      	nop
 800b99c:	2000020c 	.word	0x2000020c
 800b9a0:	0800d605 	.word	0x0800d605
 800b9a4:	2000021c 	.word	0x2000021c

0800b9a8 <cleanup_stdio>:
 800b9a8:	6841      	ldr	r1, [r0, #4]
 800b9aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b9dc <cleanup_stdio+0x34>)
 800b9ac:	b510      	push	{r4, lr}
 800b9ae:	4299      	cmp	r1, r3
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	d001      	beq.n	800b9b8 <cleanup_stdio+0x10>
 800b9b4:	f001 fe26 	bl	800d604 <_fflush_r>
 800b9b8:	68a1      	ldr	r1, [r4, #8]
 800b9ba:	4b09      	ldr	r3, [pc, #36]	@ (800b9e0 <cleanup_stdio+0x38>)
 800b9bc:	4299      	cmp	r1, r3
 800b9be:	d002      	beq.n	800b9c6 <cleanup_stdio+0x1e>
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f001 fe1f 	bl	800d604 <_fflush_r>
 800b9c6:	68e1      	ldr	r1, [r4, #12]
 800b9c8:	4b06      	ldr	r3, [pc, #24]	@ (800b9e4 <cleanup_stdio+0x3c>)
 800b9ca:	4299      	cmp	r1, r3
 800b9cc:	d004      	beq.n	800b9d8 <cleanup_stdio+0x30>
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9d4:	f001 be16 	b.w	800d604 <_fflush_r>
 800b9d8:	bd10      	pop	{r4, pc}
 800b9da:	bf00      	nop
 800b9dc:	20001738 	.word	0x20001738
 800b9e0:	200017a0 	.word	0x200017a0
 800b9e4:	20001808 	.word	0x20001808

0800b9e8 <global_stdio_init.part.0>:
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	4b0b      	ldr	r3, [pc, #44]	@ (800ba18 <global_stdio_init.part.0+0x30>)
 800b9ec:	4c0b      	ldr	r4, [pc, #44]	@ (800ba1c <global_stdio_init.part.0+0x34>)
 800b9ee:	4a0c      	ldr	r2, [pc, #48]	@ (800ba20 <global_stdio_init.part.0+0x38>)
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	2104      	movs	r1, #4
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f7ff ff94 	bl	800b924 <std>
 800b9fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba00:	2201      	movs	r2, #1
 800ba02:	2109      	movs	r1, #9
 800ba04:	f7ff ff8e 	bl	800b924 <std>
 800ba08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba12:	2112      	movs	r1, #18
 800ba14:	f7ff bf86 	b.w	800b924 <std>
 800ba18:	20001870 	.word	0x20001870
 800ba1c:	20001738 	.word	0x20001738
 800ba20:	0800b991 	.word	0x0800b991

0800ba24 <__sfp_lock_acquire>:
 800ba24:	4801      	ldr	r0, [pc, #4]	@ (800ba2c <__sfp_lock_acquire+0x8>)
 800ba26:	f000 b934 	b.w	800bc92 <__retarget_lock_acquire_recursive>
 800ba2a:	bf00      	nop
 800ba2c:	20001879 	.word	0x20001879

0800ba30 <__sfp_lock_release>:
 800ba30:	4801      	ldr	r0, [pc, #4]	@ (800ba38 <__sfp_lock_release+0x8>)
 800ba32:	f000 b92f 	b.w	800bc94 <__retarget_lock_release_recursive>
 800ba36:	bf00      	nop
 800ba38:	20001879 	.word	0x20001879

0800ba3c <__sinit>:
 800ba3c:	b510      	push	{r4, lr}
 800ba3e:	4604      	mov	r4, r0
 800ba40:	f7ff fff0 	bl	800ba24 <__sfp_lock_acquire>
 800ba44:	6a23      	ldr	r3, [r4, #32]
 800ba46:	b11b      	cbz	r3, 800ba50 <__sinit+0x14>
 800ba48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba4c:	f7ff bff0 	b.w	800ba30 <__sfp_lock_release>
 800ba50:	4b04      	ldr	r3, [pc, #16]	@ (800ba64 <__sinit+0x28>)
 800ba52:	6223      	str	r3, [r4, #32]
 800ba54:	4b04      	ldr	r3, [pc, #16]	@ (800ba68 <__sinit+0x2c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1f5      	bne.n	800ba48 <__sinit+0xc>
 800ba5c:	f7ff ffc4 	bl	800b9e8 <global_stdio_init.part.0>
 800ba60:	e7f2      	b.n	800ba48 <__sinit+0xc>
 800ba62:	bf00      	nop
 800ba64:	0800b9a9 	.word	0x0800b9a9
 800ba68:	20001870 	.word	0x20001870

0800ba6c <_fwalk_sglue>:
 800ba6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba70:	4607      	mov	r7, r0
 800ba72:	4688      	mov	r8, r1
 800ba74:	4614      	mov	r4, r2
 800ba76:	2600      	movs	r6, #0
 800ba78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba7c:	f1b9 0901 	subs.w	r9, r9, #1
 800ba80:	d505      	bpl.n	800ba8e <_fwalk_sglue+0x22>
 800ba82:	6824      	ldr	r4, [r4, #0]
 800ba84:	2c00      	cmp	r4, #0
 800ba86:	d1f7      	bne.n	800ba78 <_fwalk_sglue+0xc>
 800ba88:	4630      	mov	r0, r6
 800ba8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba8e:	89ab      	ldrh	r3, [r5, #12]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d907      	bls.n	800baa4 <_fwalk_sglue+0x38>
 800ba94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	d003      	beq.n	800baa4 <_fwalk_sglue+0x38>
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	4638      	mov	r0, r7
 800baa0:	47c0      	blx	r8
 800baa2:	4306      	orrs	r6, r0
 800baa4:	3568      	adds	r5, #104	@ 0x68
 800baa6:	e7e9      	b.n	800ba7c <_fwalk_sglue+0x10>

0800baa8 <sniprintf>:
 800baa8:	b40c      	push	{r2, r3}
 800baaa:	b530      	push	{r4, r5, lr}
 800baac:	4b17      	ldr	r3, [pc, #92]	@ (800bb0c <sniprintf+0x64>)
 800baae:	1e0c      	subs	r4, r1, #0
 800bab0:	681d      	ldr	r5, [r3, #0]
 800bab2:	b09d      	sub	sp, #116	@ 0x74
 800bab4:	da08      	bge.n	800bac8 <sniprintf+0x20>
 800bab6:	238b      	movs	r3, #139	@ 0x8b
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	b01d      	add	sp, #116	@ 0x74
 800bac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac4:	b002      	add	sp, #8
 800bac6:	4770      	bx	lr
 800bac8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bacc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bad0:	bf0c      	ite	eq
 800bad2:	4623      	moveq	r3, r4
 800bad4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	9307      	str	r3, [sp, #28]
 800badc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bae0:	9002      	str	r0, [sp, #8]
 800bae2:	9006      	str	r0, [sp, #24]
 800bae4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bae8:	4628      	mov	r0, r5
 800baea:	ab21      	add	r3, sp, #132	@ 0x84
 800baec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800baee:	a902      	add	r1, sp, #8
 800baf0:	9301      	str	r3, [sp, #4]
 800baf2:	f001 fc0b 	bl	800d30c <_svfiprintf_r>
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	bfbc      	itt	lt
 800bafa:	238b      	movlt	r3, #139	@ 0x8b
 800bafc:	602b      	strlt	r3, [r5, #0]
 800bafe:	2c00      	cmp	r4, #0
 800bb00:	d0dd      	beq.n	800babe <sniprintf+0x16>
 800bb02:	2200      	movs	r2, #0
 800bb04:	9b02      	ldr	r3, [sp, #8]
 800bb06:	701a      	strb	r2, [r3, #0]
 800bb08:	e7d9      	b.n	800babe <sniprintf+0x16>
 800bb0a:	bf00      	nop
 800bb0c:	20000218 	.word	0x20000218

0800bb10 <__sread>:
 800bb10:	b510      	push	{r4, lr}
 800bb12:	460c      	mov	r4, r1
 800bb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb18:	f000 f86c 	bl	800bbf4 <_read_r>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	bfab      	itete	ge
 800bb20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb22:	89a3      	ldrhlt	r3, [r4, #12]
 800bb24:	181b      	addge	r3, r3, r0
 800bb26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb2a:	bfac      	ite	ge
 800bb2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bb2e:	81a3      	strhlt	r3, [r4, #12]
 800bb30:	bd10      	pop	{r4, pc}

0800bb32 <__swrite>:
 800bb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb36:	461f      	mov	r7, r3
 800bb38:	898b      	ldrh	r3, [r1, #12]
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	05db      	lsls	r3, r3, #23
 800bb3e:	460c      	mov	r4, r1
 800bb40:	4616      	mov	r6, r2
 800bb42:	d505      	bpl.n	800bb50 <__swrite+0x1e>
 800bb44:	2302      	movs	r3, #2
 800bb46:	2200      	movs	r2, #0
 800bb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb4c:	f000 f840 	bl	800bbd0 <_lseek_r>
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	4632      	mov	r2, r6
 800bb54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb58:	81a3      	strh	r3, [r4, #12]
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	463b      	mov	r3, r7
 800bb5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb66:	f000 b857 	b.w	800bc18 <_write_r>

0800bb6a <__sseek>:
 800bb6a:	b510      	push	{r4, lr}
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb72:	f000 f82d 	bl	800bbd0 <_lseek_r>
 800bb76:	1c43      	adds	r3, r0, #1
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	bf15      	itete	ne
 800bb7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb86:	81a3      	strheq	r3, [r4, #12]
 800bb88:	bf18      	it	ne
 800bb8a:	81a3      	strhne	r3, [r4, #12]
 800bb8c:	bd10      	pop	{r4, pc}

0800bb8e <__sclose>:
 800bb8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb92:	f000 b80d 	b.w	800bbb0 <_close_r>

0800bb96 <memset>:
 800bb96:	4603      	mov	r3, r0
 800bb98:	4402      	add	r2, r0
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d100      	bne.n	800bba0 <memset+0xa>
 800bb9e:	4770      	bx	lr
 800bba0:	f803 1b01 	strb.w	r1, [r3], #1
 800bba4:	e7f9      	b.n	800bb9a <memset+0x4>
	...

0800bba8 <_localeconv_r>:
 800bba8:	4800      	ldr	r0, [pc, #0]	@ (800bbac <_localeconv_r+0x4>)
 800bbaa:	4770      	bx	lr
 800bbac:	20000358 	.word	0x20000358

0800bbb0 <_close_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	4d05      	ldr	r5, [pc, #20]	@ (800bbcc <_close_r+0x1c>)
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	602b      	str	r3, [r5, #0]
 800bbbc:	f7f6 f9d1 	bl	8001f62 <_close>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_close_r+0x1a>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_close_r+0x1a>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	20001874 	.word	0x20001874

0800bbd0 <_lseek_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	4608      	mov	r0, r1
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	2200      	movs	r2, #0
 800bbda:	4d05      	ldr	r5, [pc, #20]	@ (800bbf0 <_lseek_r+0x20>)
 800bbdc:	602a      	str	r2, [r5, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	f7f6 f9e3 	bl	8001faa <_lseek>
 800bbe4:	1c43      	adds	r3, r0, #1
 800bbe6:	d102      	bne.n	800bbee <_lseek_r+0x1e>
 800bbe8:	682b      	ldr	r3, [r5, #0]
 800bbea:	b103      	cbz	r3, 800bbee <_lseek_r+0x1e>
 800bbec:	6023      	str	r3, [r4, #0]
 800bbee:	bd38      	pop	{r3, r4, r5, pc}
 800bbf0:	20001874 	.word	0x20001874

0800bbf4 <_read_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	4608      	mov	r0, r1
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	4d05      	ldr	r5, [pc, #20]	@ (800bc14 <_read_r+0x20>)
 800bc00:	602a      	str	r2, [r5, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	f7f6 f974 	bl	8001ef0 <_read>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d102      	bne.n	800bc12 <_read_r+0x1e>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	b103      	cbz	r3, 800bc12 <_read_r+0x1e>
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	20001874 	.word	0x20001874

0800bc18 <_write_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	4611      	mov	r1, r2
 800bc20:	2200      	movs	r2, #0
 800bc22:	4d05      	ldr	r5, [pc, #20]	@ (800bc38 <_write_r+0x20>)
 800bc24:	602a      	str	r2, [r5, #0]
 800bc26:	461a      	mov	r2, r3
 800bc28:	f7f6 f97f 	bl	8001f2a <_write>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <_write_r+0x1e>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	b103      	cbz	r3, 800bc36 <_write_r+0x1e>
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	20001874 	.word	0x20001874

0800bc3c <__errno>:
 800bc3c:	4b01      	ldr	r3, [pc, #4]	@ (800bc44 <__errno+0x8>)
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	20000218 	.word	0x20000218

0800bc48 <__libc_init_array>:
 800bc48:	b570      	push	{r4, r5, r6, lr}
 800bc4a:	2600      	movs	r6, #0
 800bc4c:	4d0c      	ldr	r5, [pc, #48]	@ (800bc80 <__libc_init_array+0x38>)
 800bc4e:	4c0d      	ldr	r4, [pc, #52]	@ (800bc84 <__libc_init_array+0x3c>)
 800bc50:	1b64      	subs	r4, r4, r5
 800bc52:	10a4      	asrs	r4, r4, #2
 800bc54:	42a6      	cmp	r6, r4
 800bc56:	d109      	bne.n	800bc6c <__libc_init_array+0x24>
 800bc58:	f002 fbd4 	bl	800e404 <_init>
 800bc5c:	2600      	movs	r6, #0
 800bc5e:	4d0a      	ldr	r5, [pc, #40]	@ (800bc88 <__libc_init_array+0x40>)
 800bc60:	4c0a      	ldr	r4, [pc, #40]	@ (800bc8c <__libc_init_array+0x44>)
 800bc62:	1b64      	subs	r4, r4, r5
 800bc64:	10a4      	asrs	r4, r4, #2
 800bc66:	42a6      	cmp	r6, r4
 800bc68:	d105      	bne.n	800bc76 <__libc_init_array+0x2e>
 800bc6a:	bd70      	pop	{r4, r5, r6, pc}
 800bc6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc70:	4798      	blx	r3
 800bc72:	3601      	adds	r6, #1
 800bc74:	e7ee      	b.n	800bc54 <__libc_init_array+0xc>
 800bc76:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc7a:	4798      	blx	r3
 800bc7c:	3601      	adds	r6, #1
 800bc7e:	e7f2      	b.n	800bc66 <__libc_init_array+0x1e>
 800bc80:	0800e890 	.word	0x0800e890
 800bc84:	0800e890 	.word	0x0800e890
 800bc88:	0800e890 	.word	0x0800e890
 800bc8c:	0800e894 	.word	0x0800e894

0800bc90 <__retarget_lock_init_recursive>:
 800bc90:	4770      	bx	lr

0800bc92 <__retarget_lock_acquire_recursive>:
 800bc92:	4770      	bx	lr

0800bc94 <__retarget_lock_release_recursive>:
 800bc94:	4770      	bx	lr

0800bc96 <memchr>:
 800bc96:	4603      	mov	r3, r0
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	b2c9      	uxtb	r1, r1
 800bc9c:	4402      	add	r2, r0
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	4618      	mov	r0, r3
 800bca2:	d101      	bne.n	800bca8 <memchr+0x12>
 800bca4:	2000      	movs	r0, #0
 800bca6:	e003      	b.n	800bcb0 <memchr+0x1a>
 800bca8:	7804      	ldrb	r4, [r0, #0]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	428c      	cmp	r4, r1
 800bcae:	d1f6      	bne.n	800bc9e <memchr+0x8>
 800bcb0:	bd10      	pop	{r4, pc}

0800bcb2 <quorem>:
 800bcb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb6:	6903      	ldr	r3, [r0, #16]
 800bcb8:	690c      	ldr	r4, [r1, #16]
 800bcba:	4607      	mov	r7, r0
 800bcbc:	42a3      	cmp	r3, r4
 800bcbe:	db7e      	blt.n	800bdbe <quorem+0x10c>
 800bcc0:	3c01      	subs	r4, #1
 800bcc2:	00a3      	lsls	r3, r4, #2
 800bcc4:	f100 0514 	add.w	r5, r0, #20
 800bcc8:	f101 0814 	add.w	r8, r1, #20
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	429a      	cmp	r2, r3
 800bce0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bce8:	d32e      	bcc.n	800bd48 <quorem+0x96>
 800bcea:	f04f 0a00 	mov.w	sl, #0
 800bcee:	46c4      	mov	ip, r8
 800bcf0:	46ae      	mov	lr, r5
 800bcf2:	46d3      	mov	fp, sl
 800bcf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bcf8:	b298      	uxth	r0, r3
 800bcfa:	fb06 a000 	mla	r0, r6, r0, sl
 800bcfe:	0c1b      	lsrs	r3, r3, #16
 800bd00:	0c02      	lsrs	r2, r0, #16
 800bd02:	fb06 2303 	mla	r3, r6, r3, r2
 800bd06:	f8de 2000 	ldr.w	r2, [lr]
 800bd0a:	b280      	uxth	r0, r0
 800bd0c:	b292      	uxth	r2, r2
 800bd0e:	1a12      	subs	r2, r2, r0
 800bd10:	445a      	add	r2, fp
 800bd12:	f8de 0000 	ldr.w	r0, [lr]
 800bd16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd24:	b292      	uxth	r2, r2
 800bd26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd2a:	45e1      	cmp	r9, ip
 800bd2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bd30:	f84e 2b04 	str.w	r2, [lr], #4
 800bd34:	d2de      	bcs.n	800bcf4 <quorem+0x42>
 800bd36:	9b00      	ldr	r3, [sp, #0]
 800bd38:	58eb      	ldr	r3, [r5, r3]
 800bd3a:	b92b      	cbnz	r3, 800bd48 <quorem+0x96>
 800bd3c:	9b01      	ldr	r3, [sp, #4]
 800bd3e:	3b04      	subs	r3, #4
 800bd40:	429d      	cmp	r5, r3
 800bd42:	461a      	mov	r2, r3
 800bd44:	d32f      	bcc.n	800bda6 <quorem+0xf4>
 800bd46:	613c      	str	r4, [r7, #16]
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f001 f97b 	bl	800d044 <__mcmp>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	db25      	blt.n	800bd9e <quorem+0xec>
 800bd52:	4629      	mov	r1, r5
 800bd54:	2000      	movs	r0, #0
 800bd56:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd5a:	f8d1 c000 	ldr.w	ip, [r1]
 800bd5e:	fa1f fe82 	uxth.w	lr, r2
 800bd62:	fa1f f38c 	uxth.w	r3, ip
 800bd66:	eba3 030e 	sub.w	r3, r3, lr
 800bd6a:	4403      	add	r3, r0
 800bd6c:	0c12      	lsrs	r2, r2, #16
 800bd6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd7c:	45c1      	cmp	r9, r8
 800bd7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd82:	f841 3b04 	str.w	r3, [r1], #4
 800bd86:	d2e6      	bcs.n	800bd56 <quorem+0xa4>
 800bd88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd90:	b922      	cbnz	r2, 800bd9c <quorem+0xea>
 800bd92:	3b04      	subs	r3, #4
 800bd94:	429d      	cmp	r5, r3
 800bd96:	461a      	mov	r2, r3
 800bd98:	d30b      	bcc.n	800bdb2 <quorem+0x100>
 800bd9a:	613c      	str	r4, [r7, #16]
 800bd9c:	3601      	adds	r6, #1
 800bd9e:	4630      	mov	r0, r6
 800bda0:	b003      	add	sp, #12
 800bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	6812      	ldr	r2, [r2, #0]
 800bda8:	3b04      	subs	r3, #4
 800bdaa:	2a00      	cmp	r2, #0
 800bdac:	d1cb      	bne.n	800bd46 <quorem+0x94>
 800bdae:	3c01      	subs	r4, #1
 800bdb0:	e7c6      	b.n	800bd40 <quorem+0x8e>
 800bdb2:	6812      	ldr	r2, [r2, #0]
 800bdb4:	3b04      	subs	r3, #4
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	d1ef      	bne.n	800bd9a <quorem+0xe8>
 800bdba:	3c01      	subs	r4, #1
 800bdbc:	e7ea      	b.n	800bd94 <quorem+0xe2>
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	e7ee      	b.n	800bda0 <quorem+0xee>
 800bdc2:	0000      	movs	r0, r0
 800bdc4:	0000      	movs	r0, r0
	...

0800bdc8 <_dtoa_r>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	4614      	mov	r4, r2
 800bdce:	461d      	mov	r5, r3
 800bdd0:	69c7      	ldr	r7, [r0, #28]
 800bdd2:	b097      	sub	sp, #92	@ 0x5c
 800bdd4:	4683      	mov	fp, r0
 800bdd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bdda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bddc:	b97f      	cbnz	r7, 800bdfe <_dtoa_r+0x36>
 800bdde:	2010      	movs	r0, #16
 800bde0:	f000 fe02 	bl	800c9e8 <malloc>
 800bde4:	4602      	mov	r2, r0
 800bde6:	f8cb 001c 	str.w	r0, [fp, #28]
 800bdea:	b920      	cbnz	r0, 800bdf6 <_dtoa_r+0x2e>
 800bdec:	21ef      	movs	r1, #239	@ 0xef
 800bdee:	4ba8      	ldr	r3, [pc, #672]	@ (800c090 <_dtoa_r+0x2c8>)
 800bdf0:	48a8      	ldr	r0, [pc, #672]	@ (800c094 <_dtoa_r+0x2cc>)
 800bdf2:	f001 fc67 	bl	800d6c4 <__assert_func>
 800bdf6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bdfa:	6007      	str	r7, [r0, #0]
 800bdfc:	60c7      	str	r7, [r0, #12]
 800bdfe:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be02:	6819      	ldr	r1, [r3, #0]
 800be04:	b159      	cbz	r1, 800be1e <_dtoa_r+0x56>
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	2301      	movs	r3, #1
 800be0a:	4093      	lsls	r3, r2
 800be0c:	604a      	str	r2, [r1, #4]
 800be0e:	608b      	str	r3, [r1, #8]
 800be10:	4658      	mov	r0, fp
 800be12:	f000 fedf 	bl	800cbd4 <_Bfree>
 800be16:	2200      	movs	r2, #0
 800be18:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	1e2b      	subs	r3, r5, #0
 800be20:	bfaf      	iteee	ge
 800be22:	2300      	movge	r3, #0
 800be24:	2201      	movlt	r2, #1
 800be26:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be2a:	9303      	strlt	r3, [sp, #12]
 800be2c:	bfa8      	it	ge
 800be2e:	6033      	strge	r3, [r6, #0]
 800be30:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800be34:	4b98      	ldr	r3, [pc, #608]	@ (800c098 <_dtoa_r+0x2d0>)
 800be36:	bfb8      	it	lt
 800be38:	6032      	strlt	r2, [r6, #0]
 800be3a:	ea33 0308 	bics.w	r3, r3, r8
 800be3e:	d112      	bne.n	800be66 <_dtoa_r+0x9e>
 800be40:	f242 730f 	movw	r3, #9999	@ 0x270f
 800be44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800be4c:	4323      	orrs	r3, r4
 800be4e:	f000 8550 	beq.w	800c8f2 <_dtoa_r+0xb2a>
 800be52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800be54:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c09c <_dtoa_r+0x2d4>
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 8552 	beq.w	800c902 <_dtoa_r+0xb3a>
 800be5e:	f10a 0303 	add.w	r3, sl, #3
 800be62:	f000 bd4c 	b.w	800c8fe <_dtoa_r+0xb36>
 800be66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be72:	2200      	movs	r2, #0
 800be74:	2300      	movs	r3, #0
 800be76:	f7f4 fd97 	bl	80009a8 <__aeabi_dcmpeq>
 800be7a:	4607      	mov	r7, r0
 800be7c:	b158      	cbz	r0, 800be96 <_dtoa_r+0xce>
 800be7e:	2301      	movs	r3, #1
 800be80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800be82:	6013      	str	r3, [r2, #0]
 800be84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800be86:	b113      	cbz	r3, 800be8e <_dtoa_r+0xc6>
 800be88:	4b85      	ldr	r3, [pc, #532]	@ (800c0a0 <_dtoa_r+0x2d8>)
 800be8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800be8c:	6013      	str	r3, [r2, #0]
 800be8e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c0a4 <_dtoa_r+0x2dc>
 800be92:	f000 bd36 	b.w	800c902 <_dtoa_r+0xb3a>
 800be96:	ab14      	add	r3, sp, #80	@ 0x50
 800be98:	9301      	str	r3, [sp, #4]
 800be9a:	ab15      	add	r3, sp, #84	@ 0x54
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	4658      	mov	r0, fp
 800bea0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bea4:	f001 f97e 	bl	800d1a4 <__d2b>
 800bea8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800beac:	4681      	mov	r9, r0
 800beae:	2e00      	cmp	r6, #0
 800beb0:	d077      	beq.n	800bfa2 <_dtoa_r+0x1da>
 800beb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800beb8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bec0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bec4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bec8:	9712      	str	r7, [sp, #72]	@ 0x48
 800beca:	4619      	mov	r1, r3
 800becc:	2200      	movs	r2, #0
 800bece:	4b76      	ldr	r3, [pc, #472]	@ (800c0a8 <_dtoa_r+0x2e0>)
 800bed0:	f7f4 f94a 	bl	8000168 <__aeabi_dsub>
 800bed4:	a368      	add	r3, pc, #416	@ (adr r3, 800c078 <_dtoa_r+0x2b0>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	f7f4 fafd 	bl	80004d8 <__aeabi_dmul>
 800bede:	a368      	add	r3, pc, #416	@ (adr r3, 800c080 <_dtoa_r+0x2b8>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	f7f4 f942 	bl	800016c <__adddf3>
 800bee8:	4604      	mov	r4, r0
 800beea:	4630      	mov	r0, r6
 800beec:	460d      	mov	r5, r1
 800beee:	f7f4 fa89 	bl	8000404 <__aeabi_i2d>
 800bef2:	a365      	add	r3, pc, #404	@ (adr r3, 800c088 <_dtoa_r+0x2c0>)
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	f7f4 faee 	bl	80004d8 <__aeabi_dmul>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	4620      	mov	r0, r4
 800bf02:	4629      	mov	r1, r5
 800bf04:	f7f4 f932 	bl	800016c <__adddf3>
 800bf08:	4604      	mov	r4, r0
 800bf0a:	460d      	mov	r5, r1
 800bf0c:	f7f4 fd94 	bl	8000a38 <__aeabi_d2iz>
 800bf10:	2200      	movs	r2, #0
 800bf12:	4607      	mov	r7, r0
 800bf14:	2300      	movs	r3, #0
 800bf16:	4620      	mov	r0, r4
 800bf18:	4629      	mov	r1, r5
 800bf1a:	f7f4 fd4f 	bl	80009bc <__aeabi_dcmplt>
 800bf1e:	b140      	cbz	r0, 800bf32 <_dtoa_r+0x16a>
 800bf20:	4638      	mov	r0, r7
 800bf22:	f7f4 fa6f 	bl	8000404 <__aeabi_i2d>
 800bf26:	4622      	mov	r2, r4
 800bf28:	462b      	mov	r3, r5
 800bf2a:	f7f4 fd3d 	bl	80009a8 <__aeabi_dcmpeq>
 800bf2e:	b900      	cbnz	r0, 800bf32 <_dtoa_r+0x16a>
 800bf30:	3f01      	subs	r7, #1
 800bf32:	2f16      	cmp	r7, #22
 800bf34:	d853      	bhi.n	800bfde <_dtoa_r+0x216>
 800bf36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf3a:	4b5c      	ldr	r3, [pc, #368]	@ (800c0ac <_dtoa_r+0x2e4>)
 800bf3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	f7f4 fd3a 	bl	80009bc <__aeabi_dcmplt>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d04a      	beq.n	800bfe2 <_dtoa_r+0x21a>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	3f01      	subs	r7, #1
 800bf50:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bf54:	1b9b      	subs	r3, r3, r6
 800bf56:	1e5a      	subs	r2, r3, #1
 800bf58:	bf46      	itte	mi
 800bf5a:	f1c3 0801 	rsbmi	r8, r3, #1
 800bf5e:	2300      	movmi	r3, #0
 800bf60:	f04f 0800 	movpl.w	r8, #0
 800bf64:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf66:	bf48      	it	mi
 800bf68:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bf6a:	2f00      	cmp	r7, #0
 800bf6c:	db3b      	blt.n	800bfe6 <_dtoa_r+0x21e>
 800bf6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf70:	970e      	str	r7, [sp, #56]	@ 0x38
 800bf72:	443b      	add	r3, r7
 800bf74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf76:	2300      	movs	r3, #0
 800bf78:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf7c:	2b09      	cmp	r3, #9
 800bf7e:	d866      	bhi.n	800c04e <_dtoa_r+0x286>
 800bf80:	2b05      	cmp	r3, #5
 800bf82:	bfc4      	itt	gt
 800bf84:	3b04      	subgt	r3, #4
 800bf86:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bf88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf8a:	bfc8      	it	gt
 800bf8c:	2400      	movgt	r4, #0
 800bf8e:	f1a3 0302 	sub.w	r3, r3, #2
 800bf92:	bfd8      	it	le
 800bf94:	2401      	movle	r4, #1
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d864      	bhi.n	800c064 <_dtoa_r+0x29c>
 800bf9a:	e8df f003 	tbb	[pc, r3]
 800bf9e:	382b      	.short	0x382b
 800bfa0:	5636      	.short	0x5636
 800bfa2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bfa6:	441e      	add	r6, r3
 800bfa8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	bfc1      	itttt	gt
 800bfb0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bfb4:	fa08 f803 	lslgt.w	r8, r8, r3
 800bfb8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bfbc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bfc0:	bfd6      	itet	le
 800bfc2:	f1c3 0320 	rsble	r3, r3, #32
 800bfc6:	ea48 0003 	orrgt.w	r0, r8, r3
 800bfca:	fa04 f003 	lslle.w	r0, r4, r3
 800bfce:	f7f4 fa09 	bl	80003e4 <__aeabi_ui2d>
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bfd8:	3e01      	subs	r6, #1
 800bfda:	9212      	str	r2, [sp, #72]	@ 0x48
 800bfdc:	e775      	b.n	800beca <_dtoa_r+0x102>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e7b6      	b.n	800bf50 <_dtoa_r+0x188>
 800bfe2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bfe4:	e7b5      	b.n	800bf52 <_dtoa_r+0x18a>
 800bfe6:	427b      	negs	r3, r7
 800bfe8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfea:	2300      	movs	r3, #0
 800bfec:	eba8 0807 	sub.w	r8, r8, r7
 800bff0:	930e      	str	r3, [sp, #56]	@ 0x38
 800bff2:	e7c2      	b.n	800bf7a <_dtoa_r+0x1b2>
 800bff4:	2300      	movs	r3, #0
 800bff6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bff8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	dc35      	bgt.n	800c06a <_dtoa_r+0x2a2>
 800bffe:	2301      	movs	r3, #1
 800c000:	461a      	mov	r2, r3
 800c002:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c006:	9221      	str	r2, [sp, #132]	@ 0x84
 800c008:	e00b      	b.n	800c022 <_dtoa_r+0x25a>
 800c00a:	2301      	movs	r3, #1
 800c00c:	e7f3      	b.n	800bff6 <_dtoa_r+0x22e>
 800c00e:	2300      	movs	r3, #0
 800c010:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c012:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c014:	18fb      	adds	r3, r7, r3
 800c016:	9308      	str	r3, [sp, #32]
 800c018:	3301      	adds	r3, #1
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	9307      	str	r3, [sp, #28]
 800c01e:	bfb8      	it	lt
 800c020:	2301      	movlt	r3, #1
 800c022:	2100      	movs	r1, #0
 800c024:	2204      	movs	r2, #4
 800c026:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c02a:	f102 0514 	add.w	r5, r2, #20
 800c02e:	429d      	cmp	r5, r3
 800c030:	d91f      	bls.n	800c072 <_dtoa_r+0x2aa>
 800c032:	6041      	str	r1, [r0, #4]
 800c034:	4658      	mov	r0, fp
 800c036:	f000 fd8d 	bl	800cb54 <_Balloc>
 800c03a:	4682      	mov	sl, r0
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d139      	bne.n	800c0b4 <_dtoa_r+0x2ec>
 800c040:	4602      	mov	r2, r0
 800c042:	f240 11af 	movw	r1, #431	@ 0x1af
 800c046:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b0 <_dtoa_r+0x2e8>)
 800c048:	e6d2      	b.n	800bdf0 <_dtoa_r+0x28>
 800c04a:	2301      	movs	r3, #1
 800c04c:	e7e0      	b.n	800c010 <_dtoa_r+0x248>
 800c04e:	2401      	movs	r4, #1
 800c050:	2300      	movs	r3, #0
 800c052:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c054:	9320      	str	r3, [sp, #128]	@ 0x80
 800c056:	f04f 33ff 	mov.w	r3, #4294967295
 800c05a:	2200      	movs	r2, #0
 800c05c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c060:	2312      	movs	r3, #18
 800c062:	e7d0      	b.n	800c006 <_dtoa_r+0x23e>
 800c064:	2301      	movs	r3, #1
 800c066:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c068:	e7f5      	b.n	800c056 <_dtoa_r+0x28e>
 800c06a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c06c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c070:	e7d7      	b.n	800c022 <_dtoa_r+0x25a>
 800c072:	3101      	adds	r1, #1
 800c074:	0052      	lsls	r2, r2, #1
 800c076:	e7d8      	b.n	800c02a <_dtoa_r+0x262>
 800c078:	636f4361 	.word	0x636f4361
 800c07c:	3fd287a7 	.word	0x3fd287a7
 800c080:	8b60c8b3 	.word	0x8b60c8b3
 800c084:	3fc68a28 	.word	0x3fc68a28
 800c088:	509f79fb 	.word	0x509f79fb
 800c08c:	3fd34413 	.word	0x3fd34413
 800c090:	0800e4eb 	.word	0x0800e4eb
 800c094:	0800e502 	.word	0x0800e502
 800c098:	7ff00000 	.word	0x7ff00000
 800c09c:	0800e4e7 	.word	0x0800e4e7
 800c0a0:	0800e4bb 	.word	0x0800e4bb
 800c0a4:	0800e4ba 	.word	0x0800e4ba
 800c0a8:	3ff80000 	.word	0x3ff80000
 800c0ac:	0800e5f8 	.word	0x0800e5f8
 800c0b0:	0800e55a 	.word	0x0800e55a
 800c0b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0b8:	6018      	str	r0, [r3, #0]
 800c0ba:	9b07      	ldr	r3, [sp, #28]
 800c0bc:	2b0e      	cmp	r3, #14
 800c0be:	f200 80a4 	bhi.w	800c20a <_dtoa_r+0x442>
 800c0c2:	2c00      	cmp	r4, #0
 800c0c4:	f000 80a1 	beq.w	800c20a <_dtoa_r+0x442>
 800c0c8:	2f00      	cmp	r7, #0
 800c0ca:	dd33      	ble.n	800c134 <_dtoa_r+0x36c>
 800c0cc:	4b86      	ldr	r3, [pc, #536]	@ (800c2e8 <_dtoa_r+0x520>)
 800c0ce:	f007 020f 	and.w	r2, r7, #15
 800c0d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0d6:	05f8      	lsls	r0, r7, #23
 800c0d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c0e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c0e4:	d516      	bpl.n	800c114 <_dtoa_r+0x34c>
 800c0e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0ea:	4b80      	ldr	r3, [pc, #512]	@ (800c2ec <_dtoa_r+0x524>)
 800c0ec:	2603      	movs	r6, #3
 800c0ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0f2:	f7f4 fb1b 	bl	800072c <__aeabi_ddiv>
 800c0f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0fa:	f004 040f 	and.w	r4, r4, #15
 800c0fe:	4d7b      	ldr	r5, [pc, #492]	@ (800c2ec <_dtoa_r+0x524>)
 800c100:	b954      	cbnz	r4, 800c118 <_dtoa_r+0x350>
 800c102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c10a:	f7f4 fb0f 	bl	800072c <__aeabi_ddiv>
 800c10e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c112:	e028      	b.n	800c166 <_dtoa_r+0x39e>
 800c114:	2602      	movs	r6, #2
 800c116:	e7f2      	b.n	800c0fe <_dtoa_r+0x336>
 800c118:	07e1      	lsls	r1, r4, #31
 800c11a:	d508      	bpl.n	800c12e <_dtoa_r+0x366>
 800c11c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c120:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c124:	f7f4 f9d8 	bl	80004d8 <__aeabi_dmul>
 800c128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c12c:	3601      	adds	r6, #1
 800c12e:	1064      	asrs	r4, r4, #1
 800c130:	3508      	adds	r5, #8
 800c132:	e7e5      	b.n	800c100 <_dtoa_r+0x338>
 800c134:	f000 80d2 	beq.w	800c2dc <_dtoa_r+0x514>
 800c138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c13c:	427c      	negs	r4, r7
 800c13e:	4b6a      	ldr	r3, [pc, #424]	@ (800c2e8 <_dtoa_r+0x520>)
 800c140:	f004 020f 	and.w	r2, r4, #15
 800c144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	f7f4 f9c4 	bl	80004d8 <__aeabi_dmul>
 800c150:	2602      	movs	r6, #2
 800c152:	2300      	movs	r3, #0
 800c154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c158:	4d64      	ldr	r5, [pc, #400]	@ (800c2ec <_dtoa_r+0x524>)
 800c15a:	1124      	asrs	r4, r4, #4
 800c15c:	2c00      	cmp	r4, #0
 800c15e:	f040 80b2 	bne.w	800c2c6 <_dtoa_r+0x4fe>
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1d3      	bne.n	800c10e <_dtoa_r+0x346>
 800c166:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c16a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 80b7 	beq.w	800c2e0 <_dtoa_r+0x518>
 800c172:	2200      	movs	r2, #0
 800c174:	4620      	mov	r0, r4
 800c176:	4629      	mov	r1, r5
 800c178:	4b5d      	ldr	r3, [pc, #372]	@ (800c2f0 <_dtoa_r+0x528>)
 800c17a:	f7f4 fc1f 	bl	80009bc <__aeabi_dcmplt>
 800c17e:	2800      	cmp	r0, #0
 800c180:	f000 80ae 	beq.w	800c2e0 <_dtoa_r+0x518>
 800c184:	9b07      	ldr	r3, [sp, #28]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 80aa 	beq.w	800c2e0 <_dtoa_r+0x518>
 800c18c:	9b08      	ldr	r3, [sp, #32]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	dd37      	ble.n	800c202 <_dtoa_r+0x43a>
 800c192:	1e7b      	subs	r3, r7, #1
 800c194:	4620      	mov	r0, r4
 800c196:	9304      	str	r3, [sp, #16]
 800c198:	2200      	movs	r2, #0
 800c19a:	4629      	mov	r1, r5
 800c19c:	4b55      	ldr	r3, [pc, #340]	@ (800c2f4 <_dtoa_r+0x52c>)
 800c19e:	f7f4 f99b 	bl	80004d8 <__aeabi_dmul>
 800c1a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1a6:	9c08      	ldr	r4, [sp, #32]
 800c1a8:	3601      	adds	r6, #1
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7f4 f92a 	bl	8000404 <__aeabi_i2d>
 800c1b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1b4:	f7f4 f990 	bl	80004d8 <__aeabi_dmul>
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	4b4f      	ldr	r3, [pc, #316]	@ (800c2f8 <_dtoa_r+0x530>)
 800c1bc:	f7f3 ffd6 	bl	800016c <__adddf3>
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c1c6:	2c00      	cmp	r4, #0
 800c1c8:	f040 809a 	bne.w	800c300 <_dtoa_r+0x538>
 800c1cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	4b4a      	ldr	r3, [pc, #296]	@ (800c2fc <_dtoa_r+0x534>)
 800c1d4:	f7f3 ffc8 	bl	8000168 <__aeabi_dsub>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1e0:	462a      	mov	r2, r5
 800c1e2:	4633      	mov	r3, r6
 800c1e4:	f7f4 fc08 	bl	80009f8 <__aeabi_dcmpgt>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	f040 828e 	bne.w	800c70a <_dtoa_r+0x942>
 800c1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f2:	462a      	mov	r2, r5
 800c1f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c1f8:	f7f4 fbe0 	bl	80009bc <__aeabi_dcmplt>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	f040 8127 	bne.w	800c450 <_dtoa_r+0x688>
 800c202:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c206:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c20a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f2c0 8163 	blt.w	800c4d8 <_dtoa_r+0x710>
 800c212:	2f0e      	cmp	r7, #14
 800c214:	f300 8160 	bgt.w	800c4d8 <_dtoa_r+0x710>
 800c218:	4b33      	ldr	r3, [pc, #204]	@ (800c2e8 <_dtoa_r+0x520>)
 800c21a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c21e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c222:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c226:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c228:	2b00      	cmp	r3, #0
 800c22a:	da03      	bge.n	800c234 <_dtoa_r+0x46c>
 800c22c:	9b07      	ldr	r3, [sp, #28]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f340 8100 	ble.w	800c434 <_dtoa_r+0x66c>
 800c234:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c238:	4656      	mov	r6, sl
 800c23a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c23e:	4620      	mov	r0, r4
 800c240:	4629      	mov	r1, r5
 800c242:	f7f4 fa73 	bl	800072c <__aeabi_ddiv>
 800c246:	f7f4 fbf7 	bl	8000a38 <__aeabi_d2iz>
 800c24a:	4680      	mov	r8, r0
 800c24c:	f7f4 f8da 	bl	8000404 <__aeabi_i2d>
 800c250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c254:	f7f4 f940 	bl	80004d8 <__aeabi_dmul>
 800c258:	4602      	mov	r2, r0
 800c25a:	460b      	mov	r3, r1
 800c25c:	4620      	mov	r0, r4
 800c25e:	4629      	mov	r1, r5
 800c260:	f7f3 ff82 	bl	8000168 <__aeabi_dsub>
 800c264:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c268:	9d07      	ldr	r5, [sp, #28]
 800c26a:	f806 4b01 	strb.w	r4, [r6], #1
 800c26e:	eba6 040a 	sub.w	r4, r6, sl
 800c272:	42a5      	cmp	r5, r4
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	f040 8116 	bne.w	800c4a8 <_dtoa_r+0x6e0>
 800c27c:	f7f3 ff76 	bl	800016c <__adddf3>
 800c280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c284:	4604      	mov	r4, r0
 800c286:	460d      	mov	r5, r1
 800c288:	f7f4 fbb6 	bl	80009f8 <__aeabi_dcmpgt>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	f040 80f8 	bne.w	800c482 <_dtoa_r+0x6ba>
 800c292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c296:	4620      	mov	r0, r4
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f4 fb85 	bl	80009a8 <__aeabi_dcmpeq>
 800c29e:	b118      	cbz	r0, 800c2a8 <_dtoa_r+0x4e0>
 800c2a0:	f018 0f01 	tst.w	r8, #1
 800c2a4:	f040 80ed 	bne.w	800c482 <_dtoa_r+0x6ba>
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	4658      	mov	r0, fp
 800c2ac:	f000 fc92 	bl	800cbd4 <_Bfree>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	7033      	strb	r3, [r6, #0]
 800c2b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c2b6:	3701      	adds	r7, #1
 800c2b8:	601f      	str	r7, [r3, #0]
 800c2ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 8320 	beq.w	800c902 <_dtoa_r+0xb3a>
 800c2c2:	601e      	str	r6, [r3, #0]
 800c2c4:	e31d      	b.n	800c902 <_dtoa_r+0xb3a>
 800c2c6:	07e2      	lsls	r2, r4, #31
 800c2c8:	d505      	bpl.n	800c2d6 <_dtoa_r+0x50e>
 800c2ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2ce:	f7f4 f903 	bl	80004d8 <__aeabi_dmul>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	3601      	adds	r6, #1
 800c2d6:	1064      	asrs	r4, r4, #1
 800c2d8:	3508      	adds	r5, #8
 800c2da:	e73f      	b.n	800c15c <_dtoa_r+0x394>
 800c2dc:	2602      	movs	r6, #2
 800c2de:	e742      	b.n	800c166 <_dtoa_r+0x39e>
 800c2e0:	9c07      	ldr	r4, [sp, #28]
 800c2e2:	9704      	str	r7, [sp, #16]
 800c2e4:	e761      	b.n	800c1aa <_dtoa_r+0x3e2>
 800c2e6:	bf00      	nop
 800c2e8:	0800e5f8 	.word	0x0800e5f8
 800c2ec:	0800e5d0 	.word	0x0800e5d0
 800c2f0:	3ff00000 	.word	0x3ff00000
 800c2f4:	40240000 	.word	0x40240000
 800c2f8:	401c0000 	.word	0x401c0000
 800c2fc:	40140000 	.word	0x40140000
 800c300:	4b70      	ldr	r3, [pc, #448]	@ (800c4c4 <_dtoa_r+0x6fc>)
 800c302:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c304:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c308:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c30c:	4454      	add	r4, sl
 800c30e:	2900      	cmp	r1, #0
 800c310:	d045      	beq.n	800c39e <_dtoa_r+0x5d6>
 800c312:	2000      	movs	r0, #0
 800c314:	496c      	ldr	r1, [pc, #432]	@ (800c4c8 <_dtoa_r+0x700>)
 800c316:	f7f4 fa09 	bl	800072c <__aeabi_ddiv>
 800c31a:	4633      	mov	r3, r6
 800c31c:	462a      	mov	r2, r5
 800c31e:	f7f3 ff23 	bl	8000168 <__aeabi_dsub>
 800c322:	4656      	mov	r6, sl
 800c324:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c32c:	f7f4 fb84 	bl	8000a38 <__aeabi_d2iz>
 800c330:	4605      	mov	r5, r0
 800c332:	f7f4 f867 	bl	8000404 <__aeabi_i2d>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c33e:	f7f3 ff13 	bl	8000168 <__aeabi_dsub>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	3530      	adds	r5, #48	@ 0x30
 800c348:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c34c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c350:	f806 5b01 	strb.w	r5, [r6], #1
 800c354:	f7f4 fb32 	bl	80009bc <__aeabi_dcmplt>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d163      	bne.n	800c424 <_dtoa_r+0x65c>
 800c35c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c360:	2000      	movs	r0, #0
 800c362:	495a      	ldr	r1, [pc, #360]	@ (800c4cc <_dtoa_r+0x704>)
 800c364:	f7f3 ff00 	bl	8000168 <__aeabi_dsub>
 800c368:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c36c:	f7f4 fb26 	bl	80009bc <__aeabi_dcmplt>
 800c370:	2800      	cmp	r0, #0
 800c372:	f040 8087 	bne.w	800c484 <_dtoa_r+0x6bc>
 800c376:	42a6      	cmp	r6, r4
 800c378:	f43f af43 	beq.w	800c202 <_dtoa_r+0x43a>
 800c37c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c380:	2200      	movs	r2, #0
 800c382:	4b53      	ldr	r3, [pc, #332]	@ (800c4d0 <_dtoa_r+0x708>)
 800c384:	f7f4 f8a8 	bl	80004d8 <__aeabi_dmul>
 800c388:	2200      	movs	r2, #0
 800c38a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c38e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c392:	4b4f      	ldr	r3, [pc, #316]	@ (800c4d0 <_dtoa_r+0x708>)
 800c394:	f7f4 f8a0 	bl	80004d8 <__aeabi_dmul>
 800c398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c39c:	e7c4      	b.n	800c328 <_dtoa_r+0x560>
 800c39e:	4631      	mov	r1, r6
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f7f4 f899 	bl	80004d8 <__aeabi_dmul>
 800c3a6:	4656      	mov	r6, sl
 800c3a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c3ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3b2:	f7f4 fb41 	bl	8000a38 <__aeabi_d2iz>
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	f7f4 f824 	bl	8000404 <__aeabi_i2d>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3c4:	f7f3 fed0 	bl	8000168 <__aeabi_dsub>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	3530      	adds	r5, #48	@ 0x30
 800c3ce:	f806 5b01 	strb.w	r5, [r6], #1
 800c3d2:	42a6      	cmp	r6, r4
 800c3d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3d8:	f04f 0200 	mov.w	r2, #0
 800c3dc:	d124      	bne.n	800c428 <_dtoa_r+0x660>
 800c3de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c3e2:	4b39      	ldr	r3, [pc, #228]	@ (800c4c8 <_dtoa_r+0x700>)
 800c3e4:	f7f3 fec2 	bl	800016c <__adddf3>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3f0:	f7f4 fb02 	bl	80009f8 <__aeabi_dcmpgt>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d145      	bne.n	800c484 <_dtoa_r+0x6bc>
 800c3f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	4932      	ldr	r1, [pc, #200]	@ (800c4c8 <_dtoa_r+0x700>)
 800c400:	f7f3 feb2 	bl	8000168 <__aeabi_dsub>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c40c:	f7f4 fad6 	bl	80009bc <__aeabi_dcmplt>
 800c410:	2800      	cmp	r0, #0
 800c412:	f43f aef6 	beq.w	800c202 <_dtoa_r+0x43a>
 800c416:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c418:	1e73      	subs	r3, r6, #1
 800c41a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c41c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c420:	2b30      	cmp	r3, #48	@ 0x30
 800c422:	d0f8      	beq.n	800c416 <_dtoa_r+0x64e>
 800c424:	9f04      	ldr	r7, [sp, #16]
 800c426:	e73f      	b.n	800c2a8 <_dtoa_r+0x4e0>
 800c428:	4b29      	ldr	r3, [pc, #164]	@ (800c4d0 <_dtoa_r+0x708>)
 800c42a:	f7f4 f855 	bl	80004d8 <__aeabi_dmul>
 800c42e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c432:	e7bc      	b.n	800c3ae <_dtoa_r+0x5e6>
 800c434:	d10c      	bne.n	800c450 <_dtoa_r+0x688>
 800c436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c43a:	2200      	movs	r2, #0
 800c43c:	4b25      	ldr	r3, [pc, #148]	@ (800c4d4 <_dtoa_r+0x70c>)
 800c43e:	f7f4 f84b 	bl	80004d8 <__aeabi_dmul>
 800c442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c446:	f7f4 facd 	bl	80009e4 <__aeabi_dcmpge>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	f000 815b 	beq.w	800c706 <_dtoa_r+0x93e>
 800c450:	2400      	movs	r4, #0
 800c452:	4625      	mov	r5, r4
 800c454:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c456:	4656      	mov	r6, sl
 800c458:	43db      	mvns	r3, r3
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	2700      	movs	r7, #0
 800c45e:	4621      	mov	r1, r4
 800c460:	4658      	mov	r0, fp
 800c462:	f000 fbb7 	bl	800cbd4 <_Bfree>
 800c466:	2d00      	cmp	r5, #0
 800c468:	d0dc      	beq.n	800c424 <_dtoa_r+0x65c>
 800c46a:	b12f      	cbz	r7, 800c478 <_dtoa_r+0x6b0>
 800c46c:	42af      	cmp	r7, r5
 800c46e:	d003      	beq.n	800c478 <_dtoa_r+0x6b0>
 800c470:	4639      	mov	r1, r7
 800c472:	4658      	mov	r0, fp
 800c474:	f000 fbae 	bl	800cbd4 <_Bfree>
 800c478:	4629      	mov	r1, r5
 800c47a:	4658      	mov	r0, fp
 800c47c:	f000 fbaa 	bl	800cbd4 <_Bfree>
 800c480:	e7d0      	b.n	800c424 <_dtoa_r+0x65c>
 800c482:	9704      	str	r7, [sp, #16]
 800c484:	4633      	mov	r3, r6
 800c486:	461e      	mov	r6, r3
 800c488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c48c:	2a39      	cmp	r2, #57	@ 0x39
 800c48e:	d107      	bne.n	800c4a0 <_dtoa_r+0x6d8>
 800c490:	459a      	cmp	sl, r3
 800c492:	d1f8      	bne.n	800c486 <_dtoa_r+0x6be>
 800c494:	9a04      	ldr	r2, [sp, #16]
 800c496:	3201      	adds	r2, #1
 800c498:	9204      	str	r2, [sp, #16]
 800c49a:	2230      	movs	r2, #48	@ 0x30
 800c49c:	f88a 2000 	strb.w	r2, [sl]
 800c4a0:	781a      	ldrb	r2, [r3, #0]
 800c4a2:	3201      	adds	r2, #1
 800c4a4:	701a      	strb	r2, [r3, #0]
 800c4a6:	e7bd      	b.n	800c424 <_dtoa_r+0x65c>
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	4b09      	ldr	r3, [pc, #36]	@ (800c4d0 <_dtoa_r+0x708>)
 800c4ac:	f7f4 f814 	bl	80004d8 <__aeabi_dmul>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	f7f4 fa76 	bl	80009a8 <__aeabi_dcmpeq>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	f43f aebc 	beq.w	800c23a <_dtoa_r+0x472>
 800c4c2:	e6f1      	b.n	800c2a8 <_dtoa_r+0x4e0>
 800c4c4:	0800e5f8 	.word	0x0800e5f8
 800c4c8:	3fe00000 	.word	0x3fe00000
 800c4cc:	3ff00000 	.word	0x3ff00000
 800c4d0:	40240000 	.word	0x40240000
 800c4d4:	40140000 	.word	0x40140000
 800c4d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c4da:	2a00      	cmp	r2, #0
 800c4dc:	f000 80db 	beq.w	800c696 <_dtoa_r+0x8ce>
 800c4e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c4e2:	2a01      	cmp	r2, #1
 800c4e4:	f300 80bf 	bgt.w	800c666 <_dtoa_r+0x89e>
 800c4e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	f000 80b7 	beq.w	800c65e <_dtoa_r+0x896>
 800c4f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c4f4:	4646      	mov	r6, r8
 800c4f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c4f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	441a      	add	r2, r3
 800c4fe:	4658      	mov	r0, fp
 800c500:	4498      	add	r8, r3
 800c502:	9209      	str	r2, [sp, #36]	@ 0x24
 800c504:	f000 fc1a 	bl	800cd3c <__i2b>
 800c508:	4605      	mov	r5, r0
 800c50a:	b15e      	cbz	r6, 800c524 <_dtoa_r+0x75c>
 800c50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50e:	2b00      	cmp	r3, #0
 800c510:	dd08      	ble.n	800c524 <_dtoa_r+0x75c>
 800c512:	42b3      	cmp	r3, r6
 800c514:	bfa8      	it	ge
 800c516:	4633      	movge	r3, r6
 800c518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c51a:	eba8 0803 	sub.w	r8, r8, r3
 800c51e:	1af6      	subs	r6, r6, r3
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	9309      	str	r3, [sp, #36]	@ 0x24
 800c524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c526:	b1f3      	cbz	r3, 800c566 <_dtoa_r+0x79e>
 800c528:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 80b7 	beq.w	800c69e <_dtoa_r+0x8d6>
 800c530:	b18c      	cbz	r4, 800c556 <_dtoa_r+0x78e>
 800c532:	4629      	mov	r1, r5
 800c534:	4622      	mov	r2, r4
 800c536:	4658      	mov	r0, fp
 800c538:	f000 fcbe 	bl	800ceb8 <__pow5mult>
 800c53c:	464a      	mov	r2, r9
 800c53e:	4601      	mov	r1, r0
 800c540:	4605      	mov	r5, r0
 800c542:	4658      	mov	r0, fp
 800c544:	f000 fc10 	bl	800cd68 <__multiply>
 800c548:	4649      	mov	r1, r9
 800c54a:	9004      	str	r0, [sp, #16]
 800c54c:	4658      	mov	r0, fp
 800c54e:	f000 fb41 	bl	800cbd4 <_Bfree>
 800c552:	9b04      	ldr	r3, [sp, #16]
 800c554:	4699      	mov	r9, r3
 800c556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c558:	1b1a      	subs	r2, r3, r4
 800c55a:	d004      	beq.n	800c566 <_dtoa_r+0x79e>
 800c55c:	4649      	mov	r1, r9
 800c55e:	4658      	mov	r0, fp
 800c560:	f000 fcaa 	bl	800ceb8 <__pow5mult>
 800c564:	4681      	mov	r9, r0
 800c566:	2101      	movs	r1, #1
 800c568:	4658      	mov	r0, fp
 800c56a:	f000 fbe7 	bl	800cd3c <__i2b>
 800c56e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c570:	4604      	mov	r4, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	f000 81c9 	beq.w	800c90a <_dtoa_r+0xb42>
 800c578:	461a      	mov	r2, r3
 800c57a:	4601      	mov	r1, r0
 800c57c:	4658      	mov	r0, fp
 800c57e:	f000 fc9b 	bl	800ceb8 <__pow5mult>
 800c582:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c584:	4604      	mov	r4, r0
 800c586:	2b01      	cmp	r3, #1
 800c588:	f300 808f 	bgt.w	800c6aa <_dtoa_r+0x8e2>
 800c58c:	9b02      	ldr	r3, [sp, #8]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f040 8087 	bne.w	800c6a2 <_dtoa_r+0x8da>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f040 8083 	bne.w	800c6a6 <_dtoa_r+0x8de>
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5a6:	0d1b      	lsrs	r3, r3, #20
 800c5a8:	051b      	lsls	r3, r3, #20
 800c5aa:	b12b      	cbz	r3, 800c5b8 <_dtoa_r+0x7f0>
 800c5ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ae:	f108 0801 	add.w	r8, r8, #1
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f000 81aa 	beq.w	800c916 <_dtoa_r+0xb4e>
 800c5c2:	6923      	ldr	r3, [r4, #16]
 800c5c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5c8:	6918      	ldr	r0, [r3, #16]
 800c5ca:	f000 fb6b 	bl	800cca4 <__hi0bits>
 800c5ce:	f1c0 0020 	rsb	r0, r0, #32
 800c5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d4:	4418      	add	r0, r3
 800c5d6:	f010 001f 	ands.w	r0, r0, #31
 800c5da:	d071      	beq.n	800c6c0 <_dtoa_r+0x8f8>
 800c5dc:	f1c0 0320 	rsb	r3, r0, #32
 800c5e0:	2b04      	cmp	r3, #4
 800c5e2:	dd65      	ble.n	800c6b0 <_dtoa_r+0x8e8>
 800c5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e6:	f1c0 001c 	rsb	r0, r0, #28
 800c5ea:	4403      	add	r3, r0
 800c5ec:	4480      	add	r8, r0
 800c5ee:	4406      	add	r6, r0
 800c5f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5f2:	f1b8 0f00 	cmp.w	r8, #0
 800c5f6:	dd05      	ble.n	800c604 <_dtoa_r+0x83c>
 800c5f8:	4649      	mov	r1, r9
 800c5fa:	4642      	mov	r2, r8
 800c5fc:	4658      	mov	r0, fp
 800c5fe:	f000 fcb5 	bl	800cf6c <__lshift>
 800c602:	4681      	mov	r9, r0
 800c604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c606:	2b00      	cmp	r3, #0
 800c608:	dd05      	ble.n	800c616 <_dtoa_r+0x84e>
 800c60a:	4621      	mov	r1, r4
 800c60c:	461a      	mov	r2, r3
 800c60e:	4658      	mov	r0, fp
 800c610:	f000 fcac 	bl	800cf6c <__lshift>
 800c614:	4604      	mov	r4, r0
 800c616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d053      	beq.n	800c6c4 <_dtoa_r+0x8fc>
 800c61c:	4621      	mov	r1, r4
 800c61e:	4648      	mov	r0, r9
 800c620:	f000 fd10 	bl	800d044 <__mcmp>
 800c624:	2800      	cmp	r0, #0
 800c626:	da4d      	bge.n	800c6c4 <_dtoa_r+0x8fc>
 800c628:	1e7b      	subs	r3, r7, #1
 800c62a:	4649      	mov	r1, r9
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	220a      	movs	r2, #10
 800c630:	2300      	movs	r3, #0
 800c632:	4658      	mov	r0, fp
 800c634:	f000 faf0 	bl	800cc18 <__multadd>
 800c638:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c63a:	4681      	mov	r9, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 816c 	beq.w	800c91a <_dtoa_r+0xb52>
 800c642:	2300      	movs	r3, #0
 800c644:	4629      	mov	r1, r5
 800c646:	220a      	movs	r2, #10
 800c648:	4658      	mov	r0, fp
 800c64a:	f000 fae5 	bl	800cc18 <__multadd>
 800c64e:	9b08      	ldr	r3, [sp, #32]
 800c650:	4605      	mov	r5, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	dc61      	bgt.n	800c71a <_dtoa_r+0x952>
 800c656:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c658:	2b02      	cmp	r3, #2
 800c65a:	dc3b      	bgt.n	800c6d4 <_dtoa_r+0x90c>
 800c65c:	e05d      	b.n	800c71a <_dtoa_r+0x952>
 800c65e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c660:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c664:	e746      	b.n	800c4f4 <_dtoa_r+0x72c>
 800c666:	9b07      	ldr	r3, [sp, #28]
 800c668:	1e5c      	subs	r4, r3, #1
 800c66a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	bfbf      	itttt	lt
 800c670:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c672:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c674:	1ae3      	sublt	r3, r4, r3
 800c676:	18d2      	addlt	r2, r2, r3
 800c678:	bfa8      	it	ge
 800c67a:	1b1c      	subge	r4, r3, r4
 800c67c:	9b07      	ldr	r3, [sp, #28]
 800c67e:	bfbe      	ittt	lt
 800c680:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c682:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c684:	2400      	movlt	r4, #0
 800c686:	2b00      	cmp	r3, #0
 800c688:	bfb5      	itete	lt
 800c68a:	eba8 0603 	sublt.w	r6, r8, r3
 800c68e:	4646      	movge	r6, r8
 800c690:	2300      	movlt	r3, #0
 800c692:	9b07      	ldrge	r3, [sp, #28]
 800c694:	e730      	b.n	800c4f8 <_dtoa_r+0x730>
 800c696:	4646      	mov	r6, r8
 800c698:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c69a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c69c:	e735      	b.n	800c50a <_dtoa_r+0x742>
 800c69e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6a0:	e75c      	b.n	800c55c <_dtoa_r+0x794>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	e788      	b.n	800c5b8 <_dtoa_r+0x7f0>
 800c6a6:	9b02      	ldr	r3, [sp, #8]
 800c6a8:	e786      	b.n	800c5b8 <_dtoa_r+0x7f0>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6ae:	e788      	b.n	800c5c2 <_dtoa_r+0x7fa>
 800c6b0:	d09f      	beq.n	800c5f2 <_dtoa_r+0x82a>
 800c6b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6b4:	331c      	adds	r3, #28
 800c6b6:	441a      	add	r2, r3
 800c6b8:	4498      	add	r8, r3
 800c6ba:	441e      	add	r6, r3
 800c6bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6be:	e798      	b.n	800c5f2 <_dtoa_r+0x82a>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	e7f6      	b.n	800c6b2 <_dtoa_r+0x8ea>
 800c6c4:	9b07      	ldr	r3, [sp, #28]
 800c6c6:	9704      	str	r7, [sp, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	dc20      	bgt.n	800c70e <_dtoa_r+0x946>
 800c6cc:	9308      	str	r3, [sp, #32]
 800c6ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	dd1e      	ble.n	800c712 <_dtoa_r+0x94a>
 800c6d4:	9b08      	ldr	r3, [sp, #32]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f47f aebc 	bne.w	800c454 <_dtoa_r+0x68c>
 800c6dc:	4621      	mov	r1, r4
 800c6de:	2205      	movs	r2, #5
 800c6e0:	4658      	mov	r0, fp
 800c6e2:	f000 fa99 	bl	800cc18 <__multadd>
 800c6e6:	4601      	mov	r1, r0
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	4648      	mov	r0, r9
 800c6ec:	f000 fcaa 	bl	800d044 <__mcmp>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	f77f aeaf 	ble.w	800c454 <_dtoa_r+0x68c>
 800c6f6:	2331      	movs	r3, #49	@ 0x31
 800c6f8:	4656      	mov	r6, sl
 800c6fa:	f806 3b01 	strb.w	r3, [r6], #1
 800c6fe:	9b04      	ldr	r3, [sp, #16]
 800c700:	3301      	adds	r3, #1
 800c702:	9304      	str	r3, [sp, #16]
 800c704:	e6aa      	b.n	800c45c <_dtoa_r+0x694>
 800c706:	9c07      	ldr	r4, [sp, #28]
 800c708:	9704      	str	r7, [sp, #16]
 800c70a:	4625      	mov	r5, r4
 800c70c:	e7f3      	b.n	800c6f6 <_dtoa_r+0x92e>
 800c70e:	9b07      	ldr	r3, [sp, #28]
 800c710:	9308      	str	r3, [sp, #32]
 800c712:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 8104 	beq.w	800c922 <_dtoa_r+0xb5a>
 800c71a:	2e00      	cmp	r6, #0
 800c71c:	dd05      	ble.n	800c72a <_dtoa_r+0x962>
 800c71e:	4629      	mov	r1, r5
 800c720:	4632      	mov	r2, r6
 800c722:	4658      	mov	r0, fp
 800c724:	f000 fc22 	bl	800cf6c <__lshift>
 800c728:	4605      	mov	r5, r0
 800c72a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d05a      	beq.n	800c7e6 <_dtoa_r+0xa1e>
 800c730:	4658      	mov	r0, fp
 800c732:	6869      	ldr	r1, [r5, #4]
 800c734:	f000 fa0e 	bl	800cb54 <_Balloc>
 800c738:	4606      	mov	r6, r0
 800c73a:	b928      	cbnz	r0, 800c748 <_dtoa_r+0x980>
 800c73c:	4602      	mov	r2, r0
 800c73e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c742:	4b83      	ldr	r3, [pc, #524]	@ (800c950 <_dtoa_r+0xb88>)
 800c744:	f7ff bb54 	b.w	800bdf0 <_dtoa_r+0x28>
 800c748:	692a      	ldr	r2, [r5, #16]
 800c74a:	f105 010c 	add.w	r1, r5, #12
 800c74e:	3202      	adds	r2, #2
 800c750:	0092      	lsls	r2, r2, #2
 800c752:	300c      	adds	r0, #12
 800c754:	f000 ffa8 	bl	800d6a8 <memcpy>
 800c758:	2201      	movs	r2, #1
 800c75a:	4631      	mov	r1, r6
 800c75c:	4658      	mov	r0, fp
 800c75e:	f000 fc05 	bl	800cf6c <__lshift>
 800c762:	462f      	mov	r7, r5
 800c764:	4605      	mov	r5, r0
 800c766:	f10a 0301 	add.w	r3, sl, #1
 800c76a:	9307      	str	r3, [sp, #28]
 800c76c:	9b08      	ldr	r3, [sp, #32]
 800c76e:	4453      	add	r3, sl
 800c770:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c772:	9b02      	ldr	r3, [sp, #8]
 800c774:	f003 0301 	and.w	r3, r3, #1
 800c778:	930a      	str	r3, [sp, #40]	@ 0x28
 800c77a:	9b07      	ldr	r3, [sp, #28]
 800c77c:	4621      	mov	r1, r4
 800c77e:	3b01      	subs	r3, #1
 800c780:	4648      	mov	r0, r9
 800c782:	9302      	str	r3, [sp, #8]
 800c784:	f7ff fa95 	bl	800bcb2 <quorem>
 800c788:	4639      	mov	r1, r7
 800c78a:	9008      	str	r0, [sp, #32]
 800c78c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c790:	4648      	mov	r0, r9
 800c792:	f000 fc57 	bl	800d044 <__mcmp>
 800c796:	462a      	mov	r2, r5
 800c798:	9009      	str	r0, [sp, #36]	@ 0x24
 800c79a:	4621      	mov	r1, r4
 800c79c:	4658      	mov	r0, fp
 800c79e:	f000 fc6d 	bl	800d07c <__mdiff>
 800c7a2:	68c2      	ldr	r2, [r0, #12]
 800c7a4:	4606      	mov	r6, r0
 800c7a6:	bb02      	cbnz	r2, 800c7ea <_dtoa_r+0xa22>
 800c7a8:	4601      	mov	r1, r0
 800c7aa:	4648      	mov	r0, r9
 800c7ac:	f000 fc4a 	bl	800d044 <__mcmp>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	4658      	mov	r0, fp
 800c7b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c7b8:	f000 fa0c 	bl	800cbd4 <_Bfree>
 800c7bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c7be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c7c0:	9e07      	ldr	r6, [sp, #28]
 800c7c2:	ea43 0102 	orr.w	r1, r3, r2
 800c7c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7c8:	4319      	orrs	r1, r3
 800c7ca:	d110      	bne.n	800c7ee <_dtoa_r+0xa26>
 800c7cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7d0:	d029      	beq.n	800c826 <_dtoa_r+0xa5e>
 800c7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	dd02      	ble.n	800c7de <_dtoa_r+0xa16>
 800c7d8:	9b08      	ldr	r3, [sp, #32]
 800c7da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c7de:	9b02      	ldr	r3, [sp, #8]
 800c7e0:	f883 8000 	strb.w	r8, [r3]
 800c7e4:	e63b      	b.n	800c45e <_dtoa_r+0x696>
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	e7bb      	b.n	800c762 <_dtoa_r+0x99a>
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	e7e1      	b.n	800c7b2 <_dtoa_r+0x9ea>
 800c7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	db04      	blt.n	800c7fe <_dtoa_r+0xa36>
 800c7f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c7f6:	430b      	orrs	r3, r1
 800c7f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7fa:	430b      	orrs	r3, r1
 800c7fc:	d120      	bne.n	800c840 <_dtoa_r+0xa78>
 800c7fe:	2a00      	cmp	r2, #0
 800c800:	dded      	ble.n	800c7de <_dtoa_r+0xa16>
 800c802:	4649      	mov	r1, r9
 800c804:	2201      	movs	r2, #1
 800c806:	4658      	mov	r0, fp
 800c808:	f000 fbb0 	bl	800cf6c <__lshift>
 800c80c:	4621      	mov	r1, r4
 800c80e:	4681      	mov	r9, r0
 800c810:	f000 fc18 	bl	800d044 <__mcmp>
 800c814:	2800      	cmp	r0, #0
 800c816:	dc03      	bgt.n	800c820 <_dtoa_r+0xa58>
 800c818:	d1e1      	bne.n	800c7de <_dtoa_r+0xa16>
 800c81a:	f018 0f01 	tst.w	r8, #1
 800c81e:	d0de      	beq.n	800c7de <_dtoa_r+0xa16>
 800c820:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c824:	d1d8      	bne.n	800c7d8 <_dtoa_r+0xa10>
 800c826:	2339      	movs	r3, #57	@ 0x39
 800c828:	9a02      	ldr	r2, [sp, #8]
 800c82a:	7013      	strb	r3, [r2, #0]
 800c82c:	4633      	mov	r3, r6
 800c82e:	461e      	mov	r6, r3
 800c830:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c834:	3b01      	subs	r3, #1
 800c836:	2a39      	cmp	r2, #57	@ 0x39
 800c838:	d052      	beq.n	800c8e0 <_dtoa_r+0xb18>
 800c83a:	3201      	adds	r2, #1
 800c83c:	701a      	strb	r2, [r3, #0]
 800c83e:	e60e      	b.n	800c45e <_dtoa_r+0x696>
 800c840:	2a00      	cmp	r2, #0
 800c842:	dd07      	ble.n	800c854 <_dtoa_r+0xa8c>
 800c844:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c848:	d0ed      	beq.n	800c826 <_dtoa_r+0xa5e>
 800c84a:	9a02      	ldr	r2, [sp, #8]
 800c84c:	f108 0301 	add.w	r3, r8, #1
 800c850:	7013      	strb	r3, [r2, #0]
 800c852:	e604      	b.n	800c45e <_dtoa_r+0x696>
 800c854:	9b07      	ldr	r3, [sp, #28]
 800c856:	9a07      	ldr	r2, [sp, #28]
 800c858:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c85c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c85e:	4293      	cmp	r3, r2
 800c860:	d028      	beq.n	800c8b4 <_dtoa_r+0xaec>
 800c862:	4649      	mov	r1, r9
 800c864:	2300      	movs	r3, #0
 800c866:	220a      	movs	r2, #10
 800c868:	4658      	mov	r0, fp
 800c86a:	f000 f9d5 	bl	800cc18 <__multadd>
 800c86e:	42af      	cmp	r7, r5
 800c870:	4681      	mov	r9, r0
 800c872:	f04f 0300 	mov.w	r3, #0
 800c876:	f04f 020a 	mov.w	r2, #10
 800c87a:	4639      	mov	r1, r7
 800c87c:	4658      	mov	r0, fp
 800c87e:	d107      	bne.n	800c890 <_dtoa_r+0xac8>
 800c880:	f000 f9ca 	bl	800cc18 <__multadd>
 800c884:	4607      	mov	r7, r0
 800c886:	4605      	mov	r5, r0
 800c888:	9b07      	ldr	r3, [sp, #28]
 800c88a:	3301      	adds	r3, #1
 800c88c:	9307      	str	r3, [sp, #28]
 800c88e:	e774      	b.n	800c77a <_dtoa_r+0x9b2>
 800c890:	f000 f9c2 	bl	800cc18 <__multadd>
 800c894:	4629      	mov	r1, r5
 800c896:	4607      	mov	r7, r0
 800c898:	2300      	movs	r3, #0
 800c89a:	220a      	movs	r2, #10
 800c89c:	4658      	mov	r0, fp
 800c89e:	f000 f9bb 	bl	800cc18 <__multadd>
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	e7f0      	b.n	800c888 <_dtoa_r+0xac0>
 800c8a6:	9b08      	ldr	r3, [sp, #32]
 800c8a8:	2700      	movs	r7, #0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	bfcc      	ite	gt
 800c8ae:	461e      	movgt	r6, r3
 800c8b0:	2601      	movle	r6, #1
 800c8b2:	4456      	add	r6, sl
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	4658      	mov	r0, fp
 800c8ba:	f000 fb57 	bl	800cf6c <__lshift>
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4681      	mov	r9, r0
 800c8c2:	f000 fbbf 	bl	800d044 <__mcmp>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	dcb0      	bgt.n	800c82c <_dtoa_r+0xa64>
 800c8ca:	d102      	bne.n	800c8d2 <_dtoa_r+0xb0a>
 800c8cc:	f018 0f01 	tst.w	r8, #1
 800c8d0:	d1ac      	bne.n	800c82c <_dtoa_r+0xa64>
 800c8d2:	4633      	mov	r3, r6
 800c8d4:	461e      	mov	r6, r3
 800c8d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8da:	2a30      	cmp	r2, #48	@ 0x30
 800c8dc:	d0fa      	beq.n	800c8d4 <_dtoa_r+0xb0c>
 800c8de:	e5be      	b.n	800c45e <_dtoa_r+0x696>
 800c8e0:	459a      	cmp	sl, r3
 800c8e2:	d1a4      	bne.n	800c82e <_dtoa_r+0xa66>
 800c8e4:	9b04      	ldr	r3, [sp, #16]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	9304      	str	r3, [sp, #16]
 800c8ea:	2331      	movs	r3, #49	@ 0x31
 800c8ec:	f88a 3000 	strb.w	r3, [sl]
 800c8f0:	e5b5      	b.n	800c45e <_dtoa_r+0x696>
 800c8f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c8f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c954 <_dtoa_r+0xb8c>
 800c8f8:	b11b      	cbz	r3, 800c902 <_dtoa_r+0xb3a>
 800c8fa:	f10a 0308 	add.w	r3, sl, #8
 800c8fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c900:	6013      	str	r3, [r2, #0]
 800c902:	4650      	mov	r0, sl
 800c904:	b017      	add	sp, #92	@ 0x5c
 800c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	f77f ae3d 	ble.w	800c58c <_dtoa_r+0x7c4>
 800c912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c914:	930a      	str	r3, [sp, #40]	@ 0x28
 800c916:	2001      	movs	r0, #1
 800c918:	e65b      	b.n	800c5d2 <_dtoa_r+0x80a>
 800c91a:	9b08      	ldr	r3, [sp, #32]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f77f aed6 	ble.w	800c6ce <_dtoa_r+0x906>
 800c922:	4656      	mov	r6, sl
 800c924:	4621      	mov	r1, r4
 800c926:	4648      	mov	r0, r9
 800c928:	f7ff f9c3 	bl	800bcb2 <quorem>
 800c92c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c930:	9b08      	ldr	r3, [sp, #32]
 800c932:	f806 8b01 	strb.w	r8, [r6], #1
 800c936:	eba6 020a 	sub.w	r2, r6, sl
 800c93a:	4293      	cmp	r3, r2
 800c93c:	ddb3      	ble.n	800c8a6 <_dtoa_r+0xade>
 800c93e:	4649      	mov	r1, r9
 800c940:	2300      	movs	r3, #0
 800c942:	220a      	movs	r2, #10
 800c944:	4658      	mov	r0, fp
 800c946:	f000 f967 	bl	800cc18 <__multadd>
 800c94a:	4681      	mov	r9, r0
 800c94c:	e7ea      	b.n	800c924 <_dtoa_r+0xb5c>
 800c94e:	bf00      	nop
 800c950:	0800e55a 	.word	0x0800e55a
 800c954:	0800e4de 	.word	0x0800e4de

0800c958 <_free_r>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	4605      	mov	r5, r0
 800c95c:	2900      	cmp	r1, #0
 800c95e:	d040      	beq.n	800c9e2 <_free_r+0x8a>
 800c960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c964:	1f0c      	subs	r4, r1, #4
 800c966:	2b00      	cmp	r3, #0
 800c968:	bfb8      	it	lt
 800c96a:	18e4      	addlt	r4, r4, r3
 800c96c:	f000 f8e6 	bl	800cb3c <__malloc_lock>
 800c970:	4a1c      	ldr	r2, [pc, #112]	@ (800c9e4 <_free_r+0x8c>)
 800c972:	6813      	ldr	r3, [r2, #0]
 800c974:	b933      	cbnz	r3, 800c984 <_free_r+0x2c>
 800c976:	6063      	str	r3, [r4, #4]
 800c978:	6014      	str	r4, [r2, #0]
 800c97a:	4628      	mov	r0, r5
 800c97c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c980:	f000 b8e2 	b.w	800cb48 <__malloc_unlock>
 800c984:	42a3      	cmp	r3, r4
 800c986:	d908      	bls.n	800c99a <_free_r+0x42>
 800c988:	6820      	ldr	r0, [r4, #0]
 800c98a:	1821      	adds	r1, r4, r0
 800c98c:	428b      	cmp	r3, r1
 800c98e:	bf01      	itttt	eq
 800c990:	6819      	ldreq	r1, [r3, #0]
 800c992:	685b      	ldreq	r3, [r3, #4]
 800c994:	1809      	addeq	r1, r1, r0
 800c996:	6021      	streq	r1, [r4, #0]
 800c998:	e7ed      	b.n	800c976 <_free_r+0x1e>
 800c99a:	461a      	mov	r2, r3
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	b10b      	cbz	r3, 800c9a4 <_free_r+0x4c>
 800c9a0:	42a3      	cmp	r3, r4
 800c9a2:	d9fa      	bls.n	800c99a <_free_r+0x42>
 800c9a4:	6811      	ldr	r1, [r2, #0]
 800c9a6:	1850      	adds	r0, r2, r1
 800c9a8:	42a0      	cmp	r0, r4
 800c9aa:	d10b      	bne.n	800c9c4 <_free_r+0x6c>
 800c9ac:	6820      	ldr	r0, [r4, #0]
 800c9ae:	4401      	add	r1, r0
 800c9b0:	1850      	adds	r0, r2, r1
 800c9b2:	4283      	cmp	r3, r0
 800c9b4:	6011      	str	r1, [r2, #0]
 800c9b6:	d1e0      	bne.n	800c97a <_free_r+0x22>
 800c9b8:	6818      	ldr	r0, [r3, #0]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	4408      	add	r0, r1
 800c9be:	6010      	str	r0, [r2, #0]
 800c9c0:	6053      	str	r3, [r2, #4]
 800c9c2:	e7da      	b.n	800c97a <_free_r+0x22>
 800c9c4:	d902      	bls.n	800c9cc <_free_r+0x74>
 800c9c6:	230c      	movs	r3, #12
 800c9c8:	602b      	str	r3, [r5, #0]
 800c9ca:	e7d6      	b.n	800c97a <_free_r+0x22>
 800c9cc:	6820      	ldr	r0, [r4, #0]
 800c9ce:	1821      	adds	r1, r4, r0
 800c9d0:	428b      	cmp	r3, r1
 800c9d2:	bf01      	itttt	eq
 800c9d4:	6819      	ldreq	r1, [r3, #0]
 800c9d6:	685b      	ldreq	r3, [r3, #4]
 800c9d8:	1809      	addeq	r1, r1, r0
 800c9da:	6021      	streq	r1, [r4, #0]
 800c9dc:	6063      	str	r3, [r4, #4]
 800c9de:	6054      	str	r4, [r2, #4]
 800c9e0:	e7cb      	b.n	800c97a <_free_r+0x22>
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}
 800c9e4:	20001880 	.word	0x20001880

0800c9e8 <malloc>:
 800c9e8:	4b02      	ldr	r3, [pc, #8]	@ (800c9f4 <malloc+0xc>)
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	f000 b825 	b.w	800ca3c <_malloc_r>
 800c9f2:	bf00      	nop
 800c9f4:	20000218 	.word	0x20000218

0800c9f8 <sbrk_aligned>:
 800c9f8:	b570      	push	{r4, r5, r6, lr}
 800c9fa:	4e0f      	ldr	r6, [pc, #60]	@ (800ca38 <sbrk_aligned+0x40>)
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	6831      	ldr	r1, [r6, #0]
 800ca00:	4605      	mov	r5, r0
 800ca02:	b911      	cbnz	r1, 800ca0a <sbrk_aligned+0x12>
 800ca04:	f000 fe40 	bl	800d688 <_sbrk_r>
 800ca08:	6030      	str	r0, [r6, #0]
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	f000 fe3b 	bl	800d688 <_sbrk_r>
 800ca12:	1c43      	adds	r3, r0, #1
 800ca14:	d103      	bne.n	800ca1e <sbrk_aligned+0x26>
 800ca16:	f04f 34ff 	mov.w	r4, #4294967295
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	bd70      	pop	{r4, r5, r6, pc}
 800ca1e:	1cc4      	adds	r4, r0, #3
 800ca20:	f024 0403 	bic.w	r4, r4, #3
 800ca24:	42a0      	cmp	r0, r4
 800ca26:	d0f8      	beq.n	800ca1a <sbrk_aligned+0x22>
 800ca28:	1a21      	subs	r1, r4, r0
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	f000 fe2c 	bl	800d688 <_sbrk_r>
 800ca30:	3001      	adds	r0, #1
 800ca32:	d1f2      	bne.n	800ca1a <sbrk_aligned+0x22>
 800ca34:	e7ef      	b.n	800ca16 <sbrk_aligned+0x1e>
 800ca36:	bf00      	nop
 800ca38:	2000187c 	.word	0x2000187c

0800ca3c <_malloc_r>:
 800ca3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca40:	1ccd      	adds	r5, r1, #3
 800ca42:	f025 0503 	bic.w	r5, r5, #3
 800ca46:	3508      	adds	r5, #8
 800ca48:	2d0c      	cmp	r5, #12
 800ca4a:	bf38      	it	cc
 800ca4c:	250c      	movcc	r5, #12
 800ca4e:	2d00      	cmp	r5, #0
 800ca50:	4606      	mov	r6, r0
 800ca52:	db01      	blt.n	800ca58 <_malloc_r+0x1c>
 800ca54:	42a9      	cmp	r1, r5
 800ca56:	d904      	bls.n	800ca62 <_malloc_r+0x26>
 800ca58:	230c      	movs	r3, #12
 800ca5a:	6033      	str	r3, [r6, #0]
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb38 <_malloc_r+0xfc>
 800ca66:	f000 f869 	bl	800cb3c <__malloc_lock>
 800ca6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca6e:	461c      	mov	r4, r3
 800ca70:	bb44      	cbnz	r4, 800cac4 <_malloc_r+0x88>
 800ca72:	4629      	mov	r1, r5
 800ca74:	4630      	mov	r0, r6
 800ca76:	f7ff ffbf 	bl	800c9f8 <sbrk_aligned>
 800ca7a:	1c43      	adds	r3, r0, #1
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	d158      	bne.n	800cb32 <_malloc_r+0xf6>
 800ca80:	f8d8 4000 	ldr.w	r4, [r8]
 800ca84:	4627      	mov	r7, r4
 800ca86:	2f00      	cmp	r7, #0
 800ca88:	d143      	bne.n	800cb12 <_malloc_r+0xd6>
 800ca8a:	2c00      	cmp	r4, #0
 800ca8c:	d04b      	beq.n	800cb26 <_malloc_r+0xea>
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	4639      	mov	r1, r7
 800ca92:	4630      	mov	r0, r6
 800ca94:	eb04 0903 	add.w	r9, r4, r3
 800ca98:	f000 fdf6 	bl	800d688 <_sbrk_r>
 800ca9c:	4581      	cmp	r9, r0
 800ca9e:	d142      	bne.n	800cb26 <_malloc_r+0xea>
 800caa0:	6821      	ldr	r1, [r4, #0]
 800caa2:	4630      	mov	r0, r6
 800caa4:	1a6d      	subs	r5, r5, r1
 800caa6:	4629      	mov	r1, r5
 800caa8:	f7ff ffa6 	bl	800c9f8 <sbrk_aligned>
 800caac:	3001      	adds	r0, #1
 800caae:	d03a      	beq.n	800cb26 <_malloc_r+0xea>
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	442b      	add	r3, r5
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	f8d8 3000 	ldr.w	r3, [r8]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	bb62      	cbnz	r2, 800cb18 <_malloc_r+0xdc>
 800cabe:	f8c8 7000 	str.w	r7, [r8]
 800cac2:	e00f      	b.n	800cae4 <_malloc_r+0xa8>
 800cac4:	6822      	ldr	r2, [r4, #0]
 800cac6:	1b52      	subs	r2, r2, r5
 800cac8:	d420      	bmi.n	800cb0c <_malloc_r+0xd0>
 800caca:	2a0b      	cmp	r2, #11
 800cacc:	d917      	bls.n	800cafe <_malloc_r+0xc2>
 800cace:	1961      	adds	r1, r4, r5
 800cad0:	42a3      	cmp	r3, r4
 800cad2:	6025      	str	r5, [r4, #0]
 800cad4:	bf18      	it	ne
 800cad6:	6059      	strne	r1, [r3, #4]
 800cad8:	6863      	ldr	r3, [r4, #4]
 800cada:	bf08      	it	eq
 800cadc:	f8c8 1000 	streq.w	r1, [r8]
 800cae0:	5162      	str	r2, [r4, r5]
 800cae2:	604b      	str	r3, [r1, #4]
 800cae4:	4630      	mov	r0, r6
 800cae6:	f000 f82f 	bl	800cb48 <__malloc_unlock>
 800caea:	f104 000b 	add.w	r0, r4, #11
 800caee:	1d23      	adds	r3, r4, #4
 800caf0:	f020 0007 	bic.w	r0, r0, #7
 800caf4:	1ac2      	subs	r2, r0, r3
 800caf6:	bf1c      	itt	ne
 800caf8:	1a1b      	subne	r3, r3, r0
 800cafa:	50a3      	strne	r3, [r4, r2]
 800cafc:	e7af      	b.n	800ca5e <_malloc_r+0x22>
 800cafe:	6862      	ldr	r2, [r4, #4]
 800cb00:	42a3      	cmp	r3, r4
 800cb02:	bf0c      	ite	eq
 800cb04:	f8c8 2000 	streq.w	r2, [r8]
 800cb08:	605a      	strne	r2, [r3, #4]
 800cb0a:	e7eb      	b.n	800cae4 <_malloc_r+0xa8>
 800cb0c:	4623      	mov	r3, r4
 800cb0e:	6864      	ldr	r4, [r4, #4]
 800cb10:	e7ae      	b.n	800ca70 <_malloc_r+0x34>
 800cb12:	463c      	mov	r4, r7
 800cb14:	687f      	ldr	r7, [r7, #4]
 800cb16:	e7b6      	b.n	800ca86 <_malloc_r+0x4a>
 800cb18:	461a      	mov	r2, r3
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	42a3      	cmp	r3, r4
 800cb1e:	d1fb      	bne.n	800cb18 <_malloc_r+0xdc>
 800cb20:	2300      	movs	r3, #0
 800cb22:	6053      	str	r3, [r2, #4]
 800cb24:	e7de      	b.n	800cae4 <_malloc_r+0xa8>
 800cb26:	230c      	movs	r3, #12
 800cb28:	4630      	mov	r0, r6
 800cb2a:	6033      	str	r3, [r6, #0]
 800cb2c:	f000 f80c 	bl	800cb48 <__malloc_unlock>
 800cb30:	e794      	b.n	800ca5c <_malloc_r+0x20>
 800cb32:	6005      	str	r5, [r0, #0]
 800cb34:	e7d6      	b.n	800cae4 <_malloc_r+0xa8>
 800cb36:	bf00      	nop
 800cb38:	20001880 	.word	0x20001880

0800cb3c <__malloc_lock>:
 800cb3c:	4801      	ldr	r0, [pc, #4]	@ (800cb44 <__malloc_lock+0x8>)
 800cb3e:	f7ff b8a8 	b.w	800bc92 <__retarget_lock_acquire_recursive>
 800cb42:	bf00      	nop
 800cb44:	20001878 	.word	0x20001878

0800cb48 <__malloc_unlock>:
 800cb48:	4801      	ldr	r0, [pc, #4]	@ (800cb50 <__malloc_unlock+0x8>)
 800cb4a:	f7ff b8a3 	b.w	800bc94 <__retarget_lock_release_recursive>
 800cb4e:	bf00      	nop
 800cb50:	20001878 	.word	0x20001878

0800cb54 <_Balloc>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	69c6      	ldr	r6, [r0, #28]
 800cb58:	4604      	mov	r4, r0
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	b976      	cbnz	r6, 800cb7c <_Balloc+0x28>
 800cb5e:	2010      	movs	r0, #16
 800cb60:	f7ff ff42 	bl	800c9e8 <malloc>
 800cb64:	4602      	mov	r2, r0
 800cb66:	61e0      	str	r0, [r4, #28]
 800cb68:	b920      	cbnz	r0, 800cb74 <_Balloc+0x20>
 800cb6a:	216b      	movs	r1, #107	@ 0x6b
 800cb6c:	4b17      	ldr	r3, [pc, #92]	@ (800cbcc <_Balloc+0x78>)
 800cb6e:	4818      	ldr	r0, [pc, #96]	@ (800cbd0 <_Balloc+0x7c>)
 800cb70:	f000 fda8 	bl	800d6c4 <__assert_func>
 800cb74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb78:	6006      	str	r6, [r0, #0]
 800cb7a:	60c6      	str	r6, [r0, #12]
 800cb7c:	69e6      	ldr	r6, [r4, #28]
 800cb7e:	68f3      	ldr	r3, [r6, #12]
 800cb80:	b183      	cbz	r3, 800cba4 <_Balloc+0x50>
 800cb82:	69e3      	ldr	r3, [r4, #28]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb8a:	b9b8      	cbnz	r0, 800cbbc <_Balloc+0x68>
 800cb8c:	2101      	movs	r1, #1
 800cb8e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb92:	1d72      	adds	r2, r6, #5
 800cb94:	4620      	mov	r0, r4
 800cb96:	0092      	lsls	r2, r2, #2
 800cb98:	f000 fdb2 	bl	800d700 <_calloc_r>
 800cb9c:	b160      	cbz	r0, 800cbb8 <_Balloc+0x64>
 800cb9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cba2:	e00e      	b.n	800cbc2 <_Balloc+0x6e>
 800cba4:	2221      	movs	r2, #33	@ 0x21
 800cba6:	2104      	movs	r1, #4
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f000 fda9 	bl	800d700 <_calloc_r>
 800cbae:	69e3      	ldr	r3, [r4, #28]
 800cbb0:	60f0      	str	r0, [r6, #12]
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1e4      	bne.n	800cb82 <_Balloc+0x2e>
 800cbb8:	2000      	movs	r0, #0
 800cbba:	bd70      	pop	{r4, r5, r6, pc}
 800cbbc:	6802      	ldr	r2, [r0, #0]
 800cbbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbc8:	e7f7      	b.n	800cbba <_Balloc+0x66>
 800cbca:	bf00      	nop
 800cbcc:	0800e4eb 	.word	0x0800e4eb
 800cbd0:	0800e56b 	.word	0x0800e56b

0800cbd4 <_Bfree>:
 800cbd4:	b570      	push	{r4, r5, r6, lr}
 800cbd6:	69c6      	ldr	r6, [r0, #28]
 800cbd8:	4605      	mov	r5, r0
 800cbda:	460c      	mov	r4, r1
 800cbdc:	b976      	cbnz	r6, 800cbfc <_Bfree+0x28>
 800cbde:	2010      	movs	r0, #16
 800cbe0:	f7ff ff02 	bl	800c9e8 <malloc>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	61e8      	str	r0, [r5, #28]
 800cbe8:	b920      	cbnz	r0, 800cbf4 <_Bfree+0x20>
 800cbea:	218f      	movs	r1, #143	@ 0x8f
 800cbec:	4b08      	ldr	r3, [pc, #32]	@ (800cc10 <_Bfree+0x3c>)
 800cbee:	4809      	ldr	r0, [pc, #36]	@ (800cc14 <_Bfree+0x40>)
 800cbf0:	f000 fd68 	bl	800d6c4 <__assert_func>
 800cbf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbf8:	6006      	str	r6, [r0, #0]
 800cbfa:	60c6      	str	r6, [r0, #12]
 800cbfc:	b13c      	cbz	r4, 800cc0e <_Bfree+0x3a>
 800cbfe:	69eb      	ldr	r3, [r5, #28]
 800cc00:	6862      	ldr	r2, [r4, #4]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc08:	6021      	str	r1, [r4, #0]
 800cc0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}
 800cc10:	0800e4eb 	.word	0x0800e4eb
 800cc14:	0800e56b 	.word	0x0800e56b

0800cc18 <__multadd>:
 800cc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc1c:	4607      	mov	r7, r0
 800cc1e:	460c      	mov	r4, r1
 800cc20:	461e      	mov	r6, r3
 800cc22:	2000      	movs	r0, #0
 800cc24:	690d      	ldr	r5, [r1, #16]
 800cc26:	f101 0c14 	add.w	ip, r1, #20
 800cc2a:	f8dc 3000 	ldr.w	r3, [ip]
 800cc2e:	3001      	adds	r0, #1
 800cc30:	b299      	uxth	r1, r3
 800cc32:	fb02 6101 	mla	r1, r2, r1, r6
 800cc36:	0c1e      	lsrs	r6, r3, #16
 800cc38:	0c0b      	lsrs	r3, r1, #16
 800cc3a:	fb02 3306 	mla	r3, r2, r6, r3
 800cc3e:	b289      	uxth	r1, r1
 800cc40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc44:	4285      	cmp	r5, r0
 800cc46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc4a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc4e:	dcec      	bgt.n	800cc2a <__multadd+0x12>
 800cc50:	b30e      	cbz	r6, 800cc96 <__multadd+0x7e>
 800cc52:	68a3      	ldr	r3, [r4, #8]
 800cc54:	42ab      	cmp	r3, r5
 800cc56:	dc19      	bgt.n	800cc8c <__multadd+0x74>
 800cc58:	6861      	ldr	r1, [r4, #4]
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	3101      	adds	r1, #1
 800cc5e:	f7ff ff79 	bl	800cb54 <_Balloc>
 800cc62:	4680      	mov	r8, r0
 800cc64:	b928      	cbnz	r0, 800cc72 <__multadd+0x5a>
 800cc66:	4602      	mov	r2, r0
 800cc68:	21ba      	movs	r1, #186	@ 0xba
 800cc6a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc9c <__multadd+0x84>)
 800cc6c:	480c      	ldr	r0, [pc, #48]	@ (800cca0 <__multadd+0x88>)
 800cc6e:	f000 fd29 	bl	800d6c4 <__assert_func>
 800cc72:	6922      	ldr	r2, [r4, #16]
 800cc74:	f104 010c 	add.w	r1, r4, #12
 800cc78:	3202      	adds	r2, #2
 800cc7a:	0092      	lsls	r2, r2, #2
 800cc7c:	300c      	adds	r0, #12
 800cc7e:	f000 fd13 	bl	800d6a8 <memcpy>
 800cc82:	4621      	mov	r1, r4
 800cc84:	4638      	mov	r0, r7
 800cc86:	f7ff ffa5 	bl	800cbd4 <_Bfree>
 800cc8a:	4644      	mov	r4, r8
 800cc8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc90:	3501      	adds	r5, #1
 800cc92:	615e      	str	r6, [r3, #20]
 800cc94:	6125      	str	r5, [r4, #16]
 800cc96:	4620      	mov	r0, r4
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	0800e55a 	.word	0x0800e55a
 800cca0:	0800e56b 	.word	0x0800e56b

0800cca4 <__hi0bits>:
 800cca4:	4603      	mov	r3, r0
 800cca6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ccaa:	bf3a      	itte	cc
 800ccac:	0403      	lslcc	r3, r0, #16
 800ccae:	2010      	movcc	r0, #16
 800ccb0:	2000      	movcs	r0, #0
 800ccb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccb6:	bf3c      	itt	cc
 800ccb8:	021b      	lslcc	r3, r3, #8
 800ccba:	3008      	addcc	r0, #8
 800ccbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccc0:	bf3c      	itt	cc
 800ccc2:	011b      	lslcc	r3, r3, #4
 800ccc4:	3004      	addcc	r0, #4
 800ccc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccca:	bf3c      	itt	cc
 800cccc:	009b      	lslcc	r3, r3, #2
 800ccce:	3002      	addcc	r0, #2
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	db05      	blt.n	800cce0 <__hi0bits+0x3c>
 800ccd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ccd8:	f100 0001 	add.w	r0, r0, #1
 800ccdc:	bf08      	it	eq
 800ccde:	2020      	moveq	r0, #32
 800cce0:	4770      	bx	lr

0800cce2 <__lo0bits>:
 800cce2:	6803      	ldr	r3, [r0, #0]
 800cce4:	4602      	mov	r2, r0
 800cce6:	f013 0007 	ands.w	r0, r3, #7
 800ccea:	d00b      	beq.n	800cd04 <__lo0bits+0x22>
 800ccec:	07d9      	lsls	r1, r3, #31
 800ccee:	d421      	bmi.n	800cd34 <__lo0bits+0x52>
 800ccf0:	0798      	lsls	r0, r3, #30
 800ccf2:	bf49      	itett	mi
 800ccf4:	085b      	lsrmi	r3, r3, #1
 800ccf6:	089b      	lsrpl	r3, r3, #2
 800ccf8:	2001      	movmi	r0, #1
 800ccfa:	6013      	strmi	r3, [r2, #0]
 800ccfc:	bf5c      	itt	pl
 800ccfe:	2002      	movpl	r0, #2
 800cd00:	6013      	strpl	r3, [r2, #0]
 800cd02:	4770      	bx	lr
 800cd04:	b299      	uxth	r1, r3
 800cd06:	b909      	cbnz	r1, 800cd0c <__lo0bits+0x2a>
 800cd08:	2010      	movs	r0, #16
 800cd0a:	0c1b      	lsrs	r3, r3, #16
 800cd0c:	b2d9      	uxtb	r1, r3
 800cd0e:	b909      	cbnz	r1, 800cd14 <__lo0bits+0x32>
 800cd10:	3008      	adds	r0, #8
 800cd12:	0a1b      	lsrs	r3, r3, #8
 800cd14:	0719      	lsls	r1, r3, #28
 800cd16:	bf04      	itt	eq
 800cd18:	091b      	lsreq	r3, r3, #4
 800cd1a:	3004      	addeq	r0, #4
 800cd1c:	0799      	lsls	r1, r3, #30
 800cd1e:	bf04      	itt	eq
 800cd20:	089b      	lsreq	r3, r3, #2
 800cd22:	3002      	addeq	r0, #2
 800cd24:	07d9      	lsls	r1, r3, #31
 800cd26:	d403      	bmi.n	800cd30 <__lo0bits+0x4e>
 800cd28:	085b      	lsrs	r3, r3, #1
 800cd2a:	f100 0001 	add.w	r0, r0, #1
 800cd2e:	d003      	beq.n	800cd38 <__lo0bits+0x56>
 800cd30:	6013      	str	r3, [r2, #0]
 800cd32:	4770      	bx	lr
 800cd34:	2000      	movs	r0, #0
 800cd36:	4770      	bx	lr
 800cd38:	2020      	movs	r0, #32
 800cd3a:	4770      	bx	lr

0800cd3c <__i2b>:
 800cd3c:	b510      	push	{r4, lr}
 800cd3e:	460c      	mov	r4, r1
 800cd40:	2101      	movs	r1, #1
 800cd42:	f7ff ff07 	bl	800cb54 <_Balloc>
 800cd46:	4602      	mov	r2, r0
 800cd48:	b928      	cbnz	r0, 800cd56 <__i2b+0x1a>
 800cd4a:	f240 1145 	movw	r1, #325	@ 0x145
 800cd4e:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <__i2b+0x24>)
 800cd50:	4804      	ldr	r0, [pc, #16]	@ (800cd64 <__i2b+0x28>)
 800cd52:	f000 fcb7 	bl	800d6c4 <__assert_func>
 800cd56:	2301      	movs	r3, #1
 800cd58:	6144      	str	r4, [r0, #20]
 800cd5a:	6103      	str	r3, [r0, #16]
 800cd5c:	bd10      	pop	{r4, pc}
 800cd5e:	bf00      	nop
 800cd60:	0800e55a 	.word	0x0800e55a
 800cd64:	0800e56b 	.word	0x0800e56b

0800cd68 <__multiply>:
 800cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	4614      	mov	r4, r2
 800cd6e:	690a      	ldr	r2, [r1, #16]
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	460f      	mov	r7, r1
 800cd74:	429a      	cmp	r2, r3
 800cd76:	bfa2      	ittt	ge
 800cd78:	4623      	movge	r3, r4
 800cd7a:	460c      	movge	r4, r1
 800cd7c:	461f      	movge	r7, r3
 800cd7e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cd82:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cd86:	68a3      	ldr	r3, [r4, #8]
 800cd88:	6861      	ldr	r1, [r4, #4]
 800cd8a:	eb0a 0609 	add.w	r6, sl, r9
 800cd8e:	42b3      	cmp	r3, r6
 800cd90:	b085      	sub	sp, #20
 800cd92:	bfb8      	it	lt
 800cd94:	3101      	addlt	r1, #1
 800cd96:	f7ff fedd 	bl	800cb54 <_Balloc>
 800cd9a:	b930      	cbnz	r0, 800cdaa <__multiply+0x42>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cda2:	4b43      	ldr	r3, [pc, #268]	@ (800ceb0 <__multiply+0x148>)
 800cda4:	4843      	ldr	r0, [pc, #268]	@ (800ceb4 <__multiply+0x14c>)
 800cda6:	f000 fc8d 	bl	800d6c4 <__assert_func>
 800cdaa:	f100 0514 	add.w	r5, r0, #20
 800cdae:	462b      	mov	r3, r5
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cdb6:	4543      	cmp	r3, r8
 800cdb8:	d321      	bcc.n	800cdfe <__multiply+0x96>
 800cdba:	f107 0114 	add.w	r1, r7, #20
 800cdbe:	f104 0214 	add.w	r2, r4, #20
 800cdc2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cdc6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cdca:	9302      	str	r3, [sp, #8]
 800cdcc:	1b13      	subs	r3, r2, r4
 800cdce:	3b15      	subs	r3, #21
 800cdd0:	f023 0303 	bic.w	r3, r3, #3
 800cdd4:	3304      	adds	r3, #4
 800cdd6:	f104 0715 	add.w	r7, r4, #21
 800cdda:	42ba      	cmp	r2, r7
 800cddc:	bf38      	it	cc
 800cdde:	2304      	movcc	r3, #4
 800cde0:	9301      	str	r3, [sp, #4]
 800cde2:	9b02      	ldr	r3, [sp, #8]
 800cde4:	9103      	str	r1, [sp, #12]
 800cde6:	428b      	cmp	r3, r1
 800cde8:	d80c      	bhi.n	800ce04 <__multiply+0x9c>
 800cdea:	2e00      	cmp	r6, #0
 800cdec:	dd03      	ble.n	800cdf6 <__multiply+0x8e>
 800cdee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d05a      	beq.n	800ceac <__multiply+0x144>
 800cdf6:	6106      	str	r6, [r0, #16]
 800cdf8:	b005      	add	sp, #20
 800cdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfe:	f843 2b04 	str.w	r2, [r3], #4
 800ce02:	e7d8      	b.n	800cdb6 <__multiply+0x4e>
 800ce04:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce08:	f1ba 0f00 	cmp.w	sl, #0
 800ce0c:	d023      	beq.n	800ce56 <__multiply+0xee>
 800ce0e:	46a9      	mov	r9, r5
 800ce10:	f04f 0c00 	mov.w	ip, #0
 800ce14:	f104 0e14 	add.w	lr, r4, #20
 800ce18:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce1c:	f8d9 3000 	ldr.w	r3, [r9]
 800ce20:	fa1f fb87 	uxth.w	fp, r7
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce2a:	4463      	add	r3, ip
 800ce2c:	f8d9 c000 	ldr.w	ip, [r9]
 800ce30:	0c3f      	lsrs	r7, r7, #16
 800ce32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ce36:	fb0a c707 	mla	r7, sl, r7, ip
 800ce3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce44:	4572      	cmp	r2, lr
 800ce46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce4a:	f849 3b04 	str.w	r3, [r9], #4
 800ce4e:	d8e3      	bhi.n	800ce18 <__multiply+0xb0>
 800ce50:	9b01      	ldr	r3, [sp, #4]
 800ce52:	f845 c003 	str.w	ip, [r5, r3]
 800ce56:	9b03      	ldr	r3, [sp, #12]
 800ce58:	3104      	adds	r1, #4
 800ce5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce5e:	f1b9 0f00 	cmp.w	r9, #0
 800ce62:	d021      	beq.n	800cea8 <__multiply+0x140>
 800ce64:	46ae      	mov	lr, r5
 800ce66:	f04f 0a00 	mov.w	sl, #0
 800ce6a:	682b      	ldr	r3, [r5, #0]
 800ce6c:	f104 0c14 	add.w	ip, r4, #20
 800ce70:	f8bc b000 	ldrh.w	fp, [ip]
 800ce74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	fb09 770b 	mla	r7, r9, fp, r7
 800ce7e:	4457      	add	r7, sl
 800ce80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce84:	f84e 3b04 	str.w	r3, [lr], #4
 800ce88:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce90:	f8be 3000 	ldrh.w	r3, [lr]
 800ce94:	4562      	cmp	r2, ip
 800ce96:	fb09 330a 	mla	r3, r9, sl, r3
 800ce9a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ce9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cea2:	d8e5      	bhi.n	800ce70 <__multiply+0x108>
 800cea4:	9f01      	ldr	r7, [sp, #4]
 800cea6:	51eb      	str	r3, [r5, r7]
 800cea8:	3504      	adds	r5, #4
 800ceaa:	e79a      	b.n	800cde2 <__multiply+0x7a>
 800ceac:	3e01      	subs	r6, #1
 800ceae:	e79c      	b.n	800cdea <__multiply+0x82>
 800ceb0:	0800e55a 	.word	0x0800e55a
 800ceb4:	0800e56b 	.word	0x0800e56b

0800ceb8 <__pow5mult>:
 800ceb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cebc:	4615      	mov	r5, r2
 800cebe:	f012 0203 	ands.w	r2, r2, #3
 800cec2:	4607      	mov	r7, r0
 800cec4:	460e      	mov	r6, r1
 800cec6:	d007      	beq.n	800ced8 <__pow5mult+0x20>
 800cec8:	4c25      	ldr	r4, [pc, #148]	@ (800cf60 <__pow5mult+0xa8>)
 800ceca:	3a01      	subs	r2, #1
 800cecc:	2300      	movs	r3, #0
 800cece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ced2:	f7ff fea1 	bl	800cc18 <__multadd>
 800ced6:	4606      	mov	r6, r0
 800ced8:	10ad      	asrs	r5, r5, #2
 800ceda:	d03d      	beq.n	800cf58 <__pow5mult+0xa0>
 800cedc:	69fc      	ldr	r4, [r7, #28]
 800cede:	b97c      	cbnz	r4, 800cf00 <__pow5mult+0x48>
 800cee0:	2010      	movs	r0, #16
 800cee2:	f7ff fd81 	bl	800c9e8 <malloc>
 800cee6:	4602      	mov	r2, r0
 800cee8:	61f8      	str	r0, [r7, #28]
 800ceea:	b928      	cbnz	r0, 800cef8 <__pow5mult+0x40>
 800ceec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cef0:	4b1c      	ldr	r3, [pc, #112]	@ (800cf64 <__pow5mult+0xac>)
 800cef2:	481d      	ldr	r0, [pc, #116]	@ (800cf68 <__pow5mult+0xb0>)
 800cef4:	f000 fbe6 	bl	800d6c4 <__assert_func>
 800cef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cefc:	6004      	str	r4, [r0, #0]
 800cefe:	60c4      	str	r4, [r0, #12]
 800cf00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf08:	b94c      	cbnz	r4, 800cf1e <__pow5mult+0x66>
 800cf0a:	f240 2171 	movw	r1, #625	@ 0x271
 800cf0e:	4638      	mov	r0, r7
 800cf10:	f7ff ff14 	bl	800cd3c <__i2b>
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf1c:	6003      	str	r3, [r0, #0]
 800cf1e:	f04f 0900 	mov.w	r9, #0
 800cf22:	07eb      	lsls	r3, r5, #31
 800cf24:	d50a      	bpl.n	800cf3c <__pow5mult+0x84>
 800cf26:	4631      	mov	r1, r6
 800cf28:	4622      	mov	r2, r4
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	f7ff ff1c 	bl	800cd68 <__multiply>
 800cf30:	4680      	mov	r8, r0
 800cf32:	4631      	mov	r1, r6
 800cf34:	4638      	mov	r0, r7
 800cf36:	f7ff fe4d 	bl	800cbd4 <_Bfree>
 800cf3a:	4646      	mov	r6, r8
 800cf3c:	106d      	asrs	r5, r5, #1
 800cf3e:	d00b      	beq.n	800cf58 <__pow5mult+0xa0>
 800cf40:	6820      	ldr	r0, [r4, #0]
 800cf42:	b938      	cbnz	r0, 800cf54 <__pow5mult+0x9c>
 800cf44:	4622      	mov	r2, r4
 800cf46:	4621      	mov	r1, r4
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7ff ff0d 	bl	800cd68 <__multiply>
 800cf4e:	6020      	str	r0, [r4, #0]
 800cf50:	f8c0 9000 	str.w	r9, [r0]
 800cf54:	4604      	mov	r4, r0
 800cf56:	e7e4      	b.n	800cf22 <__pow5mult+0x6a>
 800cf58:	4630      	mov	r0, r6
 800cf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf5e:	bf00      	nop
 800cf60:	0800e5c4 	.word	0x0800e5c4
 800cf64:	0800e4eb 	.word	0x0800e4eb
 800cf68:	0800e56b 	.word	0x0800e56b

0800cf6c <__lshift>:
 800cf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf70:	460c      	mov	r4, r1
 800cf72:	4607      	mov	r7, r0
 800cf74:	4691      	mov	r9, r2
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	6849      	ldr	r1, [r1, #4]
 800cf7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf7e:	68a3      	ldr	r3, [r4, #8]
 800cf80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf84:	f108 0601 	add.w	r6, r8, #1
 800cf88:	42b3      	cmp	r3, r6
 800cf8a:	db0b      	blt.n	800cfa4 <__lshift+0x38>
 800cf8c:	4638      	mov	r0, r7
 800cf8e:	f7ff fde1 	bl	800cb54 <_Balloc>
 800cf92:	4605      	mov	r5, r0
 800cf94:	b948      	cbnz	r0, 800cfaa <__lshift+0x3e>
 800cf96:	4602      	mov	r2, r0
 800cf98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf9c:	4b27      	ldr	r3, [pc, #156]	@ (800d03c <__lshift+0xd0>)
 800cf9e:	4828      	ldr	r0, [pc, #160]	@ (800d040 <__lshift+0xd4>)
 800cfa0:	f000 fb90 	bl	800d6c4 <__assert_func>
 800cfa4:	3101      	adds	r1, #1
 800cfa6:	005b      	lsls	r3, r3, #1
 800cfa8:	e7ee      	b.n	800cf88 <__lshift+0x1c>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	f100 0114 	add.w	r1, r0, #20
 800cfb0:	f100 0210 	add.w	r2, r0, #16
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	4553      	cmp	r3, sl
 800cfb8:	db33      	blt.n	800d022 <__lshift+0xb6>
 800cfba:	6920      	ldr	r0, [r4, #16]
 800cfbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfc0:	f104 0314 	add.w	r3, r4, #20
 800cfc4:	f019 091f 	ands.w	r9, r9, #31
 800cfc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfd0:	d02b      	beq.n	800d02a <__lshift+0xbe>
 800cfd2:	468a      	mov	sl, r1
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f1c9 0e20 	rsb	lr, r9, #32
 800cfda:	6818      	ldr	r0, [r3, #0]
 800cfdc:	fa00 f009 	lsl.w	r0, r0, r9
 800cfe0:	4310      	orrs	r0, r2
 800cfe2:	f84a 0b04 	str.w	r0, [sl], #4
 800cfe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfea:	459c      	cmp	ip, r3
 800cfec:	fa22 f20e 	lsr.w	r2, r2, lr
 800cff0:	d8f3      	bhi.n	800cfda <__lshift+0x6e>
 800cff2:	ebac 0304 	sub.w	r3, ip, r4
 800cff6:	3b15      	subs	r3, #21
 800cff8:	f023 0303 	bic.w	r3, r3, #3
 800cffc:	3304      	adds	r3, #4
 800cffe:	f104 0015 	add.w	r0, r4, #21
 800d002:	4584      	cmp	ip, r0
 800d004:	bf38      	it	cc
 800d006:	2304      	movcc	r3, #4
 800d008:	50ca      	str	r2, [r1, r3]
 800d00a:	b10a      	cbz	r2, 800d010 <__lshift+0xa4>
 800d00c:	f108 0602 	add.w	r6, r8, #2
 800d010:	3e01      	subs	r6, #1
 800d012:	4638      	mov	r0, r7
 800d014:	4621      	mov	r1, r4
 800d016:	612e      	str	r6, [r5, #16]
 800d018:	f7ff fddc 	bl	800cbd4 <_Bfree>
 800d01c:	4628      	mov	r0, r5
 800d01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d022:	f842 0f04 	str.w	r0, [r2, #4]!
 800d026:	3301      	adds	r3, #1
 800d028:	e7c5      	b.n	800cfb6 <__lshift+0x4a>
 800d02a:	3904      	subs	r1, #4
 800d02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d030:	459c      	cmp	ip, r3
 800d032:	f841 2f04 	str.w	r2, [r1, #4]!
 800d036:	d8f9      	bhi.n	800d02c <__lshift+0xc0>
 800d038:	e7ea      	b.n	800d010 <__lshift+0xa4>
 800d03a:	bf00      	nop
 800d03c:	0800e55a 	.word	0x0800e55a
 800d040:	0800e56b 	.word	0x0800e56b

0800d044 <__mcmp>:
 800d044:	4603      	mov	r3, r0
 800d046:	690a      	ldr	r2, [r1, #16]
 800d048:	6900      	ldr	r0, [r0, #16]
 800d04a:	b530      	push	{r4, r5, lr}
 800d04c:	1a80      	subs	r0, r0, r2
 800d04e:	d10e      	bne.n	800d06e <__mcmp+0x2a>
 800d050:	3314      	adds	r3, #20
 800d052:	3114      	adds	r1, #20
 800d054:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d058:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d05c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d064:	4295      	cmp	r5, r2
 800d066:	d003      	beq.n	800d070 <__mcmp+0x2c>
 800d068:	d205      	bcs.n	800d076 <__mcmp+0x32>
 800d06a:	f04f 30ff 	mov.w	r0, #4294967295
 800d06e:	bd30      	pop	{r4, r5, pc}
 800d070:	42a3      	cmp	r3, r4
 800d072:	d3f3      	bcc.n	800d05c <__mcmp+0x18>
 800d074:	e7fb      	b.n	800d06e <__mcmp+0x2a>
 800d076:	2001      	movs	r0, #1
 800d078:	e7f9      	b.n	800d06e <__mcmp+0x2a>
	...

0800d07c <__mdiff>:
 800d07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	4689      	mov	r9, r1
 800d082:	4606      	mov	r6, r0
 800d084:	4611      	mov	r1, r2
 800d086:	4648      	mov	r0, r9
 800d088:	4614      	mov	r4, r2
 800d08a:	f7ff ffdb 	bl	800d044 <__mcmp>
 800d08e:	1e05      	subs	r5, r0, #0
 800d090:	d112      	bne.n	800d0b8 <__mdiff+0x3c>
 800d092:	4629      	mov	r1, r5
 800d094:	4630      	mov	r0, r6
 800d096:	f7ff fd5d 	bl	800cb54 <_Balloc>
 800d09a:	4602      	mov	r2, r0
 800d09c:	b928      	cbnz	r0, 800d0aa <__mdiff+0x2e>
 800d09e:	f240 2137 	movw	r1, #567	@ 0x237
 800d0a2:	4b3e      	ldr	r3, [pc, #248]	@ (800d19c <__mdiff+0x120>)
 800d0a4:	483e      	ldr	r0, [pc, #248]	@ (800d1a0 <__mdiff+0x124>)
 800d0a6:	f000 fb0d 	bl	800d6c4 <__assert_func>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	b003      	add	sp, #12
 800d0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b8:	bfbc      	itt	lt
 800d0ba:	464b      	movlt	r3, r9
 800d0bc:	46a1      	movlt	r9, r4
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0c4:	bfba      	itte	lt
 800d0c6:	461c      	movlt	r4, r3
 800d0c8:	2501      	movlt	r5, #1
 800d0ca:	2500      	movge	r5, #0
 800d0cc:	f7ff fd42 	bl	800cb54 <_Balloc>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	b918      	cbnz	r0, 800d0dc <__mdiff+0x60>
 800d0d4:	f240 2145 	movw	r1, #581	@ 0x245
 800d0d8:	4b30      	ldr	r3, [pc, #192]	@ (800d19c <__mdiff+0x120>)
 800d0da:	e7e3      	b.n	800d0a4 <__mdiff+0x28>
 800d0dc:	f100 0b14 	add.w	fp, r0, #20
 800d0e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0e4:	f109 0310 	add.w	r3, r9, #16
 800d0e8:	60c5      	str	r5, [r0, #12]
 800d0ea:	f04f 0c00 	mov.w	ip, #0
 800d0ee:	f109 0514 	add.w	r5, r9, #20
 800d0f2:	46d9      	mov	r9, fp
 800d0f4:	6926      	ldr	r6, [r4, #16]
 800d0f6:	f104 0e14 	add.w	lr, r4, #20
 800d0fa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d0fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	9b01      	ldr	r3, [sp, #4]
 800d106:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d10a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d10e:	b281      	uxth	r1, r0
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	fa1f f38a 	uxth.w	r3, sl
 800d116:	1a5b      	subs	r3, r3, r1
 800d118:	0c00      	lsrs	r0, r0, #16
 800d11a:	4463      	add	r3, ip
 800d11c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d120:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d124:	b29b      	uxth	r3, r3
 800d126:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d12a:	4576      	cmp	r6, lr
 800d12c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d130:	f849 3b04 	str.w	r3, [r9], #4
 800d134:	d8e6      	bhi.n	800d104 <__mdiff+0x88>
 800d136:	1b33      	subs	r3, r6, r4
 800d138:	3b15      	subs	r3, #21
 800d13a:	f023 0303 	bic.w	r3, r3, #3
 800d13e:	3415      	adds	r4, #21
 800d140:	3304      	adds	r3, #4
 800d142:	42a6      	cmp	r6, r4
 800d144:	bf38      	it	cc
 800d146:	2304      	movcc	r3, #4
 800d148:	441d      	add	r5, r3
 800d14a:	445b      	add	r3, fp
 800d14c:	461e      	mov	r6, r3
 800d14e:	462c      	mov	r4, r5
 800d150:	4544      	cmp	r4, r8
 800d152:	d30e      	bcc.n	800d172 <__mdiff+0xf6>
 800d154:	f108 0103 	add.w	r1, r8, #3
 800d158:	1b49      	subs	r1, r1, r5
 800d15a:	f021 0103 	bic.w	r1, r1, #3
 800d15e:	3d03      	subs	r5, #3
 800d160:	45a8      	cmp	r8, r5
 800d162:	bf38      	it	cc
 800d164:	2100      	movcc	r1, #0
 800d166:	440b      	add	r3, r1
 800d168:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d16c:	b199      	cbz	r1, 800d196 <__mdiff+0x11a>
 800d16e:	6117      	str	r7, [r2, #16]
 800d170:	e79e      	b.n	800d0b0 <__mdiff+0x34>
 800d172:	46e6      	mov	lr, ip
 800d174:	f854 1b04 	ldr.w	r1, [r4], #4
 800d178:	fa1f fc81 	uxth.w	ip, r1
 800d17c:	44f4      	add	ip, lr
 800d17e:	0c08      	lsrs	r0, r1, #16
 800d180:	4471      	add	r1, lr
 800d182:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d186:	b289      	uxth	r1, r1
 800d188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d18c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d190:	f846 1b04 	str.w	r1, [r6], #4
 800d194:	e7dc      	b.n	800d150 <__mdiff+0xd4>
 800d196:	3f01      	subs	r7, #1
 800d198:	e7e6      	b.n	800d168 <__mdiff+0xec>
 800d19a:	bf00      	nop
 800d19c:	0800e55a 	.word	0x0800e55a
 800d1a0:	0800e56b 	.word	0x0800e56b

0800d1a4 <__d2b>:
 800d1a4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d1a8:	2101      	movs	r1, #1
 800d1aa:	4690      	mov	r8, r2
 800d1ac:	4699      	mov	r9, r3
 800d1ae:	9e08      	ldr	r6, [sp, #32]
 800d1b0:	f7ff fcd0 	bl	800cb54 <_Balloc>
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	b930      	cbnz	r0, 800d1c6 <__d2b+0x22>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1be:	4b23      	ldr	r3, [pc, #140]	@ (800d24c <__d2b+0xa8>)
 800d1c0:	4823      	ldr	r0, [pc, #140]	@ (800d250 <__d2b+0xac>)
 800d1c2:	f000 fa7f 	bl	800d6c4 <__assert_func>
 800d1c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1ce:	b10d      	cbz	r5, 800d1d4 <__d2b+0x30>
 800d1d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	f1b8 0300 	subs.w	r3, r8, #0
 800d1da:	d024      	beq.n	800d226 <__d2b+0x82>
 800d1dc:	4668      	mov	r0, sp
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	f7ff fd7f 	bl	800cce2 <__lo0bits>
 800d1e4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1e8:	b1d8      	cbz	r0, 800d222 <__d2b+0x7e>
 800d1ea:	f1c0 0320 	rsb	r3, r0, #32
 800d1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f2:	430b      	orrs	r3, r1
 800d1f4:	40c2      	lsrs	r2, r0
 800d1f6:	6163      	str	r3, [r4, #20]
 800d1f8:	9201      	str	r2, [sp, #4]
 800d1fa:	9b01      	ldr	r3, [sp, #4]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	bf0c      	ite	eq
 800d200:	2201      	moveq	r2, #1
 800d202:	2202      	movne	r2, #2
 800d204:	61a3      	str	r3, [r4, #24]
 800d206:	6122      	str	r2, [r4, #16]
 800d208:	b1ad      	cbz	r5, 800d236 <__d2b+0x92>
 800d20a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d20e:	4405      	add	r5, r0
 800d210:	6035      	str	r5, [r6, #0]
 800d212:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d218:	6018      	str	r0, [r3, #0]
 800d21a:	4620      	mov	r0, r4
 800d21c:	b002      	add	sp, #8
 800d21e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d222:	6161      	str	r1, [r4, #20]
 800d224:	e7e9      	b.n	800d1fa <__d2b+0x56>
 800d226:	a801      	add	r0, sp, #4
 800d228:	f7ff fd5b 	bl	800cce2 <__lo0bits>
 800d22c:	9b01      	ldr	r3, [sp, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	6163      	str	r3, [r4, #20]
 800d232:	3020      	adds	r0, #32
 800d234:	e7e7      	b.n	800d206 <__d2b+0x62>
 800d236:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d23a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d23e:	6030      	str	r0, [r6, #0]
 800d240:	6918      	ldr	r0, [r3, #16]
 800d242:	f7ff fd2f 	bl	800cca4 <__hi0bits>
 800d246:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d24a:	e7e4      	b.n	800d216 <__d2b+0x72>
 800d24c:	0800e55a 	.word	0x0800e55a
 800d250:	0800e56b 	.word	0x0800e56b

0800d254 <__ssputs_r>:
 800d254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d258:	461f      	mov	r7, r3
 800d25a:	688e      	ldr	r6, [r1, #8]
 800d25c:	4682      	mov	sl, r0
 800d25e:	42be      	cmp	r6, r7
 800d260:	460c      	mov	r4, r1
 800d262:	4690      	mov	r8, r2
 800d264:	680b      	ldr	r3, [r1, #0]
 800d266:	d82d      	bhi.n	800d2c4 <__ssputs_r+0x70>
 800d268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d26c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d270:	d026      	beq.n	800d2c0 <__ssputs_r+0x6c>
 800d272:	6965      	ldr	r5, [r4, #20]
 800d274:	6909      	ldr	r1, [r1, #16]
 800d276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d27a:	eba3 0901 	sub.w	r9, r3, r1
 800d27e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d282:	1c7b      	adds	r3, r7, #1
 800d284:	444b      	add	r3, r9
 800d286:	106d      	asrs	r5, r5, #1
 800d288:	429d      	cmp	r5, r3
 800d28a:	bf38      	it	cc
 800d28c:	461d      	movcc	r5, r3
 800d28e:	0553      	lsls	r3, r2, #21
 800d290:	d527      	bpl.n	800d2e2 <__ssputs_r+0x8e>
 800d292:	4629      	mov	r1, r5
 800d294:	f7ff fbd2 	bl	800ca3c <_malloc_r>
 800d298:	4606      	mov	r6, r0
 800d29a:	b360      	cbz	r0, 800d2f6 <__ssputs_r+0xa2>
 800d29c:	464a      	mov	r2, r9
 800d29e:	6921      	ldr	r1, [r4, #16]
 800d2a0:	f000 fa02 	bl	800d6a8 <memcpy>
 800d2a4:	89a3      	ldrh	r3, [r4, #12]
 800d2a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d2aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2ae:	81a3      	strh	r3, [r4, #12]
 800d2b0:	6126      	str	r6, [r4, #16]
 800d2b2:	444e      	add	r6, r9
 800d2b4:	6026      	str	r6, [r4, #0]
 800d2b6:	463e      	mov	r6, r7
 800d2b8:	6165      	str	r5, [r4, #20]
 800d2ba:	eba5 0509 	sub.w	r5, r5, r9
 800d2be:	60a5      	str	r5, [r4, #8]
 800d2c0:	42be      	cmp	r6, r7
 800d2c2:	d900      	bls.n	800d2c6 <__ssputs_r+0x72>
 800d2c4:	463e      	mov	r6, r7
 800d2c6:	4632      	mov	r2, r6
 800d2c8:	4641      	mov	r1, r8
 800d2ca:	6820      	ldr	r0, [r4, #0]
 800d2cc:	f000 f9c2 	bl	800d654 <memmove>
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	68a3      	ldr	r3, [r4, #8]
 800d2d4:	1b9b      	subs	r3, r3, r6
 800d2d6:	60a3      	str	r3, [r4, #8]
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	4433      	add	r3, r6
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e2:	462a      	mov	r2, r5
 800d2e4:	f000 fa32 	bl	800d74c <_realloc_r>
 800d2e8:	4606      	mov	r6, r0
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d1e0      	bne.n	800d2b0 <__ssputs_r+0x5c>
 800d2ee:	4650      	mov	r0, sl
 800d2f0:	6921      	ldr	r1, [r4, #16]
 800d2f2:	f7ff fb31 	bl	800c958 <_free_r>
 800d2f6:	230c      	movs	r3, #12
 800d2f8:	f8ca 3000 	str.w	r3, [sl]
 800d2fc:	89a3      	ldrh	r3, [r4, #12]
 800d2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d306:	81a3      	strh	r3, [r4, #12]
 800d308:	e7e9      	b.n	800d2de <__ssputs_r+0x8a>
	...

0800d30c <_svfiprintf_r>:
 800d30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d310:	4698      	mov	r8, r3
 800d312:	898b      	ldrh	r3, [r1, #12]
 800d314:	4607      	mov	r7, r0
 800d316:	061b      	lsls	r3, r3, #24
 800d318:	460d      	mov	r5, r1
 800d31a:	4614      	mov	r4, r2
 800d31c:	b09d      	sub	sp, #116	@ 0x74
 800d31e:	d510      	bpl.n	800d342 <_svfiprintf_r+0x36>
 800d320:	690b      	ldr	r3, [r1, #16]
 800d322:	b973      	cbnz	r3, 800d342 <_svfiprintf_r+0x36>
 800d324:	2140      	movs	r1, #64	@ 0x40
 800d326:	f7ff fb89 	bl	800ca3c <_malloc_r>
 800d32a:	6028      	str	r0, [r5, #0]
 800d32c:	6128      	str	r0, [r5, #16]
 800d32e:	b930      	cbnz	r0, 800d33e <_svfiprintf_r+0x32>
 800d330:	230c      	movs	r3, #12
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	f04f 30ff 	mov.w	r0, #4294967295
 800d338:	b01d      	add	sp, #116	@ 0x74
 800d33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33e:	2340      	movs	r3, #64	@ 0x40
 800d340:	616b      	str	r3, [r5, #20]
 800d342:	2300      	movs	r3, #0
 800d344:	9309      	str	r3, [sp, #36]	@ 0x24
 800d346:	2320      	movs	r3, #32
 800d348:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d34c:	2330      	movs	r3, #48	@ 0x30
 800d34e:	f04f 0901 	mov.w	r9, #1
 800d352:	f8cd 800c 	str.w	r8, [sp, #12]
 800d356:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d4f0 <_svfiprintf_r+0x1e4>
 800d35a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d35e:	4623      	mov	r3, r4
 800d360:	469a      	mov	sl, r3
 800d362:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d366:	b10a      	cbz	r2, 800d36c <_svfiprintf_r+0x60>
 800d368:	2a25      	cmp	r2, #37	@ 0x25
 800d36a:	d1f9      	bne.n	800d360 <_svfiprintf_r+0x54>
 800d36c:	ebba 0b04 	subs.w	fp, sl, r4
 800d370:	d00b      	beq.n	800d38a <_svfiprintf_r+0x7e>
 800d372:	465b      	mov	r3, fp
 800d374:	4622      	mov	r2, r4
 800d376:	4629      	mov	r1, r5
 800d378:	4638      	mov	r0, r7
 800d37a:	f7ff ff6b 	bl	800d254 <__ssputs_r>
 800d37e:	3001      	adds	r0, #1
 800d380:	f000 80a7 	beq.w	800d4d2 <_svfiprintf_r+0x1c6>
 800d384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d386:	445a      	add	r2, fp
 800d388:	9209      	str	r2, [sp, #36]	@ 0x24
 800d38a:	f89a 3000 	ldrb.w	r3, [sl]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f000 809f 	beq.w	800d4d2 <_svfiprintf_r+0x1c6>
 800d394:	2300      	movs	r3, #0
 800d396:	f04f 32ff 	mov.w	r2, #4294967295
 800d39a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d39e:	f10a 0a01 	add.w	sl, sl, #1
 800d3a2:	9304      	str	r3, [sp, #16]
 800d3a4:	9307      	str	r3, [sp, #28]
 800d3a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3ac:	4654      	mov	r4, sl
 800d3ae:	2205      	movs	r2, #5
 800d3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b4:	484e      	ldr	r0, [pc, #312]	@ (800d4f0 <_svfiprintf_r+0x1e4>)
 800d3b6:	f7fe fc6e 	bl	800bc96 <memchr>
 800d3ba:	9a04      	ldr	r2, [sp, #16]
 800d3bc:	b9d8      	cbnz	r0, 800d3f6 <_svfiprintf_r+0xea>
 800d3be:	06d0      	lsls	r0, r2, #27
 800d3c0:	bf44      	itt	mi
 800d3c2:	2320      	movmi	r3, #32
 800d3c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3c8:	0711      	lsls	r1, r2, #28
 800d3ca:	bf44      	itt	mi
 800d3cc:	232b      	movmi	r3, #43	@ 0x2b
 800d3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3d8:	d015      	beq.n	800d406 <_svfiprintf_r+0xfa>
 800d3da:	4654      	mov	r4, sl
 800d3dc:	2000      	movs	r0, #0
 800d3de:	f04f 0c0a 	mov.w	ip, #10
 800d3e2:	9a07      	ldr	r2, [sp, #28]
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ea:	3b30      	subs	r3, #48	@ 0x30
 800d3ec:	2b09      	cmp	r3, #9
 800d3ee:	d94b      	bls.n	800d488 <_svfiprintf_r+0x17c>
 800d3f0:	b1b0      	cbz	r0, 800d420 <_svfiprintf_r+0x114>
 800d3f2:	9207      	str	r2, [sp, #28]
 800d3f4:	e014      	b.n	800d420 <_svfiprintf_r+0x114>
 800d3f6:	eba0 0308 	sub.w	r3, r0, r8
 800d3fa:	fa09 f303 	lsl.w	r3, r9, r3
 800d3fe:	4313      	orrs	r3, r2
 800d400:	46a2      	mov	sl, r4
 800d402:	9304      	str	r3, [sp, #16]
 800d404:	e7d2      	b.n	800d3ac <_svfiprintf_r+0xa0>
 800d406:	9b03      	ldr	r3, [sp, #12]
 800d408:	1d19      	adds	r1, r3, #4
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	9103      	str	r1, [sp, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	bfbb      	ittet	lt
 800d412:	425b      	neglt	r3, r3
 800d414:	f042 0202 	orrlt.w	r2, r2, #2
 800d418:	9307      	strge	r3, [sp, #28]
 800d41a:	9307      	strlt	r3, [sp, #28]
 800d41c:	bfb8      	it	lt
 800d41e:	9204      	strlt	r2, [sp, #16]
 800d420:	7823      	ldrb	r3, [r4, #0]
 800d422:	2b2e      	cmp	r3, #46	@ 0x2e
 800d424:	d10a      	bne.n	800d43c <_svfiprintf_r+0x130>
 800d426:	7863      	ldrb	r3, [r4, #1]
 800d428:	2b2a      	cmp	r3, #42	@ 0x2a
 800d42a:	d132      	bne.n	800d492 <_svfiprintf_r+0x186>
 800d42c:	9b03      	ldr	r3, [sp, #12]
 800d42e:	3402      	adds	r4, #2
 800d430:	1d1a      	adds	r2, r3, #4
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	9203      	str	r2, [sp, #12]
 800d436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d43a:	9305      	str	r3, [sp, #20]
 800d43c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d4f4 <_svfiprintf_r+0x1e8>
 800d440:	2203      	movs	r2, #3
 800d442:	4650      	mov	r0, sl
 800d444:	7821      	ldrb	r1, [r4, #0]
 800d446:	f7fe fc26 	bl	800bc96 <memchr>
 800d44a:	b138      	cbz	r0, 800d45c <_svfiprintf_r+0x150>
 800d44c:	2240      	movs	r2, #64	@ 0x40
 800d44e:	9b04      	ldr	r3, [sp, #16]
 800d450:	eba0 000a 	sub.w	r0, r0, sl
 800d454:	4082      	lsls	r2, r0
 800d456:	4313      	orrs	r3, r2
 800d458:	3401      	adds	r4, #1
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d460:	2206      	movs	r2, #6
 800d462:	4825      	ldr	r0, [pc, #148]	@ (800d4f8 <_svfiprintf_r+0x1ec>)
 800d464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d468:	f7fe fc15 	bl	800bc96 <memchr>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d036      	beq.n	800d4de <_svfiprintf_r+0x1d2>
 800d470:	4b22      	ldr	r3, [pc, #136]	@ (800d4fc <_svfiprintf_r+0x1f0>)
 800d472:	bb1b      	cbnz	r3, 800d4bc <_svfiprintf_r+0x1b0>
 800d474:	9b03      	ldr	r3, [sp, #12]
 800d476:	3307      	adds	r3, #7
 800d478:	f023 0307 	bic.w	r3, r3, #7
 800d47c:	3308      	adds	r3, #8
 800d47e:	9303      	str	r3, [sp, #12]
 800d480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d482:	4433      	add	r3, r6
 800d484:	9309      	str	r3, [sp, #36]	@ 0x24
 800d486:	e76a      	b.n	800d35e <_svfiprintf_r+0x52>
 800d488:	460c      	mov	r4, r1
 800d48a:	2001      	movs	r0, #1
 800d48c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d490:	e7a8      	b.n	800d3e4 <_svfiprintf_r+0xd8>
 800d492:	2300      	movs	r3, #0
 800d494:	f04f 0c0a 	mov.w	ip, #10
 800d498:	4619      	mov	r1, r3
 800d49a:	3401      	adds	r4, #1
 800d49c:	9305      	str	r3, [sp, #20]
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4a4:	3a30      	subs	r2, #48	@ 0x30
 800d4a6:	2a09      	cmp	r2, #9
 800d4a8:	d903      	bls.n	800d4b2 <_svfiprintf_r+0x1a6>
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0c6      	beq.n	800d43c <_svfiprintf_r+0x130>
 800d4ae:	9105      	str	r1, [sp, #20]
 800d4b0:	e7c4      	b.n	800d43c <_svfiprintf_r+0x130>
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4ba:	e7f0      	b.n	800d49e <_svfiprintf_r+0x192>
 800d4bc:	ab03      	add	r3, sp, #12
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	462a      	mov	r2, r5
 800d4c2:	4638      	mov	r0, r7
 800d4c4:	4b0e      	ldr	r3, [pc, #56]	@ (800d500 <_svfiprintf_r+0x1f4>)
 800d4c6:	a904      	add	r1, sp, #16
 800d4c8:	f7fd fe6e 	bl	800b1a8 <_printf_float>
 800d4cc:	1c42      	adds	r2, r0, #1
 800d4ce:	4606      	mov	r6, r0
 800d4d0:	d1d6      	bne.n	800d480 <_svfiprintf_r+0x174>
 800d4d2:	89ab      	ldrh	r3, [r5, #12]
 800d4d4:	065b      	lsls	r3, r3, #25
 800d4d6:	f53f af2d 	bmi.w	800d334 <_svfiprintf_r+0x28>
 800d4da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4dc:	e72c      	b.n	800d338 <_svfiprintf_r+0x2c>
 800d4de:	ab03      	add	r3, sp, #12
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	462a      	mov	r2, r5
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	4b06      	ldr	r3, [pc, #24]	@ (800d500 <_svfiprintf_r+0x1f4>)
 800d4e8:	a904      	add	r1, sp, #16
 800d4ea:	f7fe f8fb 	bl	800b6e4 <_printf_i>
 800d4ee:	e7ed      	b.n	800d4cc <_svfiprintf_r+0x1c0>
 800d4f0:	0800e6c0 	.word	0x0800e6c0
 800d4f4:	0800e6c6 	.word	0x0800e6c6
 800d4f8:	0800e6ca 	.word	0x0800e6ca
 800d4fc:	0800b1a9 	.word	0x0800b1a9
 800d500:	0800d255 	.word	0x0800d255

0800d504 <__sflush_r>:
 800d504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	0716      	lsls	r6, r2, #28
 800d50c:	4605      	mov	r5, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	d454      	bmi.n	800d5bc <__sflush_r+0xb8>
 800d512:	684b      	ldr	r3, [r1, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	dc02      	bgt.n	800d51e <__sflush_r+0x1a>
 800d518:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	dd48      	ble.n	800d5b0 <__sflush_r+0xac>
 800d51e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d520:	2e00      	cmp	r6, #0
 800d522:	d045      	beq.n	800d5b0 <__sflush_r+0xac>
 800d524:	2300      	movs	r3, #0
 800d526:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d52a:	682f      	ldr	r7, [r5, #0]
 800d52c:	6a21      	ldr	r1, [r4, #32]
 800d52e:	602b      	str	r3, [r5, #0]
 800d530:	d030      	beq.n	800d594 <__sflush_r+0x90>
 800d532:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d534:	89a3      	ldrh	r3, [r4, #12]
 800d536:	0759      	lsls	r1, r3, #29
 800d538:	d505      	bpl.n	800d546 <__sflush_r+0x42>
 800d53a:	6863      	ldr	r3, [r4, #4]
 800d53c:	1ad2      	subs	r2, r2, r3
 800d53e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d540:	b10b      	cbz	r3, 800d546 <__sflush_r+0x42>
 800d542:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d544:	1ad2      	subs	r2, r2, r3
 800d546:	2300      	movs	r3, #0
 800d548:	4628      	mov	r0, r5
 800d54a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d54c:	6a21      	ldr	r1, [r4, #32]
 800d54e:	47b0      	blx	r6
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	d106      	bne.n	800d564 <__sflush_r+0x60>
 800d556:	6829      	ldr	r1, [r5, #0]
 800d558:	291d      	cmp	r1, #29
 800d55a:	d82b      	bhi.n	800d5b4 <__sflush_r+0xb0>
 800d55c:	4a28      	ldr	r2, [pc, #160]	@ (800d600 <__sflush_r+0xfc>)
 800d55e:	410a      	asrs	r2, r1
 800d560:	07d6      	lsls	r6, r2, #31
 800d562:	d427      	bmi.n	800d5b4 <__sflush_r+0xb0>
 800d564:	2200      	movs	r2, #0
 800d566:	6062      	str	r2, [r4, #4]
 800d568:	6922      	ldr	r2, [r4, #16]
 800d56a:	04d9      	lsls	r1, r3, #19
 800d56c:	6022      	str	r2, [r4, #0]
 800d56e:	d504      	bpl.n	800d57a <__sflush_r+0x76>
 800d570:	1c42      	adds	r2, r0, #1
 800d572:	d101      	bne.n	800d578 <__sflush_r+0x74>
 800d574:	682b      	ldr	r3, [r5, #0]
 800d576:	b903      	cbnz	r3, 800d57a <__sflush_r+0x76>
 800d578:	6560      	str	r0, [r4, #84]	@ 0x54
 800d57a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d57c:	602f      	str	r7, [r5, #0]
 800d57e:	b1b9      	cbz	r1, 800d5b0 <__sflush_r+0xac>
 800d580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d584:	4299      	cmp	r1, r3
 800d586:	d002      	beq.n	800d58e <__sflush_r+0x8a>
 800d588:	4628      	mov	r0, r5
 800d58a:	f7ff f9e5 	bl	800c958 <_free_r>
 800d58e:	2300      	movs	r3, #0
 800d590:	6363      	str	r3, [r4, #52]	@ 0x34
 800d592:	e00d      	b.n	800d5b0 <__sflush_r+0xac>
 800d594:	2301      	movs	r3, #1
 800d596:	4628      	mov	r0, r5
 800d598:	47b0      	blx	r6
 800d59a:	4602      	mov	r2, r0
 800d59c:	1c50      	adds	r0, r2, #1
 800d59e:	d1c9      	bne.n	800d534 <__sflush_r+0x30>
 800d5a0:	682b      	ldr	r3, [r5, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d0c6      	beq.n	800d534 <__sflush_r+0x30>
 800d5a6:	2b1d      	cmp	r3, #29
 800d5a8:	d001      	beq.n	800d5ae <__sflush_r+0xaa>
 800d5aa:	2b16      	cmp	r3, #22
 800d5ac:	d11d      	bne.n	800d5ea <__sflush_r+0xe6>
 800d5ae:	602f      	str	r7, [r5, #0]
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	e021      	b.n	800d5f8 <__sflush_r+0xf4>
 800d5b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5b8:	b21b      	sxth	r3, r3
 800d5ba:	e01a      	b.n	800d5f2 <__sflush_r+0xee>
 800d5bc:	690f      	ldr	r7, [r1, #16]
 800d5be:	2f00      	cmp	r7, #0
 800d5c0:	d0f6      	beq.n	800d5b0 <__sflush_r+0xac>
 800d5c2:	0793      	lsls	r3, r2, #30
 800d5c4:	bf18      	it	ne
 800d5c6:	2300      	movne	r3, #0
 800d5c8:	680e      	ldr	r6, [r1, #0]
 800d5ca:	bf08      	it	eq
 800d5cc:	694b      	ldreq	r3, [r1, #20]
 800d5ce:	1bf6      	subs	r6, r6, r7
 800d5d0:	600f      	str	r7, [r1, #0]
 800d5d2:	608b      	str	r3, [r1, #8]
 800d5d4:	2e00      	cmp	r6, #0
 800d5d6:	ddeb      	ble.n	800d5b0 <__sflush_r+0xac>
 800d5d8:	4633      	mov	r3, r6
 800d5da:	463a      	mov	r2, r7
 800d5dc:	4628      	mov	r0, r5
 800d5de:	6a21      	ldr	r1, [r4, #32]
 800d5e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d5e4:	47e0      	blx	ip
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	dc07      	bgt.n	800d5fa <__sflush_r+0xf6>
 800d5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f6:	81a3      	strh	r3, [r4, #12]
 800d5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5fa:	4407      	add	r7, r0
 800d5fc:	1a36      	subs	r6, r6, r0
 800d5fe:	e7e9      	b.n	800d5d4 <__sflush_r+0xd0>
 800d600:	dfbffffe 	.word	0xdfbffffe

0800d604 <_fflush_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	690b      	ldr	r3, [r1, #16]
 800d608:	4605      	mov	r5, r0
 800d60a:	460c      	mov	r4, r1
 800d60c:	b913      	cbnz	r3, 800d614 <_fflush_r+0x10>
 800d60e:	2500      	movs	r5, #0
 800d610:	4628      	mov	r0, r5
 800d612:	bd38      	pop	{r3, r4, r5, pc}
 800d614:	b118      	cbz	r0, 800d61e <_fflush_r+0x1a>
 800d616:	6a03      	ldr	r3, [r0, #32]
 800d618:	b90b      	cbnz	r3, 800d61e <_fflush_r+0x1a>
 800d61a:	f7fe fa0f 	bl	800ba3c <__sinit>
 800d61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0f3      	beq.n	800d60e <_fflush_r+0xa>
 800d626:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d628:	07d0      	lsls	r0, r2, #31
 800d62a:	d404      	bmi.n	800d636 <_fflush_r+0x32>
 800d62c:	0599      	lsls	r1, r3, #22
 800d62e:	d402      	bmi.n	800d636 <_fflush_r+0x32>
 800d630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d632:	f7fe fb2e 	bl	800bc92 <__retarget_lock_acquire_recursive>
 800d636:	4628      	mov	r0, r5
 800d638:	4621      	mov	r1, r4
 800d63a:	f7ff ff63 	bl	800d504 <__sflush_r>
 800d63e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d640:	4605      	mov	r5, r0
 800d642:	07da      	lsls	r2, r3, #31
 800d644:	d4e4      	bmi.n	800d610 <_fflush_r+0xc>
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	059b      	lsls	r3, r3, #22
 800d64a:	d4e1      	bmi.n	800d610 <_fflush_r+0xc>
 800d64c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d64e:	f7fe fb21 	bl	800bc94 <__retarget_lock_release_recursive>
 800d652:	e7dd      	b.n	800d610 <_fflush_r+0xc>

0800d654 <memmove>:
 800d654:	4288      	cmp	r0, r1
 800d656:	b510      	push	{r4, lr}
 800d658:	eb01 0402 	add.w	r4, r1, r2
 800d65c:	d902      	bls.n	800d664 <memmove+0x10>
 800d65e:	4284      	cmp	r4, r0
 800d660:	4623      	mov	r3, r4
 800d662:	d807      	bhi.n	800d674 <memmove+0x20>
 800d664:	1e43      	subs	r3, r0, #1
 800d666:	42a1      	cmp	r1, r4
 800d668:	d008      	beq.n	800d67c <memmove+0x28>
 800d66a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d66e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d672:	e7f8      	b.n	800d666 <memmove+0x12>
 800d674:	4601      	mov	r1, r0
 800d676:	4402      	add	r2, r0
 800d678:	428a      	cmp	r2, r1
 800d67a:	d100      	bne.n	800d67e <memmove+0x2a>
 800d67c:	bd10      	pop	{r4, pc}
 800d67e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d686:	e7f7      	b.n	800d678 <memmove+0x24>

0800d688 <_sbrk_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	2300      	movs	r3, #0
 800d68c:	4d05      	ldr	r5, [pc, #20]	@ (800d6a4 <_sbrk_r+0x1c>)
 800d68e:	4604      	mov	r4, r0
 800d690:	4608      	mov	r0, r1
 800d692:	602b      	str	r3, [r5, #0]
 800d694:	f7f4 fc96 	bl	8001fc4 <_sbrk>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	d102      	bne.n	800d6a2 <_sbrk_r+0x1a>
 800d69c:	682b      	ldr	r3, [r5, #0]
 800d69e:	b103      	cbz	r3, 800d6a2 <_sbrk_r+0x1a>
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
 800d6a4:	20001874 	.word	0x20001874

0800d6a8 <memcpy>:
 800d6a8:	440a      	add	r2, r1
 800d6aa:	4291      	cmp	r1, r2
 800d6ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6b0:	d100      	bne.n	800d6b4 <memcpy+0xc>
 800d6b2:	4770      	bx	lr
 800d6b4:	b510      	push	{r4, lr}
 800d6b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ba:	4291      	cmp	r1, r2
 800d6bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6c0:	d1f9      	bne.n	800d6b6 <memcpy+0xe>
 800d6c2:	bd10      	pop	{r4, pc}

0800d6c4 <__assert_func>:
 800d6c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6c6:	4614      	mov	r4, r2
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	4b09      	ldr	r3, [pc, #36]	@ (800d6f0 <__assert_func+0x2c>)
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	68d8      	ldr	r0, [r3, #12]
 800d6d2:	b954      	cbnz	r4, 800d6ea <__assert_func+0x26>
 800d6d4:	4b07      	ldr	r3, [pc, #28]	@ (800d6f4 <__assert_func+0x30>)
 800d6d6:	461c      	mov	r4, r3
 800d6d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6dc:	9100      	str	r1, [sp, #0]
 800d6de:	462b      	mov	r3, r5
 800d6e0:	4905      	ldr	r1, [pc, #20]	@ (800d6f8 <__assert_func+0x34>)
 800d6e2:	f000 f86f 	bl	800d7c4 <fiprintf>
 800d6e6:	f000 f87f 	bl	800d7e8 <abort>
 800d6ea:	4b04      	ldr	r3, [pc, #16]	@ (800d6fc <__assert_func+0x38>)
 800d6ec:	e7f4      	b.n	800d6d8 <__assert_func+0x14>
 800d6ee:	bf00      	nop
 800d6f0:	20000218 	.word	0x20000218
 800d6f4:	0800e716 	.word	0x0800e716
 800d6f8:	0800e6e8 	.word	0x0800e6e8
 800d6fc:	0800e6db 	.word	0x0800e6db

0800d700 <_calloc_r>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	fba1 5402 	umull	r5, r4, r1, r2
 800d706:	b93c      	cbnz	r4, 800d718 <_calloc_r+0x18>
 800d708:	4629      	mov	r1, r5
 800d70a:	f7ff f997 	bl	800ca3c <_malloc_r>
 800d70e:	4606      	mov	r6, r0
 800d710:	b928      	cbnz	r0, 800d71e <_calloc_r+0x1e>
 800d712:	2600      	movs	r6, #0
 800d714:	4630      	mov	r0, r6
 800d716:	bd70      	pop	{r4, r5, r6, pc}
 800d718:	220c      	movs	r2, #12
 800d71a:	6002      	str	r2, [r0, #0]
 800d71c:	e7f9      	b.n	800d712 <_calloc_r+0x12>
 800d71e:	462a      	mov	r2, r5
 800d720:	4621      	mov	r1, r4
 800d722:	f7fe fa38 	bl	800bb96 <memset>
 800d726:	e7f5      	b.n	800d714 <_calloc_r+0x14>

0800d728 <__ascii_mbtowc>:
 800d728:	b082      	sub	sp, #8
 800d72a:	b901      	cbnz	r1, 800d72e <__ascii_mbtowc+0x6>
 800d72c:	a901      	add	r1, sp, #4
 800d72e:	b142      	cbz	r2, 800d742 <__ascii_mbtowc+0x1a>
 800d730:	b14b      	cbz	r3, 800d746 <__ascii_mbtowc+0x1e>
 800d732:	7813      	ldrb	r3, [r2, #0]
 800d734:	600b      	str	r3, [r1, #0]
 800d736:	7812      	ldrb	r2, [r2, #0]
 800d738:	1e10      	subs	r0, r2, #0
 800d73a:	bf18      	it	ne
 800d73c:	2001      	movne	r0, #1
 800d73e:	b002      	add	sp, #8
 800d740:	4770      	bx	lr
 800d742:	4610      	mov	r0, r2
 800d744:	e7fb      	b.n	800d73e <__ascii_mbtowc+0x16>
 800d746:	f06f 0001 	mvn.w	r0, #1
 800d74a:	e7f8      	b.n	800d73e <__ascii_mbtowc+0x16>

0800d74c <_realloc_r>:
 800d74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d750:	4680      	mov	r8, r0
 800d752:	4615      	mov	r5, r2
 800d754:	460c      	mov	r4, r1
 800d756:	b921      	cbnz	r1, 800d762 <_realloc_r+0x16>
 800d758:	4611      	mov	r1, r2
 800d75a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d75e:	f7ff b96d 	b.w	800ca3c <_malloc_r>
 800d762:	b92a      	cbnz	r2, 800d770 <_realloc_r+0x24>
 800d764:	f7ff f8f8 	bl	800c958 <_free_r>
 800d768:	2400      	movs	r4, #0
 800d76a:	4620      	mov	r0, r4
 800d76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d770:	f000 f841 	bl	800d7f6 <_malloc_usable_size_r>
 800d774:	4285      	cmp	r5, r0
 800d776:	4606      	mov	r6, r0
 800d778:	d802      	bhi.n	800d780 <_realloc_r+0x34>
 800d77a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d77e:	d8f4      	bhi.n	800d76a <_realloc_r+0x1e>
 800d780:	4629      	mov	r1, r5
 800d782:	4640      	mov	r0, r8
 800d784:	f7ff f95a 	bl	800ca3c <_malloc_r>
 800d788:	4607      	mov	r7, r0
 800d78a:	2800      	cmp	r0, #0
 800d78c:	d0ec      	beq.n	800d768 <_realloc_r+0x1c>
 800d78e:	42b5      	cmp	r5, r6
 800d790:	462a      	mov	r2, r5
 800d792:	4621      	mov	r1, r4
 800d794:	bf28      	it	cs
 800d796:	4632      	movcs	r2, r6
 800d798:	f7ff ff86 	bl	800d6a8 <memcpy>
 800d79c:	4621      	mov	r1, r4
 800d79e:	4640      	mov	r0, r8
 800d7a0:	f7ff f8da 	bl	800c958 <_free_r>
 800d7a4:	463c      	mov	r4, r7
 800d7a6:	e7e0      	b.n	800d76a <_realloc_r+0x1e>

0800d7a8 <__ascii_wctomb>:
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	4608      	mov	r0, r1
 800d7ac:	b141      	cbz	r1, 800d7c0 <__ascii_wctomb+0x18>
 800d7ae:	2aff      	cmp	r2, #255	@ 0xff
 800d7b0:	d904      	bls.n	800d7bc <__ascii_wctomb+0x14>
 800d7b2:	228a      	movs	r2, #138	@ 0x8a
 800d7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b8:	601a      	str	r2, [r3, #0]
 800d7ba:	4770      	bx	lr
 800d7bc:	2001      	movs	r0, #1
 800d7be:	700a      	strb	r2, [r1, #0]
 800d7c0:	4770      	bx	lr
	...

0800d7c4 <fiprintf>:
 800d7c4:	b40e      	push	{r1, r2, r3}
 800d7c6:	b503      	push	{r0, r1, lr}
 800d7c8:	4601      	mov	r1, r0
 800d7ca:	ab03      	add	r3, sp, #12
 800d7cc:	4805      	ldr	r0, [pc, #20]	@ (800d7e4 <fiprintf+0x20>)
 800d7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7d2:	6800      	ldr	r0, [r0, #0]
 800d7d4:	9301      	str	r3, [sp, #4]
 800d7d6:	f000 f83d 	bl	800d854 <_vfiprintf_r>
 800d7da:	b002      	add	sp, #8
 800d7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7e0:	b003      	add	sp, #12
 800d7e2:	4770      	bx	lr
 800d7e4:	20000218 	.word	0x20000218

0800d7e8 <abort>:
 800d7e8:	2006      	movs	r0, #6
 800d7ea:	b508      	push	{r3, lr}
 800d7ec:	f000 fa06 	bl	800dbfc <raise>
 800d7f0:	2001      	movs	r0, #1
 800d7f2:	f7f4 fb72 	bl	8001eda <_exit>

0800d7f6 <_malloc_usable_size_r>:
 800d7f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7fa:	1f18      	subs	r0, r3, #4
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	bfbc      	itt	lt
 800d800:	580b      	ldrlt	r3, [r1, r0]
 800d802:	18c0      	addlt	r0, r0, r3
 800d804:	4770      	bx	lr

0800d806 <__sfputc_r>:
 800d806:	6893      	ldr	r3, [r2, #8]
 800d808:	b410      	push	{r4}
 800d80a:	3b01      	subs	r3, #1
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	6093      	str	r3, [r2, #8]
 800d810:	da07      	bge.n	800d822 <__sfputc_r+0x1c>
 800d812:	6994      	ldr	r4, [r2, #24]
 800d814:	42a3      	cmp	r3, r4
 800d816:	db01      	blt.n	800d81c <__sfputc_r+0x16>
 800d818:	290a      	cmp	r1, #10
 800d81a:	d102      	bne.n	800d822 <__sfputc_r+0x1c>
 800d81c:	bc10      	pop	{r4}
 800d81e:	f000 b931 	b.w	800da84 <__swbuf_r>
 800d822:	6813      	ldr	r3, [r2, #0]
 800d824:	1c58      	adds	r0, r3, #1
 800d826:	6010      	str	r0, [r2, #0]
 800d828:	7019      	strb	r1, [r3, #0]
 800d82a:	4608      	mov	r0, r1
 800d82c:	bc10      	pop	{r4}
 800d82e:	4770      	bx	lr

0800d830 <__sfputs_r>:
 800d830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d832:	4606      	mov	r6, r0
 800d834:	460f      	mov	r7, r1
 800d836:	4614      	mov	r4, r2
 800d838:	18d5      	adds	r5, r2, r3
 800d83a:	42ac      	cmp	r4, r5
 800d83c:	d101      	bne.n	800d842 <__sfputs_r+0x12>
 800d83e:	2000      	movs	r0, #0
 800d840:	e007      	b.n	800d852 <__sfputs_r+0x22>
 800d842:	463a      	mov	r2, r7
 800d844:	4630      	mov	r0, r6
 800d846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d84a:	f7ff ffdc 	bl	800d806 <__sfputc_r>
 800d84e:	1c43      	adds	r3, r0, #1
 800d850:	d1f3      	bne.n	800d83a <__sfputs_r+0xa>
 800d852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d854 <_vfiprintf_r>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	460d      	mov	r5, r1
 800d85a:	4614      	mov	r4, r2
 800d85c:	4698      	mov	r8, r3
 800d85e:	4606      	mov	r6, r0
 800d860:	b09d      	sub	sp, #116	@ 0x74
 800d862:	b118      	cbz	r0, 800d86c <_vfiprintf_r+0x18>
 800d864:	6a03      	ldr	r3, [r0, #32]
 800d866:	b90b      	cbnz	r3, 800d86c <_vfiprintf_r+0x18>
 800d868:	f7fe f8e8 	bl	800ba3c <__sinit>
 800d86c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d86e:	07d9      	lsls	r1, r3, #31
 800d870:	d405      	bmi.n	800d87e <_vfiprintf_r+0x2a>
 800d872:	89ab      	ldrh	r3, [r5, #12]
 800d874:	059a      	lsls	r2, r3, #22
 800d876:	d402      	bmi.n	800d87e <_vfiprintf_r+0x2a>
 800d878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d87a:	f7fe fa0a 	bl	800bc92 <__retarget_lock_acquire_recursive>
 800d87e:	89ab      	ldrh	r3, [r5, #12]
 800d880:	071b      	lsls	r3, r3, #28
 800d882:	d501      	bpl.n	800d888 <_vfiprintf_r+0x34>
 800d884:	692b      	ldr	r3, [r5, #16]
 800d886:	b99b      	cbnz	r3, 800d8b0 <_vfiprintf_r+0x5c>
 800d888:	4629      	mov	r1, r5
 800d88a:	4630      	mov	r0, r6
 800d88c:	f000 f938 	bl	800db00 <__swsetup_r>
 800d890:	b170      	cbz	r0, 800d8b0 <_vfiprintf_r+0x5c>
 800d892:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d894:	07dc      	lsls	r4, r3, #31
 800d896:	d504      	bpl.n	800d8a2 <_vfiprintf_r+0x4e>
 800d898:	f04f 30ff 	mov.w	r0, #4294967295
 800d89c:	b01d      	add	sp, #116	@ 0x74
 800d89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a2:	89ab      	ldrh	r3, [r5, #12]
 800d8a4:	0598      	lsls	r0, r3, #22
 800d8a6:	d4f7      	bmi.n	800d898 <_vfiprintf_r+0x44>
 800d8a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8aa:	f7fe f9f3 	bl	800bc94 <__retarget_lock_release_recursive>
 800d8ae:	e7f3      	b.n	800d898 <_vfiprintf_r+0x44>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8b4:	2320      	movs	r3, #32
 800d8b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8ba:	2330      	movs	r3, #48	@ 0x30
 800d8bc:	f04f 0901 	mov.w	r9, #1
 800d8c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800da70 <_vfiprintf_r+0x21c>
 800d8c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8cc:	4623      	mov	r3, r4
 800d8ce:	469a      	mov	sl, r3
 800d8d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8d4:	b10a      	cbz	r2, 800d8da <_vfiprintf_r+0x86>
 800d8d6:	2a25      	cmp	r2, #37	@ 0x25
 800d8d8:	d1f9      	bne.n	800d8ce <_vfiprintf_r+0x7a>
 800d8da:	ebba 0b04 	subs.w	fp, sl, r4
 800d8de:	d00b      	beq.n	800d8f8 <_vfiprintf_r+0xa4>
 800d8e0:	465b      	mov	r3, fp
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f7ff ffa2 	bl	800d830 <__sfputs_r>
 800d8ec:	3001      	adds	r0, #1
 800d8ee:	f000 80a7 	beq.w	800da40 <_vfiprintf_r+0x1ec>
 800d8f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8f4:	445a      	add	r2, fp
 800d8f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f000 809f 	beq.w	800da40 <_vfiprintf_r+0x1ec>
 800d902:	2300      	movs	r3, #0
 800d904:	f04f 32ff 	mov.w	r2, #4294967295
 800d908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d90c:	f10a 0a01 	add.w	sl, sl, #1
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	9307      	str	r3, [sp, #28]
 800d914:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d918:	931a      	str	r3, [sp, #104]	@ 0x68
 800d91a:	4654      	mov	r4, sl
 800d91c:	2205      	movs	r2, #5
 800d91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d922:	4853      	ldr	r0, [pc, #332]	@ (800da70 <_vfiprintf_r+0x21c>)
 800d924:	f7fe f9b7 	bl	800bc96 <memchr>
 800d928:	9a04      	ldr	r2, [sp, #16]
 800d92a:	b9d8      	cbnz	r0, 800d964 <_vfiprintf_r+0x110>
 800d92c:	06d1      	lsls	r1, r2, #27
 800d92e:	bf44      	itt	mi
 800d930:	2320      	movmi	r3, #32
 800d932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d936:	0713      	lsls	r3, r2, #28
 800d938:	bf44      	itt	mi
 800d93a:	232b      	movmi	r3, #43	@ 0x2b
 800d93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d940:	f89a 3000 	ldrb.w	r3, [sl]
 800d944:	2b2a      	cmp	r3, #42	@ 0x2a
 800d946:	d015      	beq.n	800d974 <_vfiprintf_r+0x120>
 800d948:	4654      	mov	r4, sl
 800d94a:	2000      	movs	r0, #0
 800d94c:	f04f 0c0a 	mov.w	ip, #10
 800d950:	9a07      	ldr	r2, [sp, #28]
 800d952:	4621      	mov	r1, r4
 800d954:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d958:	3b30      	subs	r3, #48	@ 0x30
 800d95a:	2b09      	cmp	r3, #9
 800d95c:	d94b      	bls.n	800d9f6 <_vfiprintf_r+0x1a2>
 800d95e:	b1b0      	cbz	r0, 800d98e <_vfiprintf_r+0x13a>
 800d960:	9207      	str	r2, [sp, #28]
 800d962:	e014      	b.n	800d98e <_vfiprintf_r+0x13a>
 800d964:	eba0 0308 	sub.w	r3, r0, r8
 800d968:	fa09 f303 	lsl.w	r3, r9, r3
 800d96c:	4313      	orrs	r3, r2
 800d96e:	46a2      	mov	sl, r4
 800d970:	9304      	str	r3, [sp, #16]
 800d972:	e7d2      	b.n	800d91a <_vfiprintf_r+0xc6>
 800d974:	9b03      	ldr	r3, [sp, #12]
 800d976:	1d19      	adds	r1, r3, #4
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	9103      	str	r1, [sp, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	bfbb      	ittet	lt
 800d980:	425b      	neglt	r3, r3
 800d982:	f042 0202 	orrlt.w	r2, r2, #2
 800d986:	9307      	strge	r3, [sp, #28]
 800d988:	9307      	strlt	r3, [sp, #28]
 800d98a:	bfb8      	it	lt
 800d98c:	9204      	strlt	r2, [sp, #16]
 800d98e:	7823      	ldrb	r3, [r4, #0]
 800d990:	2b2e      	cmp	r3, #46	@ 0x2e
 800d992:	d10a      	bne.n	800d9aa <_vfiprintf_r+0x156>
 800d994:	7863      	ldrb	r3, [r4, #1]
 800d996:	2b2a      	cmp	r3, #42	@ 0x2a
 800d998:	d132      	bne.n	800da00 <_vfiprintf_r+0x1ac>
 800d99a:	9b03      	ldr	r3, [sp, #12]
 800d99c:	3402      	adds	r4, #2
 800d99e:	1d1a      	adds	r2, r3, #4
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	9203      	str	r2, [sp, #12]
 800d9a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9a8:	9305      	str	r3, [sp, #20]
 800d9aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800da74 <_vfiprintf_r+0x220>
 800d9ae:	2203      	movs	r2, #3
 800d9b0:	4650      	mov	r0, sl
 800d9b2:	7821      	ldrb	r1, [r4, #0]
 800d9b4:	f7fe f96f 	bl	800bc96 <memchr>
 800d9b8:	b138      	cbz	r0, 800d9ca <_vfiprintf_r+0x176>
 800d9ba:	2240      	movs	r2, #64	@ 0x40
 800d9bc:	9b04      	ldr	r3, [sp, #16]
 800d9be:	eba0 000a 	sub.w	r0, r0, sl
 800d9c2:	4082      	lsls	r2, r0
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	3401      	adds	r4, #1
 800d9c8:	9304      	str	r3, [sp, #16]
 800d9ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ce:	2206      	movs	r2, #6
 800d9d0:	4829      	ldr	r0, [pc, #164]	@ (800da78 <_vfiprintf_r+0x224>)
 800d9d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9d6:	f7fe f95e 	bl	800bc96 <memchr>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d03f      	beq.n	800da5e <_vfiprintf_r+0x20a>
 800d9de:	4b27      	ldr	r3, [pc, #156]	@ (800da7c <_vfiprintf_r+0x228>)
 800d9e0:	bb1b      	cbnz	r3, 800da2a <_vfiprintf_r+0x1d6>
 800d9e2:	9b03      	ldr	r3, [sp, #12]
 800d9e4:	3307      	adds	r3, #7
 800d9e6:	f023 0307 	bic.w	r3, r3, #7
 800d9ea:	3308      	adds	r3, #8
 800d9ec:	9303      	str	r3, [sp, #12]
 800d9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9f0:	443b      	add	r3, r7
 800d9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9f4:	e76a      	b.n	800d8cc <_vfiprintf_r+0x78>
 800d9f6:	460c      	mov	r4, r1
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9fe:	e7a8      	b.n	800d952 <_vfiprintf_r+0xfe>
 800da00:	2300      	movs	r3, #0
 800da02:	f04f 0c0a 	mov.w	ip, #10
 800da06:	4619      	mov	r1, r3
 800da08:	3401      	adds	r4, #1
 800da0a:	9305      	str	r3, [sp, #20]
 800da0c:	4620      	mov	r0, r4
 800da0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da12:	3a30      	subs	r2, #48	@ 0x30
 800da14:	2a09      	cmp	r2, #9
 800da16:	d903      	bls.n	800da20 <_vfiprintf_r+0x1cc>
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d0c6      	beq.n	800d9aa <_vfiprintf_r+0x156>
 800da1c:	9105      	str	r1, [sp, #20]
 800da1e:	e7c4      	b.n	800d9aa <_vfiprintf_r+0x156>
 800da20:	4604      	mov	r4, r0
 800da22:	2301      	movs	r3, #1
 800da24:	fb0c 2101 	mla	r1, ip, r1, r2
 800da28:	e7f0      	b.n	800da0c <_vfiprintf_r+0x1b8>
 800da2a:	ab03      	add	r3, sp, #12
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	462a      	mov	r2, r5
 800da30:	4630      	mov	r0, r6
 800da32:	4b13      	ldr	r3, [pc, #76]	@ (800da80 <_vfiprintf_r+0x22c>)
 800da34:	a904      	add	r1, sp, #16
 800da36:	f7fd fbb7 	bl	800b1a8 <_printf_float>
 800da3a:	4607      	mov	r7, r0
 800da3c:	1c78      	adds	r0, r7, #1
 800da3e:	d1d6      	bne.n	800d9ee <_vfiprintf_r+0x19a>
 800da40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da42:	07d9      	lsls	r1, r3, #31
 800da44:	d405      	bmi.n	800da52 <_vfiprintf_r+0x1fe>
 800da46:	89ab      	ldrh	r3, [r5, #12]
 800da48:	059a      	lsls	r2, r3, #22
 800da4a:	d402      	bmi.n	800da52 <_vfiprintf_r+0x1fe>
 800da4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da4e:	f7fe f921 	bl	800bc94 <__retarget_lock_release_recursive>
 800da52:	89ab      	ldrh	r3, [r5, #12]
 800da54:	065b      	lsls	r3, r3, #25
 800da56:	f53f af1f 	bmi.w	800d898 <_vfiprintf_r+0x44>
 800da5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da5c:	e71e      	b.n	800d89c <_vfiprintf_r+0x48>
 800da5e:	ab03      	add	r3, sp, #12
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	462a      	mov	r2, r5
 800da64:	4630      	mov	r0, r6
 800da66:	4b06      	ldr	r3, [pc, #24]	@ (800da80 <_vfiprintf_r+0x22c>)
 800da68:	a904      	add	r1, sp, #16
 800da6a:	f7fd fe3b 	bl	800b6e4 <_printf_i>
 800da6e:	e7e4      	b.n	800da3a <_vfiprintf_r+0x1e6>
 800da70:	0800e6c0 	.word	0x0800e6c0
 800da74:	0800e6c6 	.word	0x0800e6c6
 800da78:	0800e6ca 	.word	0x0800e6ca
 800da7c:	0800b1a9 	.word	0x0800b1a9
 800da80:	0800d831 	.word	0x0800d831

0800da84 <__swbuf_r>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	460e      	mov	r6, r1
 800da88:	4614      	mov	r4, r2
 800da8a:	4605      	mov	r5, r0
 800da8c:	b118      	cbz	r0, 800da96 <__swbuf_r+0x12>
 800da8e:	6a03      	ldr	r3, [r0, #32]
 800da90:	b90b      	cbnz	r3, 800da96 <__swbuf_r+0x12>
 800da92:	f7fd ffd3 	bl	800ba3c <__sinit>
 800da96:	69a3      	ldr	r3, [r4, #24]
 800da98:	60a3      	str	r3, [r4, #8]
 800da9a:	89a3      	ldrh	r3, [r4, #12]
 800da9c:	071a      	lsls	r2, r3, #28
 800da9e:	d501      	bpl.n	800daa4 <__swbuf_r+0x20>
 800daa0:	6923      	ldr	r3, [r4, #16]
 800daa2:	b943      	cbnz	r3, 800dab6 <__swbuf_r+0x32>
 800daa4:	4621      	mov	r1, r4
 800daa6:	4628      	mov	r0, r5
 800daa8:	f000 f82a 	bl	800db00 <__swsetup_r>
 800daac:	b118      	cbz	r0, 800dab6 <__swbuf_r+0x32>
 800daae:	f04f 37ff 	mov.w	r7, #4294967295
 800dab2:	4638      	mov	r0, r7
 800dab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	6922      	ldr	r2, [r4, #16]
 800daba:	b2f6      	uxtb	r6, r6
 800dabc:	1a98      	subs	r0, r3, r2
 800dabe:	6963      	ldr	r3, [r4, #20]
 800dac0:	4637      	mov	r7, r6
 800dac2:	4283      	cmp	r3, r0
 800dac4:	dc05      	bgt.n	800dad2 <__swbuf_r+0x4e>
 800dac6:	4621      	mov	r1, r4
 800dac8:	4628      	mov	r0, r5
 800daca:	f7ff fd9b 	bl	800d604 <_fflush_r>
 800dace:	2800      	cmp	r0, #0
 800dad0:	d1ed      	bne.n	800daae <__swbuf_r+0x2a>
 800dad2:	68a3      	ldr	r3, [r4, #8]
 800dad4:	3b01      	subs	r3, #1
 800dad6:	60a3      	str	r3, [r4, #8]
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	1c5a      	adds	r2, r3, #1
 800dadc:	6022      	str	r2, [r4, #0]
 800dade:	701e      	strb	r6, [r3, #0]
 800dae0:	6962      	ldr	r2, [r4, #20]
 800dae2:	1c43      	adds	r3, r0, #1
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d004      	beq.n	800daf2 <__swbuf_r+0x6e>
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	07db      	lsls	r3, r3, #31
 800daec:	d5e1      	bpl.n	800dab2 <__swbuf_r+0x2e>
 800daee:	2e0a      	cmp	r6, #10
 800daf0:	d1df      	bne.n	800dab2 <__swbuf_r+0x2e>
 800daf2:	4621      	mov	r1, r4
 800daf4:	4628      	mov	r0, r5
 800daf6:	f7ff fd85 	bl	800d604 <_fflush_r>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d0d9      	beq.n	800dab2 <__swbuf_r+0x2e>
 800dafe:	e7d6      	b.n	800daae <__swbuf_r+0x2a>

0800db00 <__swsetup_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4b29      	ldr	r3, [pc, #164]	@ (800dba8 <__swsetup_r+0xa8>)
 800db04:	4605      	mov	r5, r0
 800db06:	6818      	ldr	r0, [r3, #0]
 800db08:	460c      	mov	r4, r1
 800db0a:	b118      	cbz	r0, 800db14 <__swsetup_r+0x14>
 800db0c:	6a03      	ldr	r3, [r0, #32]
 800db0e:	b90b      	cbnz	r3, 800db14 <__swsetup_r+0x14>
 800db10:	f7fd ff94 	bl	800ba3c <__sinit>
 800db14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db18:	0719      	lsls	r1, r3, #28
 800db1a:	d422      	bmi.n	800db62 <__swsetup_r+0x62>
 800db1c:	06da      	lsls	r2, r3, #27
 800db1e:	d407      	bmi.n	800db30 <__swsetup_r+0x30>
 800db20:	2209      	movs	r2, #9
 800db22:	602a      	str	r2, [r5, #0]
 800db24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db28:	f04f 30ff 	mov.w	r0, #4294967295
 800db2c:	81a3      	strh	r3, [r4, #12]
 800db2e:	e033      	b.n	800db98 <__swsetup_r+0x98>
 800db30:	0758      	lsls	r0, r3, #29
 800db32:	d512      	bpl.n	800db5a <__swsetup_r+0x5a>
 800db34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db36:	b141      	cbz	r1, 800db4a <__swsetup_r+0x4a>
 800db38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db3c:	4299      	cmp	r1, r3
 800db3e:	d002      	beq.n	800db46 <__swsetup_r+0x46>
 800db40:	4628      	mov	r0, r5
 800db42:	f7fe ff09 	bl	800c958 <_free_r>
 800db46:	2300      	movs	r3, #0
 800db48:	6363      	str	r3, [r4, #52]	@ 0x34
 800db4a:	89a3      	ldrh	r3, [r4, #12]
 800db4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800db50:	81a3      	strh	r3, [r4, #12]
 800db52:	2300      	movs	r3, #0
 800db54:	6063      	str	r3, [r4, #4]
 800db56:	6923      	ldr	r3, [r4, #16]
 800db58:	6023      	str	r3, [r4, #0]
 800db5a:	89a3      	ldrh	r3, [r4, #12]
 800db5c:	f043 0308 	orr.w	r3, r3, #8
 800db60:	81a3      	strh	r3, [r4, #12]
 800db62:	6923      	ldr	r3, [r4, #16]
 800db64:	b94b      	cbnz	r3, 800db7a <__swsetup_r+0x7a>
 800db66:	89a3      	ldrh	r3, [r4, #12]
 800db68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db70:	d003      	beq.n	800db7a <__swsetup_r+0x7a>
 800db72:	4621      	mov	r1, r4
 800db74:	4628      	mov	r0, r5
 800db76:	f000 f882 	bl	800dc7e <__smakebuf_r>
 800db7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db7e:	f013 0201 	ands.w	r2, r3, #1
 800db82:	d00a      	beq.n	800db9a <__swsetup_r+0x9a>
 800db84:	2200      	movs	r2, #0
 800db86:	60a2      	str	r2, [r4, #8]
 800db88:	6962      	ldr	r2, [r4, #20]
 800db8a:	4252      	negs	r2, r2
 800db8c:	61a2      	str	r2, [r4, #24]
 800db8e:	6922      	ldr	r2, [r4, #16]
 800db90:	b942      	cbnz	r2, 800dba4 <__swsetup_r+0xa4>
 800db92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db96:	d1c5      	bne.n	800db24 <__swsetup_r+0x24>
 800db98:	bd38      	pop	{r3, r4, r5, pc}
 800db9a:	0799      	lsls	r1, r3, #30
 800db9c:	bf58      	it	pl
 800db9e:	6962      	ldrpl	r2, [r4, #20]
 800dba0:	60a2      	str	r2, [r4, #8]
 800dba2:	e7f4      	b.n	800db8e <__swsetup_r+0x8e>
 800dba4:	2000      	movs	r0, #0
 800dba6:	e7f7      	b.n	800db98 <__swsetup_r+0x98>
 800dba8:	20000218 	.word	0x20000218

0800dbac <_raise_r>:
 800dbac:	291f      	cmp	r1, #31
 800dbae:	b538      	push	{r3, r4, r5, lr}
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	460c      	mov	r4, r1
 800dbb4:	d904      	bls.n	800dbc0 <_raise_r+0x14>
 800dbb6:	2316      	movs	r3, #22
 800dbb8:	6003      	str	r3, [r0, #0]
 800dbba:	f04f 30ff 	mov.w	r0, #4294967295
 800dbbe:	bd38      	pop	{r3, r4, r5, pc}
 800dbc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbc2:	b112      	cbz	r2, 800dbca <_raise_r+0x1e>
 800dbc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbc8:	b94b      	cbnz	r3, 800dbde <_raise_r+0x32>
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f000 f830 	bl	800dc30 <_getpid_r>
 800dbd0:	4622      	mov	r2, r4
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbda:	f000 b817 	b.w	800dc0c <_kill_r>
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d00a      	beq.n	800dbf8 <_raise_r+0x4c>
 800dbe2:	1c59      	adds	r1, r3, #1
 800dbe4:	d103      	bne.n	800dbee <_raise_r+0x42>
 800dbe6:	2316      	movs	r3, #22
 800dbe8:	6003      	str	r3, [r0, #0]
 800dbea:	2001      	movs	r0, #1
 800dbec:	e7e7      	b.n	800dbbe <_raise_r+0x12>
 800dbee:	2100      	movs	r1, #0
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dbf6:	4798      	blx	r3
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	e7e0      	b.n	800dbbe <_raise_r+0x12>

0800dbfc <raise>:
 800dbfc:	4b02      	ldr	r3, [pc, #8]	@ (800dc08 <raise+0xc>)
 800dbfe:	4601      	mov	r1, r0
 800dc00:	6818      	ldr	r0, [r3, #0]
 800dc02:	f7ff bfd3 	b.w	800dbac <_raise_r>
 800dc06:	bf00      	nop
 800dc08:	20000218 	.word	0x20000218

0800dc0c <_kill_r>:
 800dc0c:	b538      	push	{r3, r4, r5, lr}
 800dc0e:	2300      	movs	r3, #0
 800dc10:	4d06      	ldr	r5, [pc, #24]	@ (800dc2c <_kill_r+0x20>)
 800dc12:	4604      	mov	r4, r0
 800dc14:	4608      	mov	r0, r1
 800dc16:	4611      	mov	r1, r2
 800dc18:	602b      	str	r3, [r5, #0]
 800dc1a:	f7f4 f94e 	bl	8001eba <_kill>
 800dc1e:	1c43      	adds	r3, r0, #1
 800dc20:	d102      	bne.n	800dc28 <_kill_r+0x1c>
 800dc22:	682b      	ldr	r3, [r5, #0]
 800dc24:	b103      	cbz	r3, 800dc28 <_kill_r+0x1c>
 800dc26:	6023      	str	r3, [r4, #0]
 800dc28:	bd38      	pop	{r3, r4, r5, pc}
 800dc2a:	bf00      	nop
 800dc2c:	20001874 	.word	0x20001874

0800dc30 <_getpid_r>:
 800dc30:	f7f4 b93c 	b.w	8001eac <_getpid>

0800dc34 <__swhatbuf_r>:
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	460c      	mov	r4, r1
 800dc38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc3c:	4615      	mov	r5, r2
 800dc3e:	2900      	cmp	r1, #0
 800dc40:	461e      	mov	r6, r3
 800dc42:	b096      	sub	sp, #88	@ 0x58
 800dc44:	da0c      	bge.n	800dc60 <__swhatbuf_r+0x2c>
 800dc46:	89a3      	ldrh	r3, [r4, #12]
 800dc48:	2100      	movs	r1, #0
 800dc4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc4e:	bf14      	ite	ne
 800dc50:	2340      	movne	r3, #64	@ 0x40
 800dc52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc56:	2000      	movs	r0, #0
 800dc58:	6031      	str	r1, [r6, #0]
 800dc5a:	602b      	str	r3, [r5, #0]
 800dc5c:	b016      	add	sp, #88	@ 0x58
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}
 800dc60:	466a      	mov	r2, sp
 800dc62:	f000 f849 	bl	800dcf8 <_fstat_r>
 800dc66:	2800      	cmp	r0, #0
 800dc68:	dbed      	blt.n	800dc46 <__swhatbuf_r+0x12>
 800dc6a:	9901      	ldr	r1, [sp, #4]
 800dc6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc74:	4259      	negs	r1, r3
 800dc76:	4159      	adcs	r1, r3
 800dc78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc7c:	e7eb      	b.n	800dc56 <__swhatbuf_r+0x22>

0800dc7e <__smakebuf_r>:
 800dc7e:	898b      	ldrh	r3, [r1, #12]
 800dc80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc82:	079d      	lsls	r5, r3, #30
 800dc84:	4606      	mov	r6, r0
 800dc86:	460c      	mov	r4, r1
 800dc88:	d507      	bpl.n	800dc9a <__smakebuf_r+0x1c>
 800dc8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc8e:	6023      	str	r3, [r4, #0]
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	2301      	movs	r3, #1
 800dc94:	6163      	str	r3, [r4, #20]
 800dc96:	b003      	add	sp, #12
 800dc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc9a:	466a      	mov	r2, sp
 800dc9c:	ab01      	add	r3, sp, #4
 800dc9e:	f7ff ffc9 	bl	800dc34 <__swhatbuf_r>
 800dca2:	9f00      	ldr	r7, [sp, #0]
 800dca4:	4605      	mov	r5, r0
 800dca6:	4639      	mov	r1, r7
 800dca8:	4630      	mov	r0, r6
 800dcaa:	f7fe fec7 	bl	800ca3c <_malloc_r>
 800dcae:	b948      	cbnz	r0, 800dcc4 <__smakebuf_r+0x46>
 800dcb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcb4:	059a      	lsls	r2, r3, #22
 800dcb6:	d4ee      	bmi.n	800dc96 <__smakebuf_r+0x18>
 800dcb8:	f023 0303 	bic.w	r3, r3, #3
 800dcbc:	f043 0302 	orr.w	r3, r3, #2
 800dcc0:	81a3      	strh	r3, [r4, #12]
 800dcc2:	e7e2      	b.n	800dc8a <__smakebuf_r+0xc>
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dcca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcce:	81a3      	strh	r3, [r4, #12]
 800dcd0:	9b01      	ldr	r3, [sp, #4]
 800dcd2:	6020      	str	r0, [r4, #0]
 800dcd4:	b15b      	cbz	r3, 800dcee <__smakebuf_r+0x70>
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcdc:	f000 f81e 	bl	800dd1c <_isatty_r>
 800dce0:	b128      	cbz	r0, 800dcee <__smakebuf_r+0x70>
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	f023 0303 	bic.w	r3, r3, #3
 800dce8:	f043 0301 	orr.w	r3, r3, #1
 800dcec:	81a3      	strh	r3, [r4, #12]
 800dcee:	89a3      	ldrh	r3, [r4, #12]
 800dcf0:	431d      	orrs	r5, r3
 800dcf2:	81a5      	strh	r5, [r4, #12]
 800dcf4:	e7cf      	b.n	800dc96 <__smakebuf_r+0x18>
	...

0800dcf8 <_fstat_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	4d06      	ldr	r5, [pc, #24]	@ (800dd18 <_fstat_r+0x20>)
 800dcfe:	4604      	mov	r4, r0
 800dd00:	4608      	mov	r0, r1
 800dd02:	4611      	mov	r1, r2
 800dd04:	602b      	str	r3, [r5, #0]
 800dd06:	f7f4 f937 	bl	8001f78 <_fstat>
 800dd0a:	1c43      	adds	r3, r0, #1
 800dd0c:	d102      	bne.n	800dd14 <_fstat_r+0x1c>
 800dd0e:	682b      	ldr	r3, [r5, #0]
 800dd10:	b103      	cbz	r3, 800dd14 <_fstat_r+0x1c>
 800dd12:	6023      	str	r3, [r4, #0]
 800dd14:	bd38      	pop	{r3, r4, r5, pc}
 800dd16:	bf00      	nop
 800dd18:	20001874 	.word	0x20001874

0800dd1c <_isatty_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	2300      	movs	r3, #0
 800dd20:	4d05      	ldr	r5, [pc, #20]	@ (800dd38 <_isatty_r+0x1c>)
 800dd22:	4604      	mov	r4, r0
 800dd24:	4608      	mov	r0, r1
 800dd26:	602b      	str	r3, [r5, #0]
 800dd28:	f7f4 f935 	bl	8001f96 <_isatty>
 800dd2c:	1c43      	adds	r3, r0, #1
 800dd2e:	d102      	bne.n	800dd36 <_isatty_r+0x1a>
 800dd30:	682b      	ldr	r3, [r5, #0]
 800dd32:	b103      	cbz	r3, 800dd36 <_isatty_r+0x1a>
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	bd38      	pop	{r3, r4, r5, pc}
 800dd38:	20001874 	.word	0x20001874

0800dd3c <atan2>:
 800dd3c:	f000 ba90 	b.w	800e260 <__ieee754_atan2>

0800dd40 <sqrt>:
 800dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd42:	4606      	mov	r6, r0
 800dd44:	460f      	mov	r7, r1
 800dd46:	f000 f9b3 	bl	800e0b0 <__ieee754_sqrt>
 800dd4a:	4632      	mov	r2, r6
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	460d      	mov	r5, r1
 800dd50:	463b      	mov	r3, r7
 800dd52:	4630      	mov	r0, r6
 800dd54:	4639      	mov	r1, r7
 800dd56:	f7f2 fe59 	bl	8000a0c <__aeabi_dcmpun>
 800dd5a:	b990      	cbnz	r0, 800dd82 <sqrt+0x42>
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	2300      	movs	r3, #0
 800dd60:	4630      	mov	r0, r6
 800dd62:	4639      	mov	r1, r7
 800dd64:	f7f2 fe2a 	bl	80009bc <__aeabi_dcmplt>
 800dd68:	b158      	cbz	r0, 800dd82 <sqrt+0x42>
 800dd6a:	f7fd ff67 	bl	800bc3c <__errno>
 800dd6e:	2321      	movs	r3, #33	@ 0x21
 800dd70:	2200      	movs	r2, #0
 800dd72:	6003      	str	r3, [r0, #0]
 800dd74:	2300      	movs	r3, #0
 800dd76:	4610      	mov	r0, r2
 800dd78:	4619      	mov	r1, r3
 800dd7a:	f7f2 fcd7 	bl	800072c <__aeabi_ddiv>
 800dd7e:	4604      	mov	r4, r0
 800dd80:	460d      	mov	r5, r1
 800dd82:	4620      	mov	r0, r4
 800dd84:	4629      	mov	r1, r5
 800dd86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd88 <atan>:
 800dd88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	4bbc      	ldr	r3, [pc, #752]	@ (800e080 <atan+0x2f8>)
 800dd8e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800dd92:	429e      	cmp	r6, r3
 800dd94:	4604      	mov	r4, r0
 800dd96:	460d      	mov	r5, r1
 800dd98:	468b      	mov	fp, r1
 800dd9a:	d918      	bls.n	800ddce <atan+0x46>
 800dd9c:	4bb9      	ldr	r3, [pc, #740]	@ (800e084 <atan+0x2fc>)
 800dd9e:	429e      	cmp	r6, r3
 800dda0:	d801      	bhi.n	800dda6 <atan+0x1e>
 800dda2:	d109      	bne.n	800ddb8 <atan+0x30>
 800dda4:	b140      	cbz	r0, 800ddb8 <atan+0x30>
 800dda6:	4622      	mov	r2, r4
 800dda8:	462b      	mov	r3, r5
 800ddaa:	4620      	mov	r0, r4
 800ddac:	4629      	mov	r1, r5
 800ddae:	f7f2 f9dd 	bl	800016c <__adddf3>
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	460d      	mov	r5, r1
 800ddb6:	e006      	b.n	800ddc6 <atan+0x3e>
 800ddb8:	f1bb 0f00 	cmp.w	fp, #0
 800ddbc:	f340 8123 	ble.w	800e006 <atan+0x27e>
 800ddc0:	a593      	add	r5, pc, #588	@ (adr r5, 800e010 <atan+0x288>)
 800ddc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	4629      	mov	r1, r5
 800ddca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddce:	4bae      	ldr	r3, [pc, #696]	@ (800e088 <atan+0x300>)
 800ddd0:	429e      	cmp	r6, r3
 800ddd2:	d811      	bhi.n	800ddf8 <atan+0x70>
 800ddd4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ddd8:	429e      	cmp	r6, r3
 800ddda:	d80a      	bhi.n	800ddf2 <atan+0x6a>
 800dddc:	a38e      	add	r3, pc, #568	@ (adr r3, 800e018 <atan+0x290>)
 800ddde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde2:	f7f2 f9c3 	bl	800016c <__adddf3>
 800dde6:	2200      	movs	r2, #0
 800dde8:	4ba8      	ldr	r3, [pc, #672]	@ (800e08c <atan+0x304>)
 800ddea:	f7f2 fe05 	bl	80009f8 <__aeabi_dcmpgt>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d1e9      	bne.n	800ddc6 <atan+0x3e>
 800ddf2:	f04f 3aff 	mov.w	sl, #4294967295
 800ddf6:	e027      	b.n	800de48 <atan+0xc0>
 800ddf8:	f000 f956 	bl	800e0a8 <fabs>
 800ddfc:	4ba4      	ldr	r3, [pc, #656]	@ (800e090 <atan+0x308>)
 800ddfe:	4604      	mov	r4, r0
 800de00:	429e      	cmp	r6, r3
 800de02:	460d      	mov	r5, r1
 800de04:	f200 80b8 	bhi.w	800df78 <atan+0x1f0>
 800de08:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800de0c:	429e      	cmp	r6, r3
 800de0e:	f200 809c 	bhi.w	800df4a <atan+0x1c2>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	f7f2 f9a9 	bl	800016c <__adddf3>
 800de1a:	2200      	movs	r2, #0
 800de1c:	4b9b      	ldr	r3, [pc, #620]	@ (800e08c <atan+0x304>)
 800de1e:	f7f2 f9a3 	bl	8000168 <__aeabi_dsub>
 800de22:	2200      	movs	r2, #0
 800de24:	4606      	mov	r6, r0
 800de26:	460f      	mov	r7, r1
 800de28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800de2c:	4620      	mov	r0, r4
 800de2e:	4629      	mov	r1, r5
 800de30:	f7f2 f99c 	bl	800016c <__adddf3>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4630      	mov	r0, r6
 800de3a:	4639      	mov	r1, r7
 800de3c:	f7f2 fc76 	bl	800072c <__aeabi_ddiv>
 800de40:	f04f 0a00 	mov.w	sl, #0
 800de44:	4604      	mov	r4, r0
 800de46:	460d      	mov	r5, r1
 800de48:	4622      	mov	r2, r4
 800de4a:	462b      	mov	r3, r5
 800de4c:	4620      	mov	r0, r4
 800de4e:	4629      	mov	r1, r5
 800de50:	f7f2 fb42 	bl	80004d8 <__aeabi_dmul>
 800de54:	4602      	mov	r2, r0
 800de56:	460b      	mov	r3, r1
 800de58:	4680      	mov	r8, r0
 800de5a:	4689      	mov	r9, r1
 800de5c:	f7f2 fb3c 	bl	80004d8 <__aeabi_dmul>
 800de60:	a36f      	add	r3, pc, #444	@ (adr r3, 800e020 <atan+0x298>)
 800de62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de66:	4606      	mov	r6, r0
 800de68:	460f      	mov	r7, r1
 800de6a:	f7f2 fb35 	bl	80004d8 <__aeabi_dmul>
 800de6e:	a36e      	add	r3, pc, #440	@ (adr r3, 800e028 <atan+0x2a0>)
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	f7f2 f97a 	bl	800016c <__adddf3>
 800de78:	4632      	mov	r2, r6
 800de7a:	463b      	mov	r3, r7
 800de7c:	f7f2 fb2c 	bl	80004d8 <__aeabi_dmul>
 800de80:	a36b      	add	r3, pc, #428	@ (adr r3, 800e030 <atan+0x2a8>)
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	f7f2 f971 	bl	800016c <__adddf3>
 800de8a:	4632      	mov	r2, r6
 800de8c:	463b      	mov	r3, r7
 800de8e:	f7f2 fb23 	bl	80004d8 <__aeabi_dmul>
 800de92:	a369      	add	r3, pc, #420	@ (adr r3, 800e038 <atan+0x2b0>)
 800de94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de98:	f7f2 f968 	bl	800016c <__adddf3>
 800de9c:	4632      	mov	r2, r6
 800de9e:	463b      	mov	r3, r7
 800dea0:	f7f2 fb1a 	bl	80004d8 <__aeabi_dmul>
 800dea4:	a366      	add	r3, pc, #408	@ (adr r3, 800e040 <atan+0x2b8>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	f7f2 f95f 	bl	800016c <__adddf3>
 800deae:	4632      	mov	r2, r6
 800deb0:	463b      	mov	r3, r7
 800deb2:	f7f2 fb11 	bl	80004d8 <__aeabi_dmul>
 800deb6:	a364      	add	r3, pc, #400	@ (adr r3, 800e048 <atan+0x2c0>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	f7f2 f956 	bl	800016c <__adddf3>
 800dec0:	4642      	mov	r2, r8
 800dec2:	464b      	mov	r3, r9
 800dec4:	f7f2 fb08 	bl	80004d8 <__aeabi_dmul>
 800dec8:	a361      	add	r3, pc, #388	@ (adr r3, 800e050 <atan+0x2c8>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	4680      	mov	r8, r0
 800ded0:	4689      	mov	r9, r1
 800ded2:	4630      	mov	r0, r6
 800ded4:	4639      	mov	r1, r7
 800ded6:	f7f2 faff 	bl	80004d8 <__aeabi_dmul>
 800deda:	a35f      	add	r3, pc, #380	@ (adr r3, 800e058 <atan+0x2d0>)
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f7f2 f942 	bl	8000168 <__aeabi_dsub>
 800dee4:	4632      	mov	r2, r6
 800dee6:	463b      	mov	r3, r7
 800dee8:	f7f2 faf6 	bl	80004d8 <__aeabi_dmul>
 800deec:	a35c      	add	r3, pc, #368	@ (adr r3, 800e060 <atan+0x2d8>)
 800deee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def2:	f7f2 f939 	bl	8000168 <__aeabi_dsub>
 800def6:	4632      	mov	r2, r6
 800def8:	463b      	mov	r3, r7
 800defa:	f7f2 faed 	bl	80004d8 <__aeabi_dmul>
 800defe:	a35a      	add	r3, pc, #360	@ (adr r3, 800e068 <atan+0x2e0>)
 800df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df04:	f7f2 f930 	bl	8000168 <__aeabi_dsub>
 800df08:	4632      	mov	r2, r6
 800df0a:	463b      	mov	r3, r7
 800df0c:	f7f2 fae4 	bl	80004d8 <__aeabi_dmul>
 800df10:	a357      	add	r3, pc, #348	@ (adr r3, 800e070 <atan+0x2e8>)
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	f7f2 f927 	bl	8000168 <__aeabi_dsub>
 800df1a:	4632      	mov	r2, r6
 800df1c:	463b      	mov	r3, r7
 800df1e:	f7f2 fadb 	bl	80004d8 <__aeabi_dmul>
 800df22:	4602      	mov	r2, r0
 800df24:	460b      	mov	r3, r1
 800df26:	4640      	mov	r0, r8
 800df28:	4649      	mov	r1, r9
 800df2a:	f7f2 f91f 	bl	800016c <__adddf3>
 800df2e:	4622      	mov	r2, r4
 800df30:	462b      	mov	r3, r5
 800df32:	f7f2 fad1 	bl	80004d8 <__aeabi_dmul>
 800df36:	f1ba 3fff 	cmp.w	sl, #4294967295
 800df3a:	4602      	mov	r2, r0
 800df3c:	460b      	mov	r3, r1
 800df3e:	d144      	bne.n	800dfca <atan+0x242>
 800df40:	4620      	mov	r0, r4
 800df42:	4629      	mov	r1, r5
 800df44:	f7f2 f910 	bl	8000168 <__aeabi_dsub>
 800df48:	e733      	b.n	800ddb2 <atan+0x2a>
 800df4a:	2200      	movs	r2, #0
 800df4c:	4b4f      	ldr	r3, [pc, #316]	@ (800e08c <atan+0x304>)
 800df4e:	f7f2 f90b 	bl	8000168 <__aeabi_dsub>
 800df52:	2200      	movs	r2, #0
 800df54:	4606      	mov	r6, r0
 800df56:	460f      	mov	r7, r1
 800df58:	4620      	mov	r0, r4
 800df5a:	4629      	mov	r1, r5
 800df5c:	4b4b      	ldr	r3, [pc, #300]	@ (800e08c <atan+0x304>)
 800df5e:	f7f2 f905 	bl	800016c <__adddf3>
 800df62:	4602      	mov	r2, r0
 800df64:	460b      	mov	r3, r1
 800df66:	4630      	mov	r0, r6
 800df68:	4639      	mov	r1, r7
 800df6a:	f7f2 fbdf 	bl	800072c <__aeabi_ddiv>
 800df6e:	f04f 0a01 	mov.w	sl, #1
 800df72:	4604      	mov	r4, r0
 800df74:	460d      	mov	r5, r1
 800df76:	e767      	b.n	800de48 <atan+0xc0>
 800df78:	4b46      	ldr	r3, [pc, #280]	@ (800e094 <atan+0x30c>)
 800df7a:	429e      	cmp	r6, r3
 800df7c:	d21a      	bcs.n	800dfb4 <atan+0x22c>
 800df7e:	2200      	movs	r2, #0
 800df80:	4b45      	ldr	r3, [pc, #276]	@ (800e098 <atan+0x310>)
 800df82:	f7f2 f8f1 	bl	8000168 <__aeabi_dsub>
 800df86:	2200      	movs	r2, #0
 800df88:	4606      	mov	r6, r0
 800df8a:	460f      	mov	r7, r1
 800df8c:	4620      	mov	r0, r4
 800df8e:	4629      	mov	r1, r5
 800df90:	4b41      	ldr	r3, [pc, #260]	@ (800e098 <atan+0x310>)
 800df92:	f7f2 faa1 	bl	80004d8 <__aeabi_dmul>
 800df96:	2200      	movs	r2, #0
 800df98:	4b3c      	ldr	r3, [pc, #240]	@ (800e08c <atan+0x304>)
 800df9a:	f7f2 f8e7 	bl	800016c <__adddf3>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	f7f2 fbc1 	bl	800072c <__aeabi_ddiv>
 800dfaa:	f04f 0a02 	mov.w	sl, #2
 800dfae:	4604      	mov	r4, r0
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	e749      	b.n	800de48 <atan+0xc0>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	2000      	movs	r0, #0
 800dfba:	4938      	ldr	r1, [pc, #224]	@ (800e09c <atan+0x314>)
 800dfbc:	f7f2 fbb6 	bl	800072c <__aeabi_ddiv>
 800dfc0:	f04f 0a03 	mov.w	sl, #3
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	460d      	mov	r5, r1
 800dfc8:	e73e      	b.n	800de48 <atan+0xc0>
 800dfca:	4b35      	ldr	r3, [pc, #212]	@ (800e0a0 <atan+0x318>)
 800dfcc:	4e35      	ldr	r6, [pc, #212]	@ (800e0a4 <atan+0x31c>)
 800dfce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	f7f2 f8c7 	bl	8000168 <__aeabi_dsub>
 800dfda:	4622      	mov	r2, r4
 800dfdc:	462b      	mov	r3, r5
 800dfde:	f7f2 f8c3 	bl	8000168 <__aeabi_dsub>
 800dfe2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dfee:	f7f2 f8bb 	bl	8000168 <__aeabi_dsub>
 800dff2:	f1bb 0f00 	cmp.w	fp, #0
 800dff6:	4604      	mov	r4, r0
 800dff8:	460d      	mov	r5, r1
 800dffa:	f6bf aee4 	bge.w	800ddc6 <atan+0x3e>
 800dffe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e002:	461d      	mov	r5, r3
 800e004:	e6df      	b.n	800ddc6 <atan+0x3e>
 800e006:	a51c      	add	r5, pc, #112	@ (adr r5, 800e078 <atan+0x2f0>)
 800e008:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e00c:	e6db      	b.n	800ddc6 <atan+0x3e>
 800e00e:	bf00      	nop
 800e010:	54442d18 	.word	0x54442d18
 800e014:	3ff921fb 	.word	0x3ff921fb
 800e018:	8800759c 	.word	0x8800759c
 800e01c:	7e37e43c 	.word	0x7e37e43c
 800e020:	e322da11 	.word	0xe322da11
 800e024:	3f90ad3a 	.word	0x3f90ad3a
 800e028:	24760deb 	.word	0x24760deb
 800e02c:	3fa97b4b 	.word	0x3fa97b4b
 800e030:	a0d03d51 	.word	0xa0d03d51
 800e034:	3fb10d66 	.word	0x3fb10d66
 800e038:	c54c206e 	.word	0xc54c206e
 800e03c:	3fb745cd 	.word	0x3fb745cd
 800e040:	920083ff 	.word	0x920083ff
 800e044:	3fc24924 	.word	0x3fc24924
 800e048:	5555550d 	.word	0x5555550d
 800e04c:	3fd55555 	.word	0x3fd55555
 800e050:	2c6a6c2f 	.word	0x2c6a6c2f
 800e054:	bfa2b444 	.word	0xbfa2b444
 800e058:	52defd9a 	.word	0x52defd9a
 800e05c:	3fadde2d 	.word	0x3fadde2d
 800e060:	af749a6d 	.word	0xaf749a6d
 800e064:	3fb3b0f2 	.word	0x3fb3b0f2
 800e068:	fe231671 	.word	0xfe231671
 800e06c:	3fbc71c6 	.word	0x3fbc71c6
 800e070:	9998ebc4 	.word	0x9998ebc4
 800e074:	3fc99999 	.word	0x3fc99999
 800e078:	54442d18 	.word	0x54442d18
 800e07c:	bff921fb 	.word	0xbff921fb
 800e080:	440fffff 	.word	0x440fffff
 800e084:	7ff00000 	.word	0x7ff00000
 800e088:	3fdbffff 	.word	0x3fdbffff
 800e08c:	3ff00000 	.word	0x3ff00000
 800e090:	3ff2ffff 	.word	0x3ff2ffff
 800e094:	40038000 	.word	0x40038000
 800e098:	3ff80000 	.word	0x3ff80000
 800e09c:	bff00000 	.word	0xbff00000
 800e0a0:	0800e818 	.word	0x0800e818
 800e0a4:	0800e838 	.word	0x0800e838

0800e0a8 <fabs>:
 800e0a8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	4770      	bx	lr

0800e0b0 <__ieee754_sqrt>:
 800e0b0:	4a67      	ldr	r2, [pc, #412]	@ (800e250 <__ieee754_sqrt+0x1a0>)
 800e0b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b6:	438a      	bics	r2, r1
 800e0b8:	4606      	mov	r6, r0
 800e0ba:	460f      	mov	r7, r1
 800e0bc:	460b      	mov	r3, r1
 800e0be:	4604      	mov	r4, r0
 800e0c0:	d10e      	bne.n	800e0e0 <__ieee754_sqrt+0x30>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	f7f2 fa08 	bl	80004d8 <__aeabi_dmul>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	4639      	mov	r1, r7
 800e0d0:	f7f2 f84c 	bl	800016c <__adddf3>
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	460f      	mov	r7, r1
 800e0d8:	4630      	mov	r0, r6
 800e0da:	4639      	mov	r1, r7
 800e0dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e0:	2900      	cmp	r1, #0
 800e0e2:	dc0c      	bgt.n	800e0fe <__ieee754_sqrt+0x4e>
 800e0e4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800e0e8:	4302      	orrs	r2, r0
 800e0ea:	d0f5      	beq.n	800e0d8 <__ieee754_sqrt+0x28>
 800e0ec:	b189      	cbz	r1, 800e112 <__ieee754_sqrt+0x62>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	f7f2 f83a 	bl	8000168 <__aeabi_dsub>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	f7f2 fb18 	bl	800072c <__aeabi_ddiv>
 800e0fc:	e7ea      	b.n	800e0d4 <__ieee754_sqrt+0x24>
 800e0fe:	150a      	asrs	r2, r1, #20
 800e100:	d115      	bne.n	800e12e <__ieee754_sqrt+0x7e>
 800e102:	2100      	movs	r1, #0
 800e104:	e009      	b.n	800e11a <__ieee754_sqrt+0x6a>
 800e106:	0ae3      	lsrs	r3, r4, #11
 800e108:	3a15      	subs	r2, #21
 800e10a:	0564      	lsls	r4, r4, #21
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d0fa      	beq.n	800e106 <__ieee754_sqrt+0x56>
 800e110:	e7f7      	b.n	800e102 <__ieee754_sqrt+0x52>
 800e112:	460a      	mov	r2, r1
 800e114:	e7fa      	b.n	800e10c <__ieee754_sqrt+0x5c>
 800e116:	005b      	lsls	r3, r3, #1
 800e118:	3101      	adds	r1, #1
 800e11a:	02d8      	lsls	r0, r3, #11
 800e11c:	d5fb      	bpl.n	800e116 <__ieee754_sqrt+0x66>
 800e11e:	1e48      	subs	r0, r1, #1
 800e120:	1a12      	subs	r2, r2, r0
 800e122:	f1c1 0020 	rsb	r0, r1, #32
 800e126:	fa24 f000 	lsr.w	r0, r4, r0
 800e12a:	4303      	orrs	r3, r0
 800e12c:	408c      	lsls	r4, r1
 800e12e:	2600      	movs	r6, #0
 800e130:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800e134:	2116      	movs	r1, #22
 800e136:	07d2      	lsls	r2, r2, #31
 800e138:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e13c:	4632      	mov	r2, r6
 800e13e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e146:	bf5c      	itt	pl
 800e148:	005b      	lslpl	r3, r3, #1
 800e14a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800e14e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e152:	bf58      	it	pl
 800e154:	0064      	lslpl	r4, r4, #1
 800e156:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800e15a:	107f      	asrs	r7, r7, #1
 800e15c:	0064      	lsls	r4, r4, #1
 800e15e:	1815      	adds	r5, r2, r0
 800e160:	429d      	cmp	r5, r3
 800e162:	bfde      	ittt	le
 800e164:	182a      	addle	r2, r5, r0
 800e166:	1b5b      	suble	r3, r3, r5
 800e168:	1836      	addle	r6, r6, r0
 800e16a:	0fe5      	lsrs	r5, r4, #31
 800e16c:	3901      	subs	r1, #1
 800e16e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e172:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e176:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e17a:	d1f0      	bne.n	800e15e <__ieee754_sqrt+0xae>
 800e17c:	460d      	mov	r5, r1
 800e17e:	f04f 0a20 	mov.w	sl, #32
 800e182:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800e186:	429a      	cmp	r2, r3
 800e188:	eb01 0c00 	add.w	ip, r1, r0
 800e18c:	db02      	blt.n	800e194 <__ieee754_sqrt+0xe4>
 800e18e:	d113      	bne.n	800e1b8 <__ieee754_sqrt+0x108>
 800e190:	45a4      	cmp	ip, r4
 800e192:	d811      	bhi.n	800e1b8 <__ieee754_sqrt+0x108>
 800e194:	f1bc 0f00 	cmp.w	ip, #0
 800e198:	eb0c 0100 	add.w	r1, ip, r0
 800e19c:	da42      	bge.n	800e224 <__ieee754_sqrt+0x174>
 800e19e:	2900      	cmp	r1, #0
 800e1a0:	db40      	blt.n	800e224 <__ieee754_sqrt+0x174>
 800e1a2:	f102 0e01 	add.w	lr, r2, #1
 800e1a6:	1a9b      	subs	r3, r3, r2
 800e1a8:	4672      	mov	r2, lr
 800e1aa:	45a4      	cmp	ip, r4
 800e1ac:	bf88      	it	hi
 800e1ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e1b2:	eba4 040c 	sub.w	r4, r4, ip
 800e1b6:	4405      	add	r5, r0
 800e1b8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800e1bc:	f1ba 0a01 	subs.w	sl, sl, #1
 800e1c0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800e1c4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e1c8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e1cc:	d1db      	bne.n	800e186 <__ieee754_sqrt+0xd6>
 800e1ce:	431c      	orrs	r4, r3
 800e1d0:	d01a      	beq.n	800e208 <__ieee754_sqrt+0x158>
 800e1d2:	4c20      	ldr	r4, [pc, #128]	@ (800e254 <__ieee754_sqrt+0x1a4>)
 800e1d4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800e258 <__ieee754_sqrt+0x1a8>
 800e1d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e1dc:	e9db 2300 	ldrd	r2, r3, [fp]
 800e1e0:	f7f1 ffc2 	bl	8000168 <__aeabi_dsub>
 800e1e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	4640      	mov	r0, r8
 800e1ee:	4649      	mov	r1, r9
 800e1f0:	f7f2 fbee 	bl	80009d0 <__aeabi_dcmple>
 800e1f4:	b140      	cbz	r0, 800e208 <__ieee754_sqrt+0x158>
 800e1f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e1fa:	e9db 2300 	ldrd	r2, r3, [fp]
 800e1fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e202:	d111      	bne.n	800e228 <__ieee754_sqrt+0x178>
 800e204:	4655      	mov	r5, sl
 800e206:	3601      	adds	r6, #1
 800e208:	1072      	asrs	r2, r6, #1
 800e20a:	086b      	lsrs	r3, r5, #1
 800e20c:	07f1      	lsls	r1, r6, #31
 800e20e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e212:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e216:	bf48      	it	mi
 800e218:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e21c:	4618      	mov	r0, r3
 800e21e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800e222:	e757      	b.n	800e0d4 <__ieee754_sqrt+0x24>
 800e224:	4696      	mov	lr, r2
 800e226:	e7be      	b.n	800e1a6 <__ieee754_sqrt+0xf6>
 800e228:	f7f1 ffa0 	bl	800016c <__adddf3>
 800e22c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e230:	4602      	mov	r2, r0
 800e232:	460b      	mov	r3, r1
 800e234:	4640      	mov	r0, r8
 800e236:	4649      	mov	r1, r9
 800e238:	f7f2 fbc0 	bl	80009bc <__aeabi_dcmplt>
 800e23c:	b120      	cbz	r0, 800e248 <__ieee754_sqrt+0x198>
 800e23e:	1ca8      	adds	r0, r5, #2
 800e240:	bf08      	it	eq
 800e242:	3601      	addeq	r6, #1
 800e244:	3502      	adds	r5, #2
 800e246:	e7df      	b.n	800e208 <__ieee754_sqrt+0x158>
 800e248:	1c6b      	adds	r3, r5, #1
 800e24a:	f023 0501 	bic.w	r5, r3, #1
 800e24e:	e7db      	b.n	800e208 <__ieee754_sqrt+0x158>
 800e250:	7ff00000 	.word	0x7ff00000
 800e254:	200003e0 	.word	0x200003e0
 800e258:	200003d8 	.word	0x200003d8
 800e25c:	00000000 	.word	0x00000000

0800e260 <__ieee754_atan2>:
 800e260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	4617      	mov	r7, r2
 800e266:	4690      	mov	r8, r2
 800e268:	4699      	mov	r9, r3
 800e26a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e26e:	427b      	negs	r3, r7
 800e270:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800e3f8 <__ieee754_atan2+0x198>
 800e274:	433b      	orrs	r3, r7
 800e276:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e27a:	4553      	cmp	r3, sl
 800e27c:	4604      	mov	r4, r0
 800e27e:	460d      	mov	r5, r1
 800e280:	d809      	bhi.n	800e296 <__ieee754_atan2+0x36>
 800e282:	4246      	negs	r6, r0
 800e284:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e288:	4306      	orrs	r6, r0
 800e28a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800e28e:	4556      	cmp	r6, sl
 800e290:	468e      	mov	lr, r1
 800e292:	4683      	mov	fp, r0
 800e294:	d908      	bls.n	800e2a8 <__ieee754_atan2+0x48>
 800e296:	4642      	mov	r2, r8
 800e298:	464b      	mov	r3, r9
 800e29a:	4620      	mov	r0, r4
 800e29c:	4629      	mov	r1, r5
 800e29e:	f7f1 ff65 	bl	800016c <__adddf3>
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	460d      	mov	r5, r1
 800e2a6:	e016      	b.n	800e2d6 <__ieee754_atan2+0x76>
 800e2a8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800e2ac:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800e2b0:	433e      	orrs	r6, r7
 800e2b2:	d103      	bne.n	800e2bc <__ieee754_atan2+0x5c>
 800e2b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b8:	f7ff bd66 	b.w	800dd88 <atan>
 800e2bc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800e2c0:	f006 0602 	and.w	r6, r6, #2
 800e2c4:	ea53 0b0b 	orrs.w	fp, r3, fp
 800e2c8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800e2cc:	d107      	bne.n	800e2de <__ieee754_atan2+0x7e>
 800e2ce:	2e02      	cmp	r6, #2
 800e2d0:	d064      	beq.n	800e39c <__ieee754_atan2+0x13c>
 800e2d2:	2e03      	cmp	r6, #3
 800e2d4:	d066      	beq.n	800e3a4 <__ieee754_atan2+0x144>
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	4629      	mov	r1, r5
 800e2da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2de:	4317      	orrs	r7, r2
 800e2e0:	d106      	bne.n	800e2f0 <__ieee754_atan2+0x90>
 800e2e2:	f1be 0f00 	cmp.w	lr, #0
 800e2e6:	da68      	bge.n	800e3ba <__ieee754_atan2+0x15a>
 800e2e8:	a537      	add	r5, pc, #220	@ (adr r5, 800e3c8 <__ieee754_atan2+0x168>)
 800e2ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e2ee:	e7f2      	b.n	800e2d6 <__ieee754_atan2+0x76>
 800e2f0:	4552      	cmp	r2, sl
 800e2f2:	d10f      	bne.n	800e314 <__ieee754_atan2+0xb4>
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	f106 36ff 	add.w	r6, r6, #4294967295
 800e2fa:	d107      	bne.n	800e30c <__ieee754_atan2+0xac>
 800e2fc:	2e02      	cmp	r6, #2
 800e2fe:	d855      	bhi.n	800e3ac <__ieee754_atan2+0x14c>
 800e300:	4b3e      	ldr	r3, [pc, #248]	@ (800e3fc <__ieee754_atan2+0x19c>)
 800e302:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e306:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e30a:	e7e4      	b.n	800e2d6 <__ieee754_atan2+0x76>
 800e30c:	2e02      	cmp	r6, #2
 800e30e:	d851      	bhi.n	800e3b4 <__ieee754_atan2+0x154>
 800e310:	4b3b      	ldr	r3, [pc, #236]	@ (800e400 <__ieee754_atan2+0x1a0>)
 800e312:	e7f6      	b.n	800e302 <__ieee754_atan2+0xa2>
 800e314:	4553      	cmp	r3, sl
 800e316:	d0e4      	beq.n	800e2e2 <__ieee754_atan2+0x82>
 800e318:	1a9b      	subs	r3, r3, r2
 800e31a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e31e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e322:	da21      	bge.n	800e368 <__ieee754_atan2+0x108>
 800e324:	f1b9 0f00 	cmp.w	r9, #0
 800e328:	da01      	bge.n	800e32e <__ieee754_atan2+0xce>
 800e32a:	323c      	adds	r2, #60	@ 0x3c
 800e32c:	db20      	blt.n	800e370 <__ieee754_atan2+0x110>
 800e32e:	4642      	mov	r2, r8
 800e330:	464b      	mov	r3, r9
 800e332:	4620      	mov	r0, r4
 800e334:	4629      	mov	r1, r5
 800e336:	f7f2 f9f9 	bl	800072c <__aeabi_ddiv>
 800e33a:	f7ff feb5 	bl	800e0a8 <fabs>
 800e33e:	f7ff fd23 	bl	800dd88 <atan>
 800e342:	4604      	mov	r4, r0
 800e344:	460d      	mov	r5, r1
 800e346:	2e01      	cmp	r6, #1
 800e348:	d015      	beq.n	800e376 <__ieee754_atan2+0x116>
 800e34a:	2e02      	cmp	r6, #2
 800e34c:	d017      	beq.n	800e37e <__ieee754_atan2+0x11e>
 800e34e:	2e00      	cmp	r6, #0
 800e350:	d0c1      	beq.n	800e2d6 <__ieee754_atan2+0x76>
 800e352:	a31f      	add	r3, pc, #124	@ (adr r3, 800e3d0 <__ieee754_atan2+0x170>)
 800e354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e358:	4620      	mov	r0, r4
 800e35a:	4629      	mov	r1, r5
 800e35c:	f7f1 ff04 	bl	8000168 <__aeabi_dsub>
 800e360:	a31d      	add	r3, pc, #116	@ (adr r3, 800e3d8 <__ieee754_atan2+0x178>)
 800e362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e366:	e016      	b.n	800e396 <__ieee754_atan2+0x136>
 800e368:	a51d      	add	r5, pc, #116	@ (adr r5, 800e3e0 <__ieee754_atan2+0x180>)
 800e36a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e36e:	e7ea      	b.n	800e346 <__ieee754_atan2+0xe6>
 800e370:	2400      	movs	r4, #0
 800e372:	2500      	movs	r5, #0
 800e374:	e7e7      	b.n	800e346 <__ieee754_atan2+0xe6>
 800e376:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800e37a:	461d      	mov	r5, r3
 800e37c:	e7ab      	b.n	800e2d6 <__ieee754_atan2+0x76>
 800e37e:	a314      	add	r3, pc, #80	@ (adr r3, 800e3d0 <__ieee754_atan2+0x170>)
 800e380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e384:	4620      	mov	r0, r4
 800e386:	4629      	mov	r1, r5
 800e388:	f7f1 feee 	bl	8000168 <__aeabi_dsub>
 800e38c:	4602      	mov	r2, r0
 800e38e:	460b      	mov	r3, r1
 800e390:	a111      	add	r1, pc, #68	@ (adr r1, 800e3d8 <__ieee754_atan2+0x178>)
 800e392:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e396:	f7f1 fee7 	bl	8000168 <__aeabi_dsub>
 800e39a:	e782      	b.n	800e2a2 <__ieee754_atan2+0x42>
 800e39c:	a50e      	add	r5, pc, #56	@ (adr r5, 800e3d8 <__ieee754_atan2+0x178>)
 800e39e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e3a2:	e798      	b.n	800e2d6 <__ieee754_atan2+0x76>
 800e3a4:	a510      	add	r5, pc, #64	@ (adr r5, 800e3e8 <__ieee754_atan2+0x188>)
 800e3a6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e3aa:	e794      	b.n	800e2d6 <__ieee754_atan2+0x76>
 800e3ac:	a510      	add	r5, pc, #64	@ (adr r5, 800e3f0 <__ieee754_atan2+0x190>)
 800e3ae:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e3b2:	e790      	b.n	800e2d6 <__ieee754_atan2+0x76>
 800e3b4:	2400      	movs	r4, #0
 800e3b6:	2500      	movs	r5, #0
 800e3b8:	e78d      	b.n	800e2d6 <__ieee754_atan2+0x76>
 800e3ba:	a509      	add	r5, pc, #36	@ (adr r5, 800e3e0 <__ieee754_atan2+0x180>)
 800e3bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e3c0:	e789      	b.n	800e2d6 <__ieee754_atan2+0x76>
 800e3c2:	bf00      	nop
 800e3c4:	f3af 8000 	nop.w
 800e3c8:	54442d18 	.word	0x54442d18
 800e3cc:	bff921fb 	.word	0xbff921fb
 800e3d0:	33145c07 	.word	0x33145c07
 800e3d4:	3ca1a626 	.word	0x3ca1a626
 800e3d8:	54442d18 	.word	0x54442d18
 800e3dc:	400921fb 	.word	0x400921fb
 800e3e0:	54442d18 	.word	0x54442d18
 800e3e4:	3ff921fb 	.word	0x3ff921fb
 800e3e8:	54442d18 	.word	0x54442d18
 800e3ec:	c00921fb 	.word	0xc00921fb
 800e3f0:	54442d18 	.word	0x54442d18
 800e3f4:	3fe921fb 	.word	0x3fe921fb
 800e3f8:	7ff00000 	.word	0x7ff00000
 800e3fc:	0800e870 	.word	0x0800e870
 800e400:	0800e858 	.word	0x0800e858

0800e404 <_init>:
 800e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e406:	bf00      	nop
 800e408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e40a:	bc08      	pop	{r3}
 800e40c:	469e      	mov	lr, r3
 800e40e:	4770      	bx	lr

0800e410 <_fini>:
 800e410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e412:	bf00      	nop
 800e414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e416:	bc08      	pop	{r3}
 800e418:	469e      	mov	lr, r3
 800e41a:	4770      	bx	lr
