
RobotBalanceador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800e2f0  0800e2f0  0001e2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e750  0800e750  000203e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e750  0800e750  000203e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e750  0800e750  000203e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e750  0800e750  0001e750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e754  0800e754  0001e754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e8  20000000  0800e758  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001484  200003e8  0800eb40  000203e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000186c  0800eb40  0002186c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020411  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015322  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb9  00000000  00000000  00035776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00039330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f58  00000000  00000000  0003a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001beb8  00000000  00000000  0003b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb31  00000000  00000000  00057558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091f80  00000000  00000000  00073089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066a8  00000000  00000000  0010500c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0010b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003e8 	.word	0x200003e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e2d4 	.word	0x0800e2d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003ec 	.word	0x200003ec
 800014c:	0800e2d4 	.word	0x0800e2d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <MX_GPIO_Init+0xc4>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <MX_GPIO_Init+0xc4>)
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <MX_GPIO_Init+0xc4>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <MX_GPIO_Init+0xc4>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <MX_GPIO_Init+0xc4>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <MX_GPIO_Init+0xc4>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_GPIO_Init+0xc4>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <MX_GPIO_Init+0xc4>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_GPIO_Init+0xc4>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT1_IN1_Pin|MOT1_IN2_Pin|MOT2_IN1_Pin|MOT2_IN2_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001172:	4819      	ldr	r0, [pc, #100]	; (80011d8 <MX_GPIO_Init+0xc8>)
 8001174:	f001 fb44 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOT1_IN1_Pin|MOT1_IN2_Pin|MOT2_IN1_Pin|MOT2_IN2_Pin;
 8001178:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800117c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4619      	mov	r1, r3
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <MX_GPIO_Init+0xc8>)
 8001192:	f001 f9b1 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001196:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119c:	2312      	movs	r3, #18
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <MX_GPIO_Init+0xc8>)
 80011ac:	f001 f9a4 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_GPIO_Init+0xcc>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <MX_GPIO_Init+0xcc>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	6053      	str	r3, [r2, #4]

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	40010000 	.word	0x40010000

080011e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C2_Init+0x50>)
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <MX_I2C2_Init+0x54>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C2_Init+0x50>)
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_I2C2_Init+0x58>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C2_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_I2C2_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_I2C2_Init+0x50>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001202:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_I2C2_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_I2C2_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_I2C2_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_I2C2_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_I2C2_Init+0x50>)
 800121e:	f001 fb07 	bl	8002830 <HAL_I2C_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 f9a0 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000404 	.word	0x20000404
 8001234:	40005800 	.word	0x40005800
 8001238:	000186a0 	.word	0x000186a0

0800123c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <HAL_I2C_MspInit+0x74>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d124      	bne.n	80012a6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_I2C_MspInit+0x78>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_I2C_MspInit+0x78>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_I2C_MspInit+0x78>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001274:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <HAL_I2C_MspInit+0x7c>)
 800128a:	f001 f935 	bl	80024f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_I2C_MspInit+0x78>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_I2C_MspInit+0x78>)
 8001294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_I2C_MspInit+0x78>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012a6:	bf00      	nop
 80012a8:	3720      	adds	r7, #32
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40005800 	.word	0x40005800
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010c00 	.word	0x40010c00

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f000 ffa9 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f859 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ca:	f7ff ff21 	bl	8001110 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012ce:	f009 f989 	bl	800a5e4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80012d2:	f000 fe7f 	bl	8001fd4 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012d6:	f000 fe03 	bl	8001ee0 <MX_TIM3_Init>
  MX_I2C2_Init();
 80012da:	f7ff ff81 	bl	80011e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // Inicializar variables
  last_mpu_time = HAL_GetTick();
 80012de:	f000 fff3 	bl	80022c8 <HAL_GetTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <main+0xa8>)
 80012e6:	6013      	str	r3, [r2, #0]




  // Inicialización del PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012e8:	2100      	movs	r1, #0
 80012ea:	481f      	ldr	r0, [pc, #124]	; (8001368 <main+0xac>)
 80012ec:	f004 fd68 	bl	8005dc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012f0:	2104      	movs	r1, #4
 80012f2:	481d      	ldr	r0, [pc, #116]	; (8001368 <main+0xac>)
 80012f4:	f004 fd64 	bl	8005dc0 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  El DRV8870 utiliza 4 pines de PWM
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <main+0xac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2200      	movs	r2, #0
 80012fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <main+0xac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	639a      	str	r2, [r3, #56]	; 0x38
  // __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 0);
  // __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, 0);


  // Inicialización de timer para Encoder
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001308:	213c      	movs	r1, #60	; 0x3c
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <main+0xb0>)
 800130c:	f004 fe9c 	bl	8006048 <HAL_TIM_Encoder_Start>


  // Esperar para la inicialización del MPU6050
  while (MPU6050_Init(&hi2c2) == 1);
 8001310:	bf00      	nop
 8001312:	4817      	ldr	r0, [pc, #92]	; (8001370 <main+0xb4>)
 8001314:	f000 f92f 	bl	8001576 <MPU6050_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b01      	cmp	r3, #1
 800131c:	d0f9      	beq.n	8001312 <main+0x56>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

    // Lectura del MPU6050 cada 100ms
    if (HAL_GetTick() - last_mpu_time > 100) {
 800131e:	f000 ffd3 	bl	80022c8 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <main+0xa8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d9f7      	bls.n	800131e <main+0x62>
      MPU6050_Read_All(&hi2c2, &MPU6050);
 800132e:	4911      	ldr	r1, [pc, #68]	; (8001374 <main+0xb8>)
 8001330:	480f      	ldr	r0, [pc, #60]	; (8001370 <main+0xb4>)
 8001332:	f000 f979 	bl	8001628 <MPU6050_Read_All>

      float angulo = MPU6050.KalmanAngleY;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <main+0xb8>)
 8001338:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fba2 	bl	8000a88 <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	607b      	str	r3, [r7, #4]
      float accion = AccionPID(&pid, 0, angulo);
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	f04f 0100 	mov.w	r1, #0
 800134e:	480a      	ldr	r0, [pc, #40]	; (8001378 <main+0xbc>)
 8001350:	f000 f8da 	bl	8001508 <AccionPID>
 8001354:	6038      	str	r0, [r7, #0]
      AplicarPWM(accion);
 8001356:	6838      	ldr	r0, [r7, #0]
 8001358:	f000 f86a 	bl	8001430 <AplicarPWM>
      EnviarPC(angulo);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f8e1 	bl	8001524 <EnviarPC>
    if (HAL_GetTick() - last_mpu_time > 100) {
 8001362:	e7dc      	b.n	800131e <main+0x62>
 8001364:	20000458 	.word	0x20000458
 8001368:	200004cc 	.word	0x200004cc
 800136c:	20000514 	.word	0x20000514
 8001370:	20000404 	.word	0x20000404
 8001374:	20000460 	.word	0x20000460
 8001378:	200004b8 	.word	0x200004b8

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b094      	sub	sp, #80	; 0x50
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	2228      	movs	r2, #40	; 0x28
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f00a fb5d 	bl	800ba4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ba:	2301      	movs	r3, #1
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fff2 	bl	80053bc <HAL_RCC_OscConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013de:	f000 f8c5 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e2:	230f      	movs	r3, #15
 80013e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2102      	movs	r1, #2
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 fa5e 	bl	80058c0 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800140a:	f000 f8af 	bl	800156c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800140e:	2310      	movs	r3, #16
 8001410:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fbcb 	bl	8005bb4 <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001424:	f000 f8a2 	bl	800156c <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	3750      	adds	r7, #80	; 0x50
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <AplicarPWM>:

/* USER CODE BEGIN 4 */

// Aplicar PWM a los motores, si el valor es negativo va en el otro sentido
void AplicarPWM(float valor) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  // Duty va de 0 a 1000

  // Convertir valor a entero
  uint16_t entero = (uint16_t)ABS(valor);
 8001438:	f04f 0100 	mov.w	r1, #0
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fe33 	bl	80010a8 <__aeabi_fcmpge>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <AplicarPWM+0x24>
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fe41 	bl	80010d0 <__aeabi_f2uiz>
 800144e:	4603      	mov	r3, r0
 8001450:	b29b      	uxth	r3, r3
 8001452:	e007      	b.n	8001464 <AplicarPWM+0x34>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fe38 	bl	80010d0 <__aeabi_f2uiz>
 8001460:	4603      	mov	r3, r0
 8001462:	b29b      	uxth	r3, r3
 8001464:	81fb      	strh	r3, [r7, #14]

  // Limitar de 0 a 1000
  entero = (entero > 1000)? 1000 : entero;
 8001466:	89fb      	ldrh	r3, [r7, #14]
 8001468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800146c:	bf28      	it	cs
 800146e:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 8001472:	81fb      	strh	r3, [r7, #14]
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, entero);
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <AplicarPWM+0xd0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	89fa      	ldrh	r2, [r7, #14]
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, entero);
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <AplicarPWM+0xd0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	89fa      	ldrh	r2, [r7, #14]
 8001482:	639a      	str	r2, [r3, #56]	; 0x38

  if (valor >= 0.0) {
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fe0d 	bl	80010a8 <__aeabi_fcmpge>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d018      	beq.n	80014c6 <AplicarPWM+0x96>
    //Motor Derecho
    HAL_GPIO_WritePin(MOT1_IN1_GPIO_Port, MOT1_IN1_Pin, 1); //Giro Horario
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149a:	481a      	ldr	r0, [pc, #104]	; (8001504 <AplicarPWM+0xd4>)
 800149c:	f001 f9b0 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT1_IN2_GPIO_Port, MOT1_IN2_Pin, 0); //Grio Antihorario
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a6:	4817      	ldr	r0, [pc, #92]	; (8001504 <AplicarPWM+0xd4>)
 80014a8:	f001 f9aa 	bl	8002800 <HAL_GPIO_WritePin>
    //Motor Izquierdo
    HAL_GPIO_WritePin(MOT2_IN1_GPIO_Port, MOT2_IN1_Pin, 1); //Giro Horario
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b2:	4814      	ldr	r0, [pc, #80]	; (8001504 <AplicarPWM+0xd4>)
 80014b4:	f001 f9a4 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT2_IN2_GPIO_Port, MOT2_IN2_Pin, 0); //Grio Antihorario
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014be:	4811      	ldr	r0, [pc, #68]	; (8001504 <AplicarPWM+0xd4>)
 80014c0:	f001 f99e 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT1_IN2_GPIO_Port, MOT1_IN2_Pin, 1); //Grio Antihorario
    //Motor Izquierdo
    HAL_GPIO_WritePin(MOT2_IN1_GPIO_Port, MOT2_IN1_Pin, 0); //Giro Horario
    HAL_GPIO_WritePin(MOT2_IN2_GPIO_Port, MOT2_IN2_Pin, 1); //Grio Antihorario
  }
}
 80014c4:	e017      	b.n	80014f6 <AplicarPWM+0xc6>
    HAL_GPIO_WritePin(MOT1_IN1_GPIO_Port, MOT1_IN1_Pin, 0); //Giro Horario
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014cc:	480d      	ldr	r0, [pc, #52]	; (8001504 <AplicarPWM+0xd4>)
 80014ce:	f001 f997 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT1_IN2_GPIO_Port, MOT1_IN2_Pin, 1); //Grio Antihorario
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d8:	480a      	ldr	r0, [pc, #40]	; (8001504 <AplicarPWM+0xd4>)
 80014da:	f001 f991 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT2_IN1_GPIO_Port, MOT2_IN1_Pin, 0); //Giro Horario
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <AplicarPWM+0xd4>)
 80014e6:	f001 f98b 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOT2_IN2_GPIO_Port, MOT2_IN2_Pin, 1); //Grio Antihorario
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <AplicarPWM+0xd4>)
 80014f2:	f001 f985 	bl	8002800 <HAL_GPIO_WritePin>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200004cc 	.word	0x200004cc
 8001504:	40010c00 	.word	0x40010c00

08001508 <AccionPID>:
    __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, entero);
  }
}

// Cálculo de la acción del PID
float AccionPID(PID_t *pid, float setpoint, float nueva_lectura) {
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]




  //return accion;
  return 0.0;
 8001514:	f04f 0300 	mov.w	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
	...

08001524 <EnviarPC>:

// Enviar a PC para visualizar en Serial Oscilloscope
void EnviarPC(float angulo) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af02      	add	r7, sp, #8
 800152a:	6078      	str	r0, [r7, #4]
  char msg[30];
  snprintf(msg, 30, "angulo=%f\r\n", angulo);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7fe ff7b 	bl	8000428 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	f107 0008 	add.w	r0, r7, #8
 800153a:	e9cd 2300 	strd	r2, r3, [sp]
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <EnviarPC+0x44>)
 8001540:	211e      	movs	r1, #30
 8001542:	f00a fa0b 	bl	800b95c <sniprintf>
  CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe fe00 	bl	8000150 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f009 f900 	bl	800a760 <CDC_Transmit_FS>
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	0800e2f0 	.word	0x0800e2f0

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>

08001576 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b088      	sub	sp, #32
 800157a:	af04      	add	r7, sp, #16
 800157c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800157e:	2364      	movs	r3, #100	; 0x64
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	2301      	movs	r3, #1
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f107 030f 	add.w	r3, r7, #15
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	2275      	movs	r2, #117	; 0x75
 8001590:	21d0      	movs	r1, #208	; 0xd0
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f001 fb8a 	bl	8002cac <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b68      	cmp	r3, #104	; 0x68
 800159c:	d13d      	bne.n	800161a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	2301      	movs	r3, #1
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	f107 030e 	add.w	r3, r7, #14
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	226b      	movs	r2, #107	; 0x6b
 80015b4:	21d0      	movs	r1, #208	; 0xd0
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f001 fa7e 	bl	8002ab8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80015bc:	2307      	movs	r3, #7
 80015be:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80015c0:	2364      	movs	r3, #100	; 0x64
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2301      	movs	r3, #1
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	f107 030e 	add.w	r3, r7, #14
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2301      	movs	r3, #1
 80015d0:	2219      	movs	r2, #25
 80015d2:	21d0      	movs	r1, #208	; 0xd0
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f001 fa6f 	bl	8002ab8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80015de:	2364      	movs	r3, #100	; 0x64
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	f107 030e 	add.w	r3, r7, #14
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	221c      	movs	r2, #28
 80015f0:	21d0      	movs	r1, #208	; 0xd0
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f001 fa60 	bl	8002ab8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	2301      	movs	r3, #1
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	f107 030e 	add.w	r3, r7, #14
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2301      	movs	r3, #1
 800160c:	221b      	movs	r2, #27
 800160e:	21d0      	movs	r1, #208	; 0xd0
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f001 fa51 	bl	8002ab8 <HAL_I2C_Mem_Write>
        return 0;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <MPU6050_Init+0xa6>
    }
    return 1;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	0000      	movs	r0, r0
	...

08001628 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800162c:	b094      	sub	sp, #80	; 0x50
 800162e:	af04      	add	r7, sp, #16
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	230e      	movs	r3, #14
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2301      	movs	r3, #1
 8001644:	223b      	movs	r2, #59	; 0x3b
 8001646:	21d0      	movs	r1, #208	; 0xd0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f001 fb2f 	bl	8002cac <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800164e:	7a3b      	ldrb	r3, [r7, #8]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	7a7b      	ldrb	r3, [r7, #9]
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21a      	sxth	r2, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001660:	7abb      	ldrb	r3, [r7, #10]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	b21a      	sxth	r2, r3
 8001666:	7afb      	ldrb	r3, [r7, #11]
 8001668:	b21b      	sxth	r3, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	b21a      	sxth	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001672:	7b3b      	ldrb	r3, [r7, #12]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b21a      	sxth	r2, r3
 8001678:	7b7b      	ldrb	r3, [r7, #13]
 800167a:	b21b      	sxth	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b21a      	sxth	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	b21a      	sxth	r2, r3
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	b21b      	sxth	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001692:	7c3b      	ldrb	r3, [r7, #16]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	b21a      	sxth	r2, r3
 8001698:	7c7b      	ldrb	r3, [r7, #17]
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b21a      	sxth	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80016a4:	7cbb      	ldrb	r3, [r7, #18]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	7cfb      	ldrb	r3, [r7, #19]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80016b6:	7d3b      	ldrb	r3, [r7, #20]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	7d7b      	ldrb	r3, [r7, #21]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fe98 	bl	8000404 <__aeabi_i2d>
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b95      	ldr	r3, [pc, #596]	; (8001930 <MPU6050_Read_All+0x308>)
 80016da:	f7ff f827 	bl	800072c <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	6839      	ldr	r1, [r7, #0]
 80016e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fe88 	bl	8000404 <__aeabi_i2d>
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	4b8d      	ldr	r3, [pc, #564]	; (8001930 <MPU6050_Read_All+0x308>)
 80016fa:	f7ff f817 	bl	800072c <__aeabi_ddiv>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fe78 	bl	8000404 <__aeabi_i2d>
 8001714:	a380      	add	r3, pc, #512	; (adr r3, 8001918 <MPU6050_Read_All+0x2f0>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7ff f807 	bl	800072c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001728:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fab5 	bl	8000c9c <__aeabi_i2f>
 8001732:	4603      	mov	r3, r0
 8001734:	497f      	ldr	r1, [pc, #508]	; (8001934 <MPU6050_Read_All+0x30c>)
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fbb8 	bl	8000eac <__aeabi_fdiv>
 800173c:	4603      	mov	r3, r0
 800173e:	497e      	ldr	r1, [pc, #504]	; (8001938 <MPU6050_Read_All+0x310>)
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff f9f7 	bl	8000b34 <__addsf3>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe55 	bl	8000404 <__aeabi_i2d>
 800175a:	a371      	add	r3, pc, #452	; (adr r3, 8001920 <MPU6050_Read_All+0x2f8>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe ffe4 	bl	800072c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe45 	bl	8000404 <__aeabi_i2d>
 800177a:	a369      	add	r3, pc, #420	; (adr r3, 8001920 <MPU6050_Read_All+0x2f8>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ffd4 	bl	800072c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fe35 	bl	8000404 <__aeabi_i2d>
 800179a:	a361      	add	r3, pc, #388	; (adr r3, 8001920 <MPU6050_Read_All+0x2f8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe ffc4 	bl	800072c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	6839      	ldr	r1, [r7, #0]
 80017aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80017ae:	f000 fd8b 	bl	80022c8 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b61      	ldr	r3, [pc, #388]	; (800193c <MPU6050_Read_All+0x314>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fe12 	bl	80003e4 <__aeabi_ui2d>
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <MPU6050_Read_All+0x318>)
 80017c6:	f7fe ffb1 	bl	800072c <__aeabi_ddiv>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80017d2:	f000 fd79 	bl	80022c8 <HAL_GetTick>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <MPU6050_Read_All+0x314>)
 80017da:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e2:	461a      	mov	r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ea:	fb03 f202 	mul.w	r2, r3, r2
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017f4:	4619      	mov	r1, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fdfe 	bl	8000404 <__aeabi_i2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f00c fa06 	bl	800dc20 <sqrt>
 8001814:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001824:	f7ff f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d119      	bne.n	8001862 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fde5 	bl	8000404 <__aeabi_i2d>
 800183a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800183e:	f7fe ff75 	bl	800072c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f00c fa0d 	bl	800dc68 <atan>
 800184e:	a336      	add	r3, pc, #216	; (adr r3, 8001928 <MPU6050_Read_All+0x300>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fe40 	bl	80004d8 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001860:	e005      	b.n	800186e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001874:	425b      	negs	r3, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fdc4 	bl	8000404 <__aeabi_i2d>
 800187c:	4682      	mov	sl, r0
 800187e:	468b      	mov	fp, r1
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fdbc 	bl	8000404 <__aeabi_i2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4650      	mov	r0, sl
 8001892:	4659      	mov	r1, fp
 8001894:	f00c f9c2 	bl	800dc1c <atan2>
 8001898:	a323      	add	r3, pc, #140	; (adr r3, 8001928 <MPU6050_Read_All+0x300>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fe1b 	bl	80004d8 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b25      	ldr	r3, [pc, #148]	; (8001944 <MPU6050_Read_All+0x31c>)
 80018b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018b4:	f7ff f882 	bl	80009bc <__aeabi_dcmplt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00a      	beq.n	80018d4 <MPU6050_Read_All+0x2ac>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <MPU6050_Read_All+0x320>)
 80018ca:	f7ff f895 	bl	80009f8 <__aeabi_dcmpgt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d114      	bne.n	80018fe <MPU6050_Read_All+0x2d6>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MPU6050_Read_All+0x320>)
 80018da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018de:	f7ff f88b 	bl	80009f8 <__aeabi_dcmpgt>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d033      	beq.n	8001950 <MPU6050_Read_All+0x328>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MPU6050_Read_All+0x31c>)
 80018f4:	f7ff f862 	bl	80009bc <__aeabi_dcmplt>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d028      	beq.n	8001950 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 80018fe:	4913      	ldr	r1, [pc, #76]	; (800194c <MPU6050_Read_All+0x324>)
 8001900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001904:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001912:	e030      	b.n	8001976 <MPU6050_Read_All+0x34e>
 8001914:	f3af 8000 	nop.w
 8001918:	00000000 	.word	0x00000000
 800191c:	40cc2900 	.word	0x40cc2900
 8001920:	00000000 	.word	0x00000000
 8001924:	40606000 	.word	0x40606000
 8001928:	1a63c1f8 	.word	0x1a63c1f8
 800192c:	404ca5dc 	.word	0x404ca5dc
 8001930:	40d00000 	.word	0x40d00000
 8001934:	43aa0000 	.word	0x43aa0000
 8001938:	42121eb8 	.word	0x42121eb8
 800193c:	200004c4 	.word	0x200004c4
 8001940:	408f4000 	.word	0x408f4000
 8001944:	c0568000 	.word	0xc0568000
 8001948:	40568000 	.word	0x40568000
 800194c:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001956:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800195a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800195e:	e9cd 2300 	strd	r2, r3, [sp]
 8001962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001966:	481c      	ldr	r0, [pc, #112]	; (80019d8 <MPU6050_Read_All+0x3b0>)
 8001968:	f000 f83c 	bl	80019e4 <Kalman_getAngle>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	6839      	ldr	r1, [r7, #0]
 8001972:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800197c:	4690      	mov	r8, r2
 800197e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MPU6050_Read_All+0x3b4>)
 8001988:	4640      	mov	r0, r8
 800198a:	4649      	mov	r1, r9
 800198c:	f7ff f834 	bl	80009f8 <__aeabi_dcmpgt>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800199c:	4614      	mov	r4, r2
 800199e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80019b6:	e9cd 2300 	strd	r2, r3, [sp]
 80019ba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019be:	4808      	ldr	r0, [pc, #32]	; (80019e0 <MPU6050_Read_All+0x3b8>)
 80019c0:	f000 f810 	bl	80019e4 <Kalman_getAngle>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	6839      	ldr	r1, [r7, #0]
 80019ca:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80019ce:	bf00      	nop
 80019d0:	3740      	adds	r7, #64	; 0x40
 80019d2:	46bd      	mov	sp, r7
 80019d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019d8:	20000048 	.word	0x20000048
 80019dc:	40568000 	.word	0x40568000
 80019e0:	20000000 	.word	0x20000000

080019e4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b092      	sub	sp, #72	; 0x48
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019fa:	f7fe fbb5 	bl	8000168 <__aeabi_dsub>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a14:	f7fe fd60 	bl	80004d8 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fba4 	bl	800016c <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a3a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a3e:	f7fe fd4b 	bl	80004d8 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a50:	f7fe fb8a 	bl	8000168 <__aeabi_dsub>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a62:	f7fe fb81 	bl	8000168 <__aeabi_dsub>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fb7a 	bl	800016c <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a84:	f7fe fd28 	bl	80004d8 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fb6c 	bl	800016c <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001aaa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001aae:	f7fe fd13 	bl	80004d8 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	4629      	mov	r1, r5
 8001aba:	f7fe fb55 	bl	8000168 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001ad4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ad8:	f7fe fcfe 	bl	80004d8 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	f7fe fb40 	bl	8000168 <__aeabi_dsub>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001afe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b02:	f7fe fce9 	bl	80004d8 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fb2d 	bl	800016c <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b28:	f7fe fb20 	bl	800016c <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b3e:	f7fe fdf5 	bl	800072c <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001b50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b54:	f7fe fdea 	bl	800072c <__aeabi_ddiv>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b6a:	f7fe fafd 	bl	8000168 <__aeabi_dsub>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b84:	f7fe fca8 	bl	80004d8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	4629      	mov	r1, r5
 8001b90:	f7fe faec 	bl	800016c <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	68f9      	ldr	r1, [r7, #12]
 8001b9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ba4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ba8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bac:	f7fe fc94 	bl	80004d8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fad8 	bl	800016c <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001bcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001bd6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001be0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001be8:	f7fe fc76 	bl	80004d8 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fab8 	bl	8000168 <__aeabi_dsub>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001c08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c10:	f7fe fc62 	bl	80004d8 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4620      	mov	r0, r4
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f7fe faa4 	bl	8000168 <__aeabi_dsub>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001c30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c38:	f7fe fc4e 	bl	80004d8 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7fe fa90 	bl	8000168 <__aeabi_dsub>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001c58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c60:	f7fe fc3a 	bl	80004d8 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe fa7c 	bl	8000168 <__aeabi_dsub>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	3748      	adds	r7, #72	; 0x48
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6193      	str	r3, [r2, #24]
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_MspInit+0x5c>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_MspInit+0x60>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_MspInit+0x60>)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010000 	.word	0x40010000

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <MemManage_Handler+0x4>

08001d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler+0x4>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <UsageFault_Handler+0x4>

08001d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d36:	f000 fab5 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d46:	f001 fef4 	bl	8003b32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20001228 	.word	0x20001228

08001d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <_kill>:

int _kill(int pid, int sig)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d6c:	f009 fec0 	bl	800baf0 <__errno>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2216      	movs	r2, #22
 8001d74:	601a      	str	r2, [r3, #0]
  return -1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_exit>:

void _exit (int status)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffe7 	bl	8001d62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d94:	e7fe      	b.n	8001d94 <_exit+0x12>

08001d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e00a      	b.n	8001dbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da8:	f3af 8000 	nop.w
 8001dac:	4601      	mov	r1, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	60ba      	str	r2, [r7, #8]
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	dbf0      	blt.n	8001da8 <_read+0x12>
  }

  return len;
 8001dc6:	687b      	ldr	r3, [r7, #4]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	e009      	b.n	8001df6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	60ba      	str	r2, [r7, #8]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbf1      	blt.n	8001de2 <_write+0x12>
  }
  return len;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_close>:

int _close(int file)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <_isatty>:

int _isatty(int file)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f009 fe2a 	bl	800baf0 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20005000 	.word	0x20005000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	200004c8 	.word	0x200004c8
 8001ed0:	20001870 	.word	0x20001870

08001ed4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee6:	f107 0320 	add.w	r3, r7, #32
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	615a      	str	r2, [r3, #20]
 8001f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f04:	4a32      	ldr	r2, [pc, #200]	; (8001fd0 <MX_TIM3_Init+0xf0>)
 8001f06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f0a:	2248      	movs	r2, #72	; 0x48
 8001f0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f28:	4828      	ldr	r0, [pc, #160]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f2a:	f003 fef9 	bl	8005d20 <HAL_TIM_PWM_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f34:	f7ff fb1a 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f40:	f107 0320 	add.w	r3, r7, #32
 8001f44:	4619      	mov	r1, r3
 8001f46:	4821      	ldr	r0, [pc, #132]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f48:	f004 fbe8 	bl	800671c <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f52:	f7ff fb0b 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f56:	2360      	movs	r3, #96	; 0x60
 8001f58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4817      	ldr	r0, [pc, #92]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f6e:	f004 f8f9 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001f78:	f7ff faf8 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4812      	ldr	r0, [pc, #72]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f84:	f004 f8ee 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f8e:	f7ff faed 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2208      	movs	r2, #8
 8001f96:	4619      	mov	r1, r3
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001f9a:	f004 f8e3 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001fa4:	f7ff fae2 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	220c      	movs	r2, #12
 8001fac:	4619      	mov	r1, r3
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001fb0:	f004 f8d8 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001fba:	f7ff fad7 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fbe:	4803      	ldr	r0, [pc, #12]	; (8001fcc <MX_TIM3_Init+0xec>)
 8001fc0:	f000 f8b8 	bl	8002134 <HAL_TIM_MspPostInit>

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200004cc 	.word	0x200004cc
 8001fd0:	40000400 	.word	0x40000400

08001fd4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fda:	f107 030c 	add.w	r3, r7, #12
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f009 fd31 	bl	800ba4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <MX_TIM4_Init+0xa0>)
 8001ff2:	4a21      	ldr	r2, [pc, #132]	; (8002078 <MX_TIM4_Init+0xa4>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <MX_TIM4_Init+0xa0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <MX_TIM4_Init+0xa0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <MX_TIM4_Init+0xa0>)
 8002004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002008:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <MX_TIM4_Init+0xa0>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_TIM4_Init+0xa0>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002016:	2301      	movs	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800202e:	2301      	movs	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <MX_TIM4_Init+0xa0>)
 8002042:	f003 ff5f 	bl	8005f04 <HAL_TIM_Encoder_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800204c:	f7ff fa8e 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_TIM4_Init+0xa0>)
 800205e:	f004 fb5d 	bl	800671c <HAL_TIMEx_MasterConfigSynchronization>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002068:	f7ff fa80 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3730      	adds	r7, #48	; 0x30
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000514 	.word	0x20000514
 8002078:	40000800 	.word	0x40000800

0800207c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_TIM_PWM_MspInit+0x34>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10b      	bne.n	80020a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_TIM_PWM_MspInit+0x38>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_TIM_PWM_MspInit+0x38>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_TIM_PWM_MspInit+0x38>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a15      	ldr	r2, [pc, #84]	; (8002128 <HAL_TIM_Encoder_MspInit+0x70>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d123      	bne.n	8002120 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_TIM_Encoder_MspInit+0x74>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_TIM_Encoder_MspInit+0x74>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	61d3      	str	r3, [r2, #28]
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_TIM_Encoder_MspInit+0x74>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_TIM_Encoder_MspInit+0x74>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_TIM_Encoder_MspInit+0x74>)
 80020f6:	f043 0308 	orr.w	r3, r3, #8
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_TIM_Encoder_MspInit+0x74>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002108:	23c0      	movs	r3, #192	; 0xc0
 800210a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4619      	mov	r1, r3
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <HAL_TIM_Encoder_MspInit+0x78>)
 800211c:	f000 f9ec 	bl	80024f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002120:	bf00      	nop
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40000800 	.word	0x40000800
 800212c:	40021000 	.word	0x40021000
 8002130:	40010c00 	.word	0x40010c00

08002134 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_TIM_MspPostInit+0x88>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d12f      	bne.n	80021b4 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_TIM_MspPostInit+0x8c>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_TIM_MspPostInit+0x8c>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6193      	str	r3, [r2, #24]
 8002160:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <HAL_TIM_MspPostInit+0x8c>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_TIM_MspPostInit+0x8c>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <HAL_TIM_MspPostInit+0x8c>)
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_TIM_MspPostInit+0x8c>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8002184:	23c0      	movs	r3, #192	; 0xc0
 8002186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2302      	movs	r3, #2
 800218e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	4619      	mov	r1, r3
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <HAL_TIM_MspPostInit+0x90>)
 8002198:	f000 f9ae 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 800219c:	2303      	movs	r3, #3
 800219e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4619      	mov	r1, r3
 80021ae:	4806      	ldr	r0, [pc, #24]	; (80021c8 <HAL_TIM_MspPostInit+0x94>)
 80021b0:	f000 f9a2 	bl	80024f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00

080021cc <Reset_Handler>:
 80021cc:	f7ff fe82 	bl	8001ed4 <SystemInit>
 80021d0:	480b      	ldr	r0, [pc, #44]	; (8002200 <LoopFillZerobss+0xe>)
 80021d2:	490c      	ldr	r1, [pc, #48]	; (8002204 <LoopFillZerobss+0x12>)
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <LoopFillZerobss+0x16>)
 80021d6:	2300      	movs	r3, #0
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:
 80021da:	58d4      	ldr	r4, [r2, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:
 80021e0:	18c4      	adds	r4, r0, r3
 80021e2:	428c      	cmp	r4, r1
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <LoopFillZerobss+0x1a>)
 80021e8:	4c09      	ldr	r4, [pc, #36]	; (8002210 <LoopFillZerobss+0x1e>)
 80021ea:	2300      	movs	r3, #0
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:
 80021f2:	42a2      	cmp	r2, r4
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>
 80021f6:	f009 fc81 	bl	800bafc <__libc_init_array>
 80021fa:	f7ff f85f 	bl	80012bc <main>
 80021fe:	4770      	bx	lr
 8002200:	20000000 	.word	0x20000000
 8002204:	200003e8 	.word	0x200003e8
 8002208:	0800e758 	.word	0x0800e758
 800220c:	200003e8 	.word	0x200003e8
 8002210:	2000186c 	.word	0x2000186c

08002214 <ADC1_2_IRQHandler>:
 8002214:	e7fe      	b.n	8002214 <ADC1_2_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_Init+0x28>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_Init+0x28>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 f923 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	200f      	movs	r0, #15
 8002230:	f000 f808 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7ff fd2a 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f93b 	bl	80024de <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f000 f903 	bl	800248a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000090 	.word	0x20000090
 800229c:	20000098 	.word	0x20000098
 80022a0:	20000094 	.word	0x20000094

080022a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_IncTick+0x1c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_IncTick+0x20>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a03      	ldr	r2, [pc, #12]	; (80022c4 <HAL_IncTick+0x20>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	20000098 	.word	0x20000098
 80022c4:	2000055c 	.word	0x2000055c

080022c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b02      	ldr	r3, [pc, #8]	; (80022d8 <HAL_GetTick+0x10>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	2000055c 	.word	0x2000055c

080022dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230e:	4a04      	ldr	r2, [pc, #16]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <__NVIC_GetPriorityGrouping+0x18>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0307 	and.w	r3, r3, #7
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <__NVIC_EnableIRQ+0x34>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002440:	d301      	bcc.n	8002446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002442:	2301      	movs	r3, #1
 8002444:	e00f      	b.n	8002466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <SysTick_Config+0x40>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244e:	210f      	movs	r1, #15
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f7ff ff90 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <SysTick_Config+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <SysTick_Config+0x40>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff2d 	bl	80022dc <__NVIC_SetPriorityGrouping>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800249c:	f7ff ff42 	bl	8002324 <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff90 	bl	80023cc <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5f 	bl	8002378 <__NVIC_SetPriority>
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff35 	bl	8002340 <__NVIC_EnableIRQ>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffa2 	bl	8002430 <SysTick_Config>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b08b      	sub	sp, #44	; 0x2c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	e169      	b.n	80027e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800250c:	2201      	movs	r2, #1
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8158 	bne.w	80027da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a9a      	ldr	r2, [pc, #616]	; (8002798 <HAL_GPIO_Init+0x2a0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d05e      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002534:	4a98      	ldr	r2, [pc, #608]	; (8002798 <HAL_GPIO_Init+0x2a0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d875      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800253a:	4a98      	ldr	r2, [pc, #608]	; (800279c <HAL_GPIO_Init+0x2a4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d058      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002540:	4a96      	ldr	r2, [pc, #600]	; (800279c <HAL_GPIO_Init+0x2a4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d86f      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002546:	4a96      	ldr	r2, [pc, #600]	; (80027a0 <HAL_GPIO_Init+0x2a8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d052      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 800254c:	4a94      	ldr	r2, [pc, #592]	; (80027a0 <HAL_GPIO_Init+0x2a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d869      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002552:	4a94      	ldr	r2, [pc, #592]	; (80027a4 <HAL_GPIO_Init+0x2ac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04c      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002558:	4a92      	ldr	r2, [pc, #584]	; (80027a4 <HAL_GPIO_Init+0x2ac>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d863      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800255e:	4a92      	ldr	r2, [pc, #584]	; (80027a8 <HAL_GPIO_Init+0x2b0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d046      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002564:	4a90      	ldr	r2, [pc, #576]	; (80027a8 <HAL_GPIO_Init+0x2b0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d85d      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800256a:	2b12      	cmp	r3, #18
 800256c:	d82a      	bhi.n	80025c4 <HAL_GPIO_Init+0xcc>
 800256e:	2b12      	cmp	r3, #18
 8002570:	d859      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <HAL_GPIO_Init+0x80>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	080025f3 	.word	0x080025f3
 800257c:	080025cd 	.word	0x080025cd
 8002580:	080025df 	.word	0x080025df
 8002584:	08002621 	.word	0x08002621
 8002588:	08002627 	.word	0x08002627
 800258c:	08002627 	.word	0x08002627
 8002590:	08002627 	.word	0x08002627
 8002594:	08002627 	.word	0x08002627
 8002598:	08002627 	.word	0x08002627
 800259c:	08002627 	.word	0x08002627
 80025a0:	08002627 	.word	0x08002627
 80025a4:	08002627 	.word	0x08002627
 80025a8:	08002627 	.word	0x08002627
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002627 	.word	0x08002627
 80025b4:	08002627 	.word	0x08002627
 80025b8:	08002627 	.word	0x08002627
 80025bc:	080025d5 	.word	0x080025d5
 80025c0:	080025e9 	.word	0x080025e9
 80025c4:	4a79      	ldr	r2, [pc, #484]	; (80027ac <HAL_GPIO_Init+0x2b4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ca:	e02c      	b.n	8002626 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e029      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	3304      	adds	r3, #4
 80025da:	623b      	str	r3, [r7, #32]
          break;
 80025dc:	e024      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	3308      	adds	r3, #8
 80025e4:	623b      	str	r3, [r7, #32]
          break;
 80025e6:	e01f      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	330c      	adds	r3, #12
 80025ee:	623b      	str	r3, [r7, #32]
          break;
 80025f0:	e01a      	b.n	8002628 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025fa:	2304      	movs	r3, #4
 80025fc:	623b      	str	r3, [r7, #32]
          break;
 80025fe:	e013      	b.n	8002628 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002608:	2308      	movs	r3, #8
 800260a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	611a      	str	r2, [r3, #16]
          break;
 8002612:	e009      	b.n	8002628 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002614:	2308      	movs	r3, #8
 8002616:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	615a      	str	r2, [r3, #20]
          break;
 800261e:	e003      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x130>
          break;
 8002626:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d801      	bhi.n	8002632 <HAL_GPIO_Init+0x13a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	e001      	b.n	8002636 <HAL_GPIO_Init+0x13e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2bff      	cmp	r3, #255	; 0xff
 800263c:	d802      	bhi.n	8002644 <HAL_GPIO_Init+0x14c>
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x152>
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	3b08      	subs	r3, #8
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	210f      	movs	r1, #15
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	6a39      	ldr	r1, [r7, #32]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	431a      	orrs	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80b1 	beq.w	80027da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002678:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <HAL_GPIO_Init+0x2b8>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a4c      	ldr	r2, [pc, #304]	; (80027b0 <HAL_GPIO_Init+0x2b8>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_GPIO_Init+0x2b8>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002690:	4a48      	ldr	r2, [pc, #288]	; (80027b4 <HAL_GPIO_Init+0x2bc>)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a40      	ldr	r2, [pc, #256]	; (80027b8 <HAL_GPIO_Init+0x2c0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_GPIO_Init+0x1ec>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3f      	ldr	r2, [pc, #252]	; (80027bc <HAL_GPIO_Init+0x2c4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_GPIO_Init+0x1e8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a3e      	ldr	r2, [pc, #248]	; (80027c0 <HAL_GPIO_Init+0x2c8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <HAL_GPIO_Init+0x1e4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3d      	ldr	r2, [pc, #244]	; (80027c4 <HAL_GPIO_Init+0x2cc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_GPIO_Init+0x1e0>
 80026d4:	2303      	movs	r3, #3
 80026d6:	e006      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026d8:	2304      	movs	r3, #4
 80026da:	e004      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026dc:	2302      	movs	r3, #2
 80026de:	e002      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026e4:	2300      	movs	r3, #0
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	f002 0203 	and.w	r2, r2, #3
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	4093      	lsls	r3, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026f6:	492f      	ldr	r1, [pc, #188]	; (80027b4 <HAL_GPIO_Init+0x2bc>)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	492c      	ldr	r1, [pc, #176]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	43db      	mvns	r3, r3
 8002726:	4928      	ldr	r1, [pc, #160]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002728:	4013      	ands	r3, r2
 800272a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002738:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4922      	ldr	r1, [pc, #136]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	43db      	mvns	r3, r3
 800274e:	491e      	ldr	r1, [pc, #120]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002750:	4013      	ands	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4918      	ldr	r1, [pc, #96]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	4914      	ldr	r1, [pc, #80]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002778:	4013      	ands	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d021      	beq.n	80027cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	490e      	ldr	r1, [pc, #56]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e021      	b.n	80027da <HAL_GPIO_Init+0x2e2>
 8002796:	bf00      	nop
 8002798:	10320000 	.word	0x10320000
 800279c:	10310000 	.word	0x10310000
 80027a0:	10220000 	.word	0x10220000
 80027a4:	10210000 	.word	0x10210000
 80027a8:	10120000 	.word	0x10120000
 80027ac:	10110000 	.word	0x10110000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40010800 	.word	0x40010800
 80027bc:	40010c00 	.word	0x40010c00
 80027c0:	40011000 	.word	0x40011000
 80027c4:	40011400 	.word	0x40011400
 80027c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_GPIO_Init+0x304>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4909      	ldr	r1, [pc, #36]	; (80027fc <HAL_GPIO_Init+0x304>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f47f ae8e 	bne.w	800250c <HAL_GPIO_Init+0x14>
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	372c      	adds	r7, #44	; 0x2c
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40010400 	.word	0x40010400

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800281c:	e003      	b.n	8002826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e12b      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fcf0 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2224      	movs	r2, #36	; 0x24
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002894:	f003 f95c 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8002898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a81      	ldr	r2, [pc, #516]	; (8002aa4 <HAL_I2C_Init+0x274>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d807      	bhi.n	80028b4 <HAL_I2C_Init+0x84>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a80      	ldr	r2, [pc, #512]	; (8002aa8 <HAL_I2C_Init+0x278>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	bf94      	ite	ls
 80028ac:	2301      	movls	r3, #1
 80028ae:	2300      	movhi	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e006      	b.n	80028c2 <HAL_I2C_Init+0x92>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a7d      	ldr	r2, [pc, #500]	; (8002aac <HAL_I2C_Init+0x27c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0e7      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a78      	ldr	r2, [pc, #480]	; (8002ab0 <HAL_I2C_Init+0x280>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <HAL_I2C_Init+0x274>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d802      	bhi.n	8002904 <HAL_I2C_Init+0xd4>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	e009      	b.n	8002918 <HAL_I2C_Init+0xe8>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	4a69      	ldr	r2, [pc, #420]	; (8002ab4 <HAL_I2C_Init+0x284>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	3301      	adds	r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	430b      	orrs	r3, r1
 800291e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800292a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	495c      	ldr	r1, [pc, #368]	; (8002aa4 <HAL_I2C_Init+0x274>)
 8002934:	428b      	cmp	r3, r1
 8002936:	d819      	bhi.n	800296c <HAL_I2C_Init+0x13c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e59      	subs	r1, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fbb1 f3f3 	udiv	r3, r1, r3
 8002946:	1c59      	adds	r1, r3, #1
 8002948:	f640 73fc 	movw	r3, #4092	; 0xffc
 800294c:	400b      	ands	r3, r1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_I2C_Init+0x138>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e59      	subs	r1, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002966:	e051      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 8002968:	2304      	movs	r3, #4
 800296a:	e04f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d111      	bne.n	8002998 <HAL_I2C_Init+0x168>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e012      	b.n	80029be <HAL_I2C_Init+0x18e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Init+0x196>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e022      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10e      	bne.n	80029ec <HAL_I2C_Init+0x1bc>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e58      	subs	r0, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	440b      	add	r3, r1
 80029dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ea:	e00f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e58      	subs	r0, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	0099      	lsls	r1, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6809      	ldr	r1, [r1, #0]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6911      	ldr	r1, [r2, #16]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	000186a0 	.word	0x000186a0
 8002aa8:	001e847f 	.word	0x001e847f
 8002aac:	003d08ff 	.word	0x003d08ff
 8002ab0:	431bde83 	.word	0x431bde83
 8002ab4:	10624dd3 	.word	0x10624dd3

08002ab8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	817b      	strh	r3, [r7, #10]
 8002aca:	460b      	mov	r3, r1
 8002acc:	813b      	strh	r3, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad2:	f7ff fbf9 	bl	80022c8 <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	f040 80d9 	bne.w	8002c98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2319      	movs	r3, #25
 8002aec:	2201      	movs	r2, #1
 8002aee:	496d      	ldr	r1, [pc, #436]	; (8002ca4 <HAL_I2C_Mem_Write+0x1ec>)
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fccd 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0cc      	b.n	8002c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_I2C_Mem_Write+0x56>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0c5      	b.n	8002c9a <HAL_I2C_Mem_Write+0x1e2>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d007      	beq.n	8002b34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2221      	movs	r2, #33	; 0x21
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a4d      	ldr	r2, [pc, #308]	; (8002ca8 <HAL_I2C_Mem_Write+0x1f0>)
 8002b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b76:	88f8      	ldrh	r0, [r7, #6]
 8002b78:	893a      	ldrh	r2, [r7, #8]
 8002b7a:	8979      	ldrh	r1, [r7, #10]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4603      	mov	r3, r0
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fb04 	bl	8003194 <I2C_RequestMemoryWrite>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d052      	beq.n	8002c38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e081      	b.n	8002c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fd92 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d107      	bne.n	8002bbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06b      	b.n	8002c9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d11b      	bne.n	8002c38 <HAL_I2C_Mem_Write+0x180>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d017      	beq.n	8002c38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1aa      	bne.n	8002b96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fd85 	bl	8003754 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d107      	bne.n	8002c68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e016      	b.n	8002c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e000      	b.n	8002c9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
  }
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	817b      	strh	r3, [r7, #10]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	813b      	strh	r3, [r7, #8]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cca:	f7ff fafd 	bl	80022c8 <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	f040 8250 	bne.w	800317e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2319      	movs	r3, #25
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4982      	ldr	r1, [pc, #520]	; (8002ef0 <HAL_I2C_Mem_Read+0x244>)
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fbd1 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e243      	b.n	8003180 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_I2C_Mem_Read+0x5a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e23c      	b.n	8003180 <HAL_I2C_Mem_Read+0x4d4>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d007      	beq.n	8002d2c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2222      	movs	r2, #34	; 0x22
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2240      	movs	r2, #64	; 0x40
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4a62      	ldr	r2, [pc, #392]	; (8002ef4 <HAL_I2C_Mem_Read+0x248>)
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d6e:	88f8      	ldrh	r0, [r7, #6]
 8002d70:	893a      	ldrh	r2, [r7, #8]
 8002d72:	8979      	ldrh	r1, [r7, #10]
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fa9e 	bl	80032c0 <I2C_RequestMemoryRead>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1f8      	b.n	8003180 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d113      	bne.n	8002dbe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e1cc      	b.n	8003158 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d11e      	bne.n	8002e04 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd6:	b672      	cpsid	i
}
 8002dd8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e00:	b662      	cpsie	i
}
 8002e02:	e035      	b.n	8002e70 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d11e      	bne.n	8002e4a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e1c:	b672      	cpsid	i
}
 8002e1e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e46:	b662      	cpsie	i
}
 8002e48:	e012      	b.n	8002e70 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e58:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e70:	e172      	b.n	8003158 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	f200 811f 	bhi.w	80030ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d123      	bne.n	8002ecc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fcab 	bl	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e173      	b.n	8003180 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eca:	e145      	b.n	8003158 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d152      	bne.n	8002f7a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eda:	2200      	movs	r2, #0
 8002edc:	4906      	ldr	r1, [pc, #24]	; (8002ef8 <HAL_I2C_Mem_Read+0x24c>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fad6 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e148      	b.n	8003180 <HAL_I2C_Mem_Read+0x4d4>
 8002eee:	bf00      	nop
 8002ef0:	00100002 	.word	0x00100002
 8002ef4:	ffff0000 	.word	0xffff0000
 8002ef8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002efc:	b672      	cpsid	i
}
 8002efe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f42:	b662      	cpsie	i
}
 8002f44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f78:	e0ee      	b.n	8003158 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	2200      	movs	r2, #0
 8002f82:	4981      	ldr	r1, [pc, #516]	; (8003188 <HAL_I2C_Mem_Read+0x4dc>)
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fa83 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0f5      	b.n	8003180 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa4:	b672      	cpsid	i
}
 8002fa6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fda:	4b6c      	ldr	r3, [pc, #432]	; (800318c <HAL_I2C_Mem_Read+0x4e0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	08db      	lsrs	r3, r3, #3
 8002fe0:	4a6b      	ldr	r2, [pc, #428]	; (8003190 <HAL_I2C_Mem_Read+0x4e4>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0a1a      	lsrs	r2, r3, #8
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d118      	bne.n	8003032 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003022:	b662      	cpsie	i
}
 8003024:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0a6      	b.n	8003180 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d1d9      	bne.n	8002ff4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003082:	b662      	cpsie	i
}
 8003084:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b8:	e04e      	b.n	8003158 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fb90 	bl	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e058      	b.n	8003180 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d124      	bne.n	8003158 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003124:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f ae88 	bne.w	8002e72 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3728      	adds	r7, #40	; 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	00010004 	.word	0x00010004
 800318c:	20000090 	.word	0x20000090
 8003190:	14f8b589 	.word	0x14f8b589

08003194 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	4608      	mov	r0, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	461a      	mov	r2, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	817b      	strh	r3, [r7, #10]
 80031a6:	460b      	mov	r3, r1
 80031a8:	813b      	strh	r3, [r7, #8]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f960 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00d      	beq.n	80031f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e4:	d103      	bne.n	80031ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e05f      	b.n	80032b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031f2:	897b      	ldrh	r3, [r7, #10]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003200:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	6a3a      	ldr	r2, [r7, #32]
 8003206:	492d      	ldr	r1, [pc, #180]	; (80032bc <I2C_RequestMemoryWrite+0x128>)
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f9bb 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e04c      	b.n	80032b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800322e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003230:	6a39      	ldr	r1, [r7, #32]
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fa46 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b04      	cmp	r3, #4
 8003244:	d107      	bne.n	8003256 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003254:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e02b      	b.n	80032b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003260:	893b      	ldrh	r3, [r7, #8]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	611a      	str	r2, [r3, #16]
 800326a:	e021      	b.n	80032b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	b29b      	uxth	r3, r3
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	6a39      	ldr	r1, [r7, #32]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa20 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b04      	cmp	r3, #4
 8003290:	d107      	bne.n	80032a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e005      	b.n	80032b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032a6:	893b      	ldrh	r3, [r7, #8]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	00010002 	.word	0x00010002

080032c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	817b      	strh	r3, [r7, #10]
 80032d2:	460b      	mov	r3, r1
 80032d4:	813b      	strh	r3, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	2200      	movs	r2, #0
 8003302:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f8c2 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003320:	d103      	bne.n	800332a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e0aa      	b.n	8003484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800332e:	897b      	ldrh	r3, [r7, #10]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800333c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	4952      	ldr	r1, [pc, #328]	; (800348c <I2C_RequestMemoryRead+0x1cc>)
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f91d 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e097      	b.n	8003484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800336a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336c:	6a39      	ldr	r1, [r7, #32]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f9a8 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	2b04      	cmp	r3, #4
 8003380:	d107      	bne.n	8003392 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003390:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e076      	b.n	8003484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	611a      	str	r2, [r3, #16]
 80033a6:	e021      	b.n	80033ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033a8:	893b      	ldrh	r3, [r7, #8]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	6a39      	ldr	r1, [r7, #32]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f982 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d107      	bne.n	80033de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e050      	b.n	8003484 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e2:	893b      	ldrh	r3, [r7, #8]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	6a39      	ldr	r1, [r7, #32]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f967 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	2b04      	cmp	r3, #4
 8003402:	d107      	bne.n	8003414 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003412:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e035      	b.n	8003484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003426:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	2200      	movs	r2, #0
 8003430:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f82b 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344e:	d103      	bne.n	8003458 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e013      	b.n	8003484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800345c:	897b      	ldrh	r3, [r7, #10]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	6a3a      	ldr	r2, [r7, #32]
 8003470:	4906      	ldr	r1, [pc, #24]	; (800348c <I2C_RequestMemoryRead+0x1cc>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f886 	bl	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	00010002 	.word	0x00010002

08003490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a0:	e048      	b.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d044      	beq.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7fe ff0d 	bl	80022c8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d139      	bne.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10d      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	e00c      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	429a      	cmp	r2, r3
 8003504:	d116      	bne.n	8003534 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e023      	b.n	800357c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10d      	bne.n	800355a <I2C_WaitOnFlagUntilTimeout+0xca>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	e00c      	b.n	8003574 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	429a      	cmp	r2, r3
 8003578:	d093      	beq.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003592:	e071      	b.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a2:	d123      	bne.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0204 	orr.w	r2, r3, #4
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e067      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d041      	beq.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fe fe68 	bl	80022c8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d136      	bne.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10c      	bne.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e00b      	b.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e021      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d10c      	bne.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	43da      	mvns	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e00b      	b.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f47f af6d 	bne.w	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d0:	e034      	b.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f8e3 	bl	800389e <I2C_IsAcknowledgeFailed>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e034      	b.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d028      	beq.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fe fded 	bl	80022c8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d11d      	bne.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d016      	beq.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e007      	b.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d1c3      	bne.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003760:	e034      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f89b 	bl	800389e <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e034      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d028      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fda5 	bl	80022c8 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d1c3      	bne.n	8003762 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037f0:	e049      	b.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d119      	bne.n	8003834 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0210 	mvn.w	r2, #16
 8003808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e030      	b.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003834:	f7fe fd48 	bl	80022c8 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11d      	bne.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d016      	beq.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d1ae      	bne.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d11b      	bne.n	80038ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0204 	orr.w	r2, r3, #4
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0e8      	b.n	8003ade <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f007 f851 	bl	800a9c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f002 ff70 	bl	800681e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003948:	f002 ff46 	bl	80067d8 <USB_CoreInit>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0bf      	b.n	8003ade <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f002 ff74 	bl	8006852 <USB_SetCurrentMode>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0b0      	b.n	8003ade <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	e03e      	b.n	8003a00 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	3311      	adds	r3, #17
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	440b      	add	r3, r1
 80039a4:	3310      	adds	r3, #16
 80039a6:	7bfa      	ldrb	r2, [r7, #15]
 80039a8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	3313      	adds	r3, #19
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	440b      	add	r3, r1
 80039cc:	3320      	adds	r3, #32
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	3324      	adds	r3, #36	; 0x24
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	3301      	adds	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3bb      	bcc.n	8003982 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e044      	b.n	8003a9a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	440b      	add	r3, r1
 8003a34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	440b      	add	r3, r1
 8003a4a:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	440b      	add	r3, r1
 8003a76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	3301      	adds	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	791b      	ldrb	r3, [r3, #4]
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3b5      	bcc.n	8003a10 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aae:	f002 fedc 	bl	800686a <USB_DevInit>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e00c      	b.n	8003ade <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f005 f95b 	bl	8008d92 <USB_DevDisconnect>

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_PCD_Start+0x16>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e016      	b.n	8003b2a <HAL_PCD_Start+0x44>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f002 fe72 	bl	80067f2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003b0e:	2101      	movs	r1, #1
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f007 f9cc 	bl	800aeae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f005 f92f 	bl	8008d7e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b088      	sub	sp, #32
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f005 f931 	bl	8008da6 <USB_ReadInterrupts>
 8003b44:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fb1a 	bl	800418a <PCD_EP_ISR_Handler>

    return;
 8003b56:	e119      	b.n	8003d8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d013      	beq.n	8003b8a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b74:	b292      	uxth	r2, r2
 8003b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f006 ff9f 	bl	800aabe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b80:	2100      	movs	r1, #0
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f905 	bl	8003d92 <HAL_PCD_SetAddress>

    return;
 8003b88:	e100      	b.n	8003d8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00c      	beq.n	8003bae <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ba6:	b292      	uxth	r2, r2
 8003ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bac:	e0ee      	b.n	8003d8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00c      	beq.n	8003bd2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bd0:	e0dc      	b.n	8003d8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d027      	beq.n	8003c2c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0204 	bic.w	r2, r2, #4
 8003bee:	b292      	uxth	r2, r2
 8003bf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0208 	bic.w	r2, r2, #8
 8003c06:	b292      	uxth	r2, r2
 8003c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f006 ff8f 	bl	800ab30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c24:	b292      	uxth	r2, r2
 8003c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c2a:	e0af      	b.n	8003d8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8083 	beq.w	8003d3e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e010      	b.n	8003c60 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	7ffb      	ldrb	r3, [r7, #31]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	7ffb      	ldrb	r3, [r7, #31]
 8003c4c:	8812      	ldrh	r2, [r2, #0]
 8003c4e:	b292      	uxth	r2, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	3320      	adds	r3, #32
 8003c54:	443b      	add	r3, r7
 8003c56:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003c5a:	7ffb      	ldrb	r3, [r7, #31]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	7ffb      	ldrb	r3, [r7, #31]
 8003c62:	2b07      	cmp	r3, #7
 8003c64:	d9eb      	bls.n	8003c3e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	b292      	uxth	r2, r2
 8003c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0201 	bic.w	r2, r2, #1
 8003c90:	b292      	uxth	r2, r2
 8003c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003c96:	bf00      	nop
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f6      	beq.n	8003c98 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e00f      	b.n	8003ce8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003cc8:	7ffb      	ldrb	r3, [r7, #31]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	7ffa      	ldrb	r2, [r7, #31]
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	440a      	add	r2, r1
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	3320      	adds	r3, #32
 8003cda:	443b      	add	r3, r7
 8003cdc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003ce0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	7ffb      	ldrb	r3, [r7, #31]
 8003cea:	2b07      	cmp	r3, #7
 8003cec:	d9ec      	bls.n	8003cc8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0208 	orr.w	r2, r2, #8
 8003d00:	b292      	uxth	r2, r2
 8003d02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d18:	b292      	uxth	r2, r2
 8003d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0204 	orr.w	r2, r2, #4
 8003d30:	b292      	uxth	r2, r2
 8003d32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f006 fee0 	bl	800aafc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d3c:	e026      	b.n	8003d8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00f      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d5a:	b292      	uxth	r2, r2
 8003d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f006 fe9e 	bl	800aaa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d66:	e011      	b.n	8003d8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d84:	b292      	uxth	r2, r2
 8003d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d8a:	bf00      	nop
  }
}
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_PCD_SetAddress+0x1a>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e012      	b.n	8003dd2 <HAL_PCD_SetAddress+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f004 ffc8 	bl	8008d58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	4608      	mov	r0, r1
 8003de4:	4611      	mov	r1, r2
 8003de6:	461a      	mov	r2, r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	70fb      	strb	r3, [r7, #3]
 8003dec:	460b      	mov	r3, r1
 8003dee:	803b      	strh	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da0e      	bge.n	8003e1e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 0207 	and.w	r2, r3, #7
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	3310      	adds	r3, #16
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4413      	add	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	705a      	strb	r2, [r3, #1]
 8003e1c:	e00e      	b.n	8003e3c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	f003 0207 	and.w	r2, r3, #7
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e48:	883a      	ldrh	r2, [r7, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	78ba      	ldrb	r2, [r7, #2]
 8003e52:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e54:	78bb      	ldrb	r3, [r7, #2]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d102      	bne.n	8003e60 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_PCD_EP_Open+0x94>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e00e      	b.n	8003e8c <HAL_PCD_EP_Open+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 fd11 	bl	80068a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da0e      	bge.n	8003ec6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	f003 0207 	and.w	r2, r3, #7
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	3310      	adds	r3, #16
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4413      	add	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	705a      	strb	r2, [r3, #1]
 8003ec4:	e00e      	b.n	8003ee4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	f003 0207 	and.w	r2, r3, #7
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_PCD_EP_Close+0x6a>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e00e      	b.n	8003f1c <HAL_PCD_EP_Close+0x88>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f003 f889 	bl	8007024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	460b      	mov	r3, r1
 8003f32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f34:	7afb      	ldrb	r3, [r7, #11]
 8003f36:	f003 0207 	and.w	r2, r3, #7
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6979      	ldr	r1, [r7, #20]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f003 fa40 	bl	80073fc <USB_EPStartXfer>

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 0207 	and.w	r2, r3, #7
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003fa8:	681b      	ldr	r3, [r3, #0]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fc4:	7afb      	ldrb	r3, [r7, #11]
 8003fc6:	f003 0207 	and.w	r2, r3, #7
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	3310      	adds	r3, #16
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004000:	7afb      	ldrb	r3, [r7, #11]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	b2da      	uxtb	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6979      	ldr	r1, [r7, #20]
 8004012:	4618      	mov	r0, r3
 8004014:	f003 f9f2 	bl	80073fc <USB_EPStartXfer>

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	7912      	ldrb	r2, [r2, #4]
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e04c      	b.n	80040da <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da0e      	bge.n	8004066 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 0207 	and.w	r2, r3, #7
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	3310      	adds	r3, #16
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	705a      	strb	r2, [r3, #1]
 8004064:	e00c      	b.n	8004080 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_PCD_EP_SetStall+0x7e>
 800409c:	2302      	movs	r3, #2
 800409e:	e01c      	b.n	80040da <HAL_PCD_EP_SetStall+0xb8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68f9      	ldr	r1, [r7, #12]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 fd55 	bl	8008b5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f004 fe7a 	bl	8008dc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	7912      	ldrb	r2, [r2, #4]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e040      	b.n	8004182 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	da0e      	bge.n	8004126 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 0207 	and.w	r2, r3, #7
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	3310      	adds	r3, #16
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	705a      	strb	r2, [r3, #1]
 8004124:	e00e      	b.n	8004144 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 0207 	and.w	r2, r3, #7
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_PCD_EP_ClrStall+0x82>
 8004160:	2302      	movs	r3, #2
 8004162:	e00e      	b.n	8004182 <HAL_PCD_EP_ClrStall+0xa0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68f9      	ldr	r1, [r7, #12]
 8004172:	4618      	mov	r0, r3
 8004174:	f004 fd43 	bl	8008bfe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b096      	sub	sp, #88	; 0x58
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004192:	e3bc      	b.n	800490e <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800419c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80041a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80041ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f040 8176 	bne.w	80044a4 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d14f      	bne.n	8004264 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80041d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d4:	81fb      	strh	r3, [r7, #14]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3310      	adds	r3, #16
 80041ec:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	3302      	adds	r3, #2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004218:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800421a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	441a      	add	r2, r3
 8004224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004226:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004228:	2100      	movs	r1, #0
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f006 fc1f 	bl	800aa6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7b5b      	ldrb	r3, [r3, #13]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8369 	beq.w	800490e <PCD_EP_ISR_Handler+0x784>
 800423c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 8364 	bne.w	800490e <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	7b5b      	ldrb	r3, [r3, #13]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004250:	b2da      	uxtb	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b292      	uxth	r2, r2
 8004258:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	735a      	strb	r2, [r3, #13]
 8004262:	e354      	b.n	800490e <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800426a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004276:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800427a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427e:	2b00      	cmp	r3, #0
 8004280:	d034      	beq.n	80042ec <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800428a:	b29b      	uxth	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	3306      	adds	r3, #6
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80042b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f004 fdcf 	bl	8008e64 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80042d2:	4013      	ands	r3, r2
 80042d4:	823b      	strh	r3, [r7, #16]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	8a3a      	ldrh	r2, [r7, #16]
 80042dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042e0:	b292      	uxth	r2, r2
 80042e2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f006 fb95 	bl	800aa14 <HAL_PCD_SetupStageCallback>
 80042ea:	e310      	b.n	800490e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042ec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f280 830c 	bge.w	800490e <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004302:	4013      	ands	r3, r2
 8004304:	83fb      	strh	r3, [r7, #30]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	8bfa      	ldrh	r2, [r7, #30]
 800430c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004310:	b292      	uxth	r2, r2
 8004312:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	3306      	adds	r3, #6
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800433c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d019      	beq.n	800437c <PCD_EP_ISR_Handler+0x1f2>
 8004348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d015      	beq.n	800437c <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004356:	6959      	ldr	r1, [r3, #20]
 8004358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800435c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004360:	b29b      	uxth	r3, r3
 8004362:	f004 fd7f 	bl	8008e64 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	441a      	add	r2, r3
 8004370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004372:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004374:	2100      	movs	r1, #0
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f006 fb5e 	bl	800aa38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004386:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800438a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438e:	2b00      	cmp	r3, #0
 8004390:	f040 82bd 	bne.w	800490e <PCD_EP_ISR_Handler+0x784>
 8004394:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004398:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800439c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043a0:	f000 82b5 	beq.w	800490e <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	4413      	add	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b3e      	cmp	r3, #62	; 0x3e
 80043da:	d91d      	bls.n	8004418 <PCD_EP_ISR_Handler+0x28e>
 80043dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	647b      	str	r3, [r7, #68]	; 0x44
 80043e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <PCD_EP_ISR_Handler+0x26c>
 80043f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f2:	3b01      	subs	r3, #1
 80043f4:	647b      	str	r3, [r7, #68]	; 0x44
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fe:	b29b      	uxth	r3, r3
 8004400:	029b      	lsls	r3, r3, #10
 8004402:	b29b      	uxth	r3, r3
 8004404:	4313      	orrs	r3, r2
 8004406:	b29b      	uxth	r3, r3
 8004408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800440c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004410:	b29a      	uxth	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	e026      	b.n	8004466 <PCD_EP_ISR_Handler+0x2dc>
 8004418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <PCD_EP_ISR_Handler+0x2ac>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800442a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442e:	b29a      	uxth	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	e017      	b.n	8004466 <PCD_EP_ISR_Handler+0x2dc>
 8004436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	647b      	str	r3, [r7, #68]	; 0x44
 800443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <PCD_EP_ISR_Handler+0x2c6>
 800444a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444c:	3301      	adds	r3, #1
 800444e:	647b      	str	r3, [r7, #68]	; 0x44
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29a      	uxth	r2, r3
 8004456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004458:	b29b      	uxth	r3, r3
 800445a:	029b      	lsls	r3, r3, #10
 800445c:	b29b      	uxth	r3, r3
 800445e:	4313      	orrs	r3, r2
 8004460:	b29a      	uxth	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	827b      	strh	r3, [r7, #18]
 8004478:	8a7b      	ldrh	r3, [r7, #18]
 800447a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800447e:	827b      	strh	r3, [r7, #18]
 8004480:	8a7b      	ldrh	r3, [r7, #18]
 8004482:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004486:	827b      	strh	r3, [r7, #18]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	8a7b      	ldrh	r3, [r7, #18]
 800448e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449e:	b29b      	uxth	r3, r3
 80044a0:	8013      	strh	r3, [r2, #0]
 80044a2:	e234      	b.n	800490e <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f280 80fc 	bge.w	80046ba <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044d8:	4013      	ands	r3, r2
 80044da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80044f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044f4:	b292      	uxth	r2, r2
 80044f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80044f8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4413      	add	r3, r2
 800450c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800450e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004510:	7b1b      	ldrb	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d125      	bne.n	8004562 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	3306      	adds	r3, #6
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800453e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004542:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8092 	beq.w	8004670 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	6959      	ldr	r1, [r3, #20]
 8004554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004556:	88da      	ldrh	r2, [r3, #6]
 8004558:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800455c:	f004 fc82 	bl	8008e64 <USB_ReadPMA>
 8004560:	e086      	b.n	8004670 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004564:	78db      	ldrb	r3, [r3, #3]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d10a      	bne.n	8004580 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800456a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800456e:	461a      	mov	r2, r3
 8004570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f9d9 	bl	800492a <HAL_PCD_EP_DB_Receive>
 8004578:	4603      	mov	r3, r0
 800457a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800457e:	e077      	b.n	8004670 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	441a      	add	r2, r3
 80045ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80045b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d024      	beq.n	8004628 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	3302      	adds	r3, #2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004606:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800460a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02e      	beq.n	8004670 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004618:	6959      	ldr	r1, [r3, #20]
 800461a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461c:	891a      	ldrh	r2, [r3, #8]
 800461e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004622:	f004 fc1f 	bl	8008e64 <USB_ReadPMA>
 8004626:	e023      	b.n	8004670 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004630:	b29b      	uxth	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4413      	add	r3, r2
 800463c:	3306      	adds	r3, #6
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004650:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004654:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004662:	6959      	ldr	r1, [r3, #20]
 8004664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004666:	895a      	ldrh	r2, [r3, #10]
 8004668:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800466c:	f004 fbfa 	bl	8008e64 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004678:	441a      	add	r2, r3
 800467a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800467c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800467e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004686:	441a      	add	r2, r3
 8004688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800468c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <PCD_EP_ISR_Handler+0x516>
 8004694:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	429a      	cmp	r2, r3
 800469e:	d206      	bcs.n	80046ae <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f006 f9c6 	bl	800aa38 <HAL_PCD_DataOutStageCallback>
 80046ac:	e005      	b.n	80046ba <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046b4:	4618      	mov	r0, r3
 80046b6:	f002 fea1 	bl	80073fc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8123 	beq.w	800490e <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 80046c8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	3310      	adds	r3, #16
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	441a      	add	r2, r3
 8004708:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800470c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004714:	b29b      	uxth	r3, r3
 8004716:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471a:	78db      	ldrb	r3, [r3, #3]
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 80a2 	bne.w	8004866 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8004722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004724:	2200      	movs	r2, #0
 8004726:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472a:	7b1b      	ldrb	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8093 	beq.w	8004858 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004732:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d046      	beq.n	80047cc <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800473e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d126      	bne.n	8004794 <PCD_EP_ISR_Handler+0x60a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004754:	b29b      	uxth	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	4413      	add	r3, r2
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	011a      	lsls	r2, r3, #4
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	4413      	add	r3, r2
 8004768:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800476c:	623b      	str	r3, [r7, #32]
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004778:	b29a      	uxth	r2, r3
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	801a      	strh	r2, [r3, #0]
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478c:	b29a      	uxth	r2, r3
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	e061      	b.n	8004858 <PCD_EP_ISR_Handler+0x6ce>
 8004794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d15d      	bne.n	8004858 <PCD_EP_ISR_Handler+0x6ce>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	4413      	add	r3, r2
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	011a      	lsls	r2, r3, #4
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	4413      	add	r3, r2
 80047be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	2200      	movs	r2, #0
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	e045      	b.n	8004858 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d4:	785b      	ldrb	r3, [r3, #1]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d126      	bne.n	8004828 <PCD_EP_ISR_Handler+0x69e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	4413      	add	r3, r2
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
 80047f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	011a      	lsls	r2, r3, #4
 80047f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fa:	4413      	add	r3, r2
 80047fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800480c:	b29a      	uxth	r2, r3
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004820:	b29a      	uxth	r2, r3
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	e017      	b.n	8004858 <PCD_EP_ISR_Handler+0x6ce>
 8004828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d113      	bne.n	8004858 <PCD_EP_ISR_Handler+0x6ce>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004838:	b29b      	uxth	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	4413      	add	r3, r2
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	011a      	lsls	r2, r3, #4
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484a:	4413      	add	r3, r2
 800484c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004850:	63bb      	str	r3, [r7, #56]	; 0x38
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	2200      	movs	r2, #0
 8004856:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f006 f905 	bl	800aa6e <HAL_PCD_DataInStageCallback>
 8004864:	e053      	b.n	800490e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004866:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d146      	bne.n	8004900 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487a:	b29b      	uxth	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	3302      	adds	r3, #2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800489a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800489e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d907      	bls.n	80048ba <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 80048aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b6:	619a      	str	r2, [r3, #24]
 80048b8:	e002      	b.n	80048c0 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 80048ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048bc:	2200      	movs	r2, #0
 80048be:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80048c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f006 f8cd 	bl	800aa6e <HAL_PCD_DataInStageCallback>
 80048d4:	e01b      	b.n	800490e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80048d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048de:	441a      	add	r2, r3
 80048e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80048e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048ec:	441a      	add	r2, r3
 80048ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048f8:	4618      	mov	r0, r3
 80048fa:	f002 fd7f 	bl	80073fc <USB_EPStartXfer>
 80048fe:	e006      	b.n	800490e <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004900:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004904:	461a      	mov	r2, r3
 8004906:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f91b 	bl	8004b44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004916:	b29b      	uxth	r3, r3
 8004918:	b21b      	sxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	f6ff ac3a 	blt.w	8004194 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3758      	adds	r7, #88	; 0x58
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b088      	sub	sp, #32
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	4613      	mov	r3, r2
 8004936:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d07e      	beq.n	8004a40 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494a:	b29b      	uxth	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4413      	add	r3, r2
 8004956:	3302      	adds	r3, #2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	699a      	ldr	r2, [r3, #24]
 8004970:	8b7b      	ldrh	r3, [r7, #26]
 8004972:	429a      	cmp	r2, r3
 8004974:	d306      	bcc.n	8004984 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	8b7b      	ldrh	r3, [r7, #26]
 800497c:	1ad2      	subs	r2, r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	619a      	str	r2, [r3, #24]
 8004982:	e002      	b.n	800498a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2200      	movs	r2, #0
 8004988:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d123      	bne.n	80049da <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ac:	833b      	strh	r3, [r7, #24]
 80049ae:	8b3b      	ldrh	r3, [r7, #24]
 80049b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049b4:	833b      	strh	r3, [r7, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	8b3b      	ldrh	r3, [r7, #24]
 80049c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01f      	beq.n	8004a24 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	82fb      	strh	r3, [r7, #22]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	8afb      	ldrh	r3, [r7, #22]
 8004a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a24:	8b7b      	ldrh	r3, [r7, #26]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8087 	beq.w	8004b3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6818      	ldr	r0, [r3, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6959      	ldr	r1, [r3, #20]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	891a      	ldrh	r2, [r3, #8]
 8004a38:	8b7b      	ldrh	r3, [r7, #26]
 8004a3a:	f004 fa13 	bl	8008e64 <USB_ReadPMA>
 8004a3e:	e07c      	b.n	8004b3a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4413      	add	r3, r2
 8004a54:	3306      	adds	r3, #6
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	8b7b      	ldrh	r3, [r7, #26]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d306      	bcc.n	8004a82 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	8b7b      	ldrh	r3, [r7, #26]
 8004a7a:	1ad2      	subs	r2, r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	619a      	str	r2, [r3, #24]
 8004a80:	e002      	b.n	8004a88 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2200      	movs	r2, #0
 8004a86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d123      	bne.n	8004ad8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	83fb      	strh	r3, [r7, #30]
 8004aac:	8bfb      	ldrh	r3, [r7, #30]
 8004aae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ab2:	83fb      	strh	r3, [r7, #30]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	441a      	add	r2, r3
 8004ac2:	8bfb      	ldrh	r3, [r7, #30]
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d11f      	bne.n	8004b22 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afc:	83bb      	strh	r3, [r7, #28]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	441a      	add	r2, r3
 8004b0c:	8bbb      	ldrh	r3, [r7, #28]
 8004b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b22:	8b7b      	ldrh	r3, [r7, #26]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6959      	ldr	r1, [r3, #20]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	895a      	ldrh	r2, [r3, #10]
 8004b34:	8b7b      	ldrh	r3, [r7, #26]
 8004b36:	f004 f995 	bl	8008e64 <USB_ReadPMA>
    }
  }

  return count;
 8004b3a:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b0a4      	sub	sp, #144	; 0x90
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 81dd 	beq.w	8004f18 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	3302      	adds	r3, #2
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b86:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d907      	bls.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	619a      	str	r2, [r3, #24]
 8004ba4:	e002      	b.n	8004bac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f040 80b9 	bne.w	8004d28 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	785b      	ldrb	r3, [r3, #1]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d126      	bne.n	8004c0c <HAL_PCD_EP_DB_Transmit+0xc8>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	4413      	add	r3, r2
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	011a      	lsls	r2, r3, #4
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	4413      	add	r3, r2
 8004be0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	801a      	strh	r2, [r3, #0]
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	e01a      	b.n	8004c42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d116      	bne.n	8004c42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	4413      	add	r3, r2
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	011a      	lsls	r2, r3, #4
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	4413      	add	r3, r2
 8004c36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	2200      	movs	r2, #0
 8004c40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d126      	bne.n	8004c9e <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	011a      	lsls	r2, r3, #4
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c76:	61bb      	str	r3, [r7, #24]
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	e017      	b.n	8004cce <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	785b      	ldrb	r3, [r3, #1]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d113      	bne.n	8004cce <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	4413      	add	r3, r2
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	011a      	lsls	r2, r3, #4
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cc6:	623b      	str	r3, [r7, #32]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f005 feca 	bl	800aa6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 82fc 	beq.w	80052de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d00:	82fb      	strh	r3, [r7, #22]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	8afb      	ldrh	r3, [r7, #22]
 8004d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	8013      	strh	r3, [r2, #0]
 8004d26:	e2da      	b.n	80052de <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d021      	beq.n	8004d76 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	f040 82ae 	bne.w	80052de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d8a:	441a      	add	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d98:	441a      	add	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6a1a      	ldr	r2, [r3, #32]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d30b      	bcc.n	8004dc2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	6a1a      	ldr	r2, [r3, #32]
 8004db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dba:	1ad2      	subs	r2, r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	621a      	str	r2, [r3, #32]
 8004dc0:	e017      	b.n	8004df2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d108      	bne.n	8004ddc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004dca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004dda:	e00a      	b.n	8004df2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2200      	movs	r2, #0
 8004df0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	785b      	ldrb	r3, [r3, #1]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d165      	bne.n	8004ec6 <HAL_PCD_EP_DB_Transmit+0x382>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0e:	4413      	add	r3, r2
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	011a      	lsls	r2, r3, #4
 8004e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e36:	2b3e      	cmp	r3, #62	; 0x3e
 8004e38:	d91d      	bls.n	8004e76 <HAL_PCD_EP_DB_Transmit+0x332>
 8004e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <HAL_PCD_EP_DB_Transmit+0x310>
 8004e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e50:	3b01      	subs	r3, #1
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	029b      	lsls	r3, r3, #10
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	801a      	strh	r2, [r3, #0]
 8004e74:	e044      	b.n	8004f00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x350>
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	e035      	b.n	8004f00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_PCD_EP_DB_Transmit+0x36a>
 8004ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eaa:	3301      	adds	r3, #1
 8004eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	029b      	lsls	r3, r3, #10
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	e01c      	b.n	8004f00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d118      	bne.n	8004f00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee2:	4413      	add	r3, r2
 8004ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	011a      	lsls	r2, r3, #4
 8004eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eee:	4413      	add	r3, r2
 8004ef0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6959      	ldr	r1, [r3, #20]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	891a      	ldrh	r2, [r3, #8]
 8004f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f003 ff62 	bl	8008dda <USB_WritePMA>
 8004f16:	e1e2      	b.n	80052de <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3306      	adds	r3, #6
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f40:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d307      	bcc.n	8004f60 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	699a      	ldr	r2, [r3, #24]
 8004f54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f58:	1ad2      	subs	r2, r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	619a      	str	r2, [r3, #24]
 8004f5e:	e002      	b.n	8004f66 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2200      	movs	r2, #0
 8004f64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 80c0 	bne.w	80050f0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d126      	bne.n	8004fc6 <HAL_PCD_EP_DB_Transmit+0x482>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f8c:	4413      	add	r3, r2
 8004f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	011a      	lsls	r2, r3, #4
 8004f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f98:	4413      	add	r3, r2
 8004f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	e01a      	b.n	8004ffc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d116      	bne.n	8004ffc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	667b      	str	r3, [r7, #100]	; 0x64
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe2:	4413      	add	r3, r2
 8004fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	011a      	lsls	r2, r3, #4
 8004fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fee:	4413      	add	r3, r2
 8004ff0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	677b      	str	r3, [r7, #116]	; 0x74
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d12b      	bne.n	8005062 <HAL_PCD_EP_DB_Transmit+0x51e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005018:	b29b      	uxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501e:	4413      	add	r3, r2
 8005020:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	011a      	lsls	r2, r3, #4
 8005028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502a:	4413      	add	r3, r2
 800502c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005034:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005040:	b29a      	uxth	r2, r3
 8005042:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005058:	b29a      	uxth	r2, r3
 800505a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e017      	b.n	8005092 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d113      	bne.n	8005092 <HAL_PCD_EP_DB_Transmit+0x54e>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005072:	b29b      	uxth	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005078:	4413      	add	r3, r2
 800507a:	677b      	str	r3, [r7, #116]	; 0x74
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	011a      	lsls	r2, r3, #4
 8005082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005084:	4413      	add	r3, r2
 8005086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800508a:	673b      	str	r3, [r7, #112]	; 0x70
 800508c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800508e:	2200      	movs	r2, #0
 8005090:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f005 fce8 	bl	800aa6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f040 811a 	bne.w	80052de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
 80050ee:	e0f6      	b.n	80052de <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d121      	bne.n	800513e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005114:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800512a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513a:	b29b      	uxth	r3, r3
 800513c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005144:	2b01      	cmp	r3, #1
 8005146:	f040 80ca 	bne.w	80052de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005152:	441a      	add	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005160:	441a      	add	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6a1a      	ldr	r2, [r3, #32]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	429a      	cmp	r2, r3
 8005170:	d30b      	bcc.n	800518a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6a1a      	ldr	r2, [r3, #32]
 800517e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	621a      	str	r2, [r3, #32]
 8005188:	e017      	b.n	80051ba <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d108      	bne.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005192:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051a2:	e00a      	b.n	80051ba <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2200      	movs	r2, #0
 80051b0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	657b      	str	r3, [r7, #84]	; 0x54
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d165      	bne.n	8005294 <HAL_PCD_EP_DB_Transmit+0x750>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051dc:	4413      	add	r3, r2
 80051de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	011a      	lsls	r2, r3, #4
 80051e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e8:	4413      	add	r3, r2
 80051ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80051f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005204:	2b3e      	cmp	r3, #62	; 0x3e
 8005206:	d91d      	bls.n	8005244 <HAL_PCD_EP_DB_Transmit+0x700>
 8005208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <HAL_PCD_EP_DB_Transmit+0x6de>
 800521c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800521e:	3b01      	subs	r3, #1
 8005220:	66bb      	str	r3, [r7, #104]	; 0x68
 8005222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29a      	uxth	r2, r3
 8005228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522a:	b29b      	uxth	r3, r3
 800522c:	029b      	lsls	r3, r3, #10
 800522e:	b29b      	uxth	r3, r3
 8005230:	4313      	orrs	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800523c:	b29a      	uxth	r2, r3
 800523e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	e041      	b.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8005244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <HAL_PCD_EP_DB_Transmit+0x71e>
 800524c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525a:	b29a      	uxth	r2, r3
 800525c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	e032      	b.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8005262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005266:	085b      	lsrs	r3, r3, #1
 8005268:	66bb      	str	r3, [r7, #104]	; 0x68
 800526a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_PCD_EP_DB_Transmit+0x738>
 8005276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005278:	3301      	adds	r3, #1
 800527a:	66bb      	str	r3, [r7, #104]	; 0x68
 800527c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29a      	uxth	r2, r3
 8005282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005284:	b29b      	uxth	r3, r3
 8005286:	029b      	lsls	r3, r3, #10
 8005288:	b29b      	uxth	r3, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	b29a      	uxth	r2, r3
 800528e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	e019      	b.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d115      	bne.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x784>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052aa:	4413      	add	r3, r2
 80052ac:	657b      	str	r3, [r7, #84]	; 0x54
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	011a      	lsls	r2, r3, #4
 80052b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b6:	4413      	add	r3, r2
 80052b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052bc:	653b      	str	r3, [r7, #80]	; 0x50
 80052be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6959      	ldr	r1, [r3, #20]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	895a      	ldrh	r2, [r3, #10]
 80052d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f003 fd7e 	bl	8008dda <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f8:	82bb      	strh	r3, [r7, #20]
 80052fa:	8abb      	ldrh	r3, [r7, #20]
 80052fc:	f083 0310 	eor.w	r3, r3, #16
 8005300:	82bb      	strh	r3, [r7, #20]
 8005302:	8abb      	ldrh	r3, [r7, #20]
 8005304:	f083 0320 	eor.w	r3, r3, #32
 8005308:	82bb      	strh	r3, [r7, #20]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	441a      	add	r2, r3
 8005318:	8abb      	ldrh	r3, [r7, #20]
 800531a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532a:	b29b      	uxth	r3, r3
 800532c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3790      	adds	r7, #144	; 0x90
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	817b      	strh	r3, [r7, #10]
 8005346:	4613      	mov	r3, r2
 8005348:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800534a:	897b      	ldrh	r3, [r7, #10]
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00b      	beq.n	800536e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005356:	897b      	ldrh	r3, [r7, #10]
 8005358:	f003 0207 	and.w	r2, r3, #7
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	3310      	adds	r3, #16
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e009      	b.n	8005382 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800536e:	897a      	ldrh	r2, [r7, #10]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005382:	893b      	ldrh	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d107      	bne.n	8005398 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2200      	movs	r2, #0
 800538c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	b29a      	uxth	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	80da      	strh	r2, [r3, #6]
 8005396:	e00b      	b.n	80053b0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2201      	movs	r2, #1
 800539c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e272      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 8087 	beq.w	80054ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053dc:	4b92      	ldr	r3, [pc, #584]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d00c      	beq.n	8005402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053e8:	4b8f      	ldr	r3, [pc, #572]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f003 030c 	and.w	r3, r3, #12
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d112      	bne.n	800541a <HAL_RCC_OscConfig+0x5e>
 80053f4:	4b8c      	ldr	r3, [pc, #560]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005400:	d10b      	bne.n	800541a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005402:	4b89      	ldr	r3, [pc, #548]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d06c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x12c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d168      	bne.n	80054e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e24c      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005422:	d106      	bne.n	8005432 <HAL_RCC_OscConfig+0x76>
 8005424:	4b80      	ldr	r3, [pc, #512]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a7f      	ldr	r2, [pc, #508]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800542a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	e02e      	b.n	8005490 <HAL_RCC_OscConfig+0xd4>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x98>
 800543a:	4b7b      	ldr	r3, [pc, #492]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a7a      	ldr	r2, [pc, #488]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b78      	ldr	r3, [pc, #480]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a77      	ldr	r2, [pc, #476]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800544c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e01d      	b.n	8005490 <HAL_RCC_OscConfig+0xd4>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800545c:	d10c      	bne.n	8005478 <HAL_RCC_OscConfig+0xbc>
 800545e:	4b72      	ldr	r3, [pc, #456]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a71      	ldr	r2, [pc, #452]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	4b6f      	ldr	r3, [pc, #444]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a6e      	ldr	r2, [pc, #440]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e00b      	b.n	8005490 <HAL_RCC_OscConfig+0xd4>
 8005478:	4b6b      	ldr	r3, [pc, #428]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a6a      	ldr	r2, [pc, #424]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b68      	ldr	r3, [pc, #416]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a67      	ldr	r2, [pc, #412]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800548a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d013      	beq.n	80054c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fc ff16 	bl	80022c8 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fc ff12 	bl	80022c8 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e200      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	4b5d      	ldr	r3, [pc, #372]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0xe4>
 80054be:	e014      	b.n	80054ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fc ff02 	bl	80022c8 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054c8:	f7fc fefe 	bl	80022c8 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	; 0x64
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e1ec      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054da:	4b53      	ldr	r3, [pc, #332]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x10c>
 80054e6:	e000      	b.n	80054ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d063      	beq.n	80055be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054f6:	4b4c      	ldr	r3, [pc, #304]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005502:	4b49      	ldr	r3, [pc, #292]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b08      	cmp	r3, #8
 800550c:	d11c      	bne.n	8005548 <HAL_RCC_OscConfig+0x18c>
 800550e:	4b46      	ldr	r3, [pc, #280]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d116      	bne.n	8005548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551a:	4b43      	ldr	r3, [pc, #268]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_RCC_OscConfig+0x176>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d001      	beq.n	8005532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e1c0      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005532:	4b3d      	ldr	r3, [pc, #244]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4939      	ldr	r1, [pc, #228]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005546:	e03a      	b.n	80055be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d020      	beq.n	8005592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005550:	4b36      	ldr	r3, [pc, #216]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005556:	f7fc feb7 	bl	80022c8 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555e:	f7fc feb3 	bl	80022c8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e1a1      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005570:	4b2d      	ldr	r3, [pc, #180]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557c:	4b2a      	ldr	r3, [pc, #168]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4927      	ldr	r1, [pc, #156]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]
 8005590:	e015      	b.n	80055be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005592:	4b26      	ldr	r3, [pc, #152]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005598:	f7fc fe96 	bl	80022c8 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a0:	f7fc fe92 	bl	80022c8 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e180      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055b2:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d03a      	beq.n	8005640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d019      	beq.n	8005606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <HAL_RCC_OscConfig+0x274>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d8:	f7fc fe76 	bl	80022c8 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e0:	f7fc fe72 	bl	80022c8 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e160      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f2:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <HAL_RCC_OscConfig+0x26c>)
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055fe:	2001      	movs	r0, #1
 8005600:	f000 faba 	bl	8005b78 <RCC_Delay>
 8005604:	e01c      	b.n	8005640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <HAL_RCC_OscConfig+0x274>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560c:	f7fc fe5c 	bl	80022c8 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005612:	e00f      	b.n	8005634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005614:	f7fc fe58 	bl	80022c8 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d908      	bls.n	8005634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e146      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000
 800562c:	42420000 	.word	0x42420000
 8005630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005634:	4b92      	ldr	r3, [pc, #584]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e9      	bne.n	8005614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80a6 	beq.w	800579a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564e:	2300      	movs	r3, #0
 8005650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005652:	4b8b      	ldr	r3, [pc, #556]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10d      	bne.n	800567a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565e:	4b88      	ldr	r3, [pc, #544]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	4a87      	ldr	r2, [pc, #540]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005668:	61d3      	str	r3, [r2, #28]
 800566a:	4b85      	ldr	r3, [pc, #532]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567a:	4b82      	ldr	r3, [pc, #520]	; (8005884 <HAL_RCC_OscConfig+0x4c8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d118      	bne.n	80056b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005686:	4b7f      	ldr	r3, [pc, #508]	; (8005884 <HAL_RCC_OscConfig+0x4c8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a7e      	ldr	r2, [pc, #504]	; (8005884 <HAL_RCC_OscConfig+0x4c8>)
 800568c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005692:	f7fc fe19 	bl	80022c8 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569a:	f7fc fe15 	bl	80022c8 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b64      	cmp	r3, #100	; 0x64
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e103      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ac:	4b75      	ldr	r3, [pc, #468]	; (8005884 <HAL_RCC_OscConfig+0x4c8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f0      	beq.n	800569a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d106      	bne.n	80056ce <HAL_RCC_OscConfig+0x312>
 80056c0:	4b6f      	ldr	r3, [pc, #444]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	4a6e      	ldr	r2, [pc, #440]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	6213      	str	r3, [r2, #32]
 80056cc:	e02d      	b.n	800572a <HAL_RCC_OscConfig+0x36e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10c      	bne.n	80056f0 <HAL_RCC_OscConfig+0x334>
 80056d6:	4b6a      	ldr	r3, [pc, #424]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	4a69      	ldr	r2, [pc, #420]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	6213      	str	r3, [r2, #32]
 80056e2:	4b67      	ldr	r3, [pc, #412]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	4a66      	ldr	r2, [pc, #408]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	f023 0304 	bic.w	r3, r3, #4
 80056ec:	6213      	str	r3, [r2, #32]
 80056ee:	e01c      	b.n	800572a <HAL_RCC_OscConfig+0x36e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b05      	cmp	r3, #5
 80056f6:	d10c      	bne.n	8005712 <HAL_RCC_OscConfig+0x356>
 80056f8:	4b61      	ldr	r3, [pc, #388]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	4a60      	ldr	r2, [pc, #384]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80056fe:	f043 0304 	orr.w	r3, r3, #4
 8005702:	6213      	str	r3, [r2, #32]
 8005704:	4b5e      	ldr	r3, [pc, #376]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	4a5d      	ldr	r2, [pc, #372]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	6213      	str	r3, [r2, #32]
 8005710:	e00b      	b.n	800572a <HAL_RCC_OscConfig+0x36e>
 8005712:	4b5b      	ldr	r3, [pc, #364]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	4a5a      	ldr	r2, [pc, #360]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	6213      	str	r3, [r2, #32]
 800571e:	4b58      	ldr	r3, [pc, #352]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	4a57      	ldr	r2, [pc, #348]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005724:	f023 0304 	bic.w	r3, r3, #4
 8005728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d015      	beq.n	800575e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005732:	f7fc fdc9 	bl	80022c8 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005738:	e00a      	b.n	8005750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573a:	f7fc fdc5 	bl	80022c8 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	f241 3288 	movw	r2, #5000	; 0x1388
 8005748:	4293      	cmp	r3, r2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e0b1      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005750:	4b4b      	ldr	r3, [pc, #300]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0ee      	beq.n	800573a <HAL_RCC_OscConfig+0x37e>
 800575c:	e014      	b.n	8005788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800575e:	f7fc fdb3 	bl	80022c8 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005764:	e00a      	b.n	800577c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005766:	f7fc fdaf 	bl	80022c8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e09b      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800577c:	4b40      	ldr	r3, [pc, #256]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ee      	bne.n	8005766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d105      	bne.n	800579a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800578e:	4b3c      	ldr	r3, [pc, #240]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	4a3b      	ldr	r2, [pc, #236]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 8087 	beq.w	80058b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a4:	4b36      	ldr	r3, [pc, #216]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d061      	beq.n	8005874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d146      	bne.n	8005846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b8:	4b33      	ldr	r3, [pc, #204]	; (8005888 <HAL_RCC_OscConfig+0x4cc>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057be:	f7fc fd83 	bl	80022c8 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c6:	f7fc fd7f 	bl	80022c8 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e06d      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057d8:	4b29      	ldr	r3, [pc, #164]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f0      	bne.n	80057c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ec:	d108      	bne.n	8005800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057ee:	4b24      	ldr	r3, [pc, #144]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	4921      	ldr	r1, [pc, #132]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005800:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a19      	ldr	r1, [r3, #32]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	430b      	orrs	r3, r1
 8005812:	491b      	ldr	r1, [pc, #108]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005818:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <HAL_RCC_OscConfig+0x4cc>)
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581e:	f7fc fd53 	bl	80022c8 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005826:	f7fc fd4f 	bl	80022c8 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e03d      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005838:	4b11      	ldr	r3, [pc, #68]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_OscConfig+0x46a>
 8005844:	e035      	b.n	80058b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <HAL_RCC_OscConfig+0x4cc>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584c:	f7fc fd3c 	bl	80022c8 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005854:	f7fc fd38 	bl	80022c8 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e026      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0x498>
 8005872:	e01e      	b.n	80058b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d107      	bne.n	800588c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e019      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
 8005880:	40021000 	.word	0x40021000
 8005884:	40007000 	.word	0x40007000
 8005888:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <HAL_RCC_OscConfig+0x500>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	429a      	cmp	r2, r3
 800589e:	d106      	bne.n	80058ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d001      	beq.n	80058b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40021000 	.word	0x40021000

080058c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0d0      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058d4:	4b6a      	ldr	r3, [pc, #424]	; (8005a80 <HAL_RCC_ClockConfig+0x1c0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d910      	bls.n	8005904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e2:	4b67      	ldr	r3, [pc, #412]	; (8005a80 <HAL_RCC_ClockConfig+0x1c0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f023 0207 	bic.w	r2, r3, #7
 80058ea:	4965      	ldr	r1, [pc, #404]	; (8005a80 <HAL_RCC_ClockConfig+0x1c0>)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f2:	4b63      	ldr	r3, [pc, #396]	; (8005a80 <HAL_RCC_ClockConfig+0x1c0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0b8      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d020      	beq.n	8005952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800591c:	4b59      	ldr	r3, [pc, #356]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a58      	ldr	r2, [pc, #352]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005922:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005934:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	4a52      	ldr	r2, [pc, #328]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 800593a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800593e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005940:	4b50      	ldr	r3, [pc, #320]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	494d      	ldr	r1, [pc, #308]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 800594e:	4313      	orrs	r3, r2
 8005950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d040      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d107      	bne.n	8005976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005966:	4b47      	ldr	r3, [pc, #284]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d115      	bne.n	800599e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e07f      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d107      	bne.n	800598e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800597e:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e073      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598e:	4b3d      	ldr	r3, [pc, #244]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e06b      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800599e:	4b39      	ldr	r3, [pc, #228]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f023 0203 	bic.w	r2, r3, #3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4936      	ldr	r1, [pc, #216]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059b0:	f7fc fc8a 	bl	80022c8 <HAL_GetTick>
 80059b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	e00a      	b.n	80059ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b8:	f7fc fc86 	bl	80022c8 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e053      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ce:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 020c 	and.w	r2, r3, #12
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	429a      	cmp	r2, r3
 80059de:	d1eb      	bne.n	80059b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059e0:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <HAL_RCC_ClockConfig+0x1c0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d210      	bcs.n	8005a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ee:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <HAL_RCC_ClockConfig+0x1c0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 0207 	bic.w	r2, r3, #7
 80059f6:	4922      	ldr	r1, [pc, #136]	; (8005a80 <HAL_RCC_ClockConfig+0x1c0>)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fe:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <HAL_RCC_ClockConfig+0x1c0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e032      	b.n	8005a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a1c:	4b19      	ldr	r3, [pc, #100]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4916      	ldr	r1, [pc, #88]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a3a:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	490e      	ldr	r1, [pc, #56]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a4e:	f000 f821 	bl	8005a94 <HAL_RCC_GetSysClockFreq>
 8005a52:	4602      	mov	r2, r0
 8005a54:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	490a      	ldr	r1, [pc, #40]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a60:	5ccb      	ldrb	r3, [r1, r3]
 8005a62:	fa22 f303 	lsr.w	r3, r2, r3
 8005a66:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <HAL_RCC_ClockConfig+0x1cc>)
 8005a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <HAL_RCC_ClockConfig+0x1d0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fc fbe8 	bl	8002244 <HAL_InitTick>

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40022000 	.word	0x40022000
 8005a84:	40021000 	.word	0x40021000
 8005a88:	0800e344 	.word	0x0800e344
 8005a8c:	20000090 	.word	0x20000090
 8005a90:	20000094 	.word	0x20000094

08005a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005aae:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d002      	beq.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d003      	beq.n	8005aca <HAL_RCC_GetSysClockFreq+0x36>
 8005ac2:	e027      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ac4:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8005ac6:	613b      	str	r3, [r7, #16]
      break;
 8005ac8:	e027      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	0c9b      	lsrs	r3, r3, #18
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ad4:	5cd3      	ldrb	r3, [r2, r3]
 8005ad6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	0c5b      	lsrs	r3, r3, #17
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	4a11      	ldr	r2, [pc, #68]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005aee:	5cd3      	ldrb	r3, [r2, r3]
 8005af0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a0d      	ldr	r2, [pc, #52]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8005af6:	fb03 f202 	mul.w	r2, r3, r2
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e004      	b.n	8005b0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a0c      	ldr	r2, [pc, #48]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b08:	fb02 f303 	mul.w	r3, r2, r3
 8005b0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	613b      	str	r3, [r7, #16]
      break;
 8005b12:	e002      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8005b16:	613b      	str	r3, [r7, #16]
      break;
 8005b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1a:	693b      	ldr	r3, [r7, #16]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	007a1200 	.word	0x007a1200
 8005b30:	0800e35c 	.word	0x0800e35c
 8005b34:	0800e36c 	.word	0x0800e36c
 8005b38:	003d0900 	.word	0x003d0900

08005b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b40:	4b02      	ldr	r3, [pc, #8]	; (8005b4c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b42:	681b      	ldr	r3, [r3, #0]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr
 8005b4c:	20000090 	.word	0x20000090

08005b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b54:	f7ff fff2 	bl	8005b3c <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4903      	ldr	r1, [pc, #12]	; (8005b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40021000 	.word	0x40021000
 8005b74:	0800e354 	.word	0x0800e354

08005b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <RCC_Delay+0x34>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <RCC_Delay+0x38>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	0a5b      	lsrs	r3, r3, #9
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b94:	bf00      	nop
  }
  while (Delay --);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1e5a      	subs	r2, r3, #1
 8005b9a:	60fa      	str	r2, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1f9      	bne.n	8005b94 <RCC_Delay+0x1c>
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr
 8005bac:	20000090 	.word	0x20000090
 8005bb0:	10624dd3 	.word	0x10624dd3

08005bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d07d      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd4:	4b4f      	ldr	r3, [pc, #316]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be0:	4b4c      	ldr	r3, [pc, #304]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	4a4b      	ldr	r2, [pc, #300]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bea:	61d3      	str	r3, [r2, #28]
 8005bec:	4b49      	ldr	r3, [pc, #292]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bfc:	4b46      	ldr	r3, [pc, #280]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d118      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c08:	4b43      	ldr	r3, [pc, #268]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a42      	ldr	r2, [pc, #264]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c14:	f7fc fb58 	bl	80022c8 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1a:	e008      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c1c:	f7fc fb54 	bl	80022c8 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b64      	cmp	r3, #100	; 0x64
 8005c28:	d901      	bls.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e06d      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2e:	4b3a      	ldr	r3, [pc, #232]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c3a:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d02e      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d027      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c58:	4b2e      	ldr	r3, [pc, #184]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c62:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c68:	4b2c      	ldr	r3, [pc, #176]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c6e:	4a29      	ldr	r2, [pc, #164]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d014      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7e:	f7fc fb23 	bl	80022c8 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c86:	f7fc fb1f 	bl	80022c8 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e036      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ee      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4917      	ldr	r1, [pc, #92]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d105      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc0:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cd8:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	490b      	ldr	r1, [pc, #44]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d008      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cf6:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	4904      	ldr	r1, [pc, #16]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40007000 	.word	0x40007000
 8005d1c:	42420440 	.word	0x42420440

08005d20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e041      	b.n	8005db6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fc f998 	bl	800207c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f000 fac2 	bl	80062e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <HAL_TIM_PWM_Start+0x24>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	bf14      	ite	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	2300      	moveq	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e022      	b.n	8005e2a <HAL_TIM_PWM_Start+0x6a>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d109      	bne.n	8005dfe <HAL_TIM_PWM_Start+0x3e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	bf14      	ite	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	2300      	moveq	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	e015      	b.n	8005e2a <HAL_TIM_PWM_Start+0x6a>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d109      	bne.n	8005e18 <HAL_TIM_PWM_Start+0x58>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	e008      	b.n	8005e2a <HAL_TIM_PWM_Start+0x6a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e05e      	b.n	8005ef0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <HAL_TIM_PWM_Start+0x82>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e40:	e013      	b.n	8005e6a <HAL_TIM_PWM_Start+0xaa>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x92>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e50:	e00b      	b.n	8005e6a <HAL_TIM_PWM_Start+0xaa>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0xa2>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e60:	e003      	b.n	8005e6a <HAL_TIM_PWM_Start+0xaa>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fc2e 	bl	80066d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <HAL_TIM_PWM_Start+0x138>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d107      	bne.n	8005e92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_TIM_PWM_Start+0x138>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_TIM_PWM_Start+0xfa>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea4:	d009      	beq.n	8005eba <HAL_TIM_PWM_Start+0xfa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a14      	ldr	r2, [pc, #80]	; (8005efc <HAL_TIM_PWM_Start+0x13c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_TIM_PWM_Start+0xfa>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <HAL_TIM_PWM_Start+0x140>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d111      	bne.n	8005ede <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	d010      	beq.n	8005eee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005edc:	e007      	b.n	8005eee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40012c00 	.word	0x40012c00
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800

08005f04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e093      	b.n	8006040 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fc f8c3 	bl	80020b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f48:	f023 0307 	bic.w	r3, r3, #7
 8005f4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f000 f9c5 	bl	80062e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	4313      	orrs	r3, r2
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fa4:	f023 030c 	bic.w	r3, r3, #12
 8005fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	031b      	lsls	r3, r3, #12
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006058:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006060:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006068:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006070:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d110      	bne.n	800609a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d102      	bne.n	8006084 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800607e:	7b7b      	ldrb	r3, [r7, #13]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d001      	beq.n	8006088 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e069      	b.n	800615c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006098:	e031      	b.n	80060fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b04      	cmp	r3, #4
 800609e:	d110      	bne.n	80060c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d102      	bne.n	80060ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060a6:	7b3b      	ldrb	r3, [r7, #12]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d001      	beq.n	80060b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e055      	b.n	800615c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c0:	e01d      	b.n	80060fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d108      	bne.n	80060da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d105      	bne.n	80060da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ce:	7b7b      	ldrb	r3, [r7, #13]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d102      	bne.n	80060da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060d4:	7b3b      	ldrb	r3, [r7, #12]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d001      	beq.n	80060de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e03e      	b.n	800615c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_TIM_Encoder_Start+0xc4>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b04      	cmp	r3, #4
 8006108:	d008      	beq.n	800611c <HAL_TIM_Encoder_Start+0xd4>
 800610a:	e00f      	b.n	800612c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2201      	movs	r2, #1
 8006112:	2100      	movs	r1, #0
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fadd 	bl	80066d4 <TIM_CCxChannelCmd>
      break;
 800611a:	e016      	b.n	800614a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2201      	movs	r2, #1
 8006122:	2104      	movs	r1, #4
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fad5 	bl	80066d4 <TIM_CCxChannelCmd>
      break;
 800612a:	e00e      	b.n	800614a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2201      	movs	r2, #1
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f000 facd 	bl	80066d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	2104      	movs	r1, #4
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fac6 	bl	80066d4 <TIM_CCxChannelCmd>
      break;
 8006148:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0201 	orr.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800617e:	2302      	movs	r3, #2
 8006180:	e0ae      	b.n	80062e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b0c      	cmp	r3, #12
 800618e:	f200 809f 	bhi.w	80062d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061cd 	.word	0x080061cd
 800619c:	080062d1 	.word	0x080062d1
 80061a0:	080062d1 	.word	0x080062d1
 80061a4:	080062d1 	.word	0x080062d1
 80061a8:	0800620d 	.word	0x0800620d
 80061ac:	080062d1 	.word	0x080062d1
 80061b0:	080062d1 	.word	0x080062d1
 80061b4:	080062d1 	.word	0x080062d1
 80061b8:	0800624f 	.word	0x0800624f
 80061bc:	080062d1 	.word	0x080062d1
 80061c0:	080062d1 	.word	0x080062d1
 80061c4:	080062d1 	.word	0x080062d1
 80061c8:	0800628f 	.word	0x0800628f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f8f6 	bl	80063c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0208 	orr.w	r2, r2, #8
 80061e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0204 	bic.w	r2, r2, #4
 80061f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6999      	ldr	r1, [r3, #24]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	619a      	str	r2, [r3, #24]
      break;
 800620a:	e064      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f93c 	bl	8006490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6999      	ldr	r1, [r3, #24]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	619a      	str	r2, [r3, #24]
      break;
 800624c:	e043      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 f985 	bl	8006564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0208 	orr.w	r2, r2, #8
 8006268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0204 	bic.w	r2, r2, #4
 8006278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69d9      	ldr	r1, [r3, #28]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	61da      	str	r2, [r3, #28]
      break;
 800628c:	e023      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 f9cf 	bl	8006638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69d9      	ldr	r1, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	021a      	lsls	r2, r3, #8
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	61da      	str	r2, [r3, #28]
      break;
 80062ce:	e002      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	75fb      	strb	r3, [r7, #23]
      break;
 80062d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a2f      	ldr	r2, [pc, #188]	; (80063b8 <TIM_Base_SetConfig+0xd0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00b      	beq.n	8006318 <TIM_Base_SetConfig+0x30>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006306:	d007      	beq.n	8006318 <TIM_Base_SetConfig+0x30>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a2c      	ldr	r2, [pc, #176]	; (80063bc <TIM_Base_SetConfig+0xd4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_Base_SetConfig+0x30>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a2b      	ldr	r2, [pc, #172]	; (80063c0 <TIM_Base_SetConfig+0xd8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d108      	bne.n	800632a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a22      	ldr	r2, [pc, #136]	; (80063b8 <TIM_Base_SetConfig+0xd0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00b      	beq.n	800634a <TIM_Base_SetConfig+0x62>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006338:	d007      	beq.n	800634a <TIM_Base_SetConfig+0x62>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1f      	ldr	r2, [pc, #124]	; (80063bc <TIM_Base_SetConfig+0xd4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d003      	beq.n	800634a <TIM_Base_SetConfig+0x62>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1e      	ldr	r2, [pc, #120]	; (80063c0 <TIM_Base_SetConfig+0xd8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d108      	bne.n	800635c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a0d      	ldr	r2, [pc, #52]	; (80063b8 <TIM_Base_SetConfig+0xd0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d103      	bne.n	8006390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f023 0201 	bic.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	611a      	str	r2, [r3, #16]
  }
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40000800 	.word	0x40000800

080063c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	f023 0201 	bic.w	r2, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 0302 	bic.w	r3, r3, #2
 800640c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a1c      	ldr	r2, [pc, #112]	; (800648c <TIM_OC1_SetConfig+0xc8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10c      	bne.n	800643a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0308 	bic.w	r3, r3, #8
 8006426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a13      	ldr	r2, [pc, #76]	; (800648c <TIM_OC1_SetConfig+0xc8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d111      	bne.n	8006466 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	621a      	str	r2, [r3, #32]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40012c00 	.word	0x40012c00

08006490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f023 0210 	bic.w	r2, r3, #16
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0320 	bic.w	r3, r3, #32
 80064da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <TIM_OC2_SetConfig+0xd0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10d      	bne.n	800650c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800650a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a14      	ldr	r2, [pc, #80]	; (8006560 <TIM_OC2_SetConfig+0xd0>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d113      	bne.n	800653c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800651a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	621a      	str	r2, [r3, #32]
}
 8006556:	bf00      	nop
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr
 8006560:	40012c00 	.word	0x40012c00

08006564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <TIM_OC3_SetConfig+0xd0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d10d      	bne.n	80065de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a14      	ldr	r2, [pc, #80]	; (8006634 <TIM_OC3_SetConfig+0xd0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d113      	bne.n	800660e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	621a      	str	r2, [r3, #32]
}
 8006628:	bf00      	nop
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00

08006638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	021b      	lsls	r3, r3, #8
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	031b      	lsls	r3, r3, #12
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a0f      	ldr	r2, [pc, #60]	; (80066d0 <TIM_OC4_SetConfig+0x98>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d109      	bne.n	80066ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800669e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	019b      	lsls	r3, r3, #6
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	621a      	str	r2, [r3, #32]
}
 80066c6:	bf00      	nop
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr
 80066d0:	40012c00 	.word	0x40012c00

080066d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 031f 	and.w	r3, r3, #31
 80066e6:	2201      	movs	r2, #1
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1a      	ldr	r2, [r3, #32]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	43db      	mvns	r3, r3
 80066f6:	401a      	ands	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a1a      	ldr	r2, [r3, #32]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	fa01 f303 	lsl.w	r3, r1, r3
 800670c:	431a      	orrs	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006730:	2302      	movs	r3, #2
 8006732:	e046      	b.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a16      	ldr	r2, [pc, #88]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006780:	d009      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a10      	ldr	r2, [pc, #64]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10c      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800679c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr
 80067cc:	40012c00 	.word	0x40012c00
 80067d0:	40000400 	.word	0x40000400
 80067d4:	40000800 	.word	0x40000800

080067d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	4638      	mov	r0, r7
 80067e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006802:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006806:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006826:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800682a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	b29b      	uxth	r3, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	b29b      	uxth	r3, r3
 800683c:	4013      	ands	r3, r2
 800683e:	b29a      	uxth	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr

08006852 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	460b      	mov	r3, r1
 800685c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	4638      	mov	r0, r7
 8006874:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr

080068a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b09d      	sub	sp, #116	; 0x74
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	78db      	ldrb	r3, [r3, #3]
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d81f      	bhi.n	8006916 <USB_ActivateEndpoint+0x72>
 80068d6:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <USB_ActivateEndpoint+0x38>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	08006909 	.word	0x08006909
 80068e4:	0800691f 	.word	0x0800691f
 80068e8:	080068fb 	.word	0x080068fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80068ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80068f8:	e012      	b.n	8006920 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80068fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006902:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006906:	e00b      	b.n	8006920 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006908:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800690c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006910:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006914:	e004      	b.n	8006920 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800691c:	e000      	b.n	8006920 <USB_ActivateEndpoint+0x7c>
      break;
 800691e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	441a      	add	r2, r3
 800692a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800692e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693e:	b29b      	uxth	r3, r3
 8006940:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006958:	b29a      	uxth	r2, r3
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	4313      	orrs	r3, r2
 8006962:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006984:	b29b      	uxth	r3, r3
 8006986:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	7b1b      	ldrb	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 8178 	bne.w	8006c82 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8084 	beq.w	8006aa4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	61bb      	str	r3, [r7, #24]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	4413      	add	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	88db      	ldrh	r3, [r3, #6]
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	827b      	strh	r3, [r7, #18]
 80069de:	8a7b      	ldrh	r3, [r7, #18]
 80069e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01b      	beq.n	8006a20 <USB_ActivateEndpoint+0x17c>
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fe:	823b      	strh	r3, [r7, #16]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	441a      	add	r2, r3
 8006a0a:	8a3b      	ldrh	r3, [r7, #16]
 8006a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	78db      	ldrb	r3, [r3, #3]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d020      	beq.n	8006a6a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3e:	81bb      	strh	r3, [r7, #12]
 8006a40:	89bb      	ldrh	r3, [r7, #12]
 8006a42:	f083 0320 	eor.w	r3, r3, #32
 8006a46:	81bb      	strh	r3, [r7, #12]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	441a      	add	r2, r3
 8006a52:	89bb      	ldrh	r3, [r7, #12]
 8006a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	8013      	strh	r3, [r2, #0]
 8006a68:	e2d5      	b.n	8007016 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a80:	81fb      	strh	r3, [r7, #14]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	89fb      	ldrh	r3, [r7, #14]
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]
 8006aa2:	e2b8      	b.n	8007016 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	4413      	add	r3, r2
 8006ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	011a      	lsls	r2, r3, #4
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	88db      	ldrh	r3, [r3, #6]
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	4413      	add	r3, r2
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	011a      	lsls	r2, r3, #4
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	4413      	add	r3, r2
 8006af6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	801a      	strh	r2, [r3, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b3e      	cmp	r3, #62	; 0x3e
 8006b12:	d91d      	bls.n	8006b50 <USB_ActivateEndpoint+0x2ac>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <USB_ActivateEndpoint+0x28a>
 8006b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	029b      	lsls	r3, r3, #10
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	e026      	b.n	8006b9e <USB_ActivateEndpoint+0x2fa>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <USB_ActivateEndpoint+0x2ca>
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	e017      	b.n	8006b9e <USB_ActivateEndpoint+0x2fa>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <USB_ActivateEndpoint+0x2e4>
 8006b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b84:	3301      	adds	r3, #1
 8006b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	847b      	strh	r3, [r7, #34]	; 0x22
 8006bac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01b      	beq.n	8006bee <USB_ActivateEndpoint+0x34a>
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bcc:	843b      	strh	r3, [r7, #32]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	441a      	add	r2, r3
 8006bd8:	8c3b      	ldrh	r3, [r7, #32]
 8006bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d124      	bne.n	8006c40 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0c:	83bb      	strh	r3, [r7, #28]
 8006c0e:	8bbb      	ldrh	r3, [r7, #28]
 8006c10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c14:	83bb      	strh	r3, [r7, #28]
 8006c16:	8bbb      	ldrh	r3, [r7, #28]
 8006c18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c1c:	83bb      	strh	r3, [r7, #28]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	441a      	add	r2, r3
 8006c28:	8bbb      	ldrh	r3, [r7, #28]
 8006c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	8013      	strh	r3, [r2, #0]
 8006c3e:	e1ea      	b.n	8007016 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	83fb      	strh	r3, [r7, #30]
 8006c58:	8bfb      	ldrh	r3, [r7, #30]
 8006c5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c5e:	83fb      	strh	r3, [r7, #30]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	8bfb      	ldrh	r3, [r7, #30]
 8006c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8013      	strh	r3, [r2, #0]
 8006c80:	e1c9      	b.n	8007016 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	78db      	ldrb	r3, [r3, #3]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d11e      	bne.n	8006cc8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	8013      	strh	r3, [r2, #0]
 8006cc6:	e01d      	b.n	8006d04 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cde:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	441a      	add	r2, r3
 8006cec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d14:	4413      	add	r3, r2
 8006d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	011a      	lsls	r2, r3, #4
 8006d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d26:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	891b      	ldrh	r3, [r3, #8]
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	461a      	mov	r2, r3
 8006d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d48:	4413      	add	r3, r2
 8006d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	011a      	lsls	r2, r3, #4
 8006d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	895b      	ldrh	r3, [r3, #10]
 8006d60:	085b      	lsrs	r3, r3, #1
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	785b      	ldrb	r3, [r3, #1]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 8093 	bne.w	8006e9c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01b      	beq.n	8006dca <USB_ActivateEndpoint+0x526>
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006dd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01b      	beq.n	8006e1a <USB_ActivateEndpoint+0x576>
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	441a      	add	r2, r3
 8006e04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e30:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e38:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e40:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	441a      	add	r2, r3
 8006e4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e78:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	441a      	add	r2, r3
 8006e84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8013      	strh	r3, [r2, #0]
 8006e9a:	e0bc      	b.n	8007016 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01d      	beq.n	8006ef4 <USB_ActivateEndpoint+0x650>
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	441a      	add	r2, r3
 8006edc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006f04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01d      	beq.n	8006f4c <USB_ActivateEndpoint+0x6a8>
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	441a      	add	r2, r3
 8006f34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	78db      	ldrb	r3, [r3, #3]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d024      	beq.n	8006f9e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f72:	f083 0320 	eor.w	r3, r3, #32
 8006f76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	441a      	add	r2, r3
 8006f84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]
 8006f9c:	e01d      	b.n	8006fda <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007012:	b29b      	uxth	r3, r3
 8007014:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007016:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800701a:	4618      	mov	r0, r3
 800701c:	3774      	adds	r7, #116	; 0x74
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007024:	b480      	push	{r7}
 8007026:	b08d      	sub	sp, #52	; 0x34
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	7b1b      	ldrb	r3, [r3, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f040 808e 	bne.w	8007154 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d044      	beq.n	80070ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	81bb      	strh	r3, [r7, #12]
 800704e:	89bb      	ldrh	r3, [r7, #12]
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01b      	beq.n	8007090 <USB_DeactivateEndpoint+0x6c>
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	817b      	strh	r3, [r7, #10]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	441a      	add	r2, r3
 800707a:	897b      	ldrh	r3, [r7, #10]
 800707c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800708c:	b29b      	uxth	r3, r3
 800708e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a6:	813b      	strh	r3, [r7, #8]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	441a      	add	r2, r3
 80070b2:	893b      	ldrh	r3, [r7, #8]
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]
 80070c8:	e192      	b.n	80073f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	827b      	strh	r3, [r7, #18]
 80070d8:	8a7b      	ldrh	r3, [r7, #18]
 80070da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01b      	beq.n	800711a <USB_DeactivateEndpoint+0xf6>
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f8:	823b      	strh	r3, [r7, #16]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	8a3b      	ldrh	r3, [r7, #16]
 8007106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007116:	b29b      	uxth	r3, r3
 8007118:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800712c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007130:	81fb      	strh	r3, [r7, #14]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	441a      	add	r2, r3
 800713c:	89fb      	ldrh	r3, [r7, #14]
 800713e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714e:	b29b      	uxth	r3, r3
 8007150:	8013      	strh	r3, [r2, #0]
 8007152:	e14d      	b.n	80073f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 80a5 	bne.w	80072a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	843b      	strh	r3, [r7, #32]
 800716c:	8c3b      	ldrh	r3, [r7, #32]
 800716e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01b      	beq.n	80071ae <USB_DeactivateEndpoint+0x18a>
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718c:	83fb      	strh	r3, [r7, #30]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	441a      	add	r2, r3
 8007198:	8bfb      	ldrh	r3, [r7, #30]
 800719a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800719e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	83bb      	strh	r3, [r7, #28]
 80071bc:	8bbb      	ldrh	r3, [r7, #28]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01b      	beq.n	80071fe <USB_DeactivateEndpoint+0x1da>
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071dc:	837b      	strh	r3, [r7, #26]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	441a      	add	r2, r3
 80071e8:	8b7b      	ldrh	r3, [r7, #26]
 80071ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007214:	833b      	strh	r3, [r7, #24]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	441a      	add	r2, r3
 8007220:	8b3b      	ldrh	r3, [r7, #24]
 8007222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800722a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800722e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007232:	b29b      	uxth	r3, r3
 8007234:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	82fb      	strh	r3, [r7, #22]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	441a      	add	r2, r3
 8007258:	8afb      	ldrh	r3, [r7, #22]
 800725a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800725e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726a:	b29b      	uxth	r3, r3
 800726c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007284:	82bb      	strh	r3, [r7, #20]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	8abb      	ldrh	r3, [r7, #20]
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
 80072a6:	e0a3      	b.n	80073f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80072b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01b      	beq.n	80072f8 <USB_DeactivateEndpoint+0x2d4>
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007306:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01b      	beq.n	8007348 <USB_DeactivateEndpoint+0x324>
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	853b      	strh	r3, [r7, #40]	; 0x28
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	441a      	add	r2, r3
 8007332:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007340:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800736c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737c:	b29b      	uxth	r3, r3
 800737e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007396:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	441a      	add	r2, r3
 80073a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	441a      	add	r2, r3
 80073da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3734      	adds	r7, #52	; 0x34
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr

080073fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b0c2      	sub	sp, #264	; 0x108
 8007400:	af00      	add	r7, sp, #0
 8007402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800740a:	6018      	str	r0, [r3, #0]
 800740c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007414:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	785b      	ldrb	r3, [r3, #1]
 8007422:	2b01      	cmp	r3, #1
 8007424:	f040 86b7 	bne.w	8008196 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699a      	ldr	r2, [r3, #24]
 8007434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	429a      	cmp	r2, r3
 8007442:	d908      	bls.n	8007456 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007454:	e007      	b.n	8007466 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	7b1b      	ldrb	r3, [r3, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d13a      	bne.n	80074ec <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6959      	ldr	r1, [r3, #20]
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	88da      	ldrh	r2, [r3, #6]
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007492:	b29b      	uxth	r3, r3
 8007494:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007498:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800749c:	6800      	ldr	r0, [r0, #0]
 800749e:	f001 fc9c 	bl	8008dda <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	613b      	str	r3, [r7, #16]
 80074ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074bc:	b29b      	uxth	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	4413      	add	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	011a      	lsls	r2, r3, #4
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	4413      	add	r3, r2
 80074d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	f000 be1f 	b.w	800812a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80074ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	78db      	ldrb	r3, [r3, #3]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	f040 8462 	bne.w	8007dc2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80074fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6a1a      	ldr	r2, [r3, #32]
 800750a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	429a      	cmp	r2, r3
 8007518:	f240 83df 	bls.w	8007cda <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800751c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	441a      	add	r2, r3
 8007560:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800756c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007574:	b29b      	uxth	r3, r3
 8007576:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6a1a      	ldr	r2, [r3, #32]
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007588:	1ad2      	subs	r2, r2, r3
 800758a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 81c7 	beq.w	800794c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	633b      	str	r3, [r7, #48]	; 0x30
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d177      	bne.n	80076ca <USB_EPStartXfer+0x2ce>
 80075da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	4413      	add	r3, r2
 80075fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80075fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	011a      	lsls	r2, r3, #4
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	4413      	add	r3, r2
 8007610:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007620:	b29a      	uxth	r2, r3
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762a:	2b3e      	cmp	r3, #62	; 0x3e
 800762c:	d921      	bls.n	8007672 <USB_EPStartXfer+0x276>
 800762e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <USB_EPStartXfer+0x252>
 8007644:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007648:	3b01      	subs	r3, #1
 800764a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29a      	uxth	r2, r3
 8007654:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007658:	b29b      	uxth	r3, r3
 800765a:	029b      	lsls	r3, r3, #10
 800765c:	b29b      	uxth	r3, r3
 800765e:	4313      	orrs	r3, r2
 8007660:	b29b      	uxth	r3, r3
 8007662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766a:	b29a      	uxth	r2, r3
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	801a      	strh	r2, [r3, #0]
 8007670:	e050      	b.n	8007714 <USB_EPStartXfer+0x318>
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <USB_EPStartXfer+0x294>
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007688:	b29a      	uxth	r2, r3
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	e041      	b.n	8007714 <USB_EPStartXfer+0x318>
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007694:	085b      	lsrs	r3, r3, #1
 8007696:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800769a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d004      	beq.n	80076b0 <USB_EPStartXfer+0x2b4>
 80076a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076aa:	3301      	adds	r3, #1
 80076ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	029b      	lsls	r3, r3, #10
 80076be:	b29b      	uxth	r3, r3
 80076c0:	4313      	orrs	r3, r2
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	e024      	b.n	8007714 <USB_EPStartXfer+0x318>
 80076ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d11c      	bne.n	8007714 <USB_EPStartXfer+0x318>
 80076da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	4413      	add	r3, r2
 80076f0:	633b      	str	r3, [r7, #48]	; 0x30
 80076f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	011a      	lsls	r2, r3, #4
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	4413      	add	r3, r2
 8007704:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770e:	b29a      	uxth	r2, r3
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	895b      	ldrh	r3, [r3, #10]
 8007720:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6959      	ldr	r1, [r3, #20]
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007734:	b29b      	uxth	r3, r3
 8007736:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800773a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800773e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007742:	6800      	ldr	r0, [r0, #0]
 8007744:	f001 fb49 	bl	8008dda <USB_WritePMA>
            ep->xfer_buff += len;
 8007748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007758:	441a      	add	r2, r3
 800775a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a1a      	ldr	r2, [r3, #32]
 8007772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	429a      	cmp	r2, r3
 8007780:	d90f      	bls.n	80077a2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a1a      	ldr	r2, [r3, #32]
 800778e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007792:	1ad2      	subs	r2, r2, r3
 8007794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	621a      	str	r2, [r3, #32]
 80077a0:	e00e      	b.n	80077c0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80077a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80077b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2200      	movs	r2, #0
 80077be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d177      	bne.n	80078c0 <USB_EPStartXfer+0x4c4>
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	61bb      	str	r3, [r7, #24]
 80077dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	4413      	add	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	011a      	lsls	r2, r3, #4
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	4413      	add	r3, r2
 8007806:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007816:	b29a      	uxth	r2, r3
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	801a      	strh	r2, [r3, #0]
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007820:	2b3e      	cmp	r3, #62	; 0x3e
 8007822:	d921      	bls.n	8007868 <USB_EPStartXfer+0x46c>
 8007824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800782e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2b00      	cmp	r3, #0
 8007838:	d104      	bne.n	8007844 <USB_EPStartXfer+0x448>
 800783a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800783e:	3b01      	subs	r3, #1
 8007840:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b29a      	uxth	r2, r3
 800784a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800784e:	b29b      	uxth	r3, r3
 8007850:	029b      	lsls	r3, r3, #10
 8007852:	b29b      	uxth	r3, r3
 8007854:	4313      	orrs	r3, r2
 8007856:	b29b      	uxth	r3, r3
 8007858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007860:	b29a      	uxth	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	e056      	b.n	8007916 <USB_EPStartXfer+0x51a>
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <USB_EPStartXfer+0x48a>
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800787a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800787e:	b29a      	uxth	r2, r3
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	801a      	strh	r2, [r3, #0]
 8007884:	e047      	b.n	8007916 <USB_EPStartXfer+0x51a>
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788a:	085b      	lsrs	r3, r3, #1
 800788c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <USB_EPStartXfer+0x4aa>
 800789c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a0:	3301      	adds	r3, #1
 80078a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	029b      	lsls	r3, r3, #10
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	4313      	orrs	r3, r2
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	e02a      	b.n	8007916 <USB_EPStartXfer+0x51a>
 80078c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d122      	bne.n	8007916 <USB_EPStartXfer+0x51a>
 80078d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	623b      	str	r3, [r7, #32]
 80078dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	4413      	add	r3, r2
 80078f2:	623b      	str	r3, [r7, #32]
 80078f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	011a      	lsls	r2, r3, #4
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	4413      	add	r3, r2
 8007906:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007910:	b29a      	uxth	r2, r3
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	891b      	ldrh	r3, [r3, #8]
 8007922:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6959      	ldr	r1, [r3, #20]
 8007932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007936:	b29b      	uxth	r3, r3
 8007938:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800793c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007940:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007944:	6800      	ldr	r0, [r0, #0]
 8007946:	f001 fa48 	bl	8008dda <USB_WritePMA>
 800794a:	e3ee      	b.n	800812a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800794c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	785b      	ldrb	r3, [r3, #1]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d177      	bne.n	8007a4c <USB_EPStartXfer+0x650>
 800795c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	64bb      	str	r3, [r7, #72]	; 0x48
 8007968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007976:	b29b      	uxth	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800797c:	4413      	add	r3, r2
 800797e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	011a      	lsls	r2, r3, #4
 800798e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007990:	4413      	add	r3, r2
 8007992:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007996:	647b      	str	r3, [r7, #68]	; 0x44
 8007998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ac:	2b3e      	cmp	r3, #62	; 0x3e
 80079ae:	d921      	bls.n	80079f4 <USB_EPStartXfer+0x5f8>
 80079b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b4:	095b      	lsrs	r3, r3, #5
 80079b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d104      	bne.n	80079d0 <USB_EPStartXfer+0x5d4>
 80079c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079ca:	3b01      	subs	r3, #1
 80079cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079da:	b29b      	uxth	r3, r3
 80079dc:	029b      	lsls	r3, r3, #10
 80079de:	b29b      	uxth	r3, r3
 80079e0:	4313      	orrs	r3, r2
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	e056      	b.n	8007aa2 <USB_EPStartXfer+0x6a6>
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <USB_EPStartXfer+0x616>
 80079fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e047      	b.n	8007aa2 <USB_EPStartXfer+0x6a6>
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a16:	085b      	lsrs	r3, r3, #1
 8007a18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d004      	beq.n	8007a32 <USB_EPStartXfer+0x636>
 8007a28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	029b      	lsls	r3, r3, #10
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	e02a      	b.n	8007aa2 <USB_EPStartXfer+0x6a6>
 8007a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d122      	bne.n	8007aa2 <USB_EPStartXfer+0x6a6>
 8007a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	653b      	str	r3, [r7, #80]	; 0x50
 8007a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7c:	4413      	add	r3, r2
 8007a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	011a      	lsls	r2, r3, #4
 8007a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a90:	4413      	add	r3, r2
 8007a92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	891b      	ldrh	r3, [r3, #8]
 8007aae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6959      	ldr	r1, [r3, #20]
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ac8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007acc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ad0:	6800      	ldr	r0, [r0, #0]
 8007ad2:	f001 f982 	bl	8008dda <USB_WritePMA>
            ep->xfer_buff += len;
 8007ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695a      	ldr	r2, [r3, #20]
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae6:	441a      	add	r2, r3
 8007ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6a1a      	ldr	r2, [r3, #32]
 8007b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d90f      	bls.n	8007b30 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6a1a      	ldr	r2, [r3, #32]
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b20:	1ad2      	subs	r2, r2, r3
 8007b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	621a      	str	r2, [r3, #32]
 8007b2e:	e00e      	b.n	8007b4e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	643b      	str	r3, [r7, #64]	; 0x40
 8007b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d177      	bne.n	8007c5a <USB_EPStartXfer+0x85e>
 8007b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	4413      	add	r3, r2
 8007b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	011a      	lsls	r2, r3, #4
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	801a      	strh	r2, [r3, #0]
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bba:	2b3e      	cmp	r3, #62	; 0x3e
 8007bbc:	d921      	bls.n	8007c02 <USB_EPStartXfer+0x806>
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bcc:	f003 031f 	and.w	r3, r3, #31
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d104      	bne.n	8007bde <USB_EPStartXfer+0x7e2>
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	029b      	lsls	r3, r3, #10
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	801a      	strh	r2, [r3, #0]
 8007c00:	e050      	b.n	8007ca4 <USB_EPStartXfer+0x8a8>
 8007c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <USB_EPStartXfer+0x824>
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1c:	801a      	strh	r2, [r3, #0]
 8007c1e:	e041      	b.n	8007ca4 <USB_EPStartXfer+0x8a8>
 8007c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c24:	085b      	lsrs	r3, r3, #1
 8007c26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d004      	beq.n	8007c40 <USB_EPStartXfer+0x844>
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	029b      	lsls	r3, r3, #10
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	4313      	orrs	r3, r2
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	801a      	strh	r2, [r3, #0]
 8007c58:	e024      	b.n	8007ca4 <USB_EPStartXfer+0x8a8>
 8007c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d11c      	bne.n	8007ca4 <USB_EPStartXfer+0x8a8>
 8007c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c7e:	4413      	add	r3, r2
 8007c80:	643b      	str	r3, [r7, #64]	; 0x40
 8007c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	011a      	lsls	r2, r3, #4
 8007c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c92:	4413      	add	r3, r2
 8007c94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	895b      	ldrh	r3, [r3, #10]
 8007cb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6959      	ldr	r1, [r3, #20]
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007cca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007cce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007cd2:	6800      	ldr	r0, [r0, #0]
 8007cd4:	f001 f881 	bl	8008dda <USB_WritePMA>
 8007cd8:	e227      	b.n	800812a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	441a      	add	r2, r3
 8007d2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d66:	4413      	add	r3, r2
 8007d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	011a      	lsls	r2, r3, #4
 8007d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	891b      	ldrh	r3, [r3, #8]
 8007d98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6959      	ldr	r1, [r3, #20]
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007db2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007db6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	f001 f80d 	bl	8008dda <USB_WritePMA>
 8007dc0:	e1b3      	b.n	800812a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd2:	1ad2      	subs	r2, r2, r3
 8007dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80c6 	beq.w	8007f94 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	673b      	str	r3, [r7, #112]	; 0x70
 8007e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d177      	bne.n	8007f14 <USB_EPStartXfer+0xb18>
 8007e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e44:	4413      	add	r3, r2
 8007e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	011a      	lsls	r2, r3, #4
 8007e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e58:	4413      	add	r3, r2
 8007e5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e5e:	667b      	str	r3, [r7, #100]	; 0x64
 8007e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e6e:	801a      	strh	r2, [r3, #0]
 8007e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e74:	2b3e      	cmp	r3, #62	; 0x3e
 8007e76:	d921      	bls.n	8007ebc <USB_EPStartXfer+0xac0>
 8007e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e86:	f003 031f 	and.w	r3, r3, #31
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <USB_EPStartXfer+0xa9c>
 8007e8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e92:	3b01      	subs	r3, #1
 8007e94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	029b      	lsls	r3, r3, #10
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eb8:	801a      	strh	r2, [r3, #0]
 8007eba:	e050      	b.n	8007f5e <USB_EPStartXfer+0xb62>
 8007ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <USB_EPStartXfer+0xade>
 8007ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ed6:	801a      	strh	r2, [r3, #0]
 8007ed8:	e041      	b.n	8007f5e <USB_EPStartXfer+0xb62>
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ede:	085b      	lsrs	r3, r3, #1
 8007ee0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <USB_EPStartXfer+0xafe>
 8007ef0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	029b      	lsls	r3, r3, #10
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	e024      	b.n	8007f5e <USB_EPStartXfer+0xb62>
 8007f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d11c      	bne.n	8007f5e <USB_EPStartXfer+0xb62>
 8007f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f38:	4413      	add	r3, r2
 8007f3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	011a      	lsls	r2, r3, #4
 8007f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	895b      	ldrh	r3, [r3, #10]
 8007f6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6959      	ldr	r1, [r3, #20]
 8007f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f000 ff24 	bl	8008dda <USB_WritePMA>
 8007f92:	e0ca      	b.n	800812a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d177      	bne.n	8008094 <USB_EPStartXfer+0xc98>
 8007fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fc4:	4413      	add	r3, r2
 8007fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	011a      	lsls	r2, r3, #4
 8007fd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fd8:	4413      	add	r3, r2
 8007fda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fde:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fee:	801a      	strh	r2, [r3, #0]
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ff6:	d921      	bls.n	800803c <USB_EPStartXfer+0xc40>
 8007ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008006:	f003 031f 	and.w	r3, r3, #31
 800800a:	2b00      	cmp	r3, #0
 800800c:	d104      	bne.n	8008018 <USB_EPStartXfer+0xc1c>
 800800e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008012:	3b01      	subs	r3, #1
 8008014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29a      	uxth	r2, r3
 800801e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008022:	b29b      	uxth	r3, r3
 8008024:	029b      	lsls	r3, r3, #10
 8008026:	b29b      	uxth	r3, r3
 8008028:	4313      	orrs	r3, r2
 800802a:	b29b      	uxth	r3, r3
 800802c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008034:	b29a      	uxth	r2, r3
 8008036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008038:	801a      	strh	r2, [r3, #0]
 800803a:	e05c      	b.n	80080f6 <USB_EPStartXfer+0xcfa>
 800803c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <USB_EPStartXfer+0xc5e>
 8008044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	b29b      	uxth	r3, r3
 800804a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800804e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008052:	b29a      	uxth	r2, r3
 8008054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008056:	801a      	strh	r2, [r3, #0]
 8008058:	e04d      	b.n	80080f6 <USB_EPStartXfer+0xcfa>
 800805a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800805e:	085b      	lsrs	r3, r3, #1
 8008060:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <USB_EPStartXfer+0xc7e>
 8008070:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008074:	3301      	adds	r3, #1
 8008076:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800807a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29a      	uxth	r2, r3
 8008080:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008084:	b29b      	uxth	r3, r3
 8008086:	029b      	lsls	r3, r3, #10
 8008088:	b29b      	uxth	r3, r3
 800808a:	4313      	orrs	r3, r2
 800808c:	b29a      	uxth	r2, r3
 800808e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008090:	801a      	strh	r2, [r3, #0]
 8008092:	e030      	b.n	80080f6 <USB_EPStartXfer+0xcfa>
 8008094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d128      	bne.n	80080f6 <USB_EPStartXfer+0xcfa>
 80080a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c8:	4413      	add	r3, r2
 80080ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	011a      	lsls	r2, r3, #4
 80080dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080e0:	4413      	add	r3, r2
 80080e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	891b      	ldrh	r3, [r3, #8]
 8008102:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6959      	ldr	r1, [r3, #20]
 8008112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008116:	b29b      	uxth	r3, r3
 8008118:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800811c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008120:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008124:	6800      	ldr	r0, [r0, #0]
 8008126:	f000 fe58 	bl	8008dda <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800812a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008150:	817b      	strh	r3, [r7, #10]
 8008152:	897b      	ldrh	r3, [r7, #10]
 8008154:	f083 0310 	eor.w	r3, r3, #16
 8008158:	817b      	strh	r3, [r7, #10]
 800815a:	897b      	ldrh	r3, [r7, #10]
 800815c:	f083 0320 	eor.w	r3, r3, #32
 8008160:	817b      	strh	r3, [r7, #10]
 8008162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	441a      	add	r2, r3
 800817c:	897b      	ldrh	r3, [r7, #10]
 800817e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800818a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818e:	b29b      	uxth	r3, r3
 8008190:	8013      	strh	r3, [r2, #0]
 8008192:	f000 bcde 	b.w	8008b52 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	7b1b      	ldrb	r3, [r3, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 80bb 	bne.w	800831e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	699a      	ldr	r2, [r3, #24]
 80081b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d917      	bls.n	80081f4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80081c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80081d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e4:	1ad2      	subs	r2, r2, r3
 80081e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	619a      	str	r2, [r3, #24]
 80081f2:	e00e      	b.n	8008212 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80081f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800822e:	b29b      	uxth	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008236:	4413      	add	r3, r2
 8008238:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800823c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	011a      	lsls	r2, r3, #4
 800824a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800824e:	4413      	add	r3, r2
 8008250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008254:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008264:	b29a      	uxth	r2, r3
 8008266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800826a:	801a      	strh	r2, [r3, #0]
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008270:	2b3e      	cmp	r3, #62	; 0x3e
 8008272:	d924      	bls.n	80082be <USB_EPStartXfer+0xec2>
 8008274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800827e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008282:	f003 031f 	and.w	r3, r3, #31
 8008286:	2b00      	cmp	r3, #0
 8008288:	d104      	bne.n	8008294 <USB_EPStartXfer+0xe98>
 800828a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800828e:	3b01      	subs	r3, #1
 8008290:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008294:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29a      	uxth	r2, r3
 800829c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	029b      	lsls	r3, r3, #10
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	4313      	orrs	r3, r2
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082b8:	801a      	strh	r2, [r3, #0]
 80082ba:	f000 bc10 	b.w	8008ade <USB_EPStartXfer+0x16e2>
 80082be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10c      	bne.n	80082e0 <USB_EPStartXfer+0xee4>
 80082c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082dc:	801a      	strh	r2, [r3, #0]
 80082de:	e3fe      	b.n	8008ade <USB_EPStartXfer+0x16e2>
 80082e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e4:	085b      	lsrs	r3, r3, #1
 80082e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <USB_EPStartXfer+0xf04>
 80082f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082fa:	3301      	adds	r3, #1
 80082fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29a      	uxth	r2, r3
 8008308:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800830c:	b29b      	uxth	r3, r3
 800830e:	029b      	lsls	r3, r3, #10
 8008310:	b29b      	uxth	r3, r3
 8008312:	4313      	orrs	r3, r2
 8008314:	b29a      	uxth	r2, r3
 8008316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800831a:	801a      	strh	r2, [r3, #0]
 800831c:	e3df      	b.n	8008ade <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800831e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	78db      	ldrb	r3, [r3, #3]
 800832a:	2b02      	cmp	r3, #2
 800832c:	f040 8218 	bne.w	8008760 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	785b      	ldrb	r3, [r3, #1]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 809d 	bne.w	800847c <USB_EPStartXfer+0x1080>
 8008342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800835e:	b29b      	uxth	r3, r3
 8008360:	461a      	mov	r2, r3
 8008362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008366:	4413      	add	r3, r2
 8008368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800836c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	011a      	lsls	r2, r3, #4
 800837a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800837e:	4413      	add	r3, r2
 8008380:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008394:	b29a      	uxth	r2, r3
 8008396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800839a:	801a      	strh	r2, [r3, #0]
 800839c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	2b3e      	cmp	r3, #62	; 0x3e
 80083aa:	d92b      	bls.n	8008404 <USB_EPStartXfer+0x1008>
 80083ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	095b      	lsrs	r3, r3, #5
 80083ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <USB_EPStartXfer+0xfe0>
 80083d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d6:	3b01      	subs	r3, #1
 80083d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	029b      	lsls	r3, r3, #10
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	4313      	orrs	r3, r2
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e070      	b.n	80084e6 <USB_EPStartXfer+0x10ea>
 8008404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10c      	bne.n	800842e <USB_EPStartXfer+0x1032>
 8008414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008424:	b29a      	uxth	r2, r3
 8008426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	e05b      	b.n	80084e6 <USB_EPStartXfer+0x10ea>
 800842e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	085b      	lsrs	r3, r3, #1
 800843c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <USB_EPStartXfer+0x1062>
 8008454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008458:	3301      	adds	r3, #1
 800845a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800845e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29a      	uxth	r2, r3
 8008466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846a:	b29b      	uxth	r3, r3
 800846c:	029b      	lsls	r3, r3, #10
 800846e:	b29b      	uxth	r3, r3
 8008470:	4313      	orrs	r3, r2
 8008472:	b29a      	uxth	r2, r3
 8008474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	e034      	b.n	80084e6 <USB_EPStartXfer+0x10ea>
 800847c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d12c      	bne.n	80084e6 <USB_EPStartXfer+0x10ea>
 800848c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800849a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	461a      	mov	r2, r3
 80084ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084b0:	4413      	add	r3, r2
 80084b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	011a      	lsls	r2, r3, #4
 80084c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084c8:	4413      	add	r3, r2
 80084ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	b29a      	uxth	r2, r3
 80084e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084e4:	801a      	strh	r2, [r3, #0]
 80084e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80084f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	2b00      	cmp	r3, #0
 8008502:	f040 809d 	bne.w	8008640 <USB_EPStartXfer+0x1244>
 8008506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008522:	b29b      	uxth	r3, r3
 8008524:	461a      	mov	r2, r3
 8008526:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800852a:	4413      	add	r3, r2
 800852c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	011a      	lsls	r2, r3, #4
 800853e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008542:	4413      	add	r3, r2
 8008544:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800854c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	b29b      	uxth	r3, r3
 8008554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008558:	b29a      	uxth	r2, r3
 800855a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800855e:	801a      	strh	r2, [r3, #0]
 8008560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b3e      	cmp	r3, #62	; 0x3e
 800856e:	d92b      	bls.n	80085c8 <USB_EPStartXfer+0x11cc>
 8008570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	095b      	lsrs	r3, r3, #5
 800857e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	f003 031f 	and.w	r3, r3, #31
 8008592:	2b00      	cmp	r3, #0
 8008594:	d104      	bne.n	80085a0 <USB_EPStartXfer+0x11a4>
 8008596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859a:	3b01      	subs	r3, #1
 800859c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	029b      	lsls	r3, r3, #10
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	4313      	orrs	r3, r2
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085be:	b29a      	uxth	r2, r3
 80085c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085c4:	801a      	strh	r2, [r3, #0]
 80085c6:	e069      	b.n	800869c <USB_EPStartXfer+0x12a0>
 80085c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10c      	bne.n	80085f2 <USB_EPStartXfer+0x11f6>
 80085d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085ee:	801a      	strh	r2, [r3, #0]
 80085f0:	e054      	b.n	800869c <USB_EPStartXfer+0x12a0>
 80085f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	085b      	lsrs	r3, r3, #1
 8008600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d004      	beq.n	8008622 <USB_EPStartXfer+0x1226>
 8008618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861c:	3301      	adds	r3, #1
 800861e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008622:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	b29a      	uxth	r2, r3
 800862a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862e:	b29b      	uxth	r3, r3
 8008630:	029b      	lsls	r3, r3, #10
 8008632:	b29b      	uxth	r3, r3
 8008634:	4313      	orrs	r3, r2
 8008636:	b29a      	uxth	r2, r3
 8008638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	e02d      	b.n	800869c <USB_EPStartXfer+0x12a0>
 8008640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d125      	bne.n	800869c <USB_EPStartXfer+0x12a0>
 8008650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800865e:	b29b      	uxth	r3, r3
 8008660:	461a      	mov	r2, r3
 8008662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008666:	4413      	add	r3, r2
 8008668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800866c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	011a      	lsls	r2, r3, #4
 800867a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800867e:	4413      	add	r3, r2
 8008680:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008684:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	b29a      	uxth	r2, r3
 8008696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800869a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800869c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8218 	beq.w	8008ade <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80086ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <USB_EPStartXfer+0x12ea>
 80086da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10d      	bne.n	8008702 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 81f5 	bne.w	8008ade <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f040 81ee 	bne.w	8008ade <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008706:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008728:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800872c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	441a      	add	r2, r3
 8008746:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800874a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008756:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800875a:	b29b      	uxth	r3, r3
 800875c:	8013      	strh	r3, [r2, #0]
 800875e:	e1be      	b.n	8008ade <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	78db      	ldrb	r3, [r3, #3]
 800876c:	2b01      	cmp	r3, #1
 800876e:	f040 81b4 	bne.w	8008ada <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	429a      	cmp	r2, r3
 800878c:	d917      	bls.n	80087be <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800878e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800879e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ae:	1ad2      	subs	r2, r2, r3
 80087b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	619a      	str	r2, [r3, #24]
 80087bc:	e00e      	b.n	80087dc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80087be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80087ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2200      	movs	r2, #0
 80087da:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	785b      	ldrb	r3, [r3, #1]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f040 8085 	bne.w	80088f8 <USB_EPStartXfer+0x14fc>
 80087ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008800:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800880a:	b29b      	uxth	r3, r3
 800880c:	461a      	mov	r2, r3
 800880e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008812:	4413      	add	r3, r2
 8008814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	011a      	lsls	r2, r3, #4
 8008826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800882a:	4413      	add	r3, r2
 800882c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008830:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	b29b      	uxth	r3, r3
 800883c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008840:	b29a      	uxth	r2, r3
 8008842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884c:	2b3e      	cmp	r3, #62	; 0x3e
 800884e:	d923      	bls.n	8008898 <USB_EPStartXfer+0x149c>
 8008850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008854:	095b      	lsrs	r3, r3, #5
 8008856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800885a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800885e:	f003 031f 	and.w	r3, r3, #31
 8008862:	2b00      	cmp	r3, #0
 8008864:	d104      	bne.n	8008870 <USB_EPStartXfer+0x1474>
 8008866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800886a:	3b01      	subs	r3, #1
 800886c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29a      	uxth	r2, r3
 8008878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800887c:	b29b      	uxth	r3, r3
 800887e:	029b      	lsls	r3, r3, #10
 8008880:	b29b      	uxth	r3, r3
 8008882:	4313      	orrs	r3, r2
 8008884:	b29b      	uxth	r3, r3
 8008886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800888a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800888e:	b29a      	uxth	r2, r3
 8008890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008894:	801a      	strh	r2, [r3, #0]
 8008896:	e060      	b.n	800895a <USB_EPStartXfer+0x155e>
 8008898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10c      	bne.n	80088ba <USB_EPStartXfer+0x14be>
 80088a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	e04f      	b.n	800895a <USB_EPStartXfer+0x155e>
 80088ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80088c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d004      	beq.n	80088da <USB_EPStartXfer+0x14de>
 80088d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088d4:	3301      	adds	r3, #1
 80088d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80088da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	029b      	lsls	r3, r3, #10
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	4313      	orrs	r3, r2
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088f4:	801a      	strh	r2, [r3, #0]
 80088f6:	e030      	b.n	800895a <USB_EPStartXfer+0x155e>
 80088f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	785b      	ldrb	r3, [r3, #1]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d128      	bne.n	800895a <USB_EPStartXfer+0x155e>
 8008908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008924:	b29b      	uxth	r3, r3
 8008926:	461a      	mov	r2, r3
 8008928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800892c:	4413      	add	r3, r2
 800892e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	011a      	lsls	r2, r3, #4
 8008940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008944:	4413      	add	r3, r2
 8008946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800894a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800894e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008952:	b29a      	uxth	r2, r3
 8008954:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008958:	801a      	strh	r2, [r3, #0]
 800895a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	785b      	ldrb	r3, [r3, #1]
 8008974:	2b00      	cmp	r3, #0
 8008976:	f040 8085 	bne.w	8008a84 <USB_EPStartXfer+0x1688>
 800897a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008996:	b29b      	uxth	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800899e:	4413      	add	r3, r2
 80089a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80089a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	011a      	lsls	r2, r3, #4
 80089b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80089b6:	4413      	add	r3, r2
 80089b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089d2:	801a      	strh	r2, [r3, #0]
 80089d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d8:	2b3e      	cmp	r3, #62	; 0x3e
 80089da:	d923      	bls.n	8008a24 <USB_EPStartXfer+0x1628>
 80089dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e0:	095b      	lsrs	r3, r3, #5
 80089e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d104      	bne.n	80089fc <USB_EPStartXfer+0x1600>
 80089f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089f6:	3b01      	subs	r3, #1
 80089f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	029b      	lsls	r3, r3, #10
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a20:	801a      	strh	r2, [r3, #0]
 8008a22:	e05c      	b.n	8008ade <USB_EPStartXfer+0x16e2>
 8008a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10c      	bne.n	8008a46 <USB_EPStartXfer+0x164a>
 8008a2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	e04b      	b.n	8008ade <USB_EPStartXfer+0x16e2>
 8008a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4a:	085b      	lsrs	r3, r3, #1
 8008a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d004      	beq.n	8008a66 <USB_EPStartXfer+0x166a>
 8008a5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a60:	3301      	adds	r3, #1
 8008a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	029b      	lsls	r3, r3, #10
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	e02c      	b.n	8008ade <USB_EPStartXfer+0x16e2>
 8008a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d124      	bne.n	8008ade <USB_EPStartXfer+0x16e2>
 8008a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008aaa:	4413      	add	r3, r2
 8008aac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	011a      	lsls	r2, r3, #4
 8008abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ad6:	801a      	strh	r2, [r3, #0]
 8008ad8:	e001      	b.n	8008ade <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e03a      	b.n	8008b54 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008b08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008b0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b10:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008b14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008b18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b1c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	441a      	add	r2, r3
 8008b3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	785b      	ldrb	r3, [r3, #1]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d020      	beq.n	8008bb2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b86:	81bb      	strh	r3, [r7, #12]
 8008b88:	89bb      	ldrh	r3, [r7, #12]
 8008b8a:	f083 0310 	eor.w	r3, r3, #16
 8008b8e:	81bb      	strh	r3, [r7, #12]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	441a      	add	r2, r3
 8008b9a:	89bb      	ldrh	r3, [r7, #12]
 8008b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	8013      	strh	r3, [r2, #0]
 8008bb0:	e01f      	b.n	8008bf2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc8:	81fb      	strh	r3, [r7, #14]
 8008bca:	89fb      	ldrh	r3, [r7, #14]
 8008bcc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bd0:	81fb      	strh	r3, [r7, #14]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	441a      	add	r2, r3
 8008bdc:	89fb      	ldrh	r3, [r7, #14]
 8008bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr

08008bfe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b087      	sub	sp, #28
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	7b1b      	ldrb	r3, [r3, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f040 809d 	bne.w	8008d4c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	785b      	ldrb	r3, [r3, #1]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d04c      	beq.n	8008cb4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	823b      	strh	r3, [r7, #16]
 8008c28:	8a3b      	ldrh	r3, [r7, #16]
 8008c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01b      	beq.n	8008c6a <USB_EPClearStall+0x6c>
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c48:	81fb      	strh	r3, [r7, #14]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	441a      	add	r2, r3
 8008c54:	89fb      	ldrh	r3, [r7, #14]
 8008c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	78db      	ldrb	r3, [r3, #3]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d06c      	beq.n	8008d4c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c88:	81bb      	strh	r3, [r7, #12]
 8008c8a:	89bb      	ldrh	r3, [r7, #12]
 8008c8c:	f083 0320 	eor.w	r3, r3, #32
 8008c90:	81bb      	strh	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	441a      	add	r2, r3
 8008c9c:	89bb      	ldrh	r3, [r7, #12]
 8008c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	8013      	strh	r3, [r2, #0]
 8008cb2:	e04b      	b.n	8008d4c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	82fb      	strh	r3, [r7, #22]
 8008cc2:	8afb      	ldrh	r3, [r7, #22]
 8008cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d01b      	beq.n	8008d04 <USB_EPClearStall+0x106>
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce2:	82bb      	strh	r3, [r7, #20]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	441a      	add	r2, r3
 8008cee:	8abb      	ldrh	r3, [r7, #20]
 8008cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1a:	827b      	strh	r3, [r7, #18]
 8008d1c:	8a7b      	ldrh	r3, [r7, #18]
 8008d1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d22:	827b      	strh	r3, [r7, #18]
 8008d24:	8a7b      	ldrh	r3, [r7, #18]
 8008d26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d2a:	827b      	strh	r3, [r7, #18]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	441a      	add	r2, r3
 8008d36:	8a7b      	ldrh	r3, [r7, #18]
 8008d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bc80      	pop	{r7}
 8008d56:	4770      	bx	lr

08008d58 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d103      	bne.n	8008d72 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2280      	movs	r2, #128	; 0x80
 8008d6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bc80      	pop	{r7}
 8008d7c:	4770      	bx	lr

08008d7e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr

08008d92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bc80      	pop	{r7}
 8008da4:	4770      	bx	lr

08008da6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b085      	sub	sp, #20
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008db8:	68fb      	ldr	r3, [r7, #12]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr

08008dc4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bc80      	pop	{r7}
 8008dd8:	4770      	bx	lr

08008dda <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b08b      	sub	sp, #44	; 0x2c
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	4611      	mov	r1, r2
 8008de6:	461a      	mov	r2, r3
 8008de8:	460b      	mov	r3, r1
 8008dea:	80fb      	strh	r3, [r7, #6]
 8008dec:	4613      	mov	r3, r2
 8008dee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008df0:	88bb      	ldrh	r3, [r7, #4]
 8008df2:	3301      	adds	r3, #1
 8008df4:	085b      	lsrs	r3, r3, #1
 8008df6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	005a      	lsls	r2, r3, #1
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e0c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
 8008e12:	e01e      	b.n	8008e52 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	021b      	lsls	r3, r3, #8
 8008e22:	b21a      	sxth	r2, r3
 8008e24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	b21b      	sxth	r3, r3
 8008e2c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	8a7a      	ldrh	r2, [r7, #18]
 8008e32:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	3302      	adds	r3, #2
 8008e38:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	3301      	adds	r3, #1
 8008e44:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1dd      	bne.n	8008e14 <USB_WritePMA+0x3a>
  }
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	372c      	adds	r7, #44	; 0x2c
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bc80      	pop	{r7}
 8008e62:	4770      	bx	lr

08008e64 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b08b      	sub	sp, #44	; 0x2c
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	4611      	mov	r1, r2
 8008e70:	461a      	mov	r2, r3
 8008e72:	460b      	mov	r3, r1
 8008e74:	80fb      	strh	r3, [r7, #6]
 8008e76:	4613      	mov	r3, r2
 8008e78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e7a:	88bb      	ldrh	r3, [r7, #4]
 8008e7c:	085b      	lsrs	r3, r3, #1
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e8a:	88fb      	ldrh	r3, [r7, #6]
 8008e8c:	005a      	lsls	r2, r3, #1
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e96:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e9c:	e01b      	b.n	8008ed6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	3302      	adds	r3, #2
 8008eaa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	0a1b      	lsrs	r3, r3, #8
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	3302      	adds	r3, #2
 8008ece:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e0      	bne.n	8008e9e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008edc:	88bb      	ldrh	r3, [r7, #4]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d007      	beq.n	8008ef8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	701a      	strb	r2, [r3, #0]
  }
}
 8008ef8:	bf00      	nop
 8008efa:	372c      	adds	r7, #44	; 0x2c
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bc80      	pop	{r7}
 8008f00:	4770      	bx	lr

08008f02 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	7c1b      	ldrb	r3, [r3, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d115      	bne.n	8008f46 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f1e:	2202      	movs	r2, #2
 8008f20:	2181      	movs	r1, #129	; 0x81
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fe87 	bl	800ac36 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f32:	2202      	movs	r2, #2
 8008f34:	2101      	movs	r1, #1
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 fe7d 	bl	800ac36 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008f44:	e012      	b.n	8008f6c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f46:	2340      	movs	r3, #64	; 0x40
 8008f48:	2202      	movs	r2, #2
 8008f4a:	2181      	movs	r1, #129	; 0x81
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 fe72 	bl	800ac36 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f58:	2340      	movs	r3, #64	; 0x40
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 fe69 	bl	800ac36 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f6c:	2308      	movs	r3, #8
 8008f6e:	2203      	movs	r2, #3
 8008f70:	2182      	movs	r1, #130	; 0x82
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f001 fe5f 	bl	800ac36 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f7e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f82:	f001 ff7f 	bl	800ae84 <USBD_static_malloc>
 8008f86:	4602      	mov	r2, r0
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	73fb      	strb	r3, [r7, #15]
 8008f9c:	e026      	b.n	8008fec <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	7c1b      	ldrb	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d109      	bne.n	8008fdc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 ff1e 	bl	800ae16 <USBD_LL_PrepareReceive>
 8008fda:	e007      	b.n	8008fec <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fe2:	2340      	movs	r3, #64	; 0x40
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f001 ff15 	bl	800ae16 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009006:	2181      	movs	r1, #129	; 0x81
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 fe3a 	bl	800ac82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009014:	2101      	movs	r1, #1
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 fe33 	bl	800ac82 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009024:	2182      	movs	r1, #130	; 0x82
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 fe2b 	bl	800ac82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00e      	beq.n	800905a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904c:	4618      	mov	r0, r3
 800904e:	f001 ff25 	bl	800ae9c <USBD_static_free>
    pdev->pClassData = NULL;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009074:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800908a:	2b00      	cmp	r3, #0
 800908c:	d039      	beq.n	8009102 <USBD_CDC_Setup+0x9e>
 800908e:	2b20      	cmp	r3, #32
 8009090:	d17f      	bne.n	8009192 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	88db      	ldrh	r3, [r3, #6]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d029      	beq.n	80090ee <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	b25b      	sxtb	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	da11      	bge.n	80090c8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80090b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	88d2      	ldrh	r2, [r2, #6]
 80090b6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090b8:	6939      	ldr	r1, [r7, #16]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	88db      	ldrh	r3, [r3, #6]
 80090be:	461a      	mov	r2, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 fa0a 	bl	800a4da <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80090c6:	e06b      	b.n	80091a0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	785a      	ldrb	r2, [r3, #1]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	88db      	ldrh	r3, [r3, #6]
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090de:	6939      	ldr	r1, [r7, #16]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	88db      	ldrh	r3, [r3, #6]
 80090e4:	461a      	mov	r2, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 fa25 	bl	800a536 <USBD_CtlPrepareRx>
      break;
 80090ec:	e058      	b.n	80091a0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	7850      	ldrb	r0, [r2, #1]
 80090fa:	2200      	movs	r2, #0
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	4798      	blx	r3
      break;
 8009100:	e04e      	b.n	80091a0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	2b0b      	cmp	r3, #11
 8009108:	d02e      	beq.n	8009168 <USBD_CDC_Setup+0x104>
 800910a:	2b0b      	cmp	r3, #11
 800910c:	dc38      	bgt.n	8009180 <USBD_CDC_Setup+0x11c>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <USBD_CDC_Setup+0xb4>
 8009112:	2b0a      	cmp	r3, #10
 8009114:	d014      	beq.n	8009140 <USBD_CDC_Setup+0xdc>
 8009116:	e033      	b.n	8009180 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911e:	2b03      	cmp	r3, #3
 8009120:	d107      	bne.n	8009132 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009122:	f107 030c 	add.w	r3, r7, #12
 8009126:	2202      	movs	r2, #2
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f001 f9d5 	bl	800a4da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009130:	e02e      	b.n	8009190 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 f966 	bl	800a406 <USBD_CtlError>
            ret = USBD_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	75fb      	strb	r3, [r7, #23]
          break;
 800913e:	e027      	b.n	8009190 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009146:	2b03      	cmp	r3, #3
 8009148:	d107      	bne.n	800915a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800914a:	f107 030f 	add.w	r3, r7, #15
 800914e:	2201      	movs	r2, #1
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 f9c1 	bl	800a4da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009158:	e01a      	b.n	8009190 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 f952 	bl	800a406 <USBD_CtlError>
            ret = USBD_FAIL;
 8009162:	2302      	movs	r3, #2
 8009164:	75fb      	strb	r3, [r7, #23]
          break;
 8009166:	e013      	b.n	8009190 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916e:	2b03      	cmp	r3, #3
 8009170:	d00d      	beq.n	800918e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 f946 	bl	800a406 <USBD_CtlError>
            ret = USBD_FAIL;
 800917a:	2302      	movs	r3, #2
 800917c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800917e:	e006      	b.n	800918e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 f93f 	bl	800a406 <USBD_CtlError>
          ret = USBD_FAIL;
 8009188:	2302      	movs	r3, #2
 800918a:	75fb      	strb	r3, [r7, #23]
          break;
 800918c:	e000      	b.n	8009190 <USBD_CDC_Setup+0x12c>
          break;
 800918e:	bf00      	nop
      }
      break;
 8009190:	e006      	b.n	80091a0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 f936 	bl	800a406 <USBD_CtlError>
      ret = USBD_FAIL;
 800919a:	2302      	movs	r3, #2
 800919c:	75fb      	strb	r3, [r7, #23]
      break;
 800919e:	bf00      	nop
  }

  return ret;
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d03a      	beq.n	8009246 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	4613      	mov	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	440b      	add	r3, r1
 80091de:	331c      	adds	r3, #28
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d029      	beq.n	800923a <USBD_CDC_DataIn+0x90>
 80091e6:	78fa      	ldrb	r2, [r7, #3]
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	331c      	adds	r3, #28
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	78f9      	ldrb	r1, [r7, #3]
 80091fa:	68b8      	ldr	r0, [r7, #8]
 80091fc:	460b      	mov	r3, r1
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	4403      	add	r3, r0
 8009206:	3320      	adds	r3, #32
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	fbb2 f1f3 	udiv	r1, r2, r3
 800920e:	fb01 f303 	mul.w	r3, r1, r3
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d110      	bne.n	800923a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	331c      	adds	r3, #28
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800922c:	78f9      	ldrb	r1, [r7, #3]
 800922e:	2300      	movs	r3, #0
 8009230:	2200      	movs	r2, #0
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fdcc 	bl	800add0 <USBD_LL_Transmit>
 8009238:	e003      	b.n	8009242 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	e000      	b.n	8009248 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009246:	2302      	movs	r3, #2
  }
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009262:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 fdf7 	bl	800ae5c <USBD_LL_GetRxDataSize>
 800926e:	4602      	mov	r2, r0
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00d      	beq.n	800929c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009294:	4611      	mov	r1, r2
 8009296:	4798      	blx	r3

    return USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e000      	b.n	800929e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800929c:	2302      	movs	r3, #2
  }
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d015      	beq.n	80092ec <USBD_CDC_EP0_RxReady+0x46>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80092c6:	2bff      	cmp	r3, #255	; 0xff
 80092c8:	d010      	beq.n	80092ec <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80092d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092e0:	b292      	uxth	r2, r2
 80092e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	22ff      	movs	r2, #255	; 0xff
 80092e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2243      	movs	r2, #67	; 0x43
 8009304:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009306:	4b03      	ldr	r3, [pc, #12]	; (8009314 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20000124 	.word	0x20000124

08009318 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2243      	movs	r2, #67	; 0x43
 8009324:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009326:	4b03      	ldr	r3, [pc, #12]	; (8009334 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	200000e0 	.word	0x200000e0

08009338 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2243      	movs	r2, #67	; 0x43
 8009344:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009346:	4b03      	ldr	r3, [pc, #12]	; (8009354 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20000168 	.word	0x20000168

08009358 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	220a      	movs	r2, #10
 8009364:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009366:	4b03      	ldr	r3, [pc, #12]	; (8009374 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	2000009c 	.word	0x2000009c

08009378 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009382:	2302      	movs	r3, #2
 8009384:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr

080093a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4613      	mov	r3, r2
 80093b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80093c2:	88fa      	ldrh	r2, [r7, #6]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr

080093d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr

080093fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009412:	2b00      	cmp	r3, #0
 8009414:	d01c      	beq.n	8009450 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800941c:	2b00      	cmp	r3, #0
 800941e:	d115      	bne.n	800944c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2201      	movs	r2, #1
 8009424:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800943e:	b29b      	uxth	r3, r3
 8009440:	2181      	movs	r1, #129	; 0x81
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 fcc4 	bl	800add0 <USBD_LL_Transmit>

      return USBD_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	e002      	b.n	8009452 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009450:	2302      	movs	r3, #2
  }
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009468:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009470:	2b00      	cmp	r3, #0
 8009472:	d017      	beq.n	80094a4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7c1b      	ldrb	r3, [r3, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009486:	2101      	movs	r1, #1
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 fcc4 	bl	800ae16 <USBD_LL_PrepareReceive>
 800948e:	e007      	b.n	80094a0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009496:	2340      	movs	r3, #64	; 0x40
 8009498:	2101      	movs	r1, #1
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f001 fcbb 	bl	800ae16 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	e000      	b.n	80094a6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80094a4:	2302      	movs	r3, #2
  }
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	4613      	mov	r3, r2
 80094ba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80094c2:	2302      	movs	r3, #2
 80094c4:	e01a      	b.n	80094fc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	79fa      	ldrb	r2, [r7, #7]
 80094f2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f001 fb29 	bl	800ab4c <USBD_LL_Init>

  return USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d006      	beq.n	8009526 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
 8009524:	e001      	b.n	800952a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009526:	2302      	movs	r3, #2
 8009528:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	bc80      	pop	{r7}
 8009534:	4770      	bx	lr

08009536 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fb5e 	bl	800ac00 <USBD_LL_Start>

  return USBD_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr

08009562 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800956e:	2302      	movs	r3, #2
 8009570:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00c      	beq.n	8009596 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	78fa      	ldrb	r2, [r7, #3]
 8009586:	4611      	mov	r1, r2
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009596:	7bfb      	ldrb	r3, [r7, #15]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	4611      	mov	r1, r2
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	4798      	blx	r3

  return USBD_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fed8 	bl	800a38e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80095ec:	461a      	mov	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095fa:	f003 031f 	and.w	r3, r3, #31
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d016      	beq.n	8009630 <USBD_LL_SetupStage+0x6a>
 8009602:	2b02      	cmp	r3, #2
 8009604:	d81c      	bhi.n	8009640 <USBD_LL_SetupStage+0x7a>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <USBD_LL_SetupStage+0x4a>
 800960a:	2b01      	cmp	r3, #1
 800960c:	d008      	beq.n	8009620 <USBD_LL_SetupStage+0x5a>
 800960e:	e017      	b.n	8009640 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f9cb 	bl	80099b4 <USBD_StdDevReq>
      break;
 800961e:	e01a      	b.n	8009656 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fa2d 	bl	8009a88 <USBD_StdItfReq>
      break;
 800962e:	e012      	b.n	8009656 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fa6d 	bl	8009b18 <USBD_StdEPReq>
      break;
 800963e:	e00a      	b.n	8009656 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009646:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800964a:	b2db      	uxtb	r3, r3
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 fb36 	bl	800acc0 <USBD_LL_StallEP>
      break;
 8009654:	bf00      	nop
  }

  return USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	460b      	mov	r3, r1
 800966a:	607a      	str	r2, [r7, #4]
 800966c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800966e:	7afb      	ldrb	r3, [r7, #11]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d14b      	bne.n	800970c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800967a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009682:	2b03      	cmp	r3, #3
 8009684:	d134      	bne.n	80096f0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	429a      	cmp	r2, r3
 8009690:	d919      	bls.n	80096c6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	1ad2      	subs	r2, r2, r3
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	68da      	ldr	r2, [r3, #12]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d203      	bcs.n	80096b4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	e002      	b.n	80096ba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	461a      	mov	r2, r3
 80096bc:	6879      	ldr	r1, [r7, #4]
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 ff57 	bl	800a572 <USBD_CtlContinueRx>
 80096c4:	e038      	b.n	8009738 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096d8:	2b03      	cmp	r3, #3
 80096da:	d105      	bne.n	80096e8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 ff54 	bl	800a596 <USBD_CtlSendStatus>
 80096ee:	e023      	b.n	8009738 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d11e      	bne.n	8009738 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009702:	2100      	movs	r1, #0
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f001 fadb 	bl	800acc0 <USBD_LL_StallEP>
 800970a:	e015      	b.n	8009738 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00d      	beq.n	8009734 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800971e:	2b03      	cmp	r3, #3
 8009720:	d108      	bne.n	8009734 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	7afa      	ldrb	r2, [r7, #11]
 800972c:	4611      	mov	r1, r2
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	4798      	blx	r3
 8009732:	e001      	b.n	8009738 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009734:	2302      	movs	r3, #2
 8009736:	e000      	b.n	800973a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b086      	sub	sp, #24
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	460b      	mov	r3, r1
 800974c:	607a      	str	r2, [r7, #4]
 800974e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d17f      	bne.n	8009856 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3314      	adds	r3, #20
 800975a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009762:	2b02      	cmp	r3, #2
 8009764:	d15c      	bne.n	8009820 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	429a      	cmp	r2, r3
 8009770:	d915      	bls.n	800979e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	1ad2      	subs	r2, r2, r3
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	b29b      	uxth	r3, r3
 8009786:	461a      	mov	r2, r3
 8009788:	6879      	ldr	r1, [r7, #4]
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 fec1 	bl	800a512 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009790:	2300      	movs	r3, #0
 8009792:	2200      	movs	r2, #0
 8009794:	2100      	movs	r1, #0
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f001 fb3d 	bl	800ae16 <USBD_LL_PrepareReceive>
 800979c:	e04e      	b.n	800983c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	6912      	ldr	r2, [r2, #16]
 80097a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80097aa:	fb01 f202 	mul.w	r2, r1, r2
 80097ae:	1a9b      	subs	r3, r3, r2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d11c      	bne.n	80097ee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097bc:	429a      	cmp	r2, r3
 80097be:	d316      	bcc.n	80097ee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	689a      	ldr	r2, [r3, #8]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d20f      	bcs.n	80097ee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097ce:	2200      	movs	r2, #0
 80097d0:	2100      	movs	r1, #0
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fe9d 	bl	800a512 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097e0:	2300      	movs	r3, #0
 80097e2:	2200      	movs	r2, #0
 80097e4:	2100      	movs	r1, #0
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f001 fb15 	bl	800ae16 <USBD_LL_PrepareReceive>
 80097ec:	e026      	b.n	800983c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009800:	2b03      	cmp	r3, #3
 8009802:	d105      	bne.n	8009810 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009810:	2180      	movs	r1, #128	; 0x80
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f001 fa54 	bl	800acc0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 fecf 	bl	800a5bc <USBD_CtlReceiveStatus>
 800981e:	e00d      	b.n	800983c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009826:	2b04      	cmp	r3, #4
 8009828:	d004      	beq.n	8009834 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009830:	2b00      	cmp	r3, #0
 8009832:	d103      	bne.n	800983c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009834:	2180      	movs	r1, #128	; 0x80
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f001 fa42 	bl	800acc0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009842:	2b01      	cmp	r3, #1
 8009844:	d11d      	bne.n	8009882 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff fe81 	bl	800954e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009854:	e015      	b.n	8009882 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00d      	beq.n	800987e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009868:	2b03      	cmp	r3, #3
 800986a:	d108      	bne.n	800987e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	7afa      	ldrb	r2, [r7, #11]
 8009876:	4611      	mov	r1, r2
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	4798      	blx	r3
 800987c:	e001      	b.n	8009882 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800987e:	2302      	movs	r3, #2
 8009880:	e000      	b.n	8009884 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009894:	2340      	movs	r3, #64	; 0x40
 8009896:	2200      	movs	r2, #0
 8009898:	2100      	movs	r1, #0
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f001 f9cb 	bl	800ac36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2240      	movs	r2, #64	; 0x40
 80098ac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098b0:	2340      	movs	r3, #64	; 0x40
 80098b2:	2200      	movs	r2, #0
 80098b4:	2180      	movs	r1, #128	; 0x80
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f001 f9bd 	bl	800ac36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2240      	movs	r2, #64	; 0x40
 80098c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d009      	beq.n	8009904 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6852      	ldr	r2, [r2, #4]
 80098fc:	b2d2      	uxtb	r2, r2
 80098fe:	4611      	mov	r1, r2
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	4798      	blx	r3
  }

  return USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800990e:	b480      	push	{r7}
 8009910:	b083      	sub	sp, #12
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	78fa      	ldrb	r2, [r7, #3]
 800991e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	bc80      	pop	{r7}
 800992a:	4770      	bx	lr

0800992c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2204      	movs	r2, #4
 8009944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	bc80      	pop	{r7}
 8009952:	4770      	bx	lr

08009954 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009962:	2b04      	cmp	r3, #4
 8009964:	d105      	bne.n	8009972 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	bc80      	pop	{r7}
 800997c:	4770      	bx	lr

0800997e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b082      	sub	sp, #8
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800998c:	2b03      	cmp	r3, #3
 800998e:	d10b      	bne.n	80099a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ca:	2b40      	cmp	r3, #64	; 0x40
 80099cc:	d005      	beq.n	80099da <USBD_StdDevReq+0x26>
 80099ce:	2b40      	cmp	r3, #64	; 0x40
 80099d0:	d84f      	bhi.n	8009a72 <USBD_StdDevReq+0xbe>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d009      	beq.n	80099ea <USBD_StdDevReq+0x36>
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	d14b      	bne.n	8009a72 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	4798      	blx	r3
      break;
 80099e8:	e048      	b.n	8009a7c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	785b      	ldrb	r3, [r3, #1]
 80099ee:	2b09      	cmp	r3, #9
 80099f0:	d839      	bhi.n	8009a66 <USBD_StdDevReq+0xb2>
 80099f2:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBD_StdDevReq+0x44>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a49 	.word	0x08009a49
 80099fc:	08009a5d 	.word	0x08009a5d
 8009a00:	08009a67 	.word	0x08009a67
 8009a04:	08009a53 	.word	0x08009a53
 8009a08:	08009a67 	.word	0x08009a67
 8009a0c:	08009a2b 	.word	0x08009a2b
 8009a10:	08009a21 	.word	0x08009a21
 8009a14:	08009a67 	.word	0x08009a67
 8009a18:	08009a3f 	.word	0x08009a3f
 8009a1c:	08009a35 	.word	0x08009a35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f9dc 	bl	8009de0 <USBD_GetDescriptor>
          break;
 8009a28:	e022      	b.n	8009a70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fb3f 	bl	800a0b0 <USBD_SetAddress>
          break;
 8009a32:	e01d      	b.n	8009a70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fb7e 	bl	800a138 <USBD_SetConfig>
          break;
 8009a3c:	e018      	b.n	8009a70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fc07 	bl	800a254 <USBD_GetConfig>
          break;
 8009a46:	e013      	b.n	8009a70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fc37 	bl	800a2be <USBD_GetStatus>
          break;
 8009a50:	e00e      	b.n	8009a70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fc65 	bl	800a324 <USBD_SetFeature>
          break;
 8009a5a:	e009      	b.n	8009a70 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fc74 	bl	800a34c <USBD_ClrFeature>
          break;
 8009a64:	e004      	b.n	8009a70 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fccc 	bl	800a406 <USBD_CtlError>
          break;
 8009a6e:	bf00      	nop
      }
      break;
 8009a70:	e004      	b.n	8009a7c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fcc6 	bl	800a406 <USBD_CtlError>
      break;
 8009a7a:	bf00      	nop
  }

  return ret;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop

08009a88 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a9e:	2b40      	cmp	r3, #64	; 0x40
 8009aa0:	d005      	beq.n	8009aae <USBD_StdItfReq+0x26>
 8009aa2:	2b40      	cmp	r3, #64	; 0x40
 8009aa4:	d82e      	bhi.n	8009b04 <USBD_StdItfReq+0x7c>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <USBD_StdItfReq+0x26>
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d12a      	bne.n	8009b04 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d81d      	bhi.n	8009af6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	889b      	ldrh	r3, [r3, #4]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d813      	bhi.n	8009aec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	4798      	blx	r3
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	88db      	ldrh	r3, [r3, #6]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d110      	bne.n	8009b00 <USBD_StdItfReq+0x78>
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10d      	bne.n	8009b00 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fd56 	bl	800a596 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009aea:	e009      	b.n	8009b00 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fc89 	bl	800a406 <USBD_CtlError>
          break;
 8009af4:	e004      	b.n	8009b00 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009af6:	6839      	ldr	r1, [r7, #0]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fc84 	bl	800a406 <USBD_CtlError>
          break;
 8009afe:	e000      	b.n	8009b02 <USBD_StdItfReq+0x7a>
          break;
 8009b00:	bf00      	nop
      }
      break;
 8009b02:	e004      	b.n	8009b0e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fc7d 	bl	800a406 <USBD_CtlError>
      break;
 8009b0c:	bf00      	nop
  }

  return USBD_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	889b      	ldrh	r3, [r3, #4]
 8009b2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b34:	2b40      	cmp	r3, #64	; 0x40
 8009b36:	d007      	beq.n	8009b48 <USBD_StdEPReq+0x30>
 8009b38:	2b40      	cmp	r3, #64	; 0x40
 8009b3a:	f200 8146 	bhi.w	8009dca <USBD_StdEPReq+0x2b2>
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <USBD_StdEPReq+0x40>
 8009b42:	2b20      	cmp	r3, #32
 8009b44:	f040 8141 	bne.w	8009dca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	4798      	blx	r3
      break;
 8009b56:	e13d      	b.n	8009dd4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b60:	2b20      	cmp	r3, #32
 8009b62:	d10a      	bne.n	8009b7a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	4798      	blx	r3
 8009b72:	4603      	mov	r3, r0
 8009b74:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	e12d      	b.n	8009dd6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	785b      	ldrb	r3, [r3, #1]
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d007      	beq.n	8009b92 <USBD_StdEPReq+0x7a>
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	f300 811b 	bgt.w	8009dbe <USBD_StdEPReq+0x2a6>
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d072      	beq.n	8009c72 <USBD_StdEPReq+0x15a>
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d03a      	beq.n	8009c06 <USBD_StdEPReq+0xee>
 8009b90:	e115      	b.n	8009dbe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d002      	beq.n	8009ba2 <USBD_StdEPReq+0x8a>
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d015      	beq.n	8009bcc <USBD_StdEPReq+0xb4>
 8009ba0:	e02b      	b.n	8009bfa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00c      	beq.n	8009bc2 <USBD_StdEPReq+0xaa>
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	2b80      	cmp	r3, #128	; 0x80
 8009bac:	d009      	beq.n	8009bc2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009bae:	7bbb      	ldrb	r3, [r7, #14]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f001 f884 	bl	800acc0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009bb8:	2180      	movs	r1, #128	; 0x80
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 f880 	bl	800acc0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bc0:	e020      	b.n	8009c04 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fc1e 	bl	800a406 <USBD_CtlError>
              break;
 8009bca:	e01b      	b.n	8009c04 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	885b      	ldrh	r3, [r3, #2]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10e      	bne.n	8009bf2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <USBD_StdEPReq+0xda>
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b80      	cmp	r3, #128	; 0x80
 8009bde:	d008      	beq.n	8009bf2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	88db      	ldrh	r3, [r3, #6]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f001 f867 	bl	800acc0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fccf 	bl	800a596 <USBD_CtlSendStatus>

              break;
 8009bf8:	e004      	b.n	8009c04 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fc02 	bl	800a406 <USBD_CtlError>
              break;
 8009c02:	bf00      	nop
          }
          break;
 8009c04:	e0e0      	b.n	8009dc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d002      	beq.n	8009c16 <USBD_StdEPReq+0xfe>
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d015      	beq.n	8009c40 <USBD_StdEPReq+0x128>
 8009c14:	e026      	b.n	8009c64 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00c      	beq.n	8009c36 <USBD_StdEPReq+0x11e>
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	2b80      	cmp	r3, #128	; 0x80
 8009c20:	d009      	beq.n	8009c36 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f001 f84a 	bl	800acc0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c2c:	2180      	movs	r1, #128	; 0x80
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 f846 	bl	800acc0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c34:	e01c      	b.n	8009c70 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fbe4 	bl	800a406 <USBD_CtlError>
              break;
 8009c3e:	e017      	b.n	8009c70 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	885b      	ldrh	r3, [r3, #2]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d112      	bne.n	8009c6e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 f851 	bl	800acfe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fc9a 	bl	800a596 <USBD_CtlSendStatus>
              }
              break;
 8009c62:	e004      	b.n	8009c6e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fbcd 	bl	800a406 <USBD_CtlError>
              break;
 8009c6c:	e000      	b.n	8009c70 <USBD_StdEPReq+0x158>
              break;
 8009c6e:	bf00      	nop
          }
          break;
 8009c70:	e0aa      	b.n	8009dc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d002      	beq.n	8009c82 <USBD_StdEPReq+0x16a>
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d032      	beq.n	8009ce6 <USBD_StdEPReq+0x1ce>
 8009c80:	e097      	b.n	8009db2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d007      	beq.n	8009c98 <USBD_StdEPReq+0x180>
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	2b80      	cmp	r3, #128	; 0x80
 8009c8c:	d004      	beq.n	8009c98 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fbb8 	bl	800a406 <USBD_CtlError>
                break;
 8009c96:	e091      	b.n	8009dbc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da0b      	bge.n	8009cb8 <USBD_StdEPReq+0x1a0>
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	3310      	adds	r3, #16
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	e00b      	b.n	8009cd0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	4413      	add	r3, r2
 8009cce:	3304      	adds	r3, #4
 8009cd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fbfb 	bl	800a4da <USBD_CtlSendData>
              break;
 8009ce4:	e06a      	b.n	8009dbc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da11      	bge.n	8009d12 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	f003 020f 	and.w	r2, r3, #15
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	440b      	add	r3, r1
 8009d00:	3318      	adds	r3, #24
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d117      	bne.n	8009d38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fb7b 	bl	800a406 <USBD_CtlError>
                  break;
 8009d10:	e054      	b.n	8009dbc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d104      	bne.n	8009d38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fb68 	bl	800a406 <USBD_CtlError>
                  break;
 8009d36:	e041      	b.n	8009dbc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	da0b      	bge.n	8009d58 <USBD_StdEPReq+0x240>
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	3310      	adds	r3, #16
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	4413      	add	r3, r2
 8009d54:	3304      	adds	r3, #4
 8009d56:	e00b      	b.n	8009d70 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	3304      	adds	r3, #4
 8009d70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <USBD_StdEPReq+0x266>
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2b80      	cmp	r3, #128	; 0x80
 8009d7c:	d103      	bne.n	8009d86 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	e00e      	b.n	8009da4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 ffd6 	bl	800ad3c <USBD_LL_IsStallEP>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	e002      	b.n	8009da4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2202      	movs	r2, #2
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fb95 	bl	800a4da <USBD_CtlSendData>
              break;
 8009db0:	e004      	b.n	8009dbc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fb26 	bl	800a406 <USBD_CtlError>
              break;
 8009dba:	bf00      	nop
          }
          break;
 8009dbc:	e004      	b.n	8009dc8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fb20 	bl	800a406 <USBD_CtlError>
          break;
 8009dc6:	bf00      	nop
      }
      break;
 8009dc8:	e004      	b.n	8009dd4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fb1a 	bl	800a406 <USBD_CtlError>
      break;
 8009dd2:	bf00      	nop
  }

  return ret;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	885b      	ldrh	r3, [r3, #2]
 8009dfa:	0a1b      	lsrs	r3, r3, #8
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	2b06      	cmp	r3, #6
 8009e02:	f200 8128 	bhi.w	800a056 <USBD_GetDescriptor+0x276>
 8009e06:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <USBD_GetDescriptor+0x2c>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009e29 	.word	0x08009e29
 8009e10:	08009e41 	.word	0x08009e41
 8009e14:	08009e81 	.word	0x08009e81
 8009e18:	0800a057 	.word	0x0800a057
 8009e1c:	0800a057 	.word	0x0800a057
 8009e20:	08009ff7 	.word	0x08009ff7
 8009e24:	0800a023 	.word	0x0800a023
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	f107 0108 	add.w	r1, r7, #8
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
      break;
 8009e3e:	e112      	b.n	800a066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	7c1b      	ldrb	r3, [r3, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10d      	bne.n	8009e64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e50:	f107 0208 	add.w	r2, r7, #8
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	2202      	movs	r2, #2
 8009e60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e62:	e100      	b.n	800a066 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6c:	f107 0208 	add.w	r2, r7, #8
 8009e70:	4610      	mov	r0, r2
 8009e72:	4798      	blx	r3
 8009e74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	701a      	strb	r2, [r3, #0]
      break;
 8009e7e:	e0f2      	b.n	800a066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	885b      	ldrh	r3, [r3, #2]
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b05      	cmp	r3, #5
 8009e88:	f200 80ac 	bhi.w	8009fe4 <USBD_GetDescriptor+0x204>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <USBD_GetDescriptor+0xb4>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009ead 	.word	0x08009ead
 8009e98:	08009ee1 	.word	0x08009ee1
 8009e9c:	08009f15 	.word	0x08009f15
 8009ea0:	08009f49 	.word	0x08009f49
 8009ea4:	08009f7d 	.word	0x08009f7d
 8009ea8:	08009fb1 	.word	0x08009fb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	7c12      	ldrb	r2, [r2, #16]
 8009ec4:	f107 0108 	add.w	r1, r7, #8
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ece:	e091      	b.n	8009ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fa97 	bl	800a406 <USBD_CtlError>
            err++;
 8009ed8:	7afb      	ldrb	r3, [r7, #11]
 8009eda:	3301      	adds	r3, #1
 8009edc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ede:	e089      	b.n	8009ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	7c12      	ldrb	r2, [r2, #16]
 8009ef8:	f107 0108 	add.w	r1, r7, #8
 8009efc:	4610      	mov	r0, r2
 8009efe:	4798      	blx	r3
 8009f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f02:	e077      	b.n	8009ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fa7d 	bl	800a406 <USBD_CtlError>
            err++;
 8009f0c:	7afb      	ldrb	r3, [r7, #11]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	72fb      	strb	r3, [r7, #11]
          break;
 8009f12:	e06f      	b.n	8009ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00b      	beq.n	8009f38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	7c12      	ldrb	r2, [r2, #16]
 8009f2c:	f107 0108 	add.w	r1, r7, #8
 8009f30:	4610      	mov	r0, r2
 8009f32:	4798      	blx	r3
 8009f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f36:	e05d      	b.n	8009ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fa63 	bl	800a406 <USBD_CtlError>
            err++;
 8009f40:	7afb      	ldrb	r3, [r7, #11]
 8009f42:	3301      	adds	r3, #1
 8009f44:	72fb      	strb	r3, [r7, #11]
          break;
 8009f46:	e055      	b.n	8009ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00b      	beq.n	8009f6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	7c12      	ldrb	r2, [r2, #16]
 8009f60:	f107 0108 	add.w	r1, r7, #8
 8009f64:	4610      	mov	r0, r2
 8009f66:	4798      	blx	r3
 8009f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f6a:	e043      	b.n	8009ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fa49 	bl	800a406 <USBD_CtlError>
            err++;
 8009f74:	7afb      	ldrb	r3, [r7, #11]
 8009f76:	3301      	adds	r3, #1
 8009f78:	72fb      	strb	r3, [r7, #11]
          break;
 8009f7a:	e03b      	b.n	8009ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00b      	beq.n	8009fa0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	7c12      	ldrb	r2, [r2, #16]
 8009f94:	f107 0108 	add.w	r1, r7, #8
 8009f98:	4610      	mov	r0, r2
 8009f9a:	4798      	blx	r3
 8009f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f9e:	e029      	b.n	8009ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fa2f 	bl	800a406 <USBD_CtlError>
            err++;
 8009fa8:	7afb      	ldrb	r3, [r7, #11]
 8009faa:	3301      	adds	r3, #1
 8009fac:	72fb      	strb	r3, [r7, #11]
          break;
 8009fae:	e021      	b.n	8009ff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00b      	beq.n	8009fd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	7c12      	ldrb	r2, [r2, #16]
 8009fc8:	f107 0108 	add.w	r1, r7, #8
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3
 8009fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fd2:	e00f      	b.n	8009ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fa15 	bl	800a406 <USBD_CtlError>
            err++;
 8009fdc:	7afb      	ldrb	r3, [r7, #11]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fe2:	e007      	b.n	8009ff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fa0d 	bl	800a406 <USBD_CtlError>
          err++;
 8009fec:	7afb      	ldrb	r3, [r7, #11]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009ff2:	e038      	b.n	800a066 <USBD_GetDescriptor+0x286>
 8009ff4:	e037      	b.n	800a066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	7c1b      	ldrb	r3, [r3, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d109      	bne.n	800a012 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a006:	f107 0208 	add.w	r2, r7, #8
 800a00a:	4610      	mov	r0, r2
 800a00c:	4798      	blx	r3
 800a00e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a010:	e029      	b.n	800a066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 f9f6 	bl	800a406 <USBD_CtlError>
        err++;
 800a01a:	7afb      	ldrb	r3, [r7, #11]
 800a01c:	3301      	adds	r3, #1
 800a01e:	72fb      	strb	r3, [r7, #11]
      break;
 800a020:	e021      	b.n	800a066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	7c1b      	ldrb	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10d      	bne.n	800a046 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a032:	f107 0208 	add.w	r2, r7, #8
 800a036:	4610      	mov	r0, r2
 800a038:	4798      	blx	r3
 800a03a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	2207      	movs	r2, #7
 800a042:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a044:	e00f      	b.n	800a066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f9dc 	bl	800a406 <USBD_CtlError>
        err++;
 800a04e:	7afb      	ldrb	r3, [r7, #11]
 800a050:	3301      	adds	r3, #1
 800a052:	72fb      	strb	r3, [r7, #11]
      break;
 800a054:	e007      	b.n	800a066 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a056:	6839      	ldr	r1, [r7, #0]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f9d4 	bl	800a406 <USBD_CtlError>
      err++;
 800a05e:	7afb      	ldrb	r3, [r7, #11]
 800a060:	3301      	adds	r3, #1
 800a062:	72fb      	strb	r3, [r7, #11]
      break;
 800a064:	bf00      	nop
  }

  if (err != 0U)
 800a066:	7afb      	ldrb	r3, [r7, #11]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d11c      	bne.n	800a0a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a06c:	893b      	ldrh	r3, [r7, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d011      	beq.n	800a096 <USBD_GetDescriptor+0x2b6>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	88db      	ldrh	r3, [r3, #6]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00d      	beq.n	800a096 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	88da      	ldrh	r2, [r3, #6]
 800a07e:	893b      	ldrh	r3, [r7, #8]
 800a080:	4293      	cmp	r3, r2
 800a082:	bf28      	it	cs
 800a084:	4613      	movcs	r3, r2
 800a086:	b29b      	uxth	r3, r3
 800a088:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a08a:	893b      	ldrh	r3, [r7, #8]
 800a08c:	461a      	mov	r2, r3
 800a08e:	68f9      	ldr	r1, [r7, #12]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fa22 	bl	800a4da <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	88db      	ldrh	r3, [r3, #6]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d104      	bne.n	800a0a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fa79 	bl	800a596 <USBD_CtlSendStatus>
 800a0a4:	e000      	b.n	800a0a8 <USBD_GetDescriptor+0x2c8>
    return;
 800a0a6:	bf00      	nop
    }
  }
}
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop

0800a0b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	889b      	ldrh	r3, [r3, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d130      	bne.n	800a124 <USBD_SetAddress+0x74>
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	88db      	ldrh	r3, [r3, #6]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d12c      	bne.n	800a124 <USBD_SetAddress+0x74>
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	885b      	ldrh	r3, [r3, #2]
 800a0ce:	2b7f      	cmp	r3, #127	; 0x7f
 800a0d0:	d828      	bhi.n	800a124 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	885b      	ldrh	r3, [r3, #2]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	d104      	bne.n	800a0f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f98b 	bl	800a406 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f0:	e01d      	b.n	800a12e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	7bfa      	ldrb	r2, [r7, #15]
 800a0f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fe47 	bl	800ad92 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fa46 	bl	800a596 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d004      	beq.n	800a11a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2202      	movs	r2, #2
 800a114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a118:	e009      	b.n	800a12e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a122:	e004      	b.n	800a12e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f96d 	bl	800a406 <USBD_CtlError>
  }
}
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	885b      	ldrh	r3, [r3, #2]
 800a146:	b2da      	uxtb	r2, r3
 800a148:	4b41      	ldr	r3, [pc, #260]	; (800a250 <USBD_SetConfig+0x118>)
 800a14a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a14c:	4b40      	ldr	r3, [pc, #256]	; (800a250 <USBD_SetConfig+0x118>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d904      	bls.n	800a15e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f955 	bl	800a406 <USBD_CtlError>
 800a15c:	e075      	b.n	800a24a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a164:	2b02      	cmp	r3, #2
 800a166:	d002      	beq.n	800a16e <USBD_SetConfig+0x36>
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d023      	beq.n	800a1b4 <USBD_SetConfig+0x7c>
 800a16c:	e062      	b.n	800a234 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a16e:	4b38      	ldr	r3, [pc, #224]	; (800a250 <USBD_SetConfig+0x118>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d01a      	beq.n	800a1ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a176:	4b36      	ldr	r3, [pc, #216]	; (800a250 <USBD_SetConfig+0x118>)
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2203      	movs	r2, #3
 800a184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a188:	4b31      	ldr	r3, [pc, #196]	; (800a250 <USBD_SetConfig+0x118>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff f9e7 	bl	8009562 <USBD_SetClassConfig>
 800a194:	4603      	mov	r3, r0
 800a196:	2b02      	cmp	r3, #2
 800a198:	d104      	bne.n	800a1a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f932 	bl	800a406 <USBD_CtlError>
            return;
 800a1a2:	e052      	b.n	800a24a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f9f6 	bl	800a596 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1aa:	e04e      	b.n	800a24a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f9f2 	bl	800a596 <USBD_CtlSendStatus>
        break;
 800a1b2:	e04a      	b.n	800a24a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a1b4:	4b26      	ldr	r3, [pc, #152]	; (800a250 <USBD_SetConfig+0x118>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d112      	bne.n	800a1e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a1c4:	4b22      	ldr	r3, [pc, #136]	; (800a250 <USBD_SetConfig+0x118>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a1ce:	4b20      	ldr	r3, [pc, #128]	; (800a250 <USBD_SetConfig+0x118>)
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7ff f9e3 	bl	80095a0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 f9db 	bl	800a596 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1e0:	e033      	b.n	800a24a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a1e2:	4b1b      	ldr	r3, [pc, #108]	; (800a250 <USBD_SetConfig+0x118>)
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d01d      	beq.n	800a22c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7ff f9d1 	bl	80095a0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a1fe:	4b14      	ldr	r3, [pc, #80]	; (800a250 <USBD_SetConfig+0x118>)
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a208:	4b11      	ldr	r3, [pc, #68]	; (800a250 <USBD_SetConfig+0x118>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	4619      	mov	r1, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7ff f9a7 	bl	8009562 <USBD_SetClassConfig>
 800a214:	4603      	mov	r3, r0
 800a216:	2b02      	cmp	r3, #2
 800a218:	d104      	bne.n	800a224 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f8f2 	bl	800a406 <USBD_CtlError>
            return;
 800a222:	e012      	b.n	800a24a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f9b6 	bl	800a596 <USBD_CtlSendStatus>
        break;
 800a22a:	e00e      	b.n	800a24a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f9b2 	bl	800a596 <USBD_CtlSendStatus>
        break;
 800a232:	e00a      	b.n	800a24a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f8e5 	bl	800a406 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a23c:	4b04      	ldr	r3, [pc, #16]	; (800a250 <USBD_SetConfig+0x118>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff f9ac 	bl	80095a0 <USBD_ClrClassConfig>
        break;
 800a248:	bf00      	nop
    }
  }
}
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	20000560 	.word	0x20000560

0800a254 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	88db      	ldrh	r3, [r3, #6]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d004      	beq.n	800a270 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f8cc 	bl	800a406 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a26e:	e022      	b.n	800a2b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a276:	2b02      	cmp	r3, #2
 800a278:	dc02      	bgt.n	800a280 <USBD_GetConfig+0x2c>
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dc03      	bgt.n	800a286 <USBD_GetConfig+0x32>
 800a27e:	e015      	b.n	800a2ac <USBD_GetConfig+0x58>
 800a280:	2b03      	cmp	r3, #3
 800a282:	d00b      	beq.n	800a29c <USBD_GetConfig+0x48>
 800a284:	e012      	b.n	800a2ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3308      	adds	r3, #8
 800a290:	2201      	movs	r2, #1
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f920 	bl	800a4da <USBD_CtlSendData>
        break;
 800a29a:	e00c      	b.n	800a2b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f918 	bl	800a4da <USBD_CtlSendData>
        break;
 800a2aa:	e004      	b.n	800a2b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f8a9 	bl	800a406 <USBD_CtlError>
        break;
 800a2b4:	bf00      	nop
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d81e      	bhi.n	800a312 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	88db      	ldrh	r3, [r3, #6]
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d004      	beq.n	800a2e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f891 	bl	800a406 <USBD_CtlError>
        break;
 800a2e4:	e01a      	b.n	800a31c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f043 0202 	orr.w	r2, r3, #2
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	330c      	adds	r3, #12
 800a306:	2202      	movs	r2, #2
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f8e5 	bl	800a4da <USBD_CtlSendData>
      break;
 800a310:	e004      	b.n	800a31c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f876 	bl	800a406 <USBD_CtlError>
      break;
 800a31a:	bf00      	nop
  }
}
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	885b      	ldrh	r3, [r3, #2]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d106      	bne.n	800a344 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f929 	bl	800a596 <USBD_CtlSendStatus>
  }
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a35c:	3b01      	subs	r3, #1
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d80b      	bhi.n	800a37a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	885b      	ldrh	r3, [r3, #2]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d10c      	bne.n	800a384 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f90f 	bl	800a596 <USBD_CtlSendStatus>
      }
      break;
 800a378:	e004      	b.n	800a384 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f842 	bl	800a406 <USBD_CtlError>
      break;
 800a382:	e000      	b.n	800a386 <USBD_ClrFeature+0x3a>
      break;
 800a384:	bf00      	nop
  }
}
 800a386:	bf00      	nop
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a38e:	b480      	push	{r7}
 800a390:	b083      	sub	sp, #12
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	781a      	ldrb	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	785a      	ldrb	r2, [r3, #1]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	3303      	adds	r3, #3
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	021b      	lsls	r3, r3, #8
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	4413      	add	r3, r2
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	3305      	adds	r3, #5
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	021b      	lsls	r3, r3, #8
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	4413      	add	r3, r2
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	3306      	adds	r3, #6
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	3307      	adds	r3, #7
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	021b      	lsls	r3, r3, #8
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	4413      	add	r3, r2
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	80da      	strh	r2, [r3, #6]

}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	bc80      	pop	{r7}
 800a404:	4770      	bx	lr

0800a406 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a410:	2180      	movs	r1, #128	; 0x80
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fc54 	bl	800acc0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a418:	2100      	movs	r1, #0
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fc50 	bl	800acc0 <USBD_LL_StallEP>
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d032      	beq.n	800a4a4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f834 	bl	800a4ac <USBD_GetLen>
 800a444:	4603      	mov	r3, r0
 800a446:	3301      	adds	r3, #1
 800a448:	b29b      	uxth	r3, r3
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	1c5a      	adds	r2, r3, #1
 800a456:	75fa      	strb	r2, [r7, #23]
 800a458:	461a      	mov	r2, r3
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	4413      	add	r3, r2
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	7812      	ldrb	r2, [r2, #0]
 800a462:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	1c5a      	adds	r2, r3, #1
 800a468:	75fa      	strb	r2, [r7, #23]
 800a46a:	461a      	mov	r2, r3
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	4413      	add	r3, r2
 800a470:	2203      	movs	r2, #3
 800a472:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a474:	e012      	b.n	800a49c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	60fa      	str	r2, [r7, #12]
 800a47c:	7dfa      	ldrb	r2, [r7, #23]
 800a47e:	1c51      	adds	r1, r2, #1
 800a480:	75f9      	strb	r1, [r7, #23]
 800a482:	4611      	mov	r1, r2
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	440a      	add	r2, r1
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a48c:	7dfb      	ldrb	r3, [r7, #23]
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	75fa      	strb	r2, [r7, #23]
 800a492:	461a      	mov	r2, r3
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	4413      	add	r3, r2
 800a498:	2200      	movs	r2, #0
 800a49a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1e8      	bne.n	800a476 <USBD_GetString+0x4e>
    }
  }
}
 800a4a4:	bf00      	nop
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a4b8:	e005      	b.n	800a4c6 <USBD_GetLen+0x1a>
  {
    len++;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1f5      	bne.n	800a4ba <USBD_GetLen+0xe>
  }

  return len;
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bc80      	pop	{r7}
 800a4d8:	4770      	bx	lr

0800a4da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4f0:	88fa      	ldrh	r2, [r7, #6]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a4f6:	88fa      	ldrh	r2, [r7, #6]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4fc:	88fb      	ldrh	r3, [r7, #6]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	2100      	movs	r1, #0
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 fc64 	bl	800add0 <USBD_LL_Transmit>

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	60b9      	str	r1, [r7, #8]
 800a51c:	4613      	mov	r3, r2
 800a51e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a520:	88fb      	ldrh	r3, [r7, #6]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	2100      	movs	r1, #0
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fc52 	bl	800add0 <USBD_LL_Transmit>

  return USBD_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	60b9      	str	r1, [r7, #8]
 800a540:	4613      	mov	r3, r2
 800a542:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2203      	movs	r2, #3
 800a548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a54c:	88fa      	ldrh	r2, [r7, #6]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a554:	88fa      	ldrh	r2, [r7, #6]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a55c:	88fb      	ldrh	r3, [r7, #6]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	2100      	movs	r1, #0
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f000 fc57 	bl	800ae16 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	4613      	mov	r3, r2
 800a57e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a580:	88fb      	ldrh	r3, [r7, #6]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	2100      	movs	r1, #0
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 fc45 	bl	800ae16 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fc0f 	bl	800add0 <USBD_LL_Transmit>

  return USBD_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2205      	movs	r2, #5
 800a5c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fc1f 	bl	800ae16 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	4912      	ldr	r1, [pc, #72]	; (800a634 <MX_USB_DEVICE_Init+0x50>)
 800a5ec:	4812      	ldr	r0, [pc, #72]	; (800a638 <MX_USB_DEVICE_Init+0x54>)
 800a5ee:	f7fe ff5e 	bl	80094ae <USBD_Init>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5f8:	f7f6 ffb8 	bl	800156c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5fc:	490f      	ldr	r1, [pc, #60]	; (800a63c <MX_USB_DEVICE_Init+0x58>)
 800a5fe:	480e      	ldr	r0, [pc, #56]	; (800a638 <MX_USB_DEVICE_Init+0x54>)
 800a600:	f7fe ff80 	bl	8009504 <USBD_RegisterClass>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a60a:	f7f6 ffaf 	bl	800156c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a60e:	490c      	ldr	r1, [pc, #48]	; (800a640 <MX_USB_DEVICE_Init+0x5c>)
 800a610:	4809      	ldr	r0, [pc, #36]	; (800a638 <MX_USB_DEVICE_Init+0x54>)
 800a612:	f7fe feb1 	bl	8009378 <USBD_CDC_RegisterInterface>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a61c:	f7f6 ffa6 	bl	800156c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a620:	4805      	ldr	r0, [pc, #20]	; (800a638 <MX_USB_DEVICE_Init+0x54>)
 800a622:	f7fe ff88 	bl	8009536 <USBD_Start>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a62c:	f7f6 ff9e 	bl	800156c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a630:	bf00      	nop
 800a632:	bd80      	pop	{r7, pc}
 800a634:	200001bc 	.word	0x200001bc
 800a638:	20000564 	.word	0x20000564
 800a63c:	200000a8 	.word	0x200000a8
 800a640:	200001ac 	.word	0x200001ac

0800a644 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a648:	2200      	movs	r2, #0
 800a64a:	4905      	ldr	r1, [pc, #20]	; (800a660 <CDC_Init_FS+0x1c>)
 800a64c:	4805      	ldr	r0, [pc, #20]	; (800a664 <CDC_Init_FS+0x20>)
 800a64e:	f7fe fea9 	bl	80093a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a652:	4905      	ldr	r1, [pc, #20]	; (800a668 <CDC_Init_FS+0x24>)
 800a654:	4803      	ldr	r0, [pc, #12]	; (800a664 <CDC_Init_FS+0x20>)
 800a656:	f7fe febe 	bl	80093d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a65a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20000c28 	.word	0x20000c28
 800a664:	20000564 	.word	0x20000564
 800a668:	20000828 	.word	0x20000828

0800a66c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a66c:	b480      	push	{r7}
 800a66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a670:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a672:	4618      	mov	r0, r3
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr
	...

0800a67c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	6039      	str	r1, [r7, #0]
 800a686:	71fb      	strb	r3, [r7, #7]
 800a688:	4613      	mov	r3, r2
 800a68a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a68c:	79fb      	ldrb	r3, [r7, #7]
 800a68e:	2b23      	cmp	r3, #35	; 0x23
 800a690:	d84a      	bhi.n	800a728 <CDC_Control_FS+0xac>
 800a692:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <CDC_Control_FS+0x1c>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a729 	.word	0x0800a729
 800a69c:	0800a729 	.word	0x0800a729
 800a6a0:	0800a729 	.word	0x0800a729
 800a6a4:	0800a729 	.word	0x0800a729
 800a6a8:	0800a729 	.word	0x0800a729
 800a6ac:	0800a729 	.word	0x0800a729
 800a6b0:	0800a729 	.word	0x0800a729
 800a6b4:	0800a729 	.word	0x0800a729
 800a6b8:	0800a729 	.word	0x0800a729
 800a6bc:	0800a729 	.word	0x0800a729
 800a6c0:	0800a729 	.word	0x0800a729
 800a6c4:	0800a729 	.word	0x0800a729
 800a6c8:	0800a729 	.word	0x0800a729
 800a6cc:	0800a729 	.word	0x0800a729
 800a6d0:	0800a729 	.word	0x0800a729
 800a6d4:	0800a729 	.word	0x0800a729
 800a6d8:	0800a729 	.word	0x0800a729
 800a6dc:	0800a729 	.word	0x0800a729
 800a6e0:	0800a729 	.word	0x0800a729
 800a6e4:	0800a729 	.word	0x0800a729
 800a6e8:	0800a729 	.word	0x0800a729
 800a6ec:	0800a729 	.word	0x0800a729
 800a6f0:	0800a729 	.word	0x0800a729
 800a6f4:	0800a729 	.word	0x0800a729
 800a6f8:	0800a729 	.word	0x0800a729
 800a6fc:	0800a729 	.word	0x0800a729
 800a700:	0800a729 	.word	0x0800a729
 800a704:	0800a729 	.word	0x0800a729
 800a708:	0800a729 	.word	0x0800a729
 800a70c:	0800a729 	.word	0x0800a729
 800a710:	0800a729 	.word	0x0800a729
 800a714:	0800a729 	.word	0x0800a729
 800a718:	0800a729 	.word	0x0800a729
 800a71c:	0800a729 	.word	0x0800a729
 800a720:	0800a729 	.word	0x0800a729
 800a724:	0800a729 	.word	0x0800a729
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a728:	bf00      	nop
  }

  return (USBD_OK);
 800a72a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	bc80      	pop	{r7}
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop

0800a738 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	4805      	ldr	r0, [pc, #20]	; (800a75c <CDC_Receive_FS+0x24>)
 800a746:	f7fe fe46 	bl	80093d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a74a:	4804      	ldr	r0, [pc, #16]	; (800a75c <CDC_Receive_FS+0x24>)
 800a74c:	f7fe fe85 	bl	800945a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a750:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000564 	.word	0x20000564

0800a760 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	460b      	mov	r3, r1
 800a76a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a770:	4b0d      	ldr	r3, [pc, #52]	; (800a7a8 <CDC_Transmit_FS+0x48>)
 800a772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a776:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a782:	2301      	movs	r3, #1
 800a784:	e00b      	b.n	800a79e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a786:	887b      	ldrh	r3, [r7, #2]
 800a788:	461a      	mov	r2, r3
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	4806      	ldr	r0, [pc, #24]	; (800a7a8 <CDC_Transmit_FS+0x48>)
 800a78e:	f7fe fe09 	bl	80093a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a792:	4805      	ldr	r0, [pc, #20]	; (800a7a8 <CDC_Transmit_FS+0x48>)
 800a794:	f7fe fe32 	bl	80093fc <USBD_CDC_TransmitPacket>
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000564 	.word	0x20000564

0800a7ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	6039      	str	r1, [r7, #0]
 800a7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2212      	movs	r2, #18
 800a7bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7be:	4b03      	ldr	r3, [pc, #12]	; (800a7cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bc80      	pop	{r7}
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	200001d8 	.word	0x200001d8

0800a7d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	6039      	str	r1, [r7, #0]
 800a7da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2204      	movs	r2, #4
 800a7e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7e2:	4b03      	ldr	r3, [pc, #12]	; (800a7f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bc80      	pop	{r7}
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	200001ec 	.word	0x200001ec

0800a7f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	6039      	str	r1, [r7, #0]
 800a7fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d105      	bne.n	800a812 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	4907      	ldr	r1, [pc, #28]	; (800a828 <USBD_FS_ProductStrDescriptor+0x34>)
 800a80a:	4808      	ldr	r0, [pc, #32]	; (800a82c <USBD_FS_ProductStrDescriptor+0x38>)
 800a80c:	f7ff fe0c 	bl	800a428 <USBD_GetString>
 800a810:	e004      	b.n	800a81c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	4904      	ldr	r1, [pc, #16]	; (800a828 <USBD_FS_ProductStrDescriptor+0x34>)
 800a816:	4805      	ldr	r0, [pc, #20]	; (800a82c <USBD_FS_ProductStrDescriptor+0x38>)
 800a818:	f7ff fe06 	bl	800a428 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a81c:	4b02      	ldr	r3, [pc, #8]	; (800a828 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20001028 	.word	0x20001028
 800a82c:	0800e2fc 	.word	0x0800e2fc

0800a830 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	4904      	ldr	r1, [pc, #16]	; (800a850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a840:	4804      	ldr	r0, [pc, #16]	; (800a854 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a842:	f7ff fdf1 	bl	800a428 <USBD_GetString>
  return USBD_StrDesc;
 800a846:	4b02      	ldr	r3, [pc, #8]	; (800a850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20001028 	.word	0x20001028
 800a854:	0800e314 	.word	0x0800e314

0800a858 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	221a      	movs	r2, #26
 800a868:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a86a:	f000 f843 	bl	800a8f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a86e:	4b02      	ldr	r3, [pc, #8]	; (800a878 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a870:	4618      	mov	r0, r3
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	200001f0 	.word	0x200001f0

0800a87c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	4907      	ldr	r1, [pc, #28]	; (800a8b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a892:	4808      	ldr	r0, [pc, #32]	; (800a8b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a894:	f7ff fdc8 	bl	800a428 <USBD_GetString>
 800a898:	e004      	b.n	800a8a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	4904      	ldr	r1, [pc, #16]	; (800a8b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a89e:	4805      	ldr	r0, [pc, #20]	; (800a8b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8a0:	f7ff fdc2 	bl	800a428 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a4:	4b02      	ldr	r3, [pc, #8]	; (800a8b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20001028 	.word	0x20001028
 800a8b4:	0800e328 	.word	0x0800e328

0800a8b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d105      	bne.n	800a8d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	4907      	ldr	r1, [pc, #28]	; (800a8ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8ce:	4808      	ldr	r0, [pc, #32]	; (800a8f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8d0:	f7ff fdaa 	bl	800a428 <USBD_GetString>
 800a8d4:	e004      	b.n	800a8e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	4904      	ldr	r1, [pc, #16]	; (800a8ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8da:	4805      	ldr	r0, [pc, #20]	; (800a8f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8dc:	f7ff fda4 	bl	800a428 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8e0:	4b02      	ldr	r3, [pc, #8]	; (800a8ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20001028 	.word	0x20001028
 800a8f0:	0800e334 	.word	0x0800e334

0800a8f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8fa:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <Get_SerialNum+0x44>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a900:	4b0e      	ldr	r3, [pc, #56]	; (800a93c <Get_SerialNum+0x48>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a906:	4b0e      	ldr	r3, [pc, #56]	; (800a940 <Get_SerialNum+0x4c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4413      	add	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d009      	beq.n	800a92e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a91a:	2208      	movs	r2, #8
 800a91c:	4909      	ldr	r1, [pc, #36]	; (800a944 <Get_SerialNum+0x50>)
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f000 f814 	bl	800a94c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a924:	2204      	movs	r2, #4
 800a926:	4908      	ldr	r1, [pc, #32]	; (800a948 <Get_SerialNum+0x54>)
 800a928:	68b8      	ldr	r0, [r7, #8]
 800a92a:	f000 f80f 	bl	800a94c <IntToUnicode>
  }
}
 800a92e:	bf00      	nop
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	1ffff7e8 	.word	0x1ffff7e8
 800a93c:	1ffff7ec 	.word	0x1ffff7ec
 800a940:	1ffff7f0 	.word	0x1ffff7f0
 800a944:	200001f2 	.word	0x200001f2
 800a948:	20000202 	.word	0x20000202

0800a94c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	4613      	mov	r3, r2
 800a958:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a95e:	2300      	movs	r3, #0
 800a960:	75fb      	strb	r3, [r7, #23]
 800a962:	e027      	b.n	800a9b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	0f1b      	lsrs	r3, r3, #28
 800a968:	2b09      	cmp	r3, #9
 800a96a:	d80b      	bhi.n	800a984 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	0f1b      	lsrs	r3, r3, #28
 800a970:	b2da      	uxtb	r2, r3
 800a972:	7dfb      	ldrb	r3, [r7, #23]
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	4619      	mov	r1, r3
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	440b      	add	r3, r1
 800a97c:	3230      	adds	r2, #48	; 0x30
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	701a      	strb	r2, [r3, #0]
 800a982:	e00a      	b.n	800a99a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	0f1b      	lsrs	r3, r3, #28
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4619      	mov	r1, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	440b      	add	r3, r1
 800a994:	3237      	adds	r2, #55	; 0x37
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	011b      	lsls	r3, r3, #4
 800a99e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9a0:	7dfb      	ldrb	r3, [r7, #23]
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	75fb      	strb	r3, [r7, #23]
 800a9b4:	7dfa      	ldrb	r2, [r7, #23]
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d3d3      	bcc.n	800a964 <IntToUnicode+0x18>
  }
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bc80      	pop	{r7}
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a0d      	ldr	r2, [pc, #52]	; (800aa0c <HAL_PCD_MspInit+0x44>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d113      	bne.n	800aa02 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9da:	4b0d      	ldr	r3, [pc, #52]	; (800aa10 <HAL_PCD_MspInit+0x48>)
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	4a0c      	ldr	r2, [pc, #48]	; (800aa10 <HAL_PCD_MspInit+0x48>)
 800a9e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a9e4:	61d3      	str	r3, [r2, #28]
 800a9e6:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <HAL_PCD_MspInit+0x48>)
 800a9e8:	69db      	ldr	r3, [r3, #28]
 800a9ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	2014      	movs	r0, #20
 800a9f8:	f7f7 fd47 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a9fc:	2014      	movs	r0, #20
 800a9fe:	f7f7 fd60 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa02:	bf00      	nop
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	40005c00 	.word	0x40005c00
 800aa10:	40021000 	.word	0x40021000

0800aa14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f7fe fdcb 	bl	80095c6 <USBD_LL_SetupStage>
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800aa4a:	78fa      	ldrb	r2, [r7, #3]
 800aa4c:	6879      	ldr	r1, [r7, #4]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	440b      	add	r3, r1
 800aa58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	78fb      	ldrb	r3, [r7, #3]
 800aa60:	4619      	mov	r1, r3
 800aa62:	f7fe fdfd 	bl	8009660 <USBD_LL_DataOutStage>
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	460b      	mov	r3, r1
 800aa78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	00db      	lsls	r3, r3, #3
 800aa8c:	440b      	add	r3, r1
 800aa8e:	3324      	adds	r3, #36	; 0x24
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	78fb      	ldrb	r3, [r7, #3]
 800aa94:	4619      	mov	r1, r3
 800aa96:	f7fe fe54 	bl	8009742 <USBD_LL_DataInStage>
}
 800aa9a:	bf00      	nop
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe ff64 	bl	800997e <USBD_LL_SOF>
}
 800aab6:	bf00      	nop
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	799b      	ldrb	r3, [r3, #6]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d001      	beq.n	800aad6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aad2:	f7f6 fd4b 	bl	800156c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aadc:	7bfa      	ldrb	r2, [r7, #15]
 800aade:	4611      	mov	r1, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe ff14 	bl	800990e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe fecd 	bl	800988c <USBD_LL_Reset>
}
 800aaf2:	bf00      	nop
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe ff0e 	bl	800992c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	7a9b      	ldrb	r3, [r3, #10]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab18:	4b04      	ldr	r3, [pc, #16]	; (800ab2c <HAL_PCD_SuspendCallback+0x30>)
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	4a03      	ldr	r2, [pc, #12]	; (800ab2c <HAL_PCD_SuspendCallback+0x30>)
 800ab1e:	f043 0306 	orr.w	r3, r3, #6
 800ab22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	e000ed00 	.word	0xe000ed00

0800ab30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fe ff08 	bl	8009954 <USBD_LL_Resume>
}
 800ab44:	bf00      	nop
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab54:	4a28      	ldr	r2, [pc, #160]	; (800abf8 <USBD_LL_Init+0xac>)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a26      	ldr	r2, [pc, #152]	; (800abf8 <USBD_LL_Init+0xac>)
 800ab60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab64:	4b24      	ldr	r3, [pc, #144]	; (800abf8 <USBD_LL_Init+0xac>)
 800ab66:	4a25      	ldr	r2, [pc, #148]	; (800abfc <USBD_LL_Init+0xb0>)
 800ab68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab6a:	4b23      	ldr	r3, [pc, #140]	; (800abf8 <USBD_LL_Init+0xac>)
 800ab6c:	2208      	movs	r2, #8
 800ab6e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab70:	4b21      	ldr	r3, [pc, #132]	; (800abf8 <USBD_LL_Init+0xac>)
 800ab72:	2202      	movs	r2, #2
 800ab74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab76:	4b20      	ldr	r3, [pc, #128]	; (800abf8 <USBD_LL_Init+0xac>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab7c:	4b1e      	ldr	r3, [pc, #120]	; (800abf8 <USBD_LL_Init+0xac>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab82:	4b1d      	ldr	r3, [pc, #116]	; (800abf8 <USBD_LL_Init+0xac>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab88:	481b      	ldr	r0, [pc, #108]	; (800abf8 <USBD_LL_Init+0xac>)
 800ab8a:	f7f8 feb6 	bl	80038fa <HAL_PCD_Init>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab94:	f7f6 fcea 	bl	800156c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab9e:	2318      	movs	r3, #24
 800aba0:	2200      	movs	r2, #0
 800aba2:	2100      	movs	r1, #0
 800aba4:	f7fa fbc8 	bl	8005338 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abae:	2358      	movs	r3, #88	; 0x58
 800abb0:	2200      	movs	r2, #0
 800abb2:	2180      	movs	r1, #128	; 0x80
 800abb4:	f7fa fbc0 	bl	8005338 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abbe:	23c0      	movs	r3, #192	; 0xc0
 800abc0:	2200      	movs	r2, #0
 800abc2:	2181      	movs	r1, #129	; 0x81
 800abc4:	f7fa fbb8 	bl	8005338 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abce:	f44f 7388 	mov.w	r3, #272	; 0x110
 800abd2:	2200      	movs	r2, #0
 800abd4:	2101      	movs	r1, #1
 800abd6:	f7fa fbaf 	bl	8005338 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abe4:	2200      	movs	r2, #0
 800abe6:	2182      	movs	r1, #130	; 0x82
 800abe8:	f7fa fba6 	bl	8005338 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20001228 	.word	0x20001228
 800abfc:	40005c00 	.word	0x40005c00

0800ac00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7f8 ff65 	bl	8003ae6 <HAL_PCD_Start>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac20:	7bfb      	ldrb	r3, [r7, #15]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 f94e 	bl	800aec4 <USBD_Get_USB_Status>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	4608      	mov	r0, r1
 800ac40:	4611      	mov	r1, r2
 800ac42:	461a      	mov	r2, r3
 800ac44:	4603      	mov	r3, r0
 800ac46:	70fb      	strb	r3, [r7, #3]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70bb      	strb	r3, [r7, #2]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac5e:	78bb      	ldrb	r3, [r7, #2]
 800ac60:	883a      	ldrh	r2, [r7, #0]
 800ac62:	78f9      	ldrb	r1, [r7, #3]
 800ac64:	f7f9 f8b9 	bl	8003dda <HAL_PCD_EP_Open>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 f928 	bl	800aec4 <USBD_Get_USB_Status>
 800ac74:	4603      	mov	r3, r0
 800ac76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b084      	sub	sp, #16
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac9c:	78fa      	ldrb	r2, [r7, #3]
 800ac9e:	4611      	mov	r1, r2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7f9 f8f7 	bl	8003e94 <HAL_PCD_EP_Close>
 800aca6:	4603      	mov	r3, r0
 800aca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	4618      	mov	r0, r3
 800acae:	f000 f909 	bl	800aec4 <USBD_Get_USB_Status>
 800acb2:	4603      	mov	r3, r0
 800acb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acda:	78fa      	ldrb	r2, [r7, #3]
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f7f9 f99f 	bl	8004022 <HAL_PCD_EP_SetStall>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	4618      	mov	r0, r3
 800acec:	f000 f8ea 	bl	800aec4 <USBD_Get_USB_Status>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad18:	78fa      	ldrb	r2, [r7, #3]
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7f9 f9e0 	bl	80040e2 <HAL_PCD_EP_ClrStall>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 f8cb 	bl	800aec4 <USBD_Get_USB_Status>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	da0b      	bge.n	800ad70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad58:	78fb      	ldrb	r3, [r7, #3]
 800ad5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad5e:	68f9      	ldr	r1, [r7, #12]
 800ad60:	4613      	mov	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	00db      	lsls	r3, r3, #3
 800ad68:	440b      	add	r3, r1
 800ad6a:	3312      	adds	r3, #18
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	e00b      	b.n	800ad88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad76:	68f9      	ldr	r1, [r7, #12]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	440b      	add	r3, r1
 800ad82:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800ad86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bc80      	pop	{r7}
 800ad90:	4770      	bx	lr

0800ad92 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b084      	sub	sp, #16
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adac:	78fa      	ldrb	r2, [r7, #3]
 800adae:	4611      	mov	r1, r2
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7f8 ffee 	bl	8003d92 <HAL_PCD_SetAddress>
 800adb6:	4603      	mov	r3, r0
 800adb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 f881 	bl	800aec4 <USBD_Get_USB_Status>
 800adc2:	4603      	mov	r3, r0
 800adc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	607a      	str	r2, [r7, #4]
 800adda:	461a      	mov	r2, r3
 800addc:	460b      	mov	r3, r1
 800adde:	72fb      	strb	r3, [r7, #11]
 800ade0:	4613      	mov	r3, r2
 800ade2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adf2:	893b      	ldrh	r3, [r7, #8]
 800adf4:	7af9      	ldrb	r1, [r7, #11]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	f7f9 f8dc 	bl	8003fb4 <HAL_PCD_EP_Transmit>
 800adfc:	4603      	mov	r3, r0
 800adfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 f85e 	bl	800aec4 <USBD_Get_USB_Status>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b086      	sub	sp, #24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	60f8      	str	r0, [r7, #12]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	461a      	mov	r2, r3
 800ae22:	460b      	mov	r3, r1
 800ae24:	72fb      	strb	r3, [r7, #11]
 800ae26:	4613      	mov	r3, r2
 800ae28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae38:	893b      	ldrh	r3, [r7, #8]
 800ae3a:	7af9      	ldrb	r1, [r7, #11]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	f7f9 f871 	bl	8003f24 <HAL_PCD_EP_Receive>
 800ae42:	4603      	mov	r3, r0
 800ae44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 f83b 	bl	800aec4 <USBD_Get_USB_Status>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae52:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae6e:	78fa      	ldrb	r2, [r7, #3]
 800ae70:	4611      	mov	r1, r2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7f9 f887 	bl	8003f86 <HAL_PCD_EP_GetRxCount>
 800ae78:	4603      	mov	r3, r0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
	...

0800ae84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae8c:	4b02      	ldr	r3, [pc, #8]	; (800ae98 <USBD_static_malloc+0x14>)
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bc80      	pop	{r7}
 800ae96:	4770      	bx	lr
 800ae98:	20001500 	.word	0x20001500

0800ae9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]

}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bc80      	pop	{r7}
 800aeac:	4770      	bx	lr

0800aeae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aeba:	bf00      	nop
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bc80      	pop	{r7}
 800aec2:	4770      	bx	lr

0800aec4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	2b03      	cmp	r3, #3
 800aed6:	d817      	bhi.n	800af08 <USBD_Get_USB_Status+0x44>
 800aed8:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <USBD_Get_USB_Status+0x1c>)
 800aeda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aede:	bf00      	nop
 800aee0:	0800aef1 	.word	0x0800aef1
 800aee4:	0800aef7 	.word	0x0800aef7
 800aee8:	0800aefd 	.word	0x0800aefd
 800aeec:	0800af03 	.word	0x0800af03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73fb      	strb	r3, [r7, #15]
    break;
 800aef4:	e00b      	b.n	800af0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aef6:	2302      	movs	r3, #2
 800aef8:	73fb      	strb	r3, [r7, #15]
    break;
 800aefa:	e008      	b.n	800af0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aefc:	2301      	movs	r3, #1
 800aefe:	73fb      	strb	r3, [r7, #15]
    break;
 800af00:	e005      	b.n	800af0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af02:	2302      	movs	r3, #2
 800af04:	73fb      	strb	r3, [r7, #15]
    break;
 800af06:	e002      	b.n	800af0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af08:	2302      	movs	r3, #2
 800af0a:	73fb      	strb	r3, [r7, #15]
    break;
 800af0c:	bf00      	nop
  }
  return usb_status;
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3714      	adds	r7, #20
 800af14:	46bd      	mov	sp, r7
 800af16:	bc80      	pop	{r7}
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop

0800af1c <__cvt>:
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af22:	461f      	mov	r7, r3
 800af24:	bfbb      	ittet	lt
 800af26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800af2a:	461f      	movlt	r7, r3
 800af2c:	2300      	movge	r3, #0
 800af2e:	232d      	movlt	r3, #45	; 0x2d
 800af30:	b088      	sub	sp, #32
 800af32:	4614      	mov	r4, r2
 800af34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800af38:	7013      	strb	r3, [r2, #0]
 800af3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800af40:	f023 0820 	bic.w	r8, r3, #32
 800af44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af48:	d005      	beq.n	800af56 <__cvt+0x3a>
 800af4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af4e:	d100      	bne.n	800af52 <__cvt+0x36>
 800af50:	3501      	adds	r5, #1
 800af52:	2302      	movs	r3, #2
 800af54:	e000      	b.n	800af58 <__cvt+0x3c>
 800af56:	2303      	movs	r3, #3
 800af58:	aa07      	add	r2, sp, #28
 800af5a:	9204      	str	r2, [sp, #16]
 800af5c:	aa06      	add	r2, sp, #24
 800af5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800af62:	e9cd 3500 	strd	r3, r5, [sp]
 800af66:	4622      	mov	r2, r4
 800af68:	463b      	mov	r3, r7
 800af6a:	f000 fe85 	bl	800bc78 <_dtoa_r>
 800af6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af72:	4606      	mov	r6, r0
 800af74:	d102      	bne.n	800af7c <__cvt+0x60>
 800af76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af78:	07db      	lsls	r3, r3, #31
 800af7a:	d522      	bpl.n	800afc2 <__cvt+0xa6>
 800af7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af80:	eb06 0905 	add.w	r9, r6, r5
 800af84:	d110      	bne.n	800afa8 <__cvt+0x8c>
 800af86:	7833      	ldrb	r3, [r6, #0]
 800af88:	2b30      	cmp	r3, #48	; 0x30
 800af8a:	d10a      	bne.n	800afa2 <__cvt+0x86>
 800af8c:	2200      	movs	r2, #0
 800af8e:	2300      	movs	r3, #0
 800af90:	4620      	mov	r0, r4
 800af92:	4639      	mov	r1, r7
 800af94:	f7f5 fd08 	bl	80009a8 <__aeabi_dcmpeq>
 800af98:	b918      	cbnz	r0, 800afa2 <__cvt+0x86>
 800af9a:	f1c5 0501 	rsb	r5, r5, #1
 800af9e:	f8ca 5000 	str.w	r5, [sl]
 800afa2:	f8da 3000 	ldr.w	r3, [sl]
 800afa6:	4499      	add	r9, r3
 800afa8:	2200      	movs	r2, #0
 800afaa:	2300      	movs	r3, #0
 800afac:	4620      	mov	r0, r4
 800afae:	4639      	mov	r1, r7
 800afb0:	f7f5 fcfa 	bl	80009a8 <__aeabi_dcmpeq>
 800afb4:	b108      	cbz	r0, 800afba <__cvt+0x9e>
 800afb6:	f8cd 901c 	str.w	r9, [sp, #28]
 800afba:	2230      	movs	r2, #48	; 0x30
 800afbc:	9b07      	ldr	r3, [sp, #28]
 800afbe:	454b      	cmp	r3, r9
 800afc0:	d307      	bcc.n	800afd2 <__cvt+0xb6>
 800afc2:	4630      	mov	r0, r6
 800afc4:	9b07      	ldr	r3, [sp, #28]
 800afc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800afc8:	1b9b      	subs	r3, r3, r6
 800afca:	6013      	str	r3, [r2, #0]
 800afcc:	b008      	add	sp, #32
 800afce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd2:	1c59      	adds	r1, r3, #1
 800afd4:	9107      	str	r1, [sp, #28]
 800afd6:	701a      	strb	r2, [r3, #0]
 800afd8:	e7f0      	b.n	800afbc <__cvt+0xa0>

0800afda <__exponent>:
 800afda:	4603      	mov	r3, r0
 800afdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afde:	2900      	cmp	r1, #0
 800afe0:	f803 2b02 	strb.w	r2, [r3], #2
 800afe4:	bfb6      	itet	lt
 800afe6:	222d      	movlt	r2, #45	; 0x2d
 800afe8:	222b      	movge	r2, #43	; 0x2b
 800afea:	4249      	neglt	r1, r1
 800afec:	2909      	cmp	r1, #9
 800afee:	7042      	strb	r2, [r0, #1]
 800aff0:	dd2a      	ble.n	800b048 <__exponent+0x6e>
 800aff2:	f10d 0207 	add.w	r2, sp, #7
 800aff6:	4617      	mov	r7, r2
 800aff8:	260a      	movs	r6, #10
 800affa:	fb91 f5f6 	sdiv	r5, r1, r6
 800affe:	4694      	mov	ip, r2
 800b000:	fb06 1415 	mls	r4, r6, r5, r1
 800b004:	3430      	adds	r4, #48	; 0x30
 800b006:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b00a:	460c      	mov	r4, r1
 800b00c:	2c63      	cmp	r4, #99	; 0x63
 800b00e:	4629      	mov	r1, r5
 800b010:	f102 32ff 	add.w	r2, r2, #4294967295
 800b014:	dcf1      	bgt.n	800affa <__exponent+0x20>
 800b016:	3130      	adds	r1, #48	; 0x30
 800b018:	f1ac 0402 	sub.w	r4, ip, #2
 800b01c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b020:	4622      	mov	r2, r4
 800b022:	1c41      	adds	r1, r0, #1
 800b024:	42ba      	cmp	r2, r7
 800b026:	d30a      	bcc.n	800b03e <__exponent+0x64>
 800b028:	f10d 0209 	add.w	r2, sp, #9
 800b02c:	eba2 020c 	sub.w	r2, r2, ip
 800b030:	42bc      	cmp	r4, r7
 800b032:	bf88      	it	hi
 800b034:	2200      	movhi	r2, #0
 800b036:	4413      	add	r3, r2
 800b038:	1a18      	subs	r0, r3, r0
 800b03a:	b003      	add	sp, #12
 800b03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b042:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b046:	e7ed      	b.n	800b024 <__exponent+0x4a>
 800b048:	2330      	movs	r3, #48	; 0x30
 800b04a:	3130      	adds	r1, #48	; 0x30
 800b04c:	7083      	strb	r3, [r0, #2]
 800b04e:	70c1      	strb	r1, [r0, #3]
 800b050:	1d03      	adds	r3, r0, #4
 800b052:	e7f1      	b.n	800b038 <__exponent+0x5e>

0800b054 <_printf_float>:
 800b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b058:	b091      	sub	sp, #68	; 0x44
 800b05a:	460c      	mov	r4, r1
 800b05c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b060:	4616      	mov	r6, r2
 800b062:	461f      	mov	r7, r3
 800b064:	4605      	mov	r5, r0
 800b066:	f000 fcf9 	bl	800ba5c <_localeconv_r>
 800b06a:	6803      	ldr	r3, [r0, #0]
 800b06c:	4618      	mov	r0, r3
 800b06e:	9309      	str	r3, [sp, #36]	; 0x24
 800b070:	f7f5 f86e 	bl	8000150 <strlen>
 800b074:	2300      	movs	r3, #0
 800b076:	930e      	str	r3, [sp, #56]	; 0x38
 800b078:	f8d8 3000 	ldr.w	r3, [r8]
 800b07c:	900a      	str	r0, [sp, #40]	; 0x28
 800b07e:	3307      	adds	r3, #7
 800b080:	f023 0307 	bic.w	r3, r3, #7
 800b084:	f103 0208 	add.w	r2, r3, #8
 800b088:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b08c:	f8d4 b000 	ldr.w	fp, [r4]
 800b090:	f8c8 2000 	str.w	r2, [r8]
 800b094:	e9d3 a800 	ldrd	sl, r8, [r3]
 800b098:	4652      	mov	r2, sl
 800b09a:	4643      	mov	r3, r8
 800b09c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b0a0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800b0a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	4b9c      	ldr	r3, [pc, #624]	; (800b320 <_printf_float+0x2cc>)
 800b0ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0b0:	f7f5 fcac 	bl	8000a0c <__aeabi_dcmpun>
 800b0b4:	bb70      	cbnz	r0, 800b114 <_printf_float+0xc0>
 800b0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ba:	4650      	mov	r0, sl
 800b0bc:	4b98      	ldr	r3, [pc, #608]	; (800b320 <_printf_float+0x2cc>)
 800b0be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0c0:	f7f5 fc86 	bl	80009d0 <__aeabi_dcmple>
 800b0c4:	bb30      	cbnz	r0, 800b114 <_printf_float+0xc0>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4650      	mov	r0, sl
 800b0cc:	4641      	mov	r1, r8
 800b0ce:	f7f5 fc75 	bl	80009bc <__aeabi_dcmplt>
 800b0d2:	b110      	cbz	r0, 800b0da <_printf_float+0x86>
 800b0d4:	232d      	movs	r3, #45	; 0x2d
 800b0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0da:	4a92      	ldr	r2, [pc, #584]	; (800b324 <_printf_float+0x2d0>)
 800b0dc:	4b92      	ldr	r3, [pc, #584]	; (800b328 <_printf_float+0x2d4>)
 800b0de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b0e2:	bf94      	ite	ls
 800b0e4:	4690      	movls	r8, r2
 800b0e6:	4698      	movhi	r8, r3
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	f04f 0a00 	mov.w	sl, #0
 800b0ee:	6123      	str	r3, [r4, #16]
 800b0f0:	f02b 0304 	bic.w	r3, fp, #4
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	4633      	mov	r3, r6
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	9700      	str	r7, [sp, #0]
 800b0fe:	aa0f      	add	r2, sp, #60	; 0x3c
 800b100:	f000 f9d6 	bl	800b4b0 <_printf_common>
 800b104:	3001      	adds	r0, #1
 800b106:	f040 8090 	bne.w	800b22a <_printf_float+0x1d6>
 800b10a:	f04f 30ff 	mov.w	r0, #4294967295
 800b10e:	b011      	add	sp, #68	; 0x44
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	4652      	mov	r2, sl
 800b116:	4643      	mov	r3, r8
 800b118:	4650      	mov	r0, sl
 800b11a:	4641      	mov	r1, r8
 800b11c:	f7f5 fc76 	bl	8000a0c <__aeabi_dcmpun>
 800b120:	b148      	cbz	r0, 800b136 <_printf_float+0xe2>
 800b122:	f1b8 0f00 	cmp.w	r8, #0
 800b126:	bfb8      	it	lt
 800b128:	232d      	movlt	r3, #45	; 0x2d
 800b12a:	4a80      	ldr	r2, [pc, #512]	; (800b32c <_printf_float+0x2d8>)
 800b12c:	bfb8      	it	lt
 800b12e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b132:	4b7f      	ldr	r3, [pc, #508]	; (800b330 <_printf_float+0x2dc>)
 800b134:	e7d3      	b.n	800b0de <_printf_float+0x8a>
 800b136:	6863      	ldr	r3, [r4, #4]
 800b138:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	d142      	bne.n	800b1c6 <_printf_float+0x172>
 800b140:	2306      	movs	r3, #6
 800b142:	6063      	str	r3, [r4, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	9206      	str	r2, [sp, #24]
 800b148:	aa0e      	add	r2, sp, #56	; 0x38
 800b14a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b14e:	aa0d      	add	r2, sp, #52	; 0x34
 800b150:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b154:	9203      	str	r2, [sp, #12]
 800b156:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b15a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b15e:	6023      	str	r3, [r4, #0]
 800b160:	6863      	ldr	r3, [r4, #4]
 800b162:	4652      	mov	r2, sl
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4628      	mov	r0, r5
 800b168:	4643      	mov	r3, r8
 800b16a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b16c:	f7ff fed6 	bl	800af1c <__cvt>
 800b170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b172:	4680      	mov	r8, r0
 800b174:	2947      	cmp	r1, #71	; 0x47
 800b176:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b178:	d108      	bne.n	800b18c <_printf_float+0x138>
 800b17a:	1cc8      	adds	r0, r1, #3
 800b17c:	db02      	blt.n	800b184 <_printf_float+0x130>
 800b17e:	6863      	ldr	r3, [r4, #4]
 800b180:	4299      	cmp	r1, r3
 800b182:	dd40      	ble.n	800b206 <_printf_float+0x1b2>
 800b184:	f1a9 0902 	sub.w	r9, r9, #2
 800b188:	fa5f f989 	uxtb.w	r9, r9
 800b18c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b190:	d81f      	bhi.n	800b1d2 <_printf_float+0x17e>
 800b192:	464a      	mov	r2, r9
 800b194:	3901      	subs	r1, #1
 800b196:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b19a:	910d      	str	r1, [sp, #52]	; 0x34
 800b19c:	f7ff ff1d 	bl	800afda <__exponent>
 800b1a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1a2:	4682      	mov	sl, r0
 800b1a4:	1813      	adds	r3, r2, r0
 800b1a6:	2a01      	cmp	r2, #1
 800b1a8:	6123      	str	r3, [r4, #16]
 800b1aa:	dc02      	bgt.n	800b1b2 <_printf_float+0x15e>
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	07d2      	lsls	r2, r2, #31
 800b1b0:	d501      	bpl.n	800b1b6 <_printf_float+0x162>
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	6123      	str	r3, [r4, #16]
 800b1b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d09b      	beq.n	800b0f6 <_printf_float+0xa2>
 800b1be:	232d      	movs	r3, #45	; 0x2d
 800b1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1c4:	e797      	b.n	800b0f6 <_printf_float+0xa2>
 800b1c6:	2947      	cmp	r1, #71	; 0x47
 800b1c8:	d1bc      	bne.n	800b144 <_printf_float+0xf0>
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1ba      	bne.n	800b144 <_printf_float+0xf0>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e7b7      	b.n	800b142 <_printf_float+0xee>
 800b1d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b1d6:	d118      	bne.n	800b20a <_printf_float+0x1b6>
 800b1d8:	2900      	cmp	r1, #0
 800b1da:	6863      	ldr	r3, [r4, #4]
 800b1dc:	dd0b      	ble.n	800b1f6 <_printf_float+0x1a2>
 800b1de:	6121      	str	r1, [r4, #16]
 800b1e0:	b913      	cbnz	r3, 800b1e8 <_printf_float+0x194>
 800b1e2:	6822      	ldr	r2, [r4, #0]
 800b1e4:	07d0      	lsls	r0, r2, #31
 800b1e6:	d502      	bpl.n	800b1ee <_printf_float+0x19a>
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	440b      	add	r3, r1
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	f04f 0a00 	mov.w	sl, #0
 800b1f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1f4:	e7df      	b.n	800b1b6 <_printf_float+0x162>
 800b1f6:	b913      	cbnz	r3, 800b1fe <_printf_float+0x1aa>
 800b1f8:	6822      	ldr	r2, [r4, #0]
 800b1fa:	07d2      	lsls	r2, r2, #31
 800b1fc:	d501      	bpl.n	800b202 <_printf_float+0x1ae>
 800b1fe:	3302      	adds	r3, #2
 800b200:	e7f4      	b.n	800b1ec <_printf_float+0x198>
 800b202:	2301      	movs	r3, #1
 800b204:	e7f2      	b.n	800b1ec <_printf_float+0x198>
 800b206:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b20a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b20c:	4299      	cmp	r1, r3
 800b20e:	db05      	blt.n	800b21c <_printf_float+0x1c8>
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	6121      	str	r1, [r4, #16]
 800b214:	07d8      	lsls	r0, r3, #31
 800b216:	d5ea      	bpl.n	800b1ee <_printf_float+0x19a>
 800b218:	1c4b      	adds	r3, r1, #1
 800b21a:	e7e7      	b.n	800b1ec <_printf_float+0x198>
 800b21c:	2900      	cmp	r1, #0
 800b21e:	bfcc      	ite	gt
 800b220:	2201      	movgt	r2, #1
 800b222:	f1c1 0202 	rsble	r2, r1, #2
 800b226:	4413      	add	r3, r2
 800b228:	e7e0      	b.n	800b1ec <_printf_float+0x198>
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	055a      	lsls	r2, r3, #21
 800b22e:	d407      	bmi.n	800b240 <_printf_float+0x1ec>
 800b230:	6923      	ldr	r3, [r4, #16]
 800b232:	4642      	mov	r2, r8
 800b234:	4631      	mov	r1, r6
 800b236:	4628      	mov	r0, r5
 800b238:	47b8      	blx	r7
 800b23a:	3001      	adds	r0, #1
 800b23c:	d12b      	bne.n	800b296 <_printf_float+0x242>
 800b23e:	e764      	b.n	800b10a <_printf_float+0xb6>
 800b240:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b244:	f240 80dd 	bls.w	800b402 <_printf_float+0x3ae>
 800b248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b24c:	2200      	movs	r2, #0
 800b24e:	2300      	movs	r3, #0
 800b250:	f7f5 fbaa 	bl	80009a8 <__aeabi_dcmpeq>
 800b254:	2800      	cmp	r0, #0
 800b256:	d033      	beq.n	800b2c0 <_printf_float+0x26c>
 800b258:	2301      	movs	r3, #1
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	4a35      	ldr	r2, [pc, #212]	; (800b334 <_printf_float+0x2e0>)
 800b260:	47b8      	blx	r7
 800b262:	3001      	adds	r0, #1
 800b264:	f43f af51 	beq.w	800b10a <_printf_float+0xb6>
 800b268:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b26c:	429a      	cmp	r2, r3
 800b26e:	db02      	blt.n	800b276 <_printf_float+0x222>
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	07d8      	lsls	r0, r3, #31
 800b274:	d50f      	bpl.n	800b296 <_printf_float+0x242>
 800b276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b27a:	4631      	mov	r1, r6
 800b27c:	4628      	mov	r0, r5
 800b27e:	47b8      	blx	r7
 800b280:	3001      	adds	r0, #1
 800b282:	f43f af42 	beq.w	800b10a <_printf_float+0xb6>
 800b286:	f04f 0800 	mov.w	r8, #0
 800b28a:	f104 091a 	add.w	r9, r4, #26
 800b28e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b290:	3b01      	subs	r3, #1
 800b292:	4543      	cmp	r3, r8
 800b294:	dc09      	bgt.n	800b2aa <_printf_float+0x256>
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	079b      	lsls	r3, r3, #30
 800b29a:	f100 8104 	bmi.w	800b4a6 <_printf_float+0x452>
 800b29e:	68e0      	ldr	r0, [r4, #12]
 800b2a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2a2:	4298      	cmp	r0, r3
 800b2a4:	bfb8      	it	lt
 800b2a6:	4618      	movlt	r0, r3
 800b2a8:	e731      	b.n	800b10e <_printf_float+0xba>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	464a      	mov	r2, r9
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	47b8      	blx	r7
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	f43f af28 	beq.w	800b10a <_printf_float+0xb6>
 800b2ba:	f108 0801 	add.w	r8, r8, #1
 800b2be:	e7e6      	b.n	800b28e <_printf_float+0x23a>
 800b2c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dc38      	bgt.n	800b338 <_printf_float+0x2e4>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	4a19      	ldr	r2, [pc, #100]	; (800b334 <_printf_float+0x2e0>)
 800b2ce:	47b8      	blx	r7
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	f43f af1a 	beq.w	800b10a <_printf_float+0xb6>
 800b2d6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	d102      	bne.n	800b2e4 <_printf_float+0x290>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	07d9      	lsls	r1, r3, #31
 800b2e2:	d5d8      	bpl.n	800b296 <_printf_float+0x242>
 800b2e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	47b8      	blx	r7
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	f43f af0b 	beq.w	800b10a <_printf_float+0xb6>
 800b2f4:	f04f 0900 	mov.w	r9, #0
 800b2f8:	f104 0a1a 	add.w	sl, r4, #26
 800b2fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2fe:	425b      	negs	r3, r3
 800b300:	454b      	cmp	r3, r9
 800b302:	dc01      	bgt.n	800b308 <_printf_float+0x2b4>
 800b304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b306:	e794      	b.n	800b232 <_printf_float+0x1de>
 800b308:	2301      	movs	r3, #1
 800b30a:	4652      	mov	r2, sl
 800b30c:	4631      	mov	r1, r6
 800b30e:	4628      	mov	r0, r5
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	f43f aef9 	beq.w	800b10a <_printf_float+0xb6>
 800b318:	f109 0901 	add.w	r9, r9, #1
 800b31c:	e7ee      	b.n	800b2fc <_printf_float+0x2a8>
 800b31e:	bf00      	nop
 800b320:	7fefffff 	.word	0x7fefffff
 800b324:	0800e36e 	.word	0x0800e36e
 800b328:	0800e372 	.word	0x0800e372
 800b32c:	0800e376 	.word	0x0800e376
 800b330:	0800e37a 	.word	0x0800e37a
 800b334:	0800e37e 	.word	0x0800e37e
 800b338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b33a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b33c:	429a      	cmp	r2, r3
 800b33e:	bfa8      	it	ge
 800b340:	461a      	movge	r2, r3
 800b342:	2a00      	cmp	r2, #0
 800b344:	4691      	mov	r9, r2
 800b346:	dc37      	bgt.n	800b3b8 <_printf_float+0x364>
 800b348:	f04f 0b00 	mov.w	fp, #0
 800b34c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b350:	f104 021a 	add.w	r2, r4, #26
 800b354:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b358:	ebaa 0309 	sub.w	r3, sl, r9
 800b35c:	455b      	cmp	r3, fp
 800b35e:	dc33      	bgt.n	800b3c8 <_printf_float+0x374>
 800b360:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b364:	429a      	cmp	r2, r3
 800b366:	db3b      	blt.n	800b3e0 <_printf_float+0x38c>
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	07da      	lsls	r2, r3, #31
 800b36c:	d438      	bmi.n	800b3e0 <_printf_float+0x38c>
 800b36e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b372:	eba2 0903 	sub.w	r9, r2, r3
 800b376:	eba2 020a 	sub.w	r2, r2, sl
 800b37a:	4591      	cmp	r9, r2
 800b37c:	bfa8      	it	ge
 800b37e:	4691      	movge	r9, r2
 800b380:	f1b9 0f00 	cmp.w	r9, #0
 800b384:	dc34      	bgt.n	800b3f0 <_printf_float+0x39c>
 800b386:	f04f 0800 	mov.w	r8, #0
 800b38a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b38e:	f104 0a1a 	add.w	sl, r4, #26
 800b392:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b396:	1a9b      	subs	r3, r3, r2
 800b398:	eba3 0309 	sub.w	r3, r3, r9
 800b39c:	4543      	cmp	r3, r8
 800b39e:	f77f af7a 	ble.w	800b296 <_printf_float+0x242>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4652      	mov	r2, sl
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	47b8      	blx	r7
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	f43f aeac 	beq.w	800b10a <_printf_float+0xb6>
 800b3b2:	f108 0801 	add.w	r8, r8, #1
 800b3b6:	e7ec      	b.n	800b392 <_printf_float+0x33e>
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4642      	mov	r2, r8
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	d1c0      	bne.n	800b348 <_printf_float+0x2f4>
 800b3c6:	e6a0      	b.n	800b10a <_printf_float+0xb6>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	920b      	str	r2, [sp, #44]	; 0x2c
 800b3d0:	47b8      	blx	r7
 800b3d2:	3001      	adds	r0, #1
 800b3d4:	f43f ae99 	beq.w	800b10a <_printf_float+0xb6>
 800b3d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3da:	f10b 0b01 	add.w	fp, fp, #1
 800b3de:	e7b9      	b.n	800b354 <_printf_float+0x300>
 800b3e0:	4631      	mov	r1, r6
 800b3e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	47b8      	blx	r7
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	d1bf      	bne.n	800b36e <_printf_float+0x31a>
 800b3ee:	e68c      	b.n	800b10a <_printf_float+0xb6>
 800b3f0:	464b      	mov	r3, r9
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	eb08 020a 	add.w	r2, r8, sl
 800b3fa:	47b8      	blx	r7
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	d1c2      	bne.n	800b386 <_printf_float+0x332>
 800b400:	e683      	b.n	800b10a <_printf_float+0xb6>
 800b402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b404:	2a01      	cmp	r2, #1
 800b406:	dc01      	bgt.n	800b40c <_printf_float+0x3b8>
 800b408:	07db      	lsls	r3, r3, #31
 800b40a:	d539      	bpl.n	800b480 <_printf_float+0x42c>
 800b40c:	2301      	movs	r3, #1
 800b40e:	4642      	mov	r2, r8
 800b410:	4631      	mov	r1, r6
 800b412:	4628      	mov	r0, r5
 800b414:	47b8      	blx	r7
 800b416:	3001      	adds	r0, #1
 800b418:	f43f ae77 	beq.w	800b10a <_printf_float+0xb6>
 800b41c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b420:	4631      	mov	r1, r6
 800b422:	4628      	mov	r0, r5
 800b424:	47b8      	blx	r7
 800b426:	3001      	adds	r0, #1
 800b428:	f43f ae6f 	beq.w	800b10a <_printf_float+0xb6>
 800b42c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b430:	2200      	movs	r2, #0
 800b432:	2300      	movs	r3, #0
 800b434:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b438:	f7f5 fab6 	bl	80009a8 <__aeabi_dcmpeq>
 800b43c:	b9d8      	cbnz	r0, 800b476 <_printf_float+0x422>
 800b43e:	f109 33ff 	add.w	r3, r9, #4294967295
 800b442:	f108 0201 	add.w	r2, r8, #1
 800b446:	4631      	mov	r1, r6
 800b448:	4628      	mov	r0, r5
 800b44a:	47b8      	blx	r7
 800b44c:	3001      	adds	r0, #1
 800b44e:	d10e      	bne.n	800b46e <_printf_float+0x41a>
 800b450:	e65b      	b.n	800b10a <_printf_float+0xb6>
 800b452:	2301      	movs	r3, #1
 800b454:	464a      	mov	r2, r9
 800b456:	4631      	mov	r1, r6
 800b458:	4628      	mov	r0, r5
 800b45a:	47b8      	blx	r7
 800b45c:	3001      	adds	r0, #1
 800b45e:	f43f ae54 	beq.w	800b10a <_printf_float+0xb6>
 800b462:	f108 0801 	add.w	r8, r8, #1
 800b466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b468:	3b01      	subs	r3, #1
 800b46a:	4543      	cmp	r3, r8
 800b46c:	dcf1      	bgt.n	800b452 <_printf_float+0x3fe>
 800b46e:	4653      	mov	r3, sl
 800b470:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b474:	e6de      	b.n	800b234 <_printf_float+0x1e0>
 800b476:	f04f 0800 	mov.w	r8, #0
 800b47a:	f104 091a 	add.w	r9, r4, #26
 800b47e:	e7f2      	b.n	800b466 <_printf_float+0x412>
 800b480:	2301      	movs	r3, #1
 800b482:	4642      	mov	r2, r8
 800b484:	e7df      	b.n	800b446 <_printf_float+0x3f2>
 800b486:	2301      	movs	r3, #1
 800b488:	464a      	mov	r2, r9
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	f43f ae3a 	beq.w	800b10a <_printf_float+0xb6>
 800b496:	f108 0801 	add.w	r8, r8, #1
 800b49a:	68e3      	ldr	r3, [r4, #12]
 800b49c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b49e:	1a5b      	subs	r3, r3, r1
 800b4a0:	4543      	cmp	r3, r8
 800b4a2:	dcf0      	bgt.n	800b486 <_printf_float+0x432>
 800b4a4:	e6fb      	b.n	800b29e <_printf_float+0x24a>
 800b4a6:	f04f 0800 	mov.w	r8, #0
 800b4aa:	f104 0919 	add.w	r9, r4, #25
 800b4ae:	e7f4      	b.n	800b49a <_printf_float+0x446>

0800b4b0 <_printf_common>:
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b4:	4616      	mov	r6, r2
 800b4b6:	4699      	mov	r9, r3
 800b4b8:	688a      	ldr	r2, [r1, #8]
 800b4ba:	690b      	ldr	r3, [r1, #16]
 800b4bc:	4607      	mov	r7, r0
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	bfb8      	it	lt
 800b4c2:	4613      	movlt	r3, r2
 800b4c4:	6033      	str	r3, [r6, #0]
 800b4c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4d0:	b10a      	cbz	r2, 800b4d6 <_printf_common+0x26>
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	6033      	str	r3, [r6, #0]
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	0699      	lsls	r1, r3, #26
 800b4da:	bf42      	ittt	mi
 800b4dc:	6833      	ldrmi	r3, [r6, #0]
 800b4de:	3302      	addmi	r3, #2
 800b4e0:	6033      	strmi	r3, [r6, #0]
 800b4e2:	6825      	ldr	r5, [r4, #0]
 800b4e4:	f015 0506 	ands.w	r5, r5, #6
 800b4e8:	d106      	bne.n	800b4f8 <_printf_common+0x48>
 800b4ea:	f104 0a19 	add.w	sl, r4, #25
 800b4ee:	68e3      	ldr	r3, [r4, #12]
 800b4f0:	6832      	ldr	r2, [r6, #0]
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	42ab      	cmp	r3, r5
 800b4f6:	dc2b      	bgt.n	800b550 <_printf_common+0xa0>
 800b4f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4fc:	1e13      	subs	r3, r2, #0
 800b4fe:	6822      	ldr	r2, [r4, #0]
 800b500:	bf18      	it	ne
 800b502:	2301      	movne	r3, #1
 800b504:	0692      	lsls	r2, r2, #26
 800b506:	d430      	bmi.n	800b56a <_printf_common+0xba>
 800b508:	4649      	mov	r1, r9
 800b50a:	4638      	mov	r0, r7
 800b50c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b510:	47c0      	blx	r8
 800b512:	3001      	adds	r0, #1
 800b514:	d023      	beq.n	800b55e <_printf_common+0xae>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	6922      	ldr	r2, [r4, #16]
 800b51a:	f003 0306 	and.w	r3, r3, #6
 800b51e:	2b04      	cmp	r3, #4
 800b520:	bf14      	ite	ne
 800b522:	2500      	movne	r5, #0
 800b524:	6833      	ldreq	r3, [r6, #0]
 800b526:	f04f 0600 	mov.w	r6, #0
 800b52a:	bf08      	it	eq
 800b52c:	68e5      	ldreq	r5, [r4, #12]
 800b52e:	f104 041a 	add.w	r4, r4, #26
 800b532:	bf08      	it	eq
 800b534:	1aed      	subeq	r5, r5, r3
 800b536:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b53a:	bf08      	it	eq
 800b53c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b540:	4293      	cmp	r3, r2
 800b542:	bfc4      	itt	gt
 800b544:	1a9b      	subgt	r3, r3, r2
 800b546:	18ed      	addgt	r5, r5, r3
 800b548:	42b5      	cmp	r5, r6
 800b54a:	d11a      	bne.n	800b582 <_printf_common+0xd2>
 800b54c:	2000      	movs	r0, #0
 800b54e:	e008      	b.n	800b562 <_printf_common+0xb2>
 800b550:	2301      	movs	r3, #1
 800b552:	4652      	mov	r2, sl
 800b554:	4649      	mov	r1, r9
 800b556:	4638      	mov	r0, r7
 800b558:	47c0      	blx	r8
 800b55a:	3001      	adds	r0, #1
 800b55c:	d103      	bne.n	800b566 <_printf_common+0xb6>
 800b55e:	f04f 30ff 	mov.w	r0, #4294967295
 800b562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b566:	3501      	adds	r5, #1
 800b568:	e7c1      	b.n	800b4ee <_printf_common+0x3e>
 800b56a:	2030      	movs	r0, #48	; 0x30
 800b56c:	18e1      	adds	r1, r4, r3
 800b56e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b578:	4422      	add	r2, r4
 800b57a:	3302      	adds	r3, #2
 800b57c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b580:	e7c2      	b.n	800b508 <_printf_common+0x58>
 800b582:	2301      	movs	r3, #1
 800b584:	4622      	mov	r2, r4
 800b586:	4649      	mov	r1, r9
 800b588:	4638      	mov	r0, r7
 800b58a:	47c0      	blx	r8
 800b58c:	3001      	adds	r0, #1
 800b58e:	d0e6      	beq.n	800b55e <_printf_common+0xae>
 800b590:	3601      	adds	r6, #1
 800b592:	e7d9      	b.n	800b548 <_printf_common+0x98>

0800b594 <_printf_i>:
 800b594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b598:	7e0f      	ldrb	r7, [r1, #24]
 800b59a:	4691      	mov	r9, r2
 800b59c:	2f78      	cmp	r7, #120	; 0x78
 800b59e:	4680      	mov	r8, r0
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	469a      	mov	sl, r3
 800b5a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5aa:	d807      	bhi.n	800b5bc <_printf_i+0x28>
 800b5ac:	2f62      	cmp	r7, #98	; 0x62
 800b5ae:	d80a      	bhi.n	800b5c6 <_printf_i+0x32>
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	f000 80d5 	beq.w	800b760 <_printf_i+0x1cc>
 800b5b6:	2f58      	cmp	r7, #88	; 0x58
 800b5b8:	f000 80c1 	beq.w	800b73e <_printf_i+0x1aa>
 800b5bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5c4:	e03a      	b.n	800b63c <_printf_i+0xa8>
 800b5c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5ca:	2b15      	cmp	r3, #21
 800b5cc:	d8f6      	bhi.n	800b5bc <_printf_i+0x28>
 800b5ce:	a101      	add	r1, pc, #4	; (adr r1, 800b5d4 <_printf_i+0x40>)
 800b5d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5d4:	0800b62d 	.word	0x0800b62d
 800b5d8:	0800b641 	.word	0x0800b641
 800b5dc:	0800b5bd 	.word	0x0800b5bd
 800b5e0:	0800b5bd 	.word	0x0800b5bd
 800b5e4:	0800b5bd 	.word	0x0800b5bd
 800b5e8:	0800b5bd 	.word	0x0800b5bd
 800b5ec:	0800b641 	.word	0x0800b641
 800b5f0:	0800b5bd 	.word	0x0800b5bd
 800b5f4:	0800b5bd 	.word	0x0800b5bd
 800b5f8:	0800b5bd 	.word	0x0800b5bd
 800b5fc:	0800b5bd 	.word	0x0800b5bd
 800b600:	0800b747 	.word	0x0800b747
 800b604:	0800b66d 	.word	0x0800b66d
 800b608:	0800b701 	.word	0x0800b701
 800b60c:	0800b5bd 	.word	0x0800b5bd
 800b610:	0800b5bd 	.word	0x0800b5bd
 800b614:	0800b769 	.word	0x0800b769
 800b618:	0800b5bd 	.word	0x0800b5bd
 800b61c:	0800b66d 	.word	0x0800b66d
 800b620:	0800b5bd 	.word	0x0800b5bd
 800b624:	0800b5bd 	.word	0x0800b5bd
 800b628:	0800b709 	.word	0x0800b709
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	1d1a      	adds	r2, r3, #4
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	602a      	str	r2, [r5, #0]
 800b634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b63c:	2301      	movs	r3, #1
 800b63e:	e0a0      	b.n	800b782 <_printf_i+0x1ee>
 800b640:	6820      	ldr	r0, [r4, #0]
 800b642:	682b      	ldr	r3, [r5, #0]
 800b644:	0607      	lsls	r7, r0, #24
 800b646:	f103 0104 	add.w	r1, r3, #4
 800b64a:	6029      	str	r1, [r5, #0]
 800b64c:	d501      	bpl.n	800b652 <_printf_i+0xbe>
 800b64e:	681e      	ldr	r6, [r3, #0]
 800b650:	e003      	b.n	800b65a <_printf_i+0xc6>
 800b652:	0646      	lsls	r6, r0, #25
 800b654:	d5fb      	bpl.n	800b64e <_printf_i+0xba>
 800b656:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b65a:	2e00      	cmp	r6, #0
 800b65c:	da03      	bge.n	800b666 <_printf_i+0xd2>
 800b65e:	232d      	movs	r3, #45	; 0x2d
 800b660:	4276      	negs	r6, r6
 800b662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b666:	230a      	movs	r3, #10
 800b668:	4859      	ldr	r0, [pc, #356]	; (800b7d0 <_printf_i+0x23c>)
 800b66a:	e012      	b.n	800b692 <_printf_i+0xfe>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	6820      	ldr	r0, [r4, #0]
 800b670:	1d19      	adds	r1, r3, #4
 800b672:	6029      	str	r1, [r5, #0]
 800b674:	0605      	lsls	r5, r0, #24
 800b676:	d501      	bpl.n	800b67c <_printf_i+0xe8>
 800b678:	681e      	ldr	r6, [r3, #0]
 800b67a:	e002      	b.n	800b682 <_printf_i+0xee>
 800b67c:	0641      	lsls	r1, r0, #25
 800b67e:	d5fb      	bpl.n	800b678 <_printf_i+0xe4>
 800b680:	881e      	ldrh	r6, [r3, #0]
 800b682:	2f6f      	cmp	r7, #111	; 0x6f
 800b684:	bf0c      	ite	eq
 800b686:	2308      	moveq	r3, #8
 800b688:	230a      	movne	r3, #10
 800b68a:	4851      	ldr	r0, [pc, #324]	; (800b7d0 <_printf_i+0x23c>)
 800b68c:	2100      	movs	r1, #0
 800b68e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b692:	6865      	ldr	r5, [r4, #4]
 800b694:	2d00      	cmp	r5, #0
 800b696:	bfa8      	it	ge
 800b698:	6821      	ldrge	r1, [r4, #0]
 800b69a:	60a5      	str	r5, [r4, #8]
 800b69c:	bfa4      	itt	ge
 800b69e:	f021 0104 	bicge.w	r1, r1, #4
 800b6a2:	6021      	strge	r1, [r4, #0]
 800b6a4:	b90e      	cbnz	r6, 800b6aa <_printf_i+0x116>
 800b6a6:	2d00      	cmp	r5, #0
 800b6a8:	d04b      	beq.n	800b742 <_printf_i+0x1ae>
 800b6aa:	4615      	mov	r5, r2
 800b6ac:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6b0:	fb03 6711 	mls	r7, r3, r1, r6
 800b6b4:	5dc7      	ldrb	r7, [r0, r7]
 800b6b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6ba:	4637      	mov	r7, r6
 800b6bc:	42bb      	cmp	r3, r7
 800b6be:	460e      	mov	r6, r1
 800b6c0:	d9f4      	bls.n	800b6ac <_printf_i+0x118>
 800b6c2:	2b08      	cmp	r3, #8
 800b6c4:	d10b      	bne.n	800b6de <_printf_i+0x14a>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	07de      	lsls	r6, r3, #31
 800b6ca:	d508      	bpl.n	800b6de <_printf_i+0x14a>
 800b6cc:	6923      	ldr	r3, [r4, #16]
 800b6ce:	6861      	ldr	r1, [r4, #4]
 800b6d0:	4299      	cmp	r1, r3
 800b6d2:	bfde      	ittt	le
 800b6d4:	2330      	movle	r3, #48	; 0x30
 800b6d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6da:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6de:	1b52      	subs	r2, r2, r5
 800b6e0:	6122      	str	r2, [r4, #16]
 800b6e2:	464b      	mov	r3, r9
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	f8cd a000 	str.w	sl, [sp]
 800b6ec:	aa03      	add	r2, sp, #12
 800b6ee:	f7ff fedf 	bl	800b4b0 <_printf_common>
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	d14a      	bne.n	800b78c <_printf_i+0x1f8>
 800b6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fa:	b004      	add	sp, #16
 800b6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	f043 0320 	orr.w	r3, r3, #32
 800b706:	6023      	str	r3, [r4, #0]
 800b708:	2778      	movs	r7, #120	; 0x78
 800b70a:	4832      	ldr	r0, [pc, #200]	; (800b7d4 <_printf_i+0x240>)
 800b70c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	6829      	ldr	r1, [r5, #0]
 800b714:	061f      	lsls	r7, r3, #24
 800b716:	f851 6b04 	ldr.w	r6, [r1], #4
 800b71a:	d402      	bmi.n	800b722 <_printf_i+0x18e>
 800b71c:	065f      	lsls	r7, r3, #25
 800b71e:	bf48      	it	mi
 800b720:	b2b6      	uxthmi	r6, r6
 800b722:	07df      	lsls	r7, r3, #31
 800b724:	bf48      	it	mi
 800b726:	f043 0320 	orrmi.w	r3, r3, #32
 800b72a:	6029      	str	r1, [r5, #0]
 800b72c:	bf48      	it	mi
 800b72e:	6023      	strmi	r3, [r4, #0]
 800b730:	b91e      	cbnz	r6, 800b73a <_printf_i+0x1a6>
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	f023 0320 	bic.w	r3, r3, #32
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	2310      	movs	r3, #16
 800b73c:	e7a6      	b.n	800b68c <_printf_i+0xf8>
 800b73e:	4824      	ldr	r0, [pc, #144]	; (800b7d0 <_printf_i+0x23c>)
 800b740:	e7e4      	b.n	800b70c <_printf_i+0x178>
 800b742:	4615      	mov	r5, r2
 800b744:	e7bd      	b.n	800b6c2 <_printf_i+0x12e>
 800b746:	682b      	ldr	r3, [r5, #0]
 800b748:	6826      	ldr	r6, [r4, #0]
 800b74a:	1d18      	adds	r0, r3, #4
 800b74c:	6961      	ldr	r1, [r4, #20]
 800b74e:	6028      	str	r0, [r5, #0]
 800b750:	0635      	lsls	r5, r6, #24
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	d501      	bpl.n	800b75a <_printf_i+0x1c6>
 800b756:	6019      	str	r1, [r3, #0]
 800b758:	e002      	b.n	800b760 <_printf_i+0x1cc>
 800b75a:	0670      	lsls	r0, r6, #25
 800b75c:	d5fb      	bpl.n	800b756 <_printf_i+0x1c2>
 800b75e:	8019      	strh	r1, [r3, #0]
 800b760:	2300      	movs	r3, #0
 800b762:	4615      	mov	r5, r2
 800b764:	6123      	str	r3, [r4, #16]
 800b766:	e7bc      	b.n	800b6e2 <_printf_i+0x14e>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	2100      	movs	r1, #0
 800b76c:	1d1a      	adds	r2, r3, #4
 800b76e:	602a      	str	r2, [r5, #0]
 800b770:	681d      	ldr	r5, [r3, #0]
 800b772:	6862      	ldr	r2, [r4, #4]
 800b774:	4628      	mov	r0, r5
 800b776:	f000 f9e8 	bl	800bb4a <memchr>
 800b77a:	b108      	cbz	r0, 800b780 <_printf_i+0x1ec>
 800b77c:	1b40      	subs	r0, r0, r5
 800b77e:	6060      	str	r0, [r4, #4]
 800b780:	6863      	ldr	r3, [r4, #4]
 800b782:	6123      	str	r3, [r4, #16]
 800b784:	2300      	movs	r3, #0
 800b786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b78a:	e7aa      	b.n	800b6e2 <_printf_i+0x14e>
 800b78c:	462a      	mov	r2, r5
 800b78e:	4649      	mov	r1, r9
 800b790:	4640      	mov	r0, r8
 800b792:	6923      	ldr	r3, [r4, #16]
 800b794:	47d0      	blx	sl
 800b796:	3001      	adds	r0, #1
 800b798:	d0ad      	beq.n	800b6f6 <_printf_i+0x162>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	079b      	lsls	r3, r3, #30
 800b79e:	d413      	bmi.n	800b7c8 <_printf_i+0x234>
 800b7a0:	68e0      	ldr	r0, [r4, #12]
 800b7a2:	9b03      	ldr	r3, [sp, #12]
 800b7a4:	4298      	cmp	r0, r3
 800b7a6:	bfb8      	it	lt
 800b7a8:	4618      	movlt	r0, r3
 800b7aa:	e7a6      	b.n	800b6fa <_printf_i+0x166>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	4632      	mov	r2, r6
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	47d0      	blx	sl
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	d09d      	beq.n	800b6f6 <_printf_i+0x162>
 800b7ba:	3501      	adds	r5, #1
 800b7bc:	68e3      	ldr	r3, [r4, #12]
 800b7be:	9903      	ldr	r1, [sp, #12]
 800b7c0:	1a5b      	subs	r3, r3, r1
 800b7c2:	42ab      	cmp	r3, r5
 800b7c4:	dcf2      	bgt.n	800b7ac <_printf_i+0x218>
 800b7c6:	e7eb      	b.n	800b7a0 <_printf_i+0x20c>
 800b7c8:	2500      	movs	r5, #0
 800b7ca:	f104 0619 	add.w	r6, r4, #25
 800b7ce:	e7f5      	b.n	800b7bc <_printf_i+0x228>
 800b7d0:	0800e380 	.word	0x0800e380
 800b7d4:	0800e391 	.word	0x0800e391

0800b7d8 <std>:
 800b7d8:	2300      	movs	r3, #0
 800b7da:	b510      	push	{r4, lr}
 800b7dc:	4604      	mov	r4, r0
 800b7de:	e9c0 3300 	strd	r3, r3, [r0]
 800b7e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7e6:	6083      	str	r3, [r0, #8]
 800b7e8:	8181      	strh	r1, [r0, #12]
 800b7ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b7ec:	81c2      	strh	r2, [r0, #14]
 800b7ee:	6183      	str	r3, [r0, #24]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	2208      	movs	r2, #8
 800b7f4:	305c      	adds	r0, #92	; 0x5c
 800b7f6:	f000 f928 	bl	800ba4a <memset>
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	; (800b830 <std+0x58>)
 800b7fc:	6224      	str	r4, [r4, #32]
 800b7fe:	6263      	str	r3, [r4, #36]	; 0x24
 800b800:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <std+0x5c>)
 800b802:	62a3      	str	r3, [r4, #40]	; 0x28
 800b804:	4b0c      	ldr	r3, [pc, #48]	; (800b838 <std+0x60>)
 800b806:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b808:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <std+0x64>)
 800b80a:	6323      	str	r3, [r4, #48]	; 0x30
 800b80c:	4b0c      	ldr	r3, [pc, #48]	; (800b840 <std+0x68>)
 800b80e:	429c      	cmp	r4, r3
 800b810:	d006      	beq.n	800b820 <std+0x48>
 800b812:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b816:	4294      	cmp	r4, r2
 800b818:	d002      	beq.n	800b820 <std+0x48>
 800b81a:	33d0      	adds	r3, #208	; 0xd0
 800b81c:	429c      	cmp	r4, r3
 800b81e:	d105      	bne.n	800b82c <std+0x54>
 800b820:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b828:	f000 b98c 	b.w	800bb44 <__retarget_lock_init_recursive>
 800b82c:	bd10      	pop	{r4, pc}
 800b82e:	bf00      	nop
 800b830:	0800b9c5 	.word	0x0800b9c5
 800b834:	0800b9e7 	.word	0x0800b9e7
 800b838:	0800ba1f 	.word	0x0800ba1f
 800b83c:	0800ba43 	.word	0x0800ba43
 800b840:	20001720 	.word	0x20001720

0800b844 <stdio_exit_handler>:
 800b844:	4a02      	ldr	r2, [pc, #8]	; (800b850 <stdio_exit_handler+0xc>)
 800b846:	4903      	ldr	r1, [pc, #12]	; (800b854 <stdio_exit_handler+0x10>)
 800b848:	4803      	ldr	r0, [pc, #12]	; (800b858 <stdio_exit_handler+0x14>)
 800b84a:	f000 b869 	b.w	800b920 <_fwalk_sglue>
 800b84e:	bf00      	nop
 800b850:	2000020c 	.word	0x2000020c
 800b854:	0800d4dd 	.word	0x0800d4dd
 800b858:	20000218 	.word	0x20000218

0800b85c <cleanup_stdio>:
 800b85c:	6841      	ldr	r1, [r0, #4]
 800b85e:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <cleanup_stdio+0x34>)
 800b860:	b510      	push	{r4, lr}
 800b862:	4299      	cmp	r1, r3
 800b864:	4604      	mov	r4, r0
 800b866:	d001      	beq.n	800b86c <cleanup_stdio+0x10>
 800b868:	f001 fe38 	bl	800d4dc <_fflush_r>
 800b86c:	68a1      	ldr	r1, [r4, #8]
 800b86e:	4b09      	ldr	r3, [pc, #36]	; (800b894 <cleanup_stdio+0x38>)
 800b870:	4299      	cmp	r1, r3
 800b872:	d002      	beq.n	800b87a <cleanup_stdio+0x1e>
 800b874:	4620      	mov	r0, r4
 800b876:	f001 fe31 	bl	800d4dc <_fflush_r>
 800b87a:	68e1      	ldr	r1, [r4, #12]
 800b87c:	4b06      	ldr	r3, [pc, #24]	; (800b898 <cleanup_stdio+0x3c>)
 800b87e:	4299      	cmp	r1, r3
 800b880:	d004      	beq.n	800b88c <cleanup_stdio+0x30>
 800b882:	4620      	mov	r0, r4
 800b884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b888:	f001 be28 	b.w	800d4dc <_fflush_r>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	bf00      	nop
 800b890:	20001720 	.word	0x20001720
 800b894:	20001788 	.word	0x20001788
 800b898:	200017f0 	.word	0x200017f0

0800b89c <global_stdio_init.part.0>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	4b0b      	ldr	r3, [pc, #44]	; (800b8cc <global_stdio_init.part.0+0x30>)
 800b8a0:	4c0b      	ldr	r4, [pc, #44]	; (800b8d0 <global_stdio_init.part.0+0x34>)
 800b8a2:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <global_stdio_init.part.0+0x38>)
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	601a      	str	r2, [r3, #0]
 800b8a8:	2104      	movs	r1, #4
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f7ff ff94 	bl	800b7d8 <std>
 800b8b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	2109      	movs	r1, #9
 800b8b8:	f7ff ff8e 	bl	800b7d8 <std>
 800b8bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c6:	2112      	movs	r1, #18
 800b8c8:	f7ff bf86 	b.w	800b7d8 <std>
 800b8cc:	20001858 	.word	0x20001858
 800b8d0:	20001720 	.word	0x20001720
 800b8d4:	0800b845 	.word	0x0800b845

0800b8d8 <__sfp_lock_acquire>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__sfp_lock_acquire+0x8>)
 800b8da:	f000 b934 	b.w	800bb46 <__retarget_lock_acquire_recursive>
 800b8de:	bf00      	nop
 800b8e0:	20001861 	.word	0x20001861

0800b8e4 <__sfp_lock_release>:
 800b8e4:	4801      	ldr	r0, [pc, #4]	; (800b8ec <__sfp_lock_release+0x8>)
 800b8e6:	f000 b92f 	b.w	800bb48 <__retarget_lock_release_recursive>
 800b8ea:	bf00      	nop
 800b8ec:	20001861 	.word	0x20001861

0800b8f0 <__sinit>:
 800b8f0:	b510      	push	{r4, lr}
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	f7ff fff0 	bl	800b8d8 <__sfp_lock_acquire>
 800b8f8:	6a23      	ldr	r3, [r4, #32]
 800b8fa:	b11b      	cbz	r3, 800b904 <__sinit+0x14>
 800b8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b900:	f7ff bff0 	b.w	800b8e4 <__sfp_lock_release>
 800b904:	4b04      	ldr	r3, [pc, #16]	; (800b918 <__sinit+0x28>)
 800b906:	6223      	str	r3, [r4, #32]
 800b908:	4b04      	ldr	r3, [pc, #16]	; (800b91c <__sinit+0x2c>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1f5      	bne.n	800b8fc <__sinit+0xc>
 800b910:	f7ff ffc4 	bl	800b89c <global_stdio_init.part.0>
 800b914:	e7f2      	b.n	800b8fc <__sinit+0xc>
 800b916:	bf00      	nop
 800b918:	0800b85d 	.word	0x0800b85d
 800b91c:	20001858 	.word	0x20001858

0800b920 <_fwalk_sglue>:
 800b920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b924:	4607      	mov	r7, r0
 800b926:	4688      	mov	r8, r1
 800b928:	4614      	mov	r4, r2
 800b92a:	2600      	movs	r6, #0
 800b92c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b930:	f1b9 0901 	subs.w	r9, r9, #1
 800b934:	d505      	bpl.n	800b942 <_fwalk_sglue+0x22>
 800b936:	6824      	ldr	r4, [r4, #0]
 800b938:	2c00      	cmp	r4, #0
 800b93a:	d1f7      	bne.n	800b92c <_fwalk_sglue+0xc>
 800b93c:	4630      	mov	r0, r6
 800b93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b942:	89ab      	ldrh	r3, [r5, #12]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d907      	bls.n	800b958 <_fwalk_sglue+0x38>
 800b948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b94c:	3301      	adds	r3, #1
 800b94e:	d003      	beq.n	800b958 <_fwalk_sglue+0x38>
 800b950:	4629      	mov	r1, r5
 800b952:	4638      	mov	r0, r7
 800b954:	47c0      	blx	r8
 800b956:	4306      	orrs	r6, r0
 800b958:	3568      	adds	r5, #104	; 0x68
 800b95a:	e7e9      	b.n	800b930 <_fwalk_sglue+0x10>

0800b95c <sniprintf>:
 800b95c:	b40c      	push	{r2, r3}
 800b95e:	b530      	push	{r4, r5, lr}
 800b960:	4b17      	ldr	r3, [pc, #92]	; (800b9c0 <sniprintf+0x64>)
 800b962:	1e0c      	subs	r4, r1, #0
 800b964:	681d      	ldr	r5, [r3, #0]
 800b966:	b09d      	sub	sp, #116	; 0x74
 800b968:	da08      	bge.n	800b97c <sniprintf+0x20>
 800b96a:	238b      	movs	r3, #139	; 0x8b
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295
 800b970:	602b      	str	r3, [r5, #0]
 800b972:	b01d      	add	sp, #116	; 0x74
 800b974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b978:	b002      	add	sp, #8
 800b97a:	4770      	bx	lr
 800b97c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b980:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b984:	bf0c      	ite	eq
 800b986:	4623      	moveq	r3, r4
 800b988:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	9307      	str	r3, [sp, #28]
 800b990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b994:	9002      	str	r0, [sp, #8]
 800b996:	9006      	str	r0, [sp, #24]
 800b998:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b99c:	4628      	mov	r0, r5
 800b99e:	ab21      	add	r3, sp, #132	; 0x84
 800b9a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b9a2:	a902      	add	r1, sp, #8
 800b9a4:	9301      	str	r3, [sp, #4]
 800b9a6:	f001 fc19 	bl	800d1dc <_svfiprintf_r>
 800b9aa:	1c43      	adds	r3, r0, #1
 800b9ac:	bfbc      	itt	lt
 800b9ae:	238b      	movlt	r3, #139	; 0x8b
 800b9b0:	602b      	strlt	r3, [r5, #0]
 800b9b2:	2c00      	cmp	r4, #0
 800b9b4:	d0dd      	beq.n	800b972 <sniprintf+0x16>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	9b02      	ldr	r3, [sp, #8]
 800b9ba:	701a      	strb	r2, [r3, #0]
 800b9bc:	e7d9      	b.n	800b972 <sniprintf+0x16>
 800b9be:	bf00      	nop
 800b9c0:	20000264 	.word	0x20000264

0800b9c4 <__sread>:
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9cc:	f000 f86c 	bl	800baa8 <_read_r>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	bfab      	itete	ge
 800b9d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9d6:	89a3      	ldrhlt	r3, [r4, #12]
 800b9d8:	181b      	addge	r3, r3, r0
 800b9da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9de:	bfac      	ite	ge
 800b9e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9e2:	81a3      	strhlt	r3, [r4, #12]
 800b9e4:	bd10      	pop	{r4, pc}

0800b9e6 <__swrite>:
 800b9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ea:	461f      	mov	r7, r3
 800b9ec:	898b      	ldrh	r3, [r1, #12]
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	05db      	lsls	r3, r3, #23
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	4616      	mov	r6, r2
 800b9f6:	d505      	bpl.n	800ba04 <__swrite+0x1e>
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba00:	f000 f840 	bl	800ba84 <_lseek_r>
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	4632      	mov	r2, r6
 800ba08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba0c:	81a3      	strh	r3, [r4, #12]
 800ba0e:	4628      	mov	r0, r5
 800ba10:	463b      	mov	r3, r7
 800ba12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1a:	f000 b857 	b.w	800bacc <_write_r>

0800ba1e <__sseek>:
 800ba1e:	b510      	push	{r4, lr}
 800ba20:	460c      	mov	r4, r1
 800ba22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba26:	f000 f82d 	bl	800ba84 <_lseek_r>
 800ba2a:	1c43      	adds	r3, r0, #1
 800ba2c:	89a3      	ldrh	r3, [r4, #12]
 800ba2e:	bf15      	itete	ne
 800ba30:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba3a:	81a3      	strheq	r3, [r4, #12]
 800ba3c:	bf18      	it	ne
 800ba3e:	81a3      	strhne	r3, [r4, #12]
 800ba40:	bd10      	pop	{r4, pc}

0800ba42 <__sclose>:
 800ba42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba46:	f000 b80d 	b.w	800ba64 <_close_r>

0800ba4a <memset>:
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	4402      	add	r2, r0
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d100      	bne.n	800ba54 <memset+0xa>
 800ba52:	4770      	bx	lr
 800ba54:	f803 1b01 	strb.w	r1, [r3], #1
 800ba58:	e7f9      	b.n	800ba4e <memset+0x4>
	...

0800ba5c <_localeconv_r>:
 800ba5c:	4800      	ldr	r0, [pc, #0]	; (800ba60 <_localeconv_r+0x4>)
 800ba5e:	4770      	bx	lr
 800ba60:	20000358 	.word	0x20000358

0800ba64 <_close_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	2300      	movs	r3, #0
 800ba68:	4d05      	ldr	r5, [pc, #20]	; (800ba80 <_close_r+0x1c>)
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	4608      	mov	r0, r1
 800ba6e:	602b      	str	r3, [r5, #0]
 800ba70:	f7f6 f9ca 	bl	8001e08 <_close>
 800ba74:	1c43      	adds	r3, r0, #1
 800ba76:	d102      	bne.n	800ba7e <_close_r+0x1a>
 800ba78:	682b      	ldr	r3, [r5, #0]
 800ba7a:	b103      	cbz	r3, 800ba7e <_close_r+0x1a>
 800ba7c:	6023      	str	r3, [r4, #0]
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}
 800ba80:	2000185c 	.word	0x2000185c

0800ba84 <_lseek_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4604      	mov	r4, r0
 800ba88:	4608      	mov	r0, r1
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4d05      	ldr	r5, [pc, #20]	; (800baa4 <_lseek_r+0x20>)
 800ba90:	602a      	str	r2, [r5, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	f7f6 f9dc 	bl	8001e50 <_lseek>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_lseek_r+0x1e>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_lseek_r+0x1e>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	2000185c 	.word	0x2000185c

0800baa8 <_read_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4604      	mov	r4, r0
 800baac:	4608      	mov	r0, r1
 800baae:	4611      	mov	r1, r2
 800bab0:	2200      	movs	r2, #0
 800bab2:	4d05      	ldr	r5, [pc, #20]	; (800bac8 <_read_r+0x20>)
 800bab4:	602a      	str	r2, [r5, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	f7f6 f96d 	bl	8001d96 <_read>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_read_r+0x1e>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_read_r+0x1e>
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	2000185c 	.word	0x2000185c

0800bacc <_write_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4604      	mov	r4, r0
 800bad0:	4608      	mov	r0, r1
 800bad2:	4611      	mov	r1, r2
 800bad4:	2200      	movs	r2, #0
 800bad6:	4d05      	ldr	r5, [pc, #20]	; (800baec <_write_r+0x20>)
 800bad8:	602a      	str	r2, [r5, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	f7f6 f978 	bl	8001dd0 <_write>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_write_r+0x1e>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_write_r+0x1e>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	2000185c 	.word	0x2000185c

0800baf0 <__errno>:
 800baf0:	4b01      	ldr	r3, [pc, #4]	; (800baf8 <__errno+0x8>)
 800baf2:	6818      	ldr	r0, [r3, #0]
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	20000264 	.word	0x20000264

0800bafc <__libc_init_array>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	2600      	movs	r6, #0
 800bb00:	4d0c      	ldr	r5, [pc, #48]	; (800bb34 <__libc_init_array+0x38>)
 800bb02:	4c0d      	ldr	r4, [pc, #52]	; (800bb38 <__libc_init_array+0x3c>)
 800bb04:	1b64      	subs	r4, r4, r5
 800bb06:	10a4      	asrs	r4, r4, #2
 800bb08:	42a6      	cmp	r6, r4
 800bb0a:	d109      	bne.n	800bb20 <__libc_init_array+0x24>
 800bb0c:	f002 fbe2 	bl	800e2d4 <_init>
 800bb10:	2600      	movs	r6, #0
 800bb12:	4d0a      	ldr	r5, [pc, #40]	; (800bb3c <__libc_init_array+0x40>)
 800bb14:	4c0a      	ldr	r4, [pc, #40]	; (800bb40 <__libc_init_array+0x44>)
 800bb16:	1b64      	subs	r4, r4, r5
 800bb18:	10a4      	asrs	r4, r4, #2
 800bb1a:	42a6      	cmp	r6, r4
 800bb1c:	d105      	bne.n	800bb2a <__libc_init_array+0x2e>
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb24:	4798      	blx	r3
 800bb26:	3601      	adds	r6, #1
 800bb28:	e7ee      	b.n	800bb08 <__libc_init_array+0xc>
 800bb2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb2e:	4798      	blx	r3
 800bb30:	3601      	adds	r6, #1
 800bb32:	e7f2      	b.n	800bb1a <__libc_init_array+0x1e>
 800bb34:	0800e750 	.word	0x0800e750
 800bb38:	0800e750 	.word	0x0800e750
 800bb3c:	0800e750 	.word	0x0800e750
 800bb40:	0800e754 	.word	0x0800e754

0800bb44 <__retarget_lock_init_recursive>:
 800bb44:	4770      	bx	lr

0800bb46 <__retarget_lock_acquire_recursive>:
 800bb46:	4770      	bx	lr

0800bb48 <__retarget_lock_release_recursive>:
 800bb48:	4770      	bx	lr

0800bb4a <memchr>:
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	b2c9      	uxtb	r1, r1
 800bb50:	4402      	add	r2, r0
 800bb52:	4293      	cmp	r3, r2
 800bb54:	4618      	mov	r0, r3
 800bb56:	d101      	bne.n	800bb5c <memchr+0x12>
 800bb58:	2000      	movs	r0, #0
 800bb5a:	e003      	b.n	800bb64 <memchr+0x1a>
 800bb5c:	7804      	ldrb	r4, [r0, #0]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	428c      	cmp	r4, r1
 800bb62:	d1f6      	bne.n	800bb52 <memchr+0x8>
 800bb64:	bd10      	pop	{r4, pc}

0800bb66 <quorem>:
 800bb66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	6903      	ldr	r3, [r0, #16]
 800bb6c:	690c      	ldr	r4, [r1, #16]
 800bb6e:	4607      	mov	r7, r0
 800bb70:	42a3      	cmp	r3, r4
 800bb72:	db7f      	blt.n	800bc74 <quorem+0x10e>
 800bb74:	3c01      	subs	r4, #1
 800bb76:	f100 0514 	add.w	r5, r0, #20
 800bb7a:	f101 0814 	add.w	r8, r1, #20
 800bb7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb82:	9301      	str	r3, [sp, #4]
 800bb84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb9c:	d331      	bcc.n	800bc02 <quorem+0x9c>
 800bb9e:	f04f 0e00 	mov.w	lr, #0
 800bba2:	4640      	mov	r0, r8
 800bba4:	46ac      	mov	ip, r5
 800bba6:	46f2      	mov	sl, lr
 800bba8:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbac:	b293      	uxth	r3, r2
 800bbae:	fb06 e303 	mla	r3, r6, r3, lr
 800bbb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbb6:	0c1a      	lsrs	r2, r3, #16
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	fb06 220e 	mla	r2, r6, lr, r2
 800bbbe:	ebaa 0303 	sub.w	r3, sl, r3
 800bbc2:	f8dc a000 	ldr.w	sl, [ip]
 800bbc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbca:	fa1f fa8a 	uxth.w	sl, sl
 800bbce:	4453      	add	r3, sl
 800bbd0:	f8dc a000 	ldr.w	sl, [ip]
 800bbd4:	b292      	uxth	r2, r2
 800bbd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbe4:	4581      	cmp	r9, r0
 800bbe6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbea:	f84c 3b04 	str.w	r3, [ip], #4
 800bbee:	d2db      	bcs.n	800bba8 <quorem+0x42>
 800bbf0:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbf4:	b92b      	cbnz	r3, 800bc02 <quorem+0x9c>
 800bbf6:	9b01      	ldr	r3, [sp, #4]
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	429d      	cmp	r5, r3
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	d32d      	bcc.n	800bc5c <quorem+0xf6>
 800bc00:	613c      	str	r4, [r7, #16]
 800bc02:	4638      	mov	r0, r7
 800bc04:	f001 f992 	bl	800cf2c <__mcmp>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	db23      	blt.n	800bc54 <quorem+0xee>
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	2000      	movs	r0, #0
 800bc10:	3601      	adds	r6, #1
 800bc12:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc16:	f8d1 c000 	ldr.w	ip, [r1]
 800bc1a:	b293      	uxth	r3, r2
 800bc1c:	1ac3      	subs	r3, r0, r3
 800bc1e:	0c12      	lsrs	r2, r2, #16
 800bc20:	fa1f f08c 	uxth.w	r0, ip
 800bc24:	4403      	add	r3, r0
 800bc26:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc34:	45c1      	cmp	r9, r8
 800bc36:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc3a:	f841 3b04 	str.w	r3, [r1], #4
 800bc3e:	d2e8      	bcs.n	800bc12 <quorem+0xac>
 800bc40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc48:	b922      	cbnz	r2, 800bc54 <quorem+0xee>
 800bc4a:	3b04      	subs	r3, #4
 800bc4c:	429d      	cmp	r5, r3
 800bc4e:	461a      	mov	r2, r3
 800bc50:	d30a      	bcc.n	800bc68 <quorem+0x102>
 800bc52:	613c      	str	r4, [r7, #16]
 800bc54:	4630      	mov	r0, r6
 800bc56:	b003      	add	sp, #12
 800bc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5c:	6812      	ldr	r2, [r2, #0]
 800bc5e:	3b04      	subs	r3, #4
 800bc60:	2a00      	cmp	r2, #0
 800bc62:	d1cd      	bne.n	800bc00 <quorem+0x9a>
 800bc64:	3c01      	subs	r4, #1
 800bc66:	e7c8      	b.n	800bbfa <quorem+0x94>
 800bc68:	6812      	ldr	r2, [r2, #0]
 800bc6a:	3b04      	subs	r3, #4
 800bc6c:	2a00      	cmp	r2, #0
 800bc6e:	d1f0      	bne.n	800bc52 <quorem+0xec>
 800bc70:	3c01      	subs	r4, #1
 800bc72:	e7eb      	b.n	800bc4c <quorem+0xe6>
 800bc74:	2000      	movs	r0, #0
 800bc76:	e7ee      	b.n	800bc56 <quorem+0xf0>

0800bc78 <_dtoa_r>:
 800bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7c:	4616      	mov	r6, r2
 800bc7e:	461f      	mov	r7, r3
 800bc80:	69c4      	ldr	r4, [r0, #28]
 800bc82:	b099      	sub	sp, #100	; 0x64
 800bc84:	4605      	mov	r5, r0
 800bc86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bc8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bc8e:	b974      	cbnz	r4, 800bcae <_dtoa_r+0x36>
 800bc90:	2010      	movs	r0, #16
 800bc92:	f000 fe1d 	bl	800c8d0 <malloc>
 800bc96:	4602      	mov	r2, r0
 800bc98:	61e8      	str	r0, [r5, #28]
 800bc9a:	b920      	cbnz	r0, 800bca6 <_dtoa_r+0x2e>
 800bc9c:	21ef      	movs	r1, #239	; 0xef
 800bc9e:	4bac      	ldr	r3, [pc, #688]	; (800bf50 <_dtoa_r+0x2d8>)
 800bca0:	48ac      	ldr	r0, [pc, #688]	; (800bf54 <_dtoa_r+0x2dc>)
 800bca2:	f001 fc7b 	bl	800d59c <__assert_func>
 800bca6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcaa:	6004      	str	r4, [r0, #0]
 800bcac:	60c4      	str	r4, [r0, #12]
 800bcae:	69eb      	ldr	r3, [r5, #28]
 800bcb0:	6819      	ldr	r1, [r3, #0]
 800bcb2:	b151      	cbz	r1, 800bcca <_dtoa_r+0x52>
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4093      	lsls	r3, r2
 800bcba:	604a      	str	r2, [r1, #4]
 800bcbc:	608b      	str	r3, [r1, #8]
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f000 fefa 	bl	800cab8 <_Bfree>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	69eb      	ldr	r3, [r5, #28]
 800bcc8:	601a      	str	r2, [r3, #0]
 800bcca:	1e3b      	subs	r3, r7, #0
 800bccc:	bfaf      	iteee	ge
 800bcce:	2300      	movge	r3, #0
 800bcd0:	2201      	movlt	r2, #1
 800bcd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcd6:	9305      	strlt	r3, [sp, #20]
 800bcd8:	bfa8      	it	ge
 800bcda:	f8c8 3000 	strge.w	r3, [r8]
 800bcde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bce2:	4b9d      	ldr	r3, [pc, #628]	; (800bf58 <_dtoa_r+0x2e0>)
 800bce4:	bfb8      	it	lt
 800bce6:	f8c8 2000 	strlt.w	r2, [r8]
 800bcea:	ea33 0309 	bics.w	r3, r3, r9
 800bcee:	d119      	bne.n	800bd24 <_dtoa_r+0xac>
 800bcf0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bcf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcfc:	4333      	orrs	r3, r6
 800bcfe:	f000 8589 	beq.w	800c814 <_dtoa_r+0xb9c>
 800bd02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd04:	b953      	cbnz	r3, 800bd1c <_dtoa_r+0xa4>
 800bd06:	4b95      	ldr	r3, [pc, #596]	; (800bf5c <_dtoa_r+0x2e4>)
 800bd08:	e023      	b.n	800bd52 <_dtoa_r+0xda>
 800bd0a:	4b95      	ldr	r3, [pc, #596]	; (800bf60 <_dtoa_r+0x2e8>)
 800bd0c:	9303      	str	r3, [sp, #12]
 800bd0e:	3308      	adds	r3, #8
 800bd10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	9803      	ldr	r0, [sp, #12]
 800bd16:	b019      	add	sp, #100	; 0x64
 800bd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1c:	4b8f      	ldr	r3, [pc, #572]	; (800bf5c <_dtoa_r+0x2e4>)
 800bd1e:	9303      	str	r3, [sp, #12]
 800bd20:	3303      	adds	r3, #3
 800bd22:	e7f5      	b.n	800bd10 <_dtoa_r+0x98>
 800bd24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bd28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bd2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd30:	2200      	movs	r2, #0
 800bd32:	2300      	movs	r3, #0
 800bd34:	f7f4 fe38 	bl	80009a8 <__aeabi_dcmpeq>
 800bd38:	4680      	mov	r8, r0
 800bd3a:	b160      	cbz	r0, 800bd56 <_dtoa_r+0xde>
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bd40:	6013      	str	r3, [r2, #0]
 800bd42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 8562 	beq.w	800c80e <_dtoa_r+0xb96>
 800bd4a:	4b86      	ldr	r3, [pc, #536]	; (800bf64 <_dtoa_r+0x2ec>)
 800bd4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bd4e:	6013      	str	r3, [r2, #0]
 800bd50:	3b01      	subs	r3, #1
 800bd52:	9303      	str	r3, [sp, #12]
 800bd54:	e7de      	b.n	800bd14 <_dtoa_r+0x9c>
 800bd56:	ab16      	add	r3, sp, #88	; 0x58
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	ab17      	add	r3, sp, #92	; 0x5c
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	4628      	mov	r0, r5
 800bd60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd64:	f001 f98a 	bl	800d07c <__d2b>
 800bd68:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bd6c:	4682      	mov	sl, r0
 800bd6e:	2c00      	cmp	r4, #0
 800bd70:	d07e      	beq.n	800be70 <_dtoa_r+0x1f8>
 800bd72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bd7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd80:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bd84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	2200      	movs	r2, #0
 800bd90:	4b75      	ldr	r3, [pc, #468]	; (800bf68 <_dtoa_r+0x2f0>)
 800bd92:	f7f4 f9e9 	bl	8000168 <__aeabi_dsub>
 800bd96:	a368      	add	r3, pc, #416	; (adr r3, 800bf38 <_dtoa_r+0x2c0>)
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f7f4 fb9c 	bl	80004d8 <__aeabi_dmul>
 800bda0:	a367      	add	r3, pc, #412	; (adr r3, 800bf40 <_dtoa_r+0x2c8>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 f9e1 	bl	800016c <__adddf3>
 800bdaa:	4606      	mov	r6, r0
 800bdac:	4620      	mov	r0, r4
 800bdae:	460f      	mov	r7, r1
 800bdb0:	f7f4 fb28 	bl	8000404 <__aeabi_i2d>
 800bdb4:	a364      	add	r3, pc, #400	; (adr r3, 800bf48 <_dtoa_r+0x2d0>)
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f7f4 fb8d 	bl	80004d8 <__aeabi_dmul>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	f7f4 f9d1 	bl	800016c <__adddf3>
 800bdca:	4606      	mov	r6, r0
 800bdcc:	460f      	mov	r7, r1
 800bdce:	f7f4 fe33 	bl	8000a38 <__aeabi_d2iz>
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	4683      	mov	fp, r0
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4630      	mov	r0, r6
 800bdda:	4639      	mov	r1, r7
 800bddc:	f7f4 fdee 	bl	80009bc <__aeabi_dcmplt>
 800bde0:	b148      	cbz	r0, 800bdf6 <_dtoa_r+0x17e>
 800bde2:	4658      	mov	r0, fp
 800bde4:	f7f4 fb0e 	bl	8000404 <__aeabi_i2d>
 800bde8:	4632      	mov	r2, r6
 800bdea:	463b      	mov	r3, r7
 800bdec:	f7f4 fddc 	bl	80009a8 <__aeabi_dcmpeq>
 800bdf0:	b908      	cbnz	r0, 800bdf6 <_dtoa_r+0x17e>
 800bdf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdf6:	f1bb 0f16 	cmp.w	fp, #22
 800bdfa:	d857      	bhi.n	800beac <_dtoa_r+0x234>
 800bdfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be00:	4b5a      	ldr	r3, [pc, #360]	; (800bf6c <_dtoa_r+0x2f4>)
 800be02:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f7f4 fdd7 	bl	80009bc <__aeabi_dcmplt>
 800be0e:	2800      	cmp	r0, #0
 800be10:	d04e      	beq.n	800beb0 <_dtoa_r+0x238>
 800be12:	2300      	movs	r3, #0
 800be14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be18:	930f      	str	r3, [sp, #60]	; 0x3c
 800be1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be1c:	1b1b      	subs	r3, r3, r4
 800be1e:	1e5a      	subs	r2, r3, #1
 800be20:	bf46      	itte	mi
 800be22:	f1c3 0901 	rsbmi	r9, r3, #1
 800be26:	2300      	movmi	r3, #0
 800be28:	f04f 0900 	movpl.w	r9, #0
 800be2c:	9209      	str	r2, [sp, #36]	; 0x24
 800be2e:	bf48      	it	mi
 800be30:	9309      	strmi	r3, [sp, #36]	; 0x24
 800be32:	f1bb 0f00 	cmp.w	fp, #0
 800be36:	db3d      	blt.n	800beb4 <_dtoa_r+0x23c>
 800be38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be3a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800be3e:	445b      	add	r3, fp
 800be40:	9309      	str	r3, [sp, #36]	; 0x24
 800be42:	2300      	movs	r3, #0
 800be44:	930a      	str	r3, [sp, #40]	; 0x28
 800be46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be48:	2b09      	cmp	r3, #9
 800be4a:	d867      	bhi.n	800bf1c <_dtoa_r+0x2a4>
 800be4c:	2b05      	cmp	r3, #5
 800be4e:	bfc4      	itt	gt
 800be50:	3b04      	subgt	r3, #4
 800be52:	9322      	strgt	r3, [sp, #136]	; 0x88
 800be54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be56:	bfc8      	it	gt
 800be58:	2400      	movgt	r4, #0
 800be5a:	f1a3 0302 	sub.w	r3, r3, #2
 800be5e:	bfd8      	it	le
 800be60:	2401      	movle	r4, #1
 800be62:	2b03      	cmp	r3, #3
 800be64:	f200 8086 	bhi.w	800bf74 <_dtoa_r+0x2fc>
 800be68:	e8df f003 	tbb	[pc, r3]
 800be6c:	5637392c 	.word	0x5637392c
 800be70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800be74:	441c      	add	r4, r3
 800be76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800be7a:	2b20      	cmp	r3, #32
 800be7c:	bfc1      	itttt	gt
 800be7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be82:	fa09 f903 	lslgt.w	r9, r9, r3
 800be86:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800be8a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800be8e:	bfd6      	itet	le
 800be90:	f1c3 0320 	rsble	r3, r3, #32
 800be94:	ea49 0003 	orrgt.w	r0, r9, r3
 800be98:	fa06 f003 	lslle.w	r0, r6, r3
 800be9c:	f7f4 faa2 	bl	80003e4 <__aeabi_ui2d>
 800bea0:	2201      	movs	r2, #1
 800bea2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bea6:	3c01      	subs	r4, #1
 800bea8:	9213      	str	r2, [sp, #76]	; 0x4c
 800beaa:	e76f      	b.n	800bd8c <_dtoa_r+0x114>
 800beac:	2301      	movs	r3, #1
 800beae:	e7b3      	b.n	800be18 <_dtoa_r+0x1a0>
 800beb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800beb2:	e7b2      	b.n	800be1a <_dtoa_r+0x1a2>
 800beb4:	f1cb 0300 	rsb	r3, fp, #0
 800beb8:	930a      	str	r3, [sp, #40]	; 0x28
 800beba:	2300      	movs	r3, #0
 800bebc:	eba9 090b 	sub.w	r9, r9, fp
 800bec0:	930e      	str	r3, [sp, #56]	; 0x38
 800bec2:	e7c0      	b.n	800be46 <_dtoa_r+0x1ce>
 800bec4:	2300      	movs	r3, #0
 800bec6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bec8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800beca:	2b00      	cmp	r3, #0
 800becc:	dc55      	bgt.n	800bf7a <_dtoa_r+0x302>
 800bece:	2301      	movs	r3, #1
 800bed0:	461a      	mov	r2, r3
 800bed2:	9306      	str	r3, [sp, #24]
 800bed4:	9308      	str	r3, [sp, #32]
 800bed6:	9223      	str	r2, [sp, #140]	; 0x8c
 800bed8:	e00b      	b.n	800bef2 <_dtoa_r+0x27a>
 800beda:	2301      	movs	r3, #1
 800bedc:	e7f3      	b.n	800bec6 <_dtoa_r+0x24e>
 800bede:	2300      	movs	r3, #0
 800bee0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bee2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bee4:	445b      	add	r3, fp
 800bee6:	9306      	str	r3, [sp, #24]
 800bee8:	3301      	adds	r3, #1
 800beea:	2b01      	cmp	r3, #1
 800beec:	9308      	str	r3, [sp, #32]
 800beee:	bfb8      	it	lt
 800bef0:	2301      	movlt	r3, #1
 800bef2:	2100      	movs	r1, #0
 800bef4:	2204      	movs	r2, #4
 800bef6:	69e8      	ldr	r0, [r5, #28]
 800bef8:	f102 0614 	add.w	r6, r2, #20
 800befc:	429e      	cmp	r6, r3
 800befe:	d940      	bls.n	800bf82 <_dtoa_r+0x30a>
 800bf00:	6041      	str	r1, [r0, #4]
 800bf02:	4628      	mov	r0, r5
 800bf04:	f000 fd98 	bl	800ca38 <_Balloc>
 800bf08:	9003      	str	r0, [sp, #12]
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d13c      	bne.n	800bf88 <_dtoa_r+0x310>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	f240 11af 	movw	r1, #431	; 0x1af
 800bf14:	4b16      	ldr	r3, [pc, #88]	; (800bf70 <_dtoa_r+0x2f8>)
 800bf16:	e6c3      	b.n	800bca0 <_dtoa_r+0x28>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e7e1      	b.n	800bee0 <_dtoa_r+0x268>
 800bf1c:	2401      	movs	r4, #1
 800bf1e:	2300      	movs	r3, #0
 800bf20:	940b      	str	r4, [sp, #44]	; 0x2c
 800bf22:	9322      	str	r3, [sp, #136]	; 0x88
 800bf24:	f04f 33ff 	mov.w	r3, #4294967295
 800bf28:	2200      	movs	r2, #0
 800bf2a:	9306      	str	r3, [sp, #24]
 800bf2c:	9308      	str	r3, [sp, #32]
 800bf2e:	2312      	movs	r3, #18
 800bf30:	e7d1      	b.n	800bed6 <_dtoa_r+0x25e>
 800bf32:	bf00      	nop
 800bf34:	f3af 8000 	nop.w
 800bf38:	636f4361 	.word	0x636f4361
 800bf3c:	3fd287a7 	.word	0x3fd287a7
 800bf40:	8b60c8b3 	.word	0x8b60c8b3
 800bf44:	3fc68a28 	.word	0x3fc68a28
 800bf48:	509f79fb 	.word	0x509f79fb
 800bf4c:	3fd34413 	.word	0x3fd34413
 800bf50:	0800e3af 	.word	0x0800e3af
 800bf54:	0800e3c6 	.word	0x0800e3c6
 800bf58:	7ff00000 	.word	0x7ff00000
 800bf5c:	0800e3ab 	.word	0x0800e3ab
 800bf60:	0800e3a2 	.word	0x0800e3a2
 800bf64:	0800e37f 	.word	0x0800e37f
 800bf68:	3ff80000 	.word	0x3ff80000
 800bf6c:	0800e4b0 	.word	0x0800e4b0
 800bf70:	0800e41e 	.word	0x0800e41e
 800bf74:	2301      	movs	r3, #1
 800bf76:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf78:	e7d4      	b.n	800bf24 <_dtoa_r+0x2ac>
 800bf7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf7c:	9306      	str	r3, [sp, #24]
 800bf7e:	9308      	str	r3, [sp, #32]
 800bf80:	e7b7      	b.n	800bef2 <_dtoa_r+0x27a>
 800bf82:	3101      	adds	r1, #1
 800bf84:	0052      	lsls	r2, r2, #1
 800bf86:	e7b7      	b.n	800bef8 <_dtoa_r+0x280>
 800bf88:	69eb      	ldr	r3, [r5, #28]
 800bf8a:	9a03      	ldr	r2, [sp, #12]
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	9b08      	ldr	r3, [sp, #32]
 800bf90:	2b0e      	cmp	r3, #14
 800bf92:	f200 80a8 	bhi.w	800c0e6 <_dtoa_r+0x46e>
 800bf96:	2c00      	cmp	r4, #0
 800bf98:	f000 80a5 	beq.w	800c0e6 <_dtoa_r+0x46e>
 800bf9c:	f1bb 0f00 	cmp.w	fp, #0
 800bfa0:	dd34      	ble.n	800c00c <_dtoa_r+0x394>
 800bfa2:	4b9a      	ldr	r3, [pc, #616]	; (800c20c <_dtoa_r+0x594>)
 800bfa4:	f00b 020f 	and.w	r2, fp, #15
 800bfa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bfb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bfb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bfb8:	ea4f 142b 	mov.w	r4, fp, asr #4
 800bfbc:	d016      	beq.n	800bfec <_dtoa_r+0x374>
 800bfbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bfc2:	4b93      	ldr	r3, [pc, #588]	; (800c210 <_dtoa_r+0x598>)
 800bfc4:	2703      	movs	r7, #3
 800bfc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfca:	f7f4 fbaf 	bl	800072c <__aeabi_ddiv>
 800bfce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfd2:	f004 040f 	and.w	r4, r4, #15
 800bfd6:	4e8e      	ldr	r6, [pc, #568]	; (800c210 <_dtoa_r+0x598>)
 800bfd8:	b954      	cbnz	r4, 800bff0 <_dtoa_r+0x378>
 800bfda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfe2:	f7f4 fba3 	bl	800072c <__aeabi_ddiv>
 800bfe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfea:	e029      	b.n	800c040 <_dtoa_r+0x3c8>
 800bfec:	2702      	movs	r7, #2
 800bfee:	e7f2      	b.n	800bfd6 <_dtoa_r+0x35e>
 800bff0:	07e1      	lsls	r1, r4, #31
 800bff2:	d508      	bpl.n	800c006 <_dtoa_r+0x38e>
 800bff4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bff8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bffc:	f7f4 fa6c 	bl	80004d8 <__aeabi_dmul>
 800c000:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c004:	3701      	adds	r7, #1
 800c006:	1064      	asrs	r4, r4, #1
 800c008:	3608      	adds	r6, #8
 800c00a:	e7e5      	b.n	800bfd8 <_dtoa_r+0x360>
 800c00c:	f000 80a5 	beq.w	800c15a <_dtoa_r+0x4e2>
 800c010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c014:	f1cb 0400 	rsb	r4, fp, #0
 800c018:	4b7c      	ldr	r3, [pc, #496]	; (800c20c <_dtoa_r+0x594>)
 800c01a:	f004 020f 	and.w	r2, r4, #15
 800c01e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	f7f4 fa57 	bl	80004d8 <__aeabi_dmul>
 800c02a:	2702      	movs	r7, #2
 800c02c:	2300      	movs	r3, #0
 800c02e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c032:	4e77      	ldr	r6, [pc, #476]	; (800c210 <_dtoa_r+0x598>)
 800c034:	1124      	asrs	r4, r4, #4
 800c036:	2c00      	cmp	r4, #0
 800c038:	f040 8084 	bne.w	800c144 <_dtoa_r+0x4cc>
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1d2      	bne.n	800bfe6 <_dtoa_r+0x36e>
 800c040:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c044:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 8087 	beq.w	800c15e <_dtoa_r+0x4e6>
 800c050:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c054:	2200      	movs	r2, #0
 800c056:	4b6f      	ldr	r3, [pc, #444]	; (800c214 <_dtoa_r+0x59c>)
 800c058:	f7f4 fcb0 	bl	80009bc <__aeabi_dcmplt>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d07e      	beq.n	800c15e <_dtoa_r+0x4e6>
 800c060:	9b08      	ldr	r3, [sp, #32]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d07b      	beq.n	800c15e <_dtoa_r+0x4e6>
 800c066:	9b06      	ldr	r3, [sp, #24]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	dd38      	ble.n	800c0de <_dtoa_r+0x466>
 800c06c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c070:	2200      	movs	r2, #0
 800c072:	4b69      	ldr	r3, [pc, #420]	; (800c218 <_dtoa_r+0x5a0>)
 800c074:	f7f4 fa30 	bl	80004d8 <__aeabi_dmul>
 800c078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c07c:	9c06      	ldr	r4, [sp, #24]
 800c07e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800c082:	3701      	adds	r7, #1
 800c084:	4638      	mov	r0, r7
 800c086:	f7f4 f9bd 	bl	8000404 <__aeabi_i2d>
 800c08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c08e:	f7f4 fa23 	bl	80004d8 <__aeabi_dmul>
 800c092:	2200      	movs	r2, #0
 800c094:	4b61      	ldr	r3, [pc, #388]	; (800c21c <_dtoa_r+0x5a4>)
 800c096:	f7f4 f869 	bl	800016c <__adddf3>
 800c09a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c09e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0a2:	9611      	str	r6, [sp, #68]	; 0x44
 800c0a4:	2c00      	cmp	r4, #0
 800c0a6:	d15d      	bne.n	800c164 <_dtoa_r+0x4ec>
 800c0a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4b5c      	ldr	r3, [pc, #368]	; (800c220 <_dtoa_r+0x5a8>)
 800c0b0:	f7f4 f85a 	bl	8000168 <__aeabi_dsub>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0bc:	4633      	mov	r3, r6
 800c0be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0c0:	f7f4 fc9a 	bl	80009f8 <__aeabi_dcmpgt>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	f040 8295 	bne.w	800c5f4 <_dtoa_r+0x97c>
 800c0ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c0d4:	f7f4 fc72 	bl	80009bc <__aeabi_dcmplt>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	f040 8289 	bne.w	800c5f0 <_dtoa_r+0x978>
 800c0de:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c0e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c0e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f2c0 8151 	blt.w	800c390 <_dtoa_r+0x718>
 800c0ee:	f1bb 0f0e 	cmp.w	fp, #14
 800c0f2:	f300 814d 	bgt.w	800c390 <_dtoa_r+0x718>
 800c0f6:	4b45      	ldr	r3, [pc, #276]	; (800c20c <_dtoa_r+0x594>)
 800c0f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c0fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c100:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c104:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c106:	2b00      	cmp	r3, #0
 800c108:	f280 80da 	bge.w	800c2c0 <_dtoa_r+0x648>
 800c10c:	9b08      	ldr	r3, [sp, #32]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f300 80d6 	bgt.w	800c2c0 <_dtoa_r+0x648>
 800c114:	f040 826b 	bne.w	800c5ee <_dtoa_r+0x976>
 800c118:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c11c:	2200      	movs	r2, #0
 800c11e:	4b40      	ldr	r3, [pc, #256]	; (800c220 <_dtoa_r+0x5a8>)
 800c120:	f7f4 f9da 	bl	80004d8 <__aeabi_dmul>
 800c124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c128:	f7f4 fc5c 	bl	80009e4 <__aeabi_dcmpge>
 800c12c:	9c08      	ldr	r4, [sp, #32]
 800c12e:	4626      	mov	r6, r4
 800c130:	2800      	cmp	r0, #0
 800c132:	f040 8241 	bne.w	800c5b8 <_dtoa_r+0x940>
 800c136:	2331      	movs	r3, #49	; 0x31
 800c138:	9f03      	ldr	r7, [sp, #12]
 800c13a:	f10b 0b01 	add.w	fp, fp, #1
 800c13e:	f807 3b01 	strb.w	r3, [r7], #1
 800c142:	e23d      	b.n	800c5c0 <_dtoa_r+0x948>
 800c144:	07e2      	lsls	r2, r4, #31
 800c146:	d505      	bpl.n	800c154 <_dtoa_r+0x4dc>
 800c148:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c14c:	f7f4 f9c4 	bl	80004d8 <__aeabi_dmul>
 800c150:	2301      	movs	r3, #1
 800c152:	3701      	adds	r7, #1
 800c154:	1064      	asrs	r4, r4, #1
 800c156:	3608      	adds	r6, #8
 800c158:	e76d      	b.n	800c036 <_dtoa_r+0x3be>
 800c15a:	2702      	movs	r7, #2
 800c15c:	e770      	b.n	800c040 <_dtoa_r+0x3c8>
 800c15e:	46d8      	mov	r8, fp
 800c160:	9c08      	ldr	r4, [sp, #32]
 800c162:	e78f      	b.n	800c084 <_dtoa_r+0x40c>
 800c164:	9903      	ldr	r1, [sp, #12]
 800c166:	4b29      	ldr	r3, [pc, #164]	; (800c20c <_dtoa_r+0x594>)
 800c168:	4421      	add	r1, r4
 800c16a:	9112      	str	r1, [sp, #72]	; 0x48
 800c16c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c16e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c172:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c176:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c17a:	2900      	cmp	r1, #0
 800c17c:	d054      	beq.n	800c228 <_dtoa_r+0x5b0>
 800c17e:	2000      	movs	r0, #0
 800c180:	4928      	ldr	r1, [pc, #160]	; (800c224 <_dtoa_r+0x5ac>)
 800c182:	f7f4 fad3 	bl	800072c <__aeabi_ddiv>
 800c186:	463b      	mov	r3, r7
 800c188:	4632      	mov	r2, r6
 800c18a:	f7f3 ffed 	bl	8000168 <__aeabi_dsub>
 800c18e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c192:	9f03      	ldr	r7, [sp, #12]
 800c194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c198:	f7f4 fc4e 	bl	8000a38 <__aeabi_d2iz>
 800c19c:	4604      	mov	r4, r0
 800c19e:	f7f4 f931 	bl	8000404 <__aeabi_i2d>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1aa:	f7f3 ffdd 	bl	8000168 <__aeabi_dsub>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	3430      	adds	r4, #48	; 0x30
 800c1b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1bc:	f807 4b01 	strb.w	r4, [r7], #1
 800c1c0:	f7f4 fbfc 	bl	80009bc <__aeabi_dcmplt>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d173      	bne.n	800c2b0 <_dtoa_r+0x638>
 800c1c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	4911      	ldr	r1, [pc, #68]	; (800c214 <_dtoa_r+0x59c>)
 800c1d0:	f7f3 ffca 	bl	8000168 <__aeabi_dsub>
 800c1d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1d8:	f7f4 fbf0 	bl	80009bc <__aeabi_dcmplt>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	f040 80b6 	bne.w	800c34e <_dtoa_r+0x6d6>
 800c1e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1e4:	429f      	cmp	r7, r3
 800c1e6:	f43f af7a 	beq.w	800c0de <_dtoa_r+0x466>
 800c1ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	4b09      	ldr	r3, [pc, #36]	; (800c218 <_dtoa_r+0x5a0>)
 800c1f2:	f7f4 f971 	bl	80004d8 <__aeabi_dmul>
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c200:	4b05      	ldr	r3, [pc, #20]	; (800c218 <_dtoa_r+0x5a0>)
 800c202:	f7f4 f969 	bl	80004d8 <__aeabi_dmul>
 800c206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c20a:	e7c3      	b.n	800c194 <_dtoa_r+0x51c>
 800c20c:	0800e4b0 	.word	0x0800e4b0
 800c210:	0800e488 	.word	0x0800e488
 800c214:	3ff00000 	.word	0x3ff00000
 800c218:	40240000 	.word	0x40240000
 800c21c:	401c0000 	.word	0x401c0000
 800c220:	40140000 	.word	0x40140000
 800c224:	3fe00000 	.word	0x3fe00000
 800c228:	4630      	mov	r0, r6
 800c22a:	4639      	mov	r1, r7
 800c22c:	f7f4 f954 	bl	80004d8 <__aeabi_dmul>
 800c230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c232:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c236:	9c03      	ldr	r4, [sp, #12]
 800c238:	9314      	str	r3, [sp, #80]	; 0x50
 800c23a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c23e:	f7f4 fbfb 	bl	8000a38 <__aeabi_d2iz>
 800c242:	9015      	str	r0, [sp, #84]	; 0x54
 800c244:	f7f4 f8de 	bl	8000404 <__aeabi_i2d>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c250:	f7f3 ff8a 	bl	8000168 <__aeabi_dsub>
 800c254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c256:	4606      	mov	r6, r0
 800c258:	3330      	adds	r3, #48	; 0x30
 800c25a:	f804 3b01 	strb.w	r3, [r4], #1
 800c25e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c260:	460f      	mov	r7, r1
 800c262:	429c      	cmp	r4, r3
 800c264:	f04f 0200 	mov.w	r2, #0
 800c268:	d124      	bne.n	800c2b4 <_dtoa_r+0x63c>
 800c26a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c26e:	4baf      	ldr	r3, [pc, #700]	; (800c52c <_dtoa_r+0x8b4>)
 800c270:	f7f3 ff7c 	bl	800016c <__adddf3>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f4 fbbc 	bl	80009f8 <__aeabi_dcmpgt>
 800c280:	2800      	cmp	r0, #0
 800c282:	d163      	bne.n	800c34c <_dtoa_r+0x6d4>
 800c284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c288:	2000      	movs	r0, #0
 800c28a:	49a8      	ldr	r1, [pc, #672]	; (800c52c <_dtoa_r+0x8b4>)
 800c28c:	f7f3 ff6c 	bl	8000168 <__aeabi_dsub>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4630      	mov	r0, r6
 800c296:	4639      	mov	r1, r7
 800c298:	f7f4 fb90 	bl	80009bc <__aeabi_dcmplt>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	f43f af1e 	beq.w	800c0de <_dtoa_r+0x466>
 800c2a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c2a4:	1e7b      	subs	r3, r7, #1
 800c2a6:	9314      	str	r3, [sp, #80]	; 0x50
 800c2a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c2ac:	2b30      	cmp	r3, #48	; 0x30
 800c2ae:	d0f8      	beq.n	800c2a2 <_dtoa_r+0x62a>
 800c2b0:	46c3      	mov	fp, r8
 800c2b2:	e03b      	b.n	800c32c <_dtoa_r+0x6b4>
 800c2b4:	4b9e      	ldr	r3, [pc, #632]	; (800c530 <_dtoa_r+0x8b8>)
 800c2b6:	f7f4 f90f 	bl	80004d8 <__aeabi_dmul>
 800c2ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2be:	e7bc      	b.n	800c23a <_dtoa_r+0x5c2>
 800c2c0:	9f03      	ldr	r7, [sp, #12]
 800c2c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	4649      	mov	r1, r9
 800c2ce:	f7f4 fa2d 	bl	800072c <__aeabi_ddiv>
 800c2d2:	f7f4 fbb1 	bl	8000a38 <__aeabi_d2iz>
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	f7f4 f894 	bl	8000404 <__aeabi_i2d>
 800c2dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2e0:	f7f4 f8fa 	bl	80004d8 <__aeabi_dmul>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4640      	mov	r0, r8
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	f7f3 ff3c 	bl	8000168 <__aeabi_dsub>
 800c2f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c2f4:	f807 6b01 	strb.w	r6, [r7], #1
 800c2f8:	9e03      	ldr	r6, [sp, #12]
 800c2fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c2fe:	1bbe      	subs	r6, r7, r6
 800c300:	45b4      	cmp	ip, r6
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	d136      	bne.n	800c376 <_dtoa_r+0x6fe>
 800c308:	f7f3 ff30 	bl	800016c <__adddf3>
 800c30c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c310:	4680      	mov	r8, r0
 800c312:	4689      	mov	r9, r1
 800c314:	f7f4 fb70 	bl	80009f8 <__aeabi_dcmpgt>
 800c318:	bb58      	cbnz	r0, 800c372 <_dtoa_r+0x6fa>
 800c31a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c31e:	4640      	mov	r0, r8
 800c320:	4649      	mov	r1, r9
 800c322:	f7f4 fb41 	bl	80009a8 <__aeabi_dcmpeq>
 800c326:	b108      	cbz	r0, 800c32c <_dtoa_r+0x6b4>
 800c328:	07e3      	lsls	r3, r4, #31
 800c32a:	d422      	bmi.n	800c372 <_dtoa_r+0x6fa>
 800c32c:	4651      	mov	r1, sl
 800c32e:	4628      	mov	r0, r5
 800c330:	f000 fbc2 	bl	800cab8 <_Bfree>
 800c334:	2300      	movs	r3, #0
 800c336:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c338:	703b      	strb	r3, [r7, #0]
 800c33a:	f10b 0301 	add.w	r3, fp, #1
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c342:	2b00      	cmp	r3, #0
 800c344:	f43f ace6 	beq.w	800bd14 <_dtoa_r+0x9c>
 800c348:	601f      	str	r7, [r3, #0]
 800c34a:	e4e3      	b.n	800bd14 <_dtoa_r+0x9c>
 800c34c:	4627      	mov	r7, r4
 800c34e:	463b      	mov	r3, r7
 800c350:	461f      	mov	r7, r3
 800c352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c356:	2a39      	cmp	r2, #57	; 0x39
 800c358:	d107      	bne.n	800c36a <_dtoa_r+0x6f2>
 800c35a:	9a03      	ldr	r2, [sp, #12]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d1f7      	bne.n	800c350 <_dtoa_r+0x6d8>
 800c360:	2230      	movs	r2, #48	; 0x30
 800c362:	9903      	ldr	r1, [sp, #12]
 800c364:	f108 0801 	add.w	r8, r8, #1
 800c368:	700a      	strb	r2, [r1, #0]
 800c36a:	781a      	ldrb	r2, [r3, #0]
 800c36c:	3201      	adds	r2, #1
 800c36e:	701a      	strb	r2, [r3, #0]
 800c370:	e79e      	b.n	800c2b0 <_dtoa_r+0x638>
 800c372:	46d8      	mov	r8, fp
 800c374:	e7eb      	b.n	800c34e <_dtoa_r+0x6d6>
 800c376:	2200      	movs	r2, #0
 800c378:	4b6d      	ldr	r3, [pc, #436]	; (800c530 <_dtoa_r+0x8b8>)
 800c37a:	f7f4 f8ad 	bl	80004d8 <__aeabi_dmul>
 800c37e:	2200      	movs	r2, #0
 800c380:	2300      	movs	r3, #0
 800c382:	4680      	mov	r8, r0
 800c384:	4689      	mov	r9, r1
 800c386:	f7f4 fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d09b      	beq.n	800c2c6 <_dtoa_r+0x64e>
 800c38e:	e7cd      	b.n	800c32c <_dtoa_r+0x6b4>
 800c390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c392:	2a00      	cmp	r2, #0
 800c394:	f000 80c4 	beq.w	800c520 <_dtoa_r+0x8a8>
 800c398:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c39a:	2a01      	cmp	r2, #1
 800c39c:	f300 80a8 	bgt.w	800c4f0 <_dtoa_r+0x878>
 800c3a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3a2:	2a00      	cmp	r2, #0
 800c3a4:	f000 80a0 	beq.w	800c4e8 <_dtoa_r+0x870>
 800c3a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3ac:	464f      	mov	r7, r9
 800c3ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	441a      	add	r2, r3
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	4499      	add	r9, r3
 800c3ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c3bc:	f000 fc32 	bl	800cc24 <__i2b>
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	b15f      	cbz	r7, 800c3dc <_dtoa_r+0x764>
 800c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	dd08      	ble.n	800c3dc <_dtoa_r+0x764>
 800c3ca:	42bb      	cmp	r3, r7
 800c3cc:	bfa8      	it	ge
 800c3ce:	463b      	movge	r3, r7
 800c3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3d2:	eba9 0903 	sub.w	r9, r9, r3
 800c3d6:	1aff      	subs	r7, r7, r3
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	9309      	str	r3, [sp, #36]	; 0x24
 800c3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3de:	b1f3      	cbz	r3, 800c41e <_dtoa_r+0x7a6>
 800c3e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 80a0 	beq.w	800c528 <_dtoa_r+0x8b0>
 800c3e8:	2c00      	cmp	r4, #0
 800c3ea:	dd10      	ble.n	800c40e <_dtoa_r+0x796>
 800c3ec:	4631      	mov	r1, r6
 800c3ee:	4622      	mov	r2, r4
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f000 fcd5 	bl	800cda0 <__pow5mult>
 800c3f6:	4652      	mov	r2, sl
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	f000 fc27 	bl	800cc50 <__multiply>
 800c402:	4680      	mov	r8, r0
 800c404:	4651      	mov	r1, sl
 800c406:	4628      	mov	r0, r5
 800c408:	f000 fb56 	bl	800cab8 <_Bfree>
 800c40c:	46c2      	mov	sl, r8
 800c40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c410:	1b1a      	subs	r2, r3, r4
 800c412:	d004      	beq.n	800c41e <_dtoa_r+0x7a6>
 800c414:	4651      	mov	r1, sl
 800c416:	4628      	mov	r0, r5
 800c418:	f000 fcc2 	bl	800cda0 <__pow5mult>
 800c41c:	4682      	mov	sl, r0
 800c41e:	2101      	movs	r1, #1
 800c420:	4628      	mov	r0, r5
 800c422:	f000 fbff 	bl	800cc24 <__i2b>
 800c426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c428:	4604      	mov	r4, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f340 8082 	ble.w	800c534 <_dtoa_r+0x8bc>
 800c430:	461a      	mov	r2, r3
 800c432:	4601      	mov	r1, r0
 800c434:	4628      	mov	r0, r5
 800c436:	f000 fcb3 	bl	800cda0 <__pow5mult>
 800c43a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c43c:	4604      	mov	r4, r0
 800c43e:	2b01      	cmp	r3, #1
 800c440:	dd7b      	ble.n	800c53a <_dtoa_r+0x8c2>
 800c442:	f04f 0800 	mov.w	r8, #0
 800c446:	6923      	ldr	r3, [r4, #16]
 800c448:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c44c:	6918      	ldr	r0, [r3, #16]
 800c44e:	f000 fb9b 	bl	800cb88 <__hi0bits>
 800c452:	f1c0 0020 	rsb	r0, r0, #32
 800c456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c458:	4418      	add	r0, r3
 800c45a:	f010 001f 	ands.w	r0, r0, #31
 800c45e:	f000 8092 	beq.w	800c586 <_dtoa_r+0x90e>
 800c462:	f1c0 0320 	rsb	r3, r0, #32
 800c466:	2b04      	cmp	r3, #4
 800c468:	f340 8085 	ble.w	800c576 <_dtoa_r+0x8fe>
 800c46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c46e:	f1c0 001c 	rsb	r0, r0, #28
 800c472:	4403      	add	r3, r0
 800c474:	4481      	add	r9, r0
 800c476:	4407      	add	r7, r0
 800c478:	9309      	str	r3, [sp, #36]	; 0x24
 800c47a:	f1b9 0f00 	cmp.w	r9, #0
 800c47e:	dd05      	ble.n	800c48c <_dtoa_r+0x814>
 800c480:	4651      	mov	r1, sl
 800c482:	464a      	mov	r2, r9
 800c484:	4628      	mov	r0, r5
 800c486:	f000 fce5 	bl	800ce54 <__lshift>
 800c48a:	4682      	mov	sl, r0
 800c48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	dd05      	ble.n	800c49e <_dtoa_r+0x826>
 800c492:	4621      	mov	r1, r4
 800c494:	461a      	mov	r2, r3
 800c496:	4628      	mov	r0, r5
 800c498:	f000 fcdc 	bl	800ce54 <__lshift>
 800c49c:	4604      	mov	r4, r0
 800c49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d072      	beq.n	800c58a <_dtoa_r+0x912>
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	4650      	mov	r0, sl
 800c4a8:	f000 fd40 	bl	800cf2c <__mcmp>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	da6c      	bge.n	800c58a <_dtoa_r+0x912>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4651      	mov	r1, sl
 800c4b4:	220a      	movs	r2, #10
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 fb20 	bl	800cafc <__multadd>
 800c4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4be:	4682      	mov	sl, r0
 800c4c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 81ac 	beq.w	800c822 <_dtoa_r+0xbaa>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	4631      	mov	r1, r6
 800c4ce:	220a      	movs	r2, #10
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	f000 fb13 	bl	800cafc <__multadd>
 800c4d6:	9b06      	ldr	r3, [sp, #24]
 800c4d8:	4606      	mov	r6, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f300 8093 	bgt.w	800c606 <_dtoa_r+0x98e>
 800c4e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	dc59      	bgt.n	800c59a <_dtoa_r+0x922>
 800c4e6:	e08e      	b.n	800c606 <_dtoa_r+0x98e>
 800c4e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c4ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4ee:	e75d      	b.n	800c3ac <_dtoa_r+0x734>
 800c4f0:	9b08      	ldr	r3, [sp, #32]
 800c4f2:	1e5c      	subs	r4, r3, #1
 800c4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f6:	42a3      	cmp	r3, r4
 800c4f8:	bfbf      	itttt	lt
 800c4fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c4fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c4fe:	1ae3      	sublt	r3, r4, r3
 800c500:	18d2      	addlt	r2, r2, r3
 800c502:	bfa8      	it	ge
 800c504:	1b1c      	subge	r4, r3, r4
 800c506:	9b08      	ldr	r3, [sp, #32]
 800c508:	bfbe      	ittt	lt
 800c50a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c50c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800c50e:	2400      	movlt	r4, #0
 800c510:	2b00      	cmp	r3, #0
 800c512:	bfb5      	itete	lt
 800c514:	eba9 0703 	sublt.w	r7, r9, r3
 800c518:	464f      	movge	r7, r9
 800c51a:	2300      	movlt	r3, #0
 800c51c:	9b08      	ldrge	r3, [sp, #32]
 800c51e:	e747      	b.n	800c3b0 <_dtoa_r+0x738>
 800c520:	464f      	mov	r7, r9
 800c522:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c524:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c526:	e74c      	b.n	800c3c2 <_dtoa_r+0x74a>
 800c528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c52a:	e773      	b.n	800c414 <_dtoa_r+0x79c>
 800c52c:	3fe00000 	.word	0x3fe00000
 800c530:	40240000 	.word	0x40240000
 800c534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c536:	2b01      	cmp	r3, #1
 800c538:	dc18      	bgt.n	800c56c <_dtoa_r+0x8f4>
 800c53a:	9b04      	ldr	r3, [sp, #16]
 800c53c:	b9b3      	cbnz	r3, 800c56c <_dtoa_r+0x8f4>
 800c53e:	9b05      	ldr	r3, [sp, #20]
 800c540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c544:	b993      	cbnz	r3, 800c56c <_dtoa_r+0x8f4>
 800c546:	9b05      	ldr	r3, [sp, #20]
 800c548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c54c:	0d1b      	lsrs	r3, r3, #20
 800c54e:	051b      	lsls	r3, r3, #20
 800c550:	b17b      	cbz	r3, 800c572 <_dtoa_r+0x8fa>
 800c552:	f04f 0801 	mov.w	r8, #1
 800c556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c558:	f109 0901 	add.w	r9, r9, #1
 800c55c:	3301      	adds	r3, #1
 800c55e:	9309      	str	r3, [sp, #36]	; 0x24
 800c560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c562:	2b00      	cmp	r3, #0
 800c564:	f47f af6f 	bne.w	800c446 <_dtoa_r+0x7ce>
 800c568:	2001      	movs	r0, #1
 800c56a:	e774      	b.n	800c456 <_dtoa_r+0x7de>
 800c56c:	f04f 0800 	mov.w	r8, #0
 800c570:	e7f6      	b.n	800c560 <_dtoa_r+0x8e8>
 800c572:	4698      	mov	r8, r3
 800c574:	e7f4      	b.n	800c560 <_dtoa_r+0x8e8>
 800c576:	d080      	beq.n	800c47a <_dtoa_r+0x802>
 800c578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c57a:	331c      	adds	r3, #28
 800c57c:	441a      	add	r2, r3
 800c57e:	4499      	add	r9, r3
 800c580:	441f      	add	r7, r3
 800c582:	9209      	str	r2, [sp, #36]	; 0x24
 800c584:	e779      	b.n	800c47a <_dtoa_r+0x802>
 800c586:	4603      	mov	r3, r0
 800c588:	e7f6      	b.n	800c578 <_dtoa_r+0x900>
 800c58a:	9b08      	ldr	r3, [sp, #32]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	dc34      	bgt.n	800c5fa <_dtoa_r+0x982>
 800c590:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c592:	2b02      	cmp	r3, #2
 800c594:	dd31      	ble.n	800c5fa <_dtoa_r+0x982>
 800c596:	9b08      	ldr	r3, [sp, #32]
 800c598:	9306      	str	r3, [sp, #24]
 800c59a:	9b06      	ldr	r3, [sp, #24]
 800c59c:	b963      	cbnz	r3, 800c5b8 <_dtoa_r+0x940>
 800c59e:	4621      	mov	r1, r4
 800c5a0:	2205      	movs	r2, #5
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	f000 faaa 	bl	800cafc <__multadd>
 800c5a8:	4601      	mov	r1, r0
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	4650      	mov	r0, sl
 800c5ae:	f000 fcbd 	bl	800cf2c <__mcmp>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	f73f adbf 	bgt.w	800c136 <_dtoa_r+0x4be>
 800c5b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5ba:	9f03      	ldr	r7, [sp, #12]
 800c5bc:	ea6f 0b03 	mvn.w	fp, r3
 800c5c0:	f04f 0800 	mov.w	r8, #0
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f000 fa76 	bl	800cab8 <_Bfree>
 800c5cc:	2e00      	cmp	r6, #0
 800c5ce:	f43f aead 	beq.w	800c32c <_dtoa_r+0x6b4>
 800c5d2:	f1b8 0f00 	cmp.w	r8, #0
 800c5d6:	d005      	beq.n	800c5e4 <_dtoa_r+0x96c>
 800c5d8:	45b0      	cmp	r8, r6
 800c5da:	d003      	beq.n	800c5e4 <_dtoa_r+0x96c>
 800c5dc:	4641      	mov	r1, r8
 800c5de:	4628      	mov	r0, r5
 800c5e0:	f000 fa6a 	bl	800cab8 <_Bfree>
 800c5e4:	4631      	mov	r1, r6
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f000 fa66 	bl	800cab8 <_Bfree>
 800c5ec:	e69e      	b.n	800c32c <_dtoa_r+0x6b4>
 800c5ee:	2400      	movs	r4, #0
 800c5f0:	4626      	mov	r6, r4
 800c5f2:	e7e1      	b.n	800c5b8 <_dtoa_r+0x940>
 800c5f4:	46c3      	mov	fp, r8
 800c5f6:	4626      	mov	r6, r4
 800c5f8:	e59d      	b.n	800c136 <_dtoa_r+0x4be>
 800c5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f000 80c8 	beq.w	800c792 <_dtoa_r+0xb1a>
 800c602:	9b08      	ldr	r3, [sp, #32]
 800c604:	9306      	str	r3, [sp, #24]
 800c606:	2f00      	cmp	r7, #0
 800c608:	dd05      	ble.n	800c616 <_dtoa_r+0x99e>
 800c60a:	4631      	mov	r1, r6
 800c60c:	463a      	mov	r2, r7
 800c60e:	4628      	mov	r0, r5
 800c610:	f000 fc20 	bl	800ce54 <__lshift>
 800c614:	4606      	mov	r6, r0
 800c616:	f1b8 0f00 	cmp.w	r8, #0
 800c61a:	d05b      	beq.n	800c6d4 <_dtoa_r+0xa5c>
 800c61c:	4628      	mov	r0, r5
 800c61e:	6871      	ldr	r1, [r6, #4]
 800c620:	f000 fa0a 	bl	800ca38 <_Balloc>
 800c624:	4607      	mov	r7, r0
 800c626:	b928      	cbnz	r0, 800c634 <_dtoa_r+0x9bc>
 800c628:	4602      	mov	r2, r0
 800c62a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c62e:	4b81      	ldr	r3, [pc, #516]	; (800c834 <_dtoa_r+0xbbc>)
 800c630:	f7ff bb36 	b.w	800bca0 <_dtoa_r+0x28>
 800c634:	6932      	ldr	r2, [r6, #16]
 800c636:	f106 010c 	add.w	r1, r6, #12
 800c63a:	3202      	adds	r2, #2
 800c63c:	0092      	lsls	r2, r2, #2
 800c63e:	300c      	adds	r0, #12
 800c640:	f000 ff9e 	bl	800d580 <memcpy>
 800c644:	2201      	movs	r2, #1
 800c646:	4639      	mov	r1, r7
 800c648:	4628      	mov	r0, r5
 800c64a:	f000 fc03 	bl	800ce54 <__lshift>
 800c64e:	46b0      	mov	r8, r6
 800c650:	4606      	mov	r6, r0
 800c652:	9b03      	ldr	r3, [sp, #12]
 800c654:	9a03      	ldr	r2, [sp, #12]
 800c656:	3301      	adds	r3, #1
 800c658:	9308      	str	r3, [sp, #32]
 800c65a:	9b06      	ldr	r3, [sp, #24]
 800c65c:	4413      	add	r3, r2
 800c65e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c660:	9b04      	ldr	r3, [sp, #16]
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	930a      	str	r3, [sp, #40]	; 0x28
 800c668:	9b08      	ldr	r3, [sp, #32]
 800c66a:	4621      	mov	r1, r4
 800c66c:	3b01      	subs	r3, #1
 800c66e:	4650      	mov	r0, sl
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	f7ff fa78 	bl	800bb66 <quorem>
 800c676:	4641      	mov	r1, r8
 800c678:	9006      	str	r0, [sp, #24]
 800c67a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c67e:	4650      	mov	r0, sl
 800c680:	f000 fc54 	bl	800cf2c <__mcmp>
 800c684:	4632      	mov	r2, r6
 800c686:	9009      	str	r0, [sp, #36]	; 0x24
 800c688:	4621      	mov	r1, r4
 800c68a:	4628      	mov	r0, r5
 800c68c:	f000 fc6a 	bl	800cf64 <__mdiff>
 800c690:	68c2      	ldr	r2, [r0, #12]
 800c692:	4607      	mov	r7, r0
 800c694:	bb02      	cbnz	r2, 800c6d8 <_dtoa_r+0xa60>
 800c696:	4601      	mov	r1, r0
 800c698:	4650      	mov	r0, sl
 800c69a:	f000 fc47 	bl	800cf2c <__mcmp>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	4639      	mov	r1, r7
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	920c      	str	r2, [sp, #48]	; 0x30
 800c6a6:	f000 fa07 	bl	800cab8 <_Bfree>
 800c6aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6ae:	9f08      	ldr	r7, [sp, #32]
 800c6b0:	ea43 0102 	orr.w	r1, r3, r2
 800c6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6b6:	4319      	orrs	r1, r3
 800c6b8:	d110      	bne.n	800c6dc <_dtoa_r+0xa64>
 800c6ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6be:	d029      	beq.n	800c714 <_dtoa_r+0xa9c>
 800c6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	dd02      	ble.n	800c6cc <_dtoa_r+0xa54>
 800c6c6:	9b06      	ldr	r3, [sp, #24]
 800c6c8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c6cc:	9b04      	ldr	r3, [sp, #16]
 800c6ce:	f883 9000 	strb.w	r9, [r3]
 800c6d2:	e777      	b.n	800c5c4 <_dtoa_r+0x94c>
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	e7ba      	b.n	800c64e <_dtoa_r+0x9d6>
 800c6d8:	2201      	movs	r2, #1
 800c6da:	e7e1      	b.n	800c6a0 <_dtoa_r+0xa28>
 800c6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	db04      	blt.n	800c6ec <_dtoa_r+0xa74>
 800c6e2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c6e4:	430b      	orrs	r3, r1
 800c6e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c6e8:	430b      	orrs	r3, r1
 800c6ea:	d120      	bne.n	800c72e <_dtoa_r+0xab6>
 800c6ec:	2a00      	cmp	r2, #0
 800c6ee:	dded      	ble.n	800c6cc <_dtoa_r+0xa54>
 800c6f0:	4651      	mov	r1, sl
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	f000 fbad 	bl	800ce54 <__lshift>
 800c6fa:	4621      	mov	r1, r4
 800c6fc:	4682      	mov	sl, r0
 800c6fe:	f000 fc15 	bl	800cf2c <__mcmp>
 800c702:	2800      	cmp	r0, #0
 800c704:	dc03      	bgt.n	800c70e <_dtoa_r+0xa96>
 800c706:	d1e1      	bne.n	800c6cc <_dtoa_r+0xa54>
 800c708:	f019 0f01 	tst.w	r9, #1
 800c70c:	d0de      	beq.n	800c6cc <_dtoa_r+0xa54>
 800c70e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c712:	d1d8      	bne.n	800c6c6 <_dtoa_r+0xa4e>
 800c714:	2339      	movs	r3, #57	; 0x39
 800c716:	9a04      	ldr	r2, [sp, #16]
 800c718:	7013      	strb	r3, [r2, #0]
 800c71a:	463b      	mov	r3, r7
 800c71c:	461f      	mov	r7, r3
 800c71e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c722:	3b01      	subs	r3, #1
 800c724:	2a39      	cmp	r2, #57	; 0x39
 800c726:	d06b      	beq.n	800c800 <_dtoa_r+0xb88>
 800c728:	3201      	adds	r2, #1
 800c72a:	701a      	strb	r2, [r3, #0]
 800c72c:	e74a      	b.n	800c5c4 <_dtoa_r+0x94c>
 800c72e:	2a00      	cmp	r2, #0
 800c730:	dd07      	ble.n	800c742 <_dtoa_r+0xaca>
 800c732:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c736:	d0ed      	beq.n	800c714 <_dtoa_r+0xa9c>
 800c738:	9a04      	ldr	r2, [sp, #16]
 800c73a:	f109 0301 	add.w	r3, r9, #1
 800c73e:	7013      	strb	r3, [r2, #0]
 800c740:	e740      	b.n	800c5c4 <_dtoa_r+0x94c>
 800c742:	9b08      	ldr	r3, [sp, #32]
 800c744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c746:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d042      	beq.n	800c7d4 <_dtoa_r+0xb5c>
 800c74e:	4651      	mov	r1, sl
 800c750:	2300      	movs	r3, #0
 800c752:	220a      	movs	r2, #10
 800c754:	4628      	mov	r0, r5
 800c756:	f000 f9d1 	bl	800cafc <__multadd>
 800c75a:	45b0      	cmp	r8, r6
 800c75c:	4682      	mov	sl, r0
 800c75e:	f04f 0300 	mov.w	r3, #0
 800c762:	f04f 020a 	mov.w	r2, #10
 800c766:	4641      	mov	r1, r8
 800c768:	4628      	mov	r0, r5
 800c76a:	d107      	bne.n	800c77c <_dtoa_r+0xb04>
 800c76c:	f000 f9c6 	bl	800cafc <__multadd>
 800c770:	4680      	mov	r8, r0
 800c772:	4606      	mov	r6, r0
 800c774:	9b08      	ldr	r3, [sp, #32]
 800c776:	3301      	adds	r3, #1
 800c778:	9308      	str	r3, [sp, #32]
 800c77a:	e775      	b.n	800c668 <_dtoa_r+0x9f0>
 800c77c:	f000 f9be 	bl	800cafc <__multadd>
 800c780:	4631      	mov	r1, r6
 800c782:	4680      	mov	r8, r0
 800c784:	2300      	movs	r3, #0
 800c786:	220a      	movs	r2, #10
 800c788:	4628      	mov	r0, r5
 800c78a:	f000 f9b7 	bl	800cafc <__multadd>
 800c78e:	4606      	mov	r6, r0
 800c790:	e7f0      	b.n	800c774 <_dtoa_r+0xafc>
 800c792:	9b08      	ldr	r3, [sp, #32]
 800c794:	9306      	str	r3, [sp, #24]
 800c796:	9f03      	ldr	r7, [sp, #12]
 800c798:	4621      	mov	r1, r4
 800c79a:	4650      	mov	r0, sl
 800c79c:	f7ff f9e3 	bl	800bb66 <quorem>
 800c7a0:	9b03      	ldr	r3, [sp, #12]
 800c7a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7a6:	f807 9b01 	strb.w	r9, [r7], #1
 800c7aa:	1afa      	subs	r2, r7, r3
 800c7ac:	9b06      	ldr	r3, [sp, #24]
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	dd07      	ble.n	800c7c2 <_dtoa_r+0xb4a>
 800c7b2:	4651      	mov	r1, sl
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	220a      	movs	r2, #10
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	f000 f99f 	bl	800cafc <__multadd>
 800c7be:	4682      	mov	sl, r0
 800c7c0:	e7ea      	b.n	800c798 <_dtoa_r+0xb20>
 800c7c2:	9b06      	ldr	r3, [sp, #24]
 800c7c4:	f04f 0800 	mov.w	r8, #0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	bfcc      	ite	gt
 800c7cc:	461f      	movgt	r7, r3
 800c7ce:	2701      	movle	r7, #1
 800c7d0:	9b03      	ldr	r3, [sp, #12]
 800c7d2:	441f      	add	r7, r3
 800c7d4:	4651      	mov	r1, sl
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	4628      	mov	r0, r5
 800c7da:	f000 fb3b 	bl	800ce54 <__lshift>
 800c7de:	4621      	mov	r1, r4
 800c7e0:	4682      	mov	sl, r0
 800c7e2:	f000 fba3 	bl	800cf2c <__mcmp>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	dc97      	bgt.n	800c71a <_dtoa_r+0xaa2>
 800c7ea:	d102      	bne.n	800c7f2 <_dtoa_r+0xb7a>
 800c7ec:	f019 0f01 	tst.w	r9, #1
 800c7f0:	d193      	bne.n	800c71a <_dtoa_r+0xaa2>
 800c7f2:	463b      	mov	r3, r7
 800c7f4:	461f      	mov	r7, r3
 800c7f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7fa:	2a30      	cmp	r2, #48	; 0x30
 800c7fc:	d0fa      	beq.n	800c7f4 <_dtoa_r+0xb7c>
 800c7fe:	e6e1      	b.n	800c5c4 <_dtoa_r+0x94c>
 800c800:	9a03      	ldr	r2, [sp, #12]
 800c802:	429a      	cmp	r2, r3
 800c804:	d18a      	bne.n	800c71c <_dtoa_r+0xaa4>
 800c806:	2331      	movs	r3, #49	; 0x31
 800c808:	f10b 0b01 	add.w	fp, fp, #1
 800c80c:	e797      	b.n	800c73e <_dtoa_r+0xac6>
 800c80e:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <_dtoa_r+0xbc0>)
 800c810:	f7ff ba9f 	b.w	800bd52 <_dtoa_r+0xda>
 800c814:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c816:	2b00      	cmp	r3, #0
 800c818:	f47f aa77 	bne.w	800bd0a <_dtoa_r+0x92>
 800c81c:	4b07      	ldr	r3, [pc, #28]	; (800c83c <_dtoa_r+0xbc4>)
 800c81e:	f7ff ba98 	b.w	800bd52 <_dtoa_r+0xda>
 800c822:	9b06      	ldr	r3, [sp, #24]
 800c824:	2b00      	cmp	r3, #0
 800c826:	dcb6      	bgt.n	800c796 <_dtoa_r+0xb1e>
 800c828:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	f73f aeb5 	bgt.w	800c59a <_dtoa_r+0x922>
 800c830:	e7b1      	b.n	800c796 <_dtoa_r+0xb1e>
 800c832:	bf00      	nop
 800c834:	0800e41e 	.word	0x0800e41e
 800c838:	0800e37e 	.word	0x0800e37e
 800c83c:	0800e3a2 	.word	0x0800e3a2

0800c840 <_free_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4605      	mov	r5, r0
 800c844:	2900      	cmp	r1, #0
 800c846:	d040      	beq.n	800c8ca <_free_r+0x8a>
 800c848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c84c:	1f0c      	subs	r4, r1, #4
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfb8      	it	lt
 800c852:	18e4      	addlt	r4, r4, r3
 800c854:	f000 f8e4 	bl	800ca20 <__malloc_lock>
 800c858:	4a1c      	ldr	r2, [pc, #112]	; (800c8cc <_free_r+0x8c>)
 800c85a:	6813      	ldr	r3, [r2, #0]
 800c85c:	b933      	cbnz	r3, 800c86c <_free_r+0x2c>
 800c85e:	6063      	str	r3, [r4, #4]
 800c860:	6014      	str	r4, [r2, #0]
 800c862:	4628      	mov	r0, r5
 800c864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c868:	f000 b8e0 	b.w	800ca2c <__malloc_unlock>
 800c86c:	42a3      	cmp	r3, r4
 800c86e:	d908      	bls.n	800c882 <_free_r+0x42>
 800c870:	6820      	ldr	r0, [r4, #0]
 800c872:	1821      	adds	r1, r4, r0
 800c874:	428b      	cmp	r3, r1
 800c876:	bf01      	itttt	eq
 800c878:	6819      	ldreq	r1, [r3, #0]
 800c87a:	685b      	ldreq	r3, [r3, #4]
 800c87c:	1809      	addeq	r1, r1, r0
 800c87e:	6021      	streq	r1, [r4, #0]
 800c880:	e7ed      	b.n	800c85e <_free_r+0x1e>
 800c882:	461a      	mov	r2, r3
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	b10b      	cbz	r3, 800c88c <_free_r+0x4c>
 800c888:	42a3      	cmp	r3, r4
 800c88a:	d9fa      	bls.n	800c882 <_free_r+0x42>
 800c88c:	6811      	ldr	r1, [r2, #0]
 800c88e:	1850      	adds	r0, r2, r1
 800c890:	42a0      	cmp	r0, r4
 800c892:	d10b      	bne.n	800c8ac <_free_r+0x6c>
 800c894:	6820      	ldr	r0, [r4, #0]
 800c896:	4401      	add	r1, r0
 800c898:	1850      	adds	r0, r2, r1
 800c89a:	4283      	cmp	r3, r0
 800c89c:	6011      	str	r1, [r2, #0]
 800c89e:	d1e0      	bne.n	800c862 <_free_r+0x22>
 800c8a0:	6818      	ldr	r0, [r3, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	4408      	add	r0, r1
 800c8a6:	6010      	str	r0, [r2, #0]
 800c8a8:	6053      	str	r3, [r2, #4]
 800c8aa:	e7da      	b.n	800c862 <_free_r+0x22>
 800c8ac:	d902      	bls.n	800c8b4 <_free_r+0x74>
 800c8ae:	230c      	movs	r3, #12
 800c8b0:	602b      	str	r3, [r5, #0]
 800c8b2:	e7d6      	b.n	800c862 <_free_r+0x22>
 800c8b4:	6820      	ldr	r0, [r4, #0]
 800c8b6:	1821      	adds	r1, r4, r0
 800c8b8:	428b      	cmp	r3, r1
 800c8ba:	bf01      	itttt	eq
 800c8bc:	6819      	ldreq	r1, [r3, #0]
 800c8be:	685b      	ldreq	r3, [r3, #4]
 800c8c0:	1809      	addeq	r1, r1, r0
 800c8c2:	6021      	streq	r1, [r4, #0]
 800c8c4:	6063      	str	r3, [r4, #4]
 800c8c6:	6054      	str	r4, [r2, #4]
 800c8c8:	e7cb      	b.n	800c862 <_free_r+0x22>
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	20001864 	.word	0x20001864

0800c8d0 <malloc>:
 800c8d0:	4b02      	ldr	r3, [pc, #8]	; (800c8dc <malloc+0xc>)
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	6818      	ldr	r0, [r3, #0]
 800c8d6:	f000 b823 	b.w	800c920 <_malloc_r>
 800c8da:	bf00      	nop
 800c8dc:	20000264 	.word	0x20000264

0800c8e0 <sbrk_aligned>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	4e0e      	ldr	r6, [pc, #56]	; (800c91c <sbrk_aligned+0x3c>)
 800c8e4:	460c      	mov	r4, r1
 800c8e6:	6831      	ldr	r1, [r6, #0]
 800c8e8:	4605      	mov	r5, r0
 800c8ea:	b911      	cbnz	r1, 800c8f2 <sbrk_aligned+0x12>
 800c8ec:	f000 fe38 	bl	800d560 <_sbrk_r>
 800c8f0:	6030      	str	r0, [r6, #0]
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f000 fe33 	bl	800d560 <_sbrk_r>
 800c8fa:	1c43      	adds	r3, r0, #1
 800c8fc:	d00a      	beq.n	800c914 <sbrk_aligned+0x34>
 800c8fe:	1cc4      	adds	r4, r0, #3
 800c900:	f024 0403 	bic.w	r4, r4, #3
 800c904:	42a0      	cmp	r0, r4
 800c906:	d007      	beq.n	800c918 <sbrk_aligned+0x38>
 800c908:	1a21      	subs	r1, r4, r0
 800c90a:	4628      	mov	r0, r5
 800c90c:	f000 fe28 	bl	800d560 <_sbrk_r>
 800c910:	3001      	adds	r0, #1
 800c912:	d101      	bne.n	800c918 <sbrk_aligned+0x38>
 800c914:	f04f 34ff 	mov.w	r4, #4294967295
 800c918:	4620      	mov	r0, r4
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	20001868 	.word	0x20001868

0800c920 <_malloc_r>:
 800c920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c924:	1ccd      	adds	r5, r1, #3
 800c926:	f025 0503 	bic.w	r5, r5, #3
 800c92a:	3508      	adds	r5, #8
 800c92c:	2d0c      	cmp	r5, #12
 800c92e:	bf38      	it	cc
 800c930:	250c      	movcc	r5, #12
 800c932:	2d00      	cmp	r5, #0
 800c934:	4607      	mov	r7, r0
 800c936:	db01      	blt.n	800c93c <_malloc_r+0x1c>
 800c938:	42a9      	cmp	r1, r5
 800c93a:	d905      	bls.n	800c948 <_malloc_r+0x28>
 800c93c:	230c      	movs	r3, #12
 800c93e:	2600      	movs	r6, #0
 800c940:	603b      	str	r3, [r7, #0]
 800c942:	4630      	mov	r0, r6
 800c944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c948:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ca1c <_malloc_r+0xfc>
 800c94c:	f000 f868 	bl	800ca20 <__malloc_lock>
 800c950:	f8d8 3000 	ldr.w	r3, [r8]
 800c954:	461c      	mov	r4, r3
 800c956:	bb5c      	cbnz	r4, 800c9b0 <_malloc_r+0x90>
 800c958:	4629      	mov	r1, r5
 800c95a:	4638      	mov	r0, r7
 800c95c:	f7ff ffc0 	bl	800c8e0 <sbrk_aligned>
 800c960:	1c43      	adds	r3, r0, #1
 800c962:	4604      	mov	r4, r0
 800c964:	d155      	bne.n	800ca12 <_malloc_r+0xf2>
 800c966:	f8d8 4000 	ldr.w	r4, [r8]
 800c96a:	4626      	mov	r6, r4
 800c96c:	2e00      	cmp	r6, #0
 800c96e:	d145      	bne.n	800c9fc <_malloc_r+0xdc>
 800c970:	2c00      	cmp	r4, #0
 800c972:	d048      	beq.n	800ca06 <_malloc_r+0xe6>
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	4631      	mov	r1, r6
 800c978:	4638      	mov	r0, r7
 800c97a:	eb04 0903 	add.w	r9, r4, r3
 800c97e:	f000 fdef 	bl	800d560 <_sbrk_r>
 800c982:	4581      	cmp	r9, r0
 800c984:	d13f      	bne.n	800ca06 <_malloc_r+0xe6>
 800c986:	6821      	ldr	r1, [r4, #0]
 800c988:	4638      	mov	r0, r7
 800c98a:	1a6d      	subs	r5, r5, r1
 800c98c:	4629      	mov	r1, r5
 800c98e:	f7ff ffa7 	bl	800c8e0 <sbrk_aligned>
 800c992:	3001      	adds	r0, #1
 800c994:	d037      	beq.n	800ca06 <_malloc_r+0xe6>
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	442b      	add	r3, r5
 800c99a:	6023      	str	r3, [r4, #0]
 800c99c:	f8d8 3000 	ldr.w	r3, [r8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d038      	beq.n	800ca16 <_malloc_r+0xf6>
 800c9a4:	685a      	ldr	r2, [r3, #4]
 800c9a6:	42a2      	cmp	r2, r4
 800c9a8:	d12b      	bne.n	800ca02 <_malloc_r+0xe2>
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	605a      	str	r2, [r3, #4]
 800c9ae:	e00f      	b.n	800c9d0 <_malloc_r+0xb0>
 800c9b0:	6822      	ldr	r2, [r4, #0]
 800c9b2:	1b52      	subs	r2, r2, r5
 800c9b4:	d41f      	bmi.n	800c9f6 <_malloc_r+0xd6>
 800c9b6:	2a0b      	cmp	r2, #11
 800c9b8:	d917      	bls.n	800c9ea <_malloc_r+0xca>
 800c9ba:	1961      	adds	r1, r4, r5
 800c9bc:	42a3      	cmp	r3, r4
 800c9be:	6025      	str	r5, [r4, #0]
 800c9c0:	bf18      	it	ne
 800c9c2:	6059      	strne	r1, [r3, #4]
 800c9c4:	6863      	ldr	r3, [r4, #4]
 800c9c6:	bf08      	it	eq
 800c9c8:	f8c8 1000 	streq.w	r1, [r8]
 800c9cc:	5162      	str	r2, [r4, r5]
 800c9ce:	604b      	str	r3, [r1, #4]
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f104 060b 	add.w	r6, r4, #11
 800c9d6:	f000 f829 	bl	800ca2c <__malloc_unlock>
 800c9da:	f026 0607 	bic.w	r6, r6, #7
 800c9de:	1d23      	adds	r3, r4, #4
 800c9e0:	1af2      	subs	r2, r6, r3
 800c9e2:	d0ae      	beq.n	800c942 <_malloc_r+0x22>
 800c9e4:	1b9b      	subs	r3, r3, r6
 800c9e6:	50a3      	str	r3, [r4, r2]
 800c9e8:	e7ab      	b.n	800c942 <_malloc_r+0x22>
 800c9ea:	42a3      	cmp	r3, r4
 800c9ec:	6862      	ldr	r2, [r4, #4]
 800c9ee:	d1dd      	bne.n	800c9ac <_malloc_r+0x8c>
 800c9f0:	f8c8 2000 	str.w	r2, [r8]
 800c9f4:	e7ec      	b.n	800c9d0 <_malloc_r+0xb0>
 800c9f6:	4623      	mov	r3, r4
 800c9f8:	6864      	ldr	r4, [r4, #4]
 800c9fa:	e7ac      	b.n	800c956 <_malloc_r+0x36>
 800c9fc:	4634      	mov	r4, r6
 800c9fe:	6876      	ldr	r6, [r6, #4]
 800ca00:	e7b4      	b.n	800c96c <_malloc_r+0x4c>
 800ca02:	4613      	mov	r3, r2
 800ca04:	e7cc      	b.n	800c9a0 <_malloc_r+0x80>
 800ca06:	230c      	movs	r3, #12
 800ca08:	4638      	mov	r0, r7
 800ca0a:	603b      	str	r3, [r7, #0]
 800ca0c:	f000 f80e 	bl	800ca2c <__malloc_unlock>
 800ca10:	e797      	b.n	800c942 <_malloc_r+0x22>
 800ca12:	6025      	str	r5, [r4, #0]
 800ca14:	e7dc      	b.n	800c9d0 <_malloc_r+0xb0>
 800ca16:	605b      	str	r3, [r3, #4]
 800ca18:	deff      	udf	#255	; 0xff
 800ca1a:	bf00      	nop
 800ca1c:	20001864 	.word	0x20001864

0800ca20 <__malloc_lock>:
 800ca20:	4801      	ldr	r0, [pc, #4]	; (800ca28 <__malloc_lock+0x8>)
 800ca22:	f7ff b890 	b.w	800bb46 <__retarget_lock_acquire_recursive>
 800ca26:	bf00      	nop
 800ca28:	20001860 	.word	0x20001860

0800ca2c <__malloc_unlock>:
 800ca2c:	4801      	ldr	r0, [pc, #4]	; (800ca34 <__malloc_unlock+0x8>)
 800ca2e:	f7ff b88b 	b.w	800bb48 <__retarget_lock_release_recursive>
 800ca32:	bf00      	nop
 800ca34:	20001860 	.word	0x20001860

0800ca38 <_Balloc>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	69c6      	ldr	r6, [r0, #28]
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	460d      	mov	r5, r1
 800ca40:	b976      	cbnz	r6, 800ca60 <_Balloc+0x28>
 800ca42:	2010      	movs	r0, #16
 800ca44:	f7ff ff44 	bl	800c8d0 <malloc>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	61e0      	str	r0, [r4, #28]
 800ca4c:	b920      	cbnz	r0, 800ca58 <_Balloc+0x20>
 800ca4e:	216b      	movs	r1, #107	; 0x6b
 800ca50:	4b17      	ldr	r3, [pc, #92]	; (800cab0 <_Balloc+0x78>)
 800ca52:	4818      	ldr	r0, [pc, #96]	; (800cab4 <_Balloc+0x7c>)
 800ca54:	f000 fda2 	bl	800d59c <__assert_func>
 800ca58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca5c:	6006      	str	r6, [r0, #0]
 800ca5e:	60c6      	str	r6, [r0, #12]
 800ca60:	69e6      	ldr	r6, [r4, #28]
 800ca62:	68f3      	ldr	r3, [r6, #12]
 800ca64:	b183      	cbz	r3, 800ca88 <_Balloc+0x50>
 800ca66:	69e3      	ldr	r3, [r4, #28]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca6e:	b9b8      	cbnz	r0, 800caa0 <_Balloc+0x68>
 800ca70:	2101      	movs	r1, #1
 800ca72:	fa01 f605 	lsl.w	r6, r1, r5
 800ca76:	1d72      	adds	r2, r6, #5
 800ca78:	4620      	mov	r0, r4
 800ca7a:	0092      	lsls	r2, r2, #2
 800ca7c:	f000 fdac 	bl	800d5d8 <_calloc_r>
 800ca80:	b160      	cbz	r0, 800ca9c <_Balloc+0x64>
 800ca82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca86:	e00e      	b.n	800caa6 <_Balloc+0x6e>
 800ca88:	2221      	movs	r2, #33	; 0x21
 800ca8a:	2104      	movs	r1, #4
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f000 fda3 	bl	800d5d8 <_calloc_r>
 800ca92:	69e3      	ldr	r3, [r4, #28]
 800ca94:	60f0      	str	r0, [r6, #12]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1e4      	bne.n	800ca66 <_Balloc+0x2e>
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	bd70      	pop	{r4, r5, r6, pc}
 800caa0:	6802      	ldr	r2, [r0, #0]
 800caa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800caa6:	2300      	movs	r3, #0
 800caa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800caac:	e7f7      	b.n	800ca9e <_Balloc+0x66>
 800caae:	bf00      	nop
 800cab0:	0800e3af 	.word	0x0800e3af
 800cab4:	0800e42f 	.word	0x0800e42f

0800cab8 <_Bfree>:
 800cab8:	b570      	push	{r4, r5, r6, lr}
 800caba:	69c6      	ldr	r6, [r0, #28]
 800cabc:	4605      	mov	r5, r0
 800cabe:	460c      	mov	r4, r1
 800cac0:	b976      	cbnz	r6, 800cae0 <_Bfree+0x28>
 800cac2:	2010      	movs	r0, #16
 800cac4:	f7ff ff04 	bl	800c8d0 <malloc>
 800cac8:	4602      	mov	r2, r0
 800caca:	61e8      	str	r0, [r5, #28]
 800cacc:	b920      	cbnz	r0, 800cad8 <_Bfree+0x20>
 800cace:	218f      	movs	r1, #143	; 0x8f
 800cad0:	4b08      	ldr	r3, [pc, #32]	; (800caf4 <_Bfree+0x3c>)
 800cad2:	4809      	ldr	r0, [pc, #36]	; (800caf8 <_Bfree+0x40>)
 800cad4:	f000 fd62 	bl	800d59c <__assert_func>
 800cad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cadc:	6006      	str	r6, [r0, #0]
 800cade:	60c6      	str	r6, [r0, #12]
 800cae0:	b13c      	cbz	r4, 800caf2 <_Bfree+0x3a>
 800cae2:	69eb      	ldr	r3, [r5, #28]
 800cae4:	6862      	ldr	r2, [r4, #4]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800caec:	6021      	str	r1, [r4, #0]
 800caee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800caf2:	bd70      	pop	{r4, r5, r6, pc}
 800caf4:	0800e3af 	.word	0x0800e3af
 800caf8:	0800e42f 	.word	0x0800e42f

0800cafc <__multadd>:
 800cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb00:	4607      	mov	r7, r0
 800cb02:	460c      	mov	r4, r1
 800cb04:	461e      	mov	r6, r3
 800cb06:	2000      	movs	r0, #0
 800cb08:	690d      	ldr	r5, [r1, #16]
 800cb0a:	f101 0c14 	add.w	ip, r1, #20
 800cb0e:	f8dc 3000 	ldr.w	r3, [ip]
 800cb12:	3001      	adds	r0, #1
 800cb14:	b299      	uxth	r1, r3
 800cb16:	fb02 6101 	mla	r1, r2, r1, r6
 800cb1a:	0c1e      	lsrs	r6, r3, #16
 800cb1c:	0c0b      	lsrs	r3, r1, #16
 800cb1e:	fb02 3306 	mla	r3, r2, r6, r3
 800cb22:	b289      	uxth	r1, r1
 800cb24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb28:	4285      	cmp	r5, r0
 800cb2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb2e:	f84c 1b04 	str.w	r1, [ip], #4
 800cb32:	dcec      	bgt.n	800cb0e <__multadd+0x12>
 800cb34:	b30e      	cbz	r6, 800cb7a <__multadd+0x7e>
 800cb36:	68a3      	ldr	r3, [r4, #8]
 800cb38:	42ab      	cmp	r3, r5
 800cb3a:	dc19      	bgt.n	800cb70 <__multadd+0x74>
 800cb3c:	6861      	ldr	r1, [r4, #4]
 800cb3e:	4638      	mov	r0, r7
 800cb40:	3101      	adds	r1, #1
 800cb42:	f7ff ff79 	bl	800ca38 <_Balloc>
 800cb46:	4680      	mov	r8, r0
 800cb48:	b928      	cbnz	r0, 800cb56 <__multadd+0x5a>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	21ba      	movs	r1, #186	; 0xba
 800cb4e:	4b0c      	ldr	r3, [pc, #48]	; (800cb80 <__multadd+0x84>)
 800cb50:	480c      	ldr	r0, [pc, #48]	; (800cb84 <__multadd+0x88>)
 800cb52:	f000 fd23 	bl	800d59c <__assert_func>
 800cb56:	6922      	ldr	r2, [r4, #16]
 800cb58:	f104 010c 	add.w	r1, r4, #12
 800cb5c:	3202      	adds	r2, #2
 800cb5e:	0092      	lsls	r2, r2, #2
 800cb60:	300c      	adds	r0, #12
 800cb62:	f000 fd0d 	bl	800d580 <memcpy>
 800cb66:	4621      	mov	r1, r4
 800cb68:	4638      	mov	r0, r7
 800cb6a:	f7ff ffa5 	bl	800cab8 <_Bfree>
 800cb6e:	4644      	mov	r4, r8
 800cb70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb74:	3501      	adds	r5, #1
 800cb76:	615e      	str	r6, [r3, #20]
 800cb78:	6125      	str	r5, [r4, #16]
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb80:	0800e41e 	.word	0x0800e41e
 800cb84:	0800e42f 	.word	0x0800e42f

0800cb88 <__hi0bits>:
 800cb88:	0c02      	lsrs	r2, r0, #16
 800cb8a:	0412      	lsls	r2, r2, #16
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	b9ca      	cbnz	r2, 800cbc4 <__hi0bits+0x3c>
 800cb90:	0403      	lsls	r3, r0, #16
 800cb92:	2010      	movs	r0, #16
 800cb94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cb98:	bf04      	itt	eq
 800cb9a:	021b      	lsleq	r3, r3, #8
 800cb9c:	3008      	addeq	r0, #8
 800cb9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cba2:	bf04      	itt	eq
 800cba4:	011b      	lsleq	r3, r3, #4
 800cba6:	3004      	addeq	r0, #4
 800cba8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cbac:	bf04      	itt	eq
 800cbae:	009b      	lsleq	r3, r3, #2
 800cbb0:	3002      	addeq	r0, #2
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	db05      	blt.n	800cbc2 <__hi0bits+0x3a>
 800cbb6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cbba:	f100 0001 	add.w	r0, r0, #1
 800cbbe:	bf08      	it	eq
 800cbc0:	2020      	moveq	r0, #32
 800cbc2:	4770      	bx	lr
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	e7e5      	b.n	800cb94 <__hi0bits+0xc>

0800cbc8 <__lo0bits>:
 800cbc8:	6803      	ldr	r3, [r0, #0]
 800cbca:	4602      	mov	r2, r0
 800cbcc:	f013 0007 	ands.w	r0, r3, #7
 800cbd0:	d00b      	beq.n	800cbea <__lo0bits+0x22>
 800cbd2:	07d9      	lsls	r1, r3, #31
 800cbd4:	d421      	bmi.n	800cc1a <__lo0bits+0x52>
 800cbd6:	0798      	lsls	r0, r3, #30
 800cbd8:	bf49      	itett	mi
 800cbda:	085b      	lsrmi	r3, r3, #1
 800cbdc:	089b      	lsrpl	r3, r3, #2
 800cbde:	2001      	movmi	r0, #1
 800cbe0:	6013      	strmi	r3, [r2, #0]
 800cbe2:	bf5c      	itt	pl
 800cbe4:	2002      	movpl	r0, #2
 800cbe6:	6013      	strpl	r3, [r2, #0]
 800cbe8:	4770      	bx	lr
 800cbea:	b299      	uxth	r1, r3
 800cbec:	b909      	cbnz	r1, 800cbf2 <__lo0bits+0x2a>
 800cbee:	2010      	movs	r0, #16
 800cbf0:	0c1b      	lsrs	r3, r3, #16
 800cbf2:	b2d9      	uxtb	r1, r3
 800cbf4:	b909      	cbnz	r1, 800cbfa <__lo0bits+0x32>
 800cbf6:	3008      	adds	r0, #8
 800cbf8:	0a1b      	lsrs	r3, r3, #8
 800cbfa:	0719      	lsls	r1, r3, #28
 800cbfc:	bf04      	itt	eq
 800cbfe:	091b      	lsreq	r3, r3, #4
 800cc00:	3004      	addeq	r0, #4
 800cc02:	0799      	lsls	r1, r3, #30
 800cc04:	bf04      	itt	eq
 800cc06:	089b      	lsreq	r3, r3, #2
 800cc08:	3002      	addeq	r0, #2
 800cc0a:	07d9      	lsls	r1, r3, #31
 800cc0c:	d403      	bmi.n	800cc16 <__lo0bits+0x4e>
 800cc0e:	085b      	lsrs	r3, r3, #1
 800cc10:	f100 0001 	add.w	r0, r0, #1
 800cc14:	d003      	beq.n	800cc1e <__lo0bits+0x56>
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	4770      	bx	lr
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	4770      	bx	lr
 800cc1e:	2020      	movs	r0, #32
 800cc20:	4770      	bx	lr
	...

0800cc24 <__i2b>:
 800cc24:	b510      	push	{r4, lr}
 800cc26:	460c      	mov	r4, r1
 800cc28:	2101      	movs	r1, #1
 800cc2a:	f7ff ff05 	bl	800ca38 <_Balloc>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	b928      	cbnz	r0, 800cc3e <__i2b+0x1a>
 800cc32:	f240 1145 	movw	r1, #325	; 0x145
 800cc36:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <__i2b+0x24>)
 800cc38:	4804      	ldr	r0, [pc, #16]	; (800cc4c <__i2b+0x28>)
 800cc3a:	f000 fcaf 	bl	800d59c <__assert_func>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	6144      	str	r4, [r0, #20]
 800cc42:	6103      	str	r3, [r0, #16]
 800cc44:	bd10      	pop	{r4, pc}
 800cc46:	bf00      	nop
 800cc48:	0800e41e 	.word	0x0800e41e
 800cc4c:	0800e42f 	.word	0x0800e42f

0800cc50 <__multiply>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	4691      	mov	r9, r2
 800cc56:	690a      	ldr	r2, [r1, #16]
 800cc58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	bfbe      	ittt	lt
 800cc62:	460b      	movlt	r3, r1
 800cc64:	464c      	movlt	r4, r9
 800cc66:	4699      	movlt	r9, r3
 800cc68:	6927      	ldr	r7, [r4, #16]
 800cc6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	6861      	ldr	r1, [r4, #4]
 800cc72:	eb07 060a 	add.w	r6, r7, sl
 800cc76:	42b3      	cmp	r3, r6
 800cc78:	b085      	sub	sp, #20
 800cc7a:	bfb8      	it	lt
 800cc7c:	3101      	addlt	r1, #1
 800cc7e:	f7ff fedb 	bl	800ca38 <_Balloc>
 800cc82:	b930      	cbnz	r0, 800cc92 <__multiply+0x42>
 800cc84:	4602      	mov	r2, r0
 800cc86:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cc8a:	4b43      	ldr	r3, [pc, #268]	; (800cd98 <__multiply+0x148>)
 800cc8c:	4843      	ldr	r0, [pc, #268]	; (800cd9c <__multiply+0x14c>)
 800cc8e:	f000 fc85 	bl	800d59c <__assert_func>
 800cc92:	f100 0514 	add.w	r5, r0, #20
 800cc96:	462b      	mov	r3, r5
 800cc98:	2200      	movs	r2, #0
 800cc9a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc9e:	4543      	cmp	r3, r8
 800cca0:	d321      	bcc.n	800cce6 <__multiply+0x96>
 800cca2:	f104 0314 	add.w	r3, r4, #20
 800cca6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ccaa:	f109 0314 	add.w	r3, r9, #20
 800ccae:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ccb2:	9202      	str	r2, [sp, #8]
 800ccb4:	1b3a      	subs	r2, r7, r4
 800ccb6:	3a15      	subs	r2, #21
 800ccb8:	f022 0203 	bic.w	r2, r2, #3
 800ccbc:	3204      	adds	r2, #4
 800ccbe:	f104 0115 	add.w	r1, r4, #21
 800ccc2:	428f      	cmp	r7, r1
 800ccc4:	bf38      	it	cc
 800ccc6:	2204      	movcc	r2, #4
 800ccc8:	9201      	str	r2, [sp, #4]
 800ccca:	9a02      	ldr	r2, [sp, #8]
 800cccc:	9303      	str	r3, [sp, #12]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d80c      	bhi.n	800ccec <__multiply+0x9c>
 800ccd2:	2e00      	cmp	r6, #0
 800ccd4:	dd03      	ble.n	800ccde <__multiply+0x8e>
 800ccd6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d05a      	beq.n	800cd94 <__multiply+0x144>
 800ccde:	6106      	str	r6, [r0, #16]
 800cce0:	b005      	add	sp, #20
 800cce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce6:	f843 2b04 	str.w	r2, [r3], #4
 800ccea:	e7d8      	b.n	800cc9e <__multiply+0x4e>
 800ccec:	f8b3 a000 	ldrh.w	sl, [r3]
 800ccf0:	f1ba 0f00 	cmp.w	sl, #0
 800ccf4:	d023      	beq.n	800cd3e <__multiply+0xee>
 800ccf6:	46a9      	mov	r9, r5
 800ccf8:	f04f 0c00 	mov.w	ip, #0
 800ccfc:	f104 0e14 	add.w	lr, r4, #20
 800cd00:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cd04:	f8d9 1000 	ldr.w	r1, [r9]
 800cd08:	fa1f fb82 	uxth.w	fp, r2
 800cd0c:	b289      	uxth	r1, r1
 800cd0e:	fb0a 110b 	mla	r1, sl, fp, r1
 800cd12:	4461      	add	r1, ip
 800cd14:	f8d9 c000 	ldr.w	ip, [r9]
 800cd18:	0c12      	lsrs	r2, r2, #16
 800cd1a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cd1e:	fb0a c202 	mla	r2, sl, r2, ip
 800cd22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd26:	b289      	uxth	r1, r1
 800cd28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd2c:	4577      	cmp	r7, lr
 800cd2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd32:	f849 1b04 	str.w	r1, [r9], #4
 800cd36:	d8e3      	bhi.n	800cd00 <__multiply+0xb0>
 800cd38:	9a01      	ldr	r2, [sp, #4]
 800cd3a:	f845 c002 	str.w	ip, [r5, r2]
 800cd3e:	9a03      	ldr	r2, [sp, #12]
 800cd40:	3304      	adds	r3, #4
 800cd42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd46:	f1b9 0f00 	cmp.w	r9, #0
 800cd4a:	d021      	beq.n	800cd90 <__multiply+0x140>
 800cd4c:	46ae      	mov	lr, r5
 800cd4e:	f04f 0a00 	mov.w	sl, #0
 800cd52:	6829      	ldr	r1, [r5, #0]
 800cd54:	f104 0c14 	add.w	ip, r4, #20
 800cd58:	f8bc b000 	ldrh.w	fp, [ip]
 800cd5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cd60:	b289      	uxth	r1, r1
 800cd62:	fb09 220b 	mla	r2, r9, fp, r2
 800cd66:	4452      	add	r2, sl
 800cd68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd6c:	f84e 1b04 	str.w	r1, [lr], #4
 800cd70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cd74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd78:	f8be 1000 	ldrh.w	r1, [lr]
 800cd7c:	4567      	cmp	r7, ip
 800cd7e:	fb09 110a 	mla	r1, r9, sl, r1
 800cd82:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cd86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd8a:	d8e5      	bhi.n	800cd58 <__multiply+0x108>
 800cd8c:	9a01      	ldr	r2, [sp, #4]
 800cd8e:	50a9      	str	r1, [r5, r2]
 800cd90:	3504      	adds	r5, #4
 800cd92:	e79a      	b.n	800ccca <__multiply+0x7a>
 800cd94:	3e01      	subs	r6, #1
 800cd96:	e79c      	b.n	800ccd2 <__multiply+0x82>
 800cd98:	0800e41e 	.word	0x0800e41e
 800cd9c:	0800e42f 	.word	0x0800e42f

0800cda0 <__pow5mult>:
 800cda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cda4:	4615      	mov	r5, r2
 800cda6:	f012 0203 	ands.w	r2, r2, #3
 800cdaa:	4606      	mov	r6, r0
 800cdac:	460f      	mov	r7, r1
 800cdae:	d007      	beq.n	800cdc0 <__pow5mult+0x20>
 800cdb0:	4c25      	ldr	r4, [pc, #148]	; (800ce48 <__pow5mult+0xa8>)
 800cdb2:	3a01      	subs	r2, #1
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdba:	f7ff fe9f 	bl	800cafc <__multadd>
 800cdbe:	4607      	mov	r7, r0
 800cdc0:	10ad      	asrs	r5, r5, #2
 800cdc2:	d03d      	beq.n	800ce40 <__pow5mult+0xa0>
 800cdc4:	69f4      	ldr	r4, [r6, #28]
 800cdc6:	b97c      	cbnz	r4, 800cde8 <__pow5mult+0x48>
 800cdc8:	2010      	movs	r0, #16
 800cdca:	f7ff fd81 	bl	800c8d0 <malloc>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	61f0      	str	r0, [r6, #28]
 800cdd2:	b928      	cbnz	r0, 800cde0 <__pow5mult+0x40>
 800cdd4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cdd8:	4b1c      	ldr	r3, [pc, #112]	; (800ce4c <__pow5mult+0xac>)
 800cdda:	481d      	ldr	r0, [pc, #116]	; (800ce50 <__pow5mult+0xb0>)
 800cddc:	f000 fbde 	bl	800d59c <__assert_func>
 800cde0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cde4:	6004      	str	r4, [r0, #0]
 800cde6:	60c4      	str	r4, [r0, #12]
 800cde8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cdec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdf0:	b94c      	cbnz	r4, 800ce06 <__pow5mult+0x66>
 800cdf2:	f240 2171 	movw	r1, #625	; 0x271
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f7ff ff14 	bl	800cc24 <__i2b>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	4604      	mov	r4, r0
 800ce00:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce04:	6003      	str	r3, [r0, #0]
 800ce06:	f04f 0900 	mov.w	r9, #0
 800ce0a:	07eb      	lsls	r3, r5, #31
 800ce0c:	d50a      	bpl.n	800ce24 <__pow5mult+0x84>
 800ce0e:	4639      	mov	r1, r7
 800ce10:	4622      	mov	r2, r4
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7ff ff1c 	bl	800cc50 <__multiply>
 800ce18:	4680      	mov	r8, r0
 800ce1a:	4639      	mov	r1, r7
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f7ff fe4b 	bl	800cab8 <_Bfree>
 800ce22:	4647      	mov	r7, r8
 800ce24:	106d      	asrs	r5, r5, #1
 800ce26:	d00b      	beq.n	800ce40 <__pow5mult+0xa0>
 800ce28:	6820      	ldr	r0, [r4, #0]
 800ce2a:	b938      	cbnz	r0, 800ce3c <__pow5mult+0x9c>
 800ce2c:	4622      	mov	r2, r4
 800ce2e:	4621      	mov	r1, r4
 800ce30:	4630      	mov	r0, r6
 800ce32:	f7ff ff0d 	bl	800cc50 <__multiply>
 800ce36:	6020      	str	r0, [r4, #0]
 800ce38:	f8c0 9000 	str.w	r9, [r0]
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	e7e4      	b.n	800ce0a <__pow5mult+0x6a>
 800ce40:	4638      	mov	r0, r7
 800ce42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce46:	bf00      	nop
 800ce48:	0800e578 	.word	0x0800e578
 800ce4c:	0800e3af 	.word	0x0800e3af
 800ce50:	0800e42f 	.word	0x0800e42f

0800ce54 <__lshift>:
 800ce54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce58:	460c      	mov	r4, r1
 800ce5a:	4607      	mov	r7, r0
 800ce5c:	4691      	mov	r9, r2
 800ce5e:	6923      	ldr	r3, [r4, #16]
 800ce60:	6849      	ldr	r1, [r1, #4]
 800ce62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce66:	68a3      	ldr	r3, [r4, #8]
 800ce68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce6c:	f108 0601 	add.w	r6, r8, #1
 800ce70:	42b3      	cmp	r3, r6
 800ce72:	db0b      	blt.n	800ce8c <__lshift+0x38>
 800ce74:	4638      	mov	r0, r7
 800ce76:	f7ff fddf 	bl	800ca38 <_Balloc>
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	b948      	cbnz	r0, 800ce92 <__lshift+0x3e>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ce84:	4b27      	ldr	r3, [pc, #156]	; (800cf24 <__lshift+0xd0>)
 800ce86:	4828      	ldr	r0, [pc, #160]	; (800cf28 <__lshift+0xd4>)
 800ce88:	f000 fb88 	bl	800d59c <__assert_func>
 800ce8c:	3101      	adds	r1, #1
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	e7ee      	b.n	800ce70 <__lshift+0x1c>
 800ce92:	2300      	movs	r3, #0
 800ce94:	f100 0114 	add.w	r1, r0, #20
 800ce98:	f100 0210 	add.w	r2, r0, #16
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	4553      	cmp	r3, sl
 800cea0:	db33      	blt.n	800cf0a <__lshift+0xb6>
 800cea2:	6920      	ldr	r0, [r4, #16]
 800cea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cea8:	f104 0314 	add.w	r3, r4, #20
 800ceac:	f019 091f 	ands.w	r9, r9, #31
 800ceb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ceb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ceb8:	d02b      	beq.n	800cf12 <__lshift+0xbe>
 800ceba:	468a      	mov	sl, r1
 800cebc:	2200      	movs	r2, #0
 800cebe:	f1c9 0e20 	rsb	lr, r9, #32
 800cec2:	6818      	ldr	r0, [r3, #0]
 800cec4:	fa00 f009 	lsl.w	r0, r0, r9
 800cec8:	4310      	orrs	r0, r2
 800ceca:	f84a 0b04 	str.w	r0, [sl], #4
 800cece:	f853 2b04 	ldr.w	r2, [r3], #4
 800ced2:	459c      	cmp	ip, r3
 800ced4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ced8:	d8f3      	bhi.n	800cec2 <__lshift+0x6e>
 800ceda:	ebac 0304 	sub.w	r3, ip, r4
 800cede:	3b15      	subs	r3, #21
 800cee0:	f023 0303 	bic.w	r3, r3, #3
 800cee4:	3304      	adds	r3, #4
 800cee6:	f104 0015 	add.w	r0, r4, #21
 800ceea:	4584      	cmp	ip, r0
 800ceec:	bf38      	it	cc
 800ceee:	2304      	movcc	r3, #4
 800cef0:	50ca      	str	r2, [r1, r3]
 800cef2:	b10a      	cbz	r2, 800cef8 <__lshift+0xa4>
 800cef4:	f108 0602 	add.w	r6, r8, #2
 800cef8:	3e01      	subs	r6, #1
 800cefa:	4638      	mov	r0, r7
 800cefc:	4621      	mov	r1, r4
 800cefe:	612e      	str	r6, [r5, #16]
 800cf00:	f7ff fdda 	bl	800cab8 <_Bfree>
 800cf04:	4628      	mov	r0, r5
 800cf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf0e:	3301      	adds	r3, #1
 800cf10:	e7c5      	b.n	800ce9e <__lshift+0x4a>
 800cf12:	3904      	subs	r1, #4
 800cf14:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf18:	459c      	cmp	ip, r3
 800cf1a:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf1e:	d8f9      	bhi.n	800cf14 <__lshift+0xc0>
 800cf20:	e7ea      	b.n	800cef8 <__lshift+0xa4>
 800cf22:	bf00      	nop
 800cf24:	0800e41e 	.word	0x0800e41e
 800cf28:	0800e42f 	.word	0x0800e42f

0800cf2c <__mcmp>:
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	690a      	ldr	r2, [r1, #16]
 800cf30:	6900      	ldr	r0, [r0, #16]
 800cf32:	b530      	push	{r4, r5, lr}
 800cf34:	1a80      	subs	r0, r0, r2
 800cf36:	d10d      	bne.n	800cf54 <__mcmp+0x28>
 800cf38:	3314      	adds	r3, #20
 800cf3a:	3114      	adds	r1, #20
 800cf3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf4c:	4295      	cmp	r5, r2
 800cf4e:	d002      	beq.n	800cf56 <__mcmp+0x2a>
 800cf50:	d304      	bcc.n	800cf5c <__mcmp+0x30>
 800cf52:	2001      	movs	r0, #1
 800cf54:	bd30      	pop	{r4, r5, pc}
 800cf56:	42a3      	cmp	r3, r4
 800cf58:	d3f4      	bcc.n	800cf44 <__mcmp+0x18>
 800cf5a:	e7fb      	b.n	800cf54 <__mcmp+0x28>
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf60:	e7f8      	b.n	800cf54 <__mcmp+0x28>
	...

0800cf64 <__mdiff>:
 800cf64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	460d      	mov	r5, r1
 800cf6a:	4607      	mov	r7, r0
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	4628      	mov	r0, r5
 800cf70:	4614      	mov	r4, r2
 800cf72:	f7ff ffdb 	bl	800cf2c <__mcmp>
 800cf76:	1e06      	subs	r6, r0, #0
 800cf78:	d111      	bne.n	800cf9e <__mdiff+0x3a>
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	f7ff fd5b 	bl	800ca38 <_Balloc>
 800cf82:	4602      	mov	r2, r0
 800cf84:	b928      	cbnz	r0, 800cf92 <__mdiff+0x2e>
 800cf86:	f240 2137 	movw	r1, #567	; 0x237
 800cf8a:	4b3a      	ldr	r3, [pc, #232]	; (800d074 <__mdiff+0x110>)
 800cf8c:	483a      	ldr	r0, [pc, #232]	; (800d078 <__mdiff+0x114>)
 800cf8e:	f000 fb05 	bl	800d59c <__assert_func>
 800cf92:	2301      	movs	r3, #1
 800cf94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cf98:	4610      	mov	r0, r2
 800cf9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9e:	bfa4      	itt	ge
 800cfa0:	4623      	movge	r3, r4
 800cfa2:	462c      	movge	r4, r5
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	6861      	ldr	r1, [r4, #4]
 800cfa8:	bfa6      	itte	ge
 800cfaa:	461d      	movge	r5, r3
 800cfac:	2600      	movge	r6, #0
 800cfae:	2601      	movlt	r6, #1
 800cfb0:	f7ff fd42 	bl	800ca38 <_Balloc>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	b918      	cbnz	r0, 800cfc0 <__mdiff+0x5c>
 800cfb8:	f240 2145 	movw	r1, #581	; 0x245
 800cfbc:	4b2d      	ldr	r3, [pc, #180]	; (800d074 <__mdiff+0x110>)
 800cfbe:	e7e5      	b.n	800cf8c <__mdiff+0x28>
 800cfc0:	f102 0814 	add.w	r8, r2, #20
 800cfc4:	46c2      	mov	sl, r8
 800cfc6:	f04f 0c00 	mov.w	ip, #0
 800cfca:	6927      	ldr	r7, [r4, #16]
 800cfcc:	60c6      	str	r6, [r0, #12]
 800cfce:	692e      	ldr	r6, [r5, #16]
 800cfd0:	f104 0014 	add.w	r0, r4, #20
 800cfd4:	f105 0914 	add.w	r9, r5, #20
 800cfd8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800cfdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cfe0:	3410      	adds	r4, #16
 800cfe2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800cfe6:	f859 3b04 	ldr.w	r3, [r9], #4
 800cfea:	fa1f f18b 	uxth.w	r1, fp
 800cfee:	4461      	add	r1, ip
 800cff0:	fa1f fc83 	uxth.w	ip, r3
 800cff4:	0c1b      	lsrs	r3, r3, #16
 800cff6:	eba1 010c 	sub.w	r1, r1, ip
 800cffa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cffe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d002:	b289      	uxth	r1, r1
 800d004:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d008:	454e      	cmp	r6, r9
 800d00a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d00e:	f84a 1b04 	str.w	r1, [sl], #4
 800d012:	d8e6      	bhi.n	800cfe2 <__mdiff+0x7e>
 800d014:	1b73      	subs	r3, r6, r5
 800d016:	3b15      	subs	r3, #21
 800d018:	f023 0303 	bic.w	r3, r3, #3
 800d01c:	3515      	adds	r5, #21
 800d01e:	3304      	adds	r3, #4
 800d020:	42ae      	cmp	r6, r5
 800d022:	bf38      	it	cc
 800d024:	2304      	movcc	r3, #4
 800d026:	4418      	add	r0, r3
 800d028:	4443      	add	r3, r8
 800d02a:	461e      	mov	r6, r3
 800d02c:	4605      	mov	r5, r0
 800d02e:	4575      	cmp	r5, lr
 800d030:	d30e      	bcc.n	800d050 <__mdiff+0xec>
 800d032:	f10e 0103 	add.w	r1, lr, #3
 800d036:	1a09      	subs	r1, r1, r0
 800d038:	f021 0103 	bic.w	r1, r1, #3
 800d03c:	3803      	subs	r0, #3
 800d03e:	4586      	cmp	lr, r0
 800d040:	bf38      	it	cc
 800d042:	2100      	movcc	r1, #0
 800d044:	440b      	add	r3, r1
 800d046:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d04a:	b189      	cbz	r1, 800d070 <__mdiff+0x10c>
 800d04c:	6117      	str	r7, [r2, #16]
 800d04e:	e7a3      	b.n	800cf98 <__mdiff+0x34>
 800d050:	f855 8b04 	ldr.w	r8, [r5], #4
 800d054:	fa1f f188 	uxth.w	r1, r8
 800d058:	4461      	add	r1, ip
 800d05a:	140c      	asrs	r4, r1, #16
 800d05c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d060:	b289      	uxth	r1, r1
 800d062:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d066:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d06a:	f846 1b04 	str.w	r1, [r6], #4
 800d06e:	e7de      	b.n	800d02e <__mdiff+0xca>
 800d070:	3f01      	subs	r7, #1
 800d072:	e7e8      	b.n	800d046 <__mdiff+0xe2>
 800d074:	0800e41e 	.word	0x0800e41e
 800d078:	0800e42f 	.word	0x0800e42f

0800d07c <__d2b>:
 800d07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d07e:	2101      	movs	r1, #1
 800d080:	4617      	mov	r7, r2
 800d082:	461c      	mov	r4, r3
 800d084:	9e08      	ldr	r6, [sp, #32]
 800d086:	f7ff fcd7 	bl	800ca38 <_Balloc>
 800d08a:	4605      	mov	r5, r0
 800d08c:	b930      	cbnz	r0, 800d09c <__d2b+0x20>
 800d08e:	4602      	mov	r2, r0
 800d090:	f240 310f 	movw	r1, #783	; 0x30f
 800d094:	4b22      	ldr	r3, [pc, #136]	; (800d120 <__d2b+0xa4>)
 800d096:	4823      	ldr	r0, [pc, #140]	; (800d124 <__d2b+0xa8>)
 800d098:	f000 fa80 	bl	800d59c <__assert_func>
 800d09c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d0a0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d0a4:	bb24      	cbnz	r4, 800d0f0 <__d2b+0x74>
 800d0a6:	2f00      	cmp	r7, #0
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	d026      	beq.n	800d0fa <__d2b+0x7e>
 800d0ac:	4668      	mov	r0, sp
 800d0ae:	9700      	str	r7, [sp, #0]
 800d0b0:	f7ff fd8a 	bl	800cbc8 <__lo0bits>
 800d0b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0b8:	b1e8      	cbz	r0, 800d0f6 <__d2b+0x7a>
 800d0ba:	f1c0 0320 	rsb	r3, r0, #32
 800d0be:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c2:	430b      	orrs	r3, r1
 800d0c4:	40c2      	lsrs	r2, r0
 800d0c6:	616b      	str	r3, [r5, #20]
 800d0c8:	9201      	str	r2, [sp, #4]
 800d0ca:	9b01      	ldr	r3, [sp, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	bf14      	ite	ne
 800d0d0:	2102      	movne	r1, #2
 800d0d2:	2101      	moveq	r1, #1
 800d0d4:	61ab      	str	r3, [r5, #24]
 800d0d6:	6129      	str	r1, [r5, #16]
 800d0d8:	b1bc      	cbz	r4, 800d10a <__d2b+0x8e>
 800d0da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d0de:	4404      	add	r4, r0
 800d0e0:	6034      	str	r4, [r6, #0]
 800d0e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e8:	6018      	str	r0, [r3, #0]
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	b003      	add	sp, #12
 800d0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0f4:	e7d7      	b.n	800d0a6 <__d2b+0x2a>
 800d0f6:	6169      	str	r1, [r5, #20]
 800d0f8:	e7e7      	b.n	800d0ca <__d2b+0x4e>
 800d0fa:	a801      	add	r0, sp, #4
 800d0fc:	f7ff fd64 	bl	800cbc8 <__lo0bits>
 800d100:	9b01      	ldr	r3, [sp, #4]
 800d102:	2101      	movs	r1, #1
 800d104:	616b      	str	r3, [r5, #20]
 800d106:	3020      	adds	r0, #32
 800d108:	e7e5      	b.n	800d0d6 <__d2b+0x5a>
 800d10a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d10e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800d112:	6030      	str	r0, [r6, #0]
 800d114:	6918      	ldr	r0, [r3, #16]
 800d116:	f7ff fd37 	bl	800cb88 <__hi0bits>
 800d11a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d11e:	e7e2      	b.n	800d0e6 <__d2b+0x6a>
 800d120:	0800e41e 	.word	0x0800e41e
 800d124:	0800e42f 	.word	0x0800e42f

0800d128 <__ssputs_r>:
 800d128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d12c:	461f      	mov	r7, r3
 800d12e:	688e      	ldr	r6, [r1, #8]
 800d130:	4682      	mov	sl, r0
 800d132:	42be      	cmp	r6, r7
 800d134:	460c      	mov	r4, r1
 800d136:	4690      	mov	r8, r2
 800d138:	680b      	ldr	r3, [r1, #0]
 800d13a:	d82c      	bhi.n	800d196 <__ssputs_r+0x6e>
 800d13c:	898a      	ldrh	r2, [r1, #12]
 800d13e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d142:	d026      	beq.n	800d192 <__ssputs_r+0x6a>
 800d144:	6965      	ldr	r5, [r4, #20]
 800d146:	6909      	ldr	r1, [r1, #16]
 800d148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d14c:	eba3 0901 	sub.w	r9, r3, r1
 800d150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d154:	1c7b      	adds	r3, r7, #1
 800d156:	444b      	add	r3, r9
 800d158:	106d      	asrs	r5, r5, #1
 800d15a:	429d      	cmp	r5, r3
 800d15c:	bf38      	it	cc
 800d15e:	461d      	movcc	r5, r3
 800d160:	0553      	lsls	r3, r2, #21
 800d162:	d527      	bpl.n	800d1b4 <__ssputs_r+0x8c>
 800d164:	4629      	mov	r1, r5
 800d166:	f7ff fbdb 	bl	800c920 <_malloc_r>
 800d16a:	4606      	mov	r6, r0
 800d16c:	b360      	cbz	r0, 800d1c8 <__ssputs_r+0xa0>
 800d16e:	464a      	mov	r2, r9
 800d170:	6921      	ldr	r1, [r4, #16]
 800d172:	f000 fa05 	bl	800d580 <memcpy>
 800d176:	89a3      	ldrh	r3, [r4, #12]
 800d178:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d180:	81a3      	strh	r3, [r4, #12]
 800d182:	6126      	str	r6, [r4, #16]
 800d184:	444e      	add	r6, r9
 800d186:	6026      	str	r6, [r4, #0]
 800d188:	463e      	mov	r6, r7
 800d18a:	6165      	str	r5, [r4, #20]
 800d18c:	eba5 0509 	sub.w	r5, r5, r9
 800d190:	60a5      	str	r5, [r4, #8]
 800d192:	42be      	cmp	r6, r7
 800d194:	d900      	bls.n	800d198 <__ssputs_r+0x70>
 800d196:	463e      	mov	r6, r7
 800d198:	4632      	mov	r2, r6
 800d19a:	4641      	mov	r1, r8
 800d19c:	6820      	ldr	r0, [r4, #0]
 800d19e:	f000 f9c5 	bl	800d52c <memmove>
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	68a3      	ldr	r3, [r4, #8]
 800d1a6:	1b9b      	subs	r3, r3, r6
 800d1a8:	60a3      	str	r3, [r4, #8]
 800d1aa:	6823      	ldr	r3, [r4, #0]
 800d1ac:	4433      	add	r3, r6
 800d1ae:	6023      	str	r3, [r4, #0]
 800d1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1b4:	462a      	mov	r2, r5
 800d1b6:	f000 fa35 	bl	800d624 <_realloc_r>
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	d1e0      	bne.n	800d182 <__ssputs_r+0x5a>
 800d1c0:	4650      	mov	r0, sl
 800d1c2:	6921      	ldr	r1, [r4, #16]
 800d1c4:	f7ff fb3c 	bl	800c840 <_free_r>
 800d1c8:	230c      	movs	r3, #12
 800d1ca:	f8ca 3000 	str.w	r3, [sl]
 800d1ce:	89a3      	ldrh	r3, [r4, #12]
 800d1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d8:	81a3      	strh	r3, [r4, #12]
 800d1da:	e7e9      	b.n	800d1b0 <__ssputs_r+0x88>

0800d1dc <_svfiprintf_r>:
 800d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e0:	4698      	mov	r8, r3
 800d1e2:	898b      	ldrh	r3, [r1, #12]
 800d1e4:	4607      	mov	r7, r0
 800d1e6:	061b      	lsls	r3, r3, #24
 800d1e8:	460d      	mov	r5, r1
 800d1ea:	4614      	mov	r4, r2
 800d1ec:	b09d      	sub	sp, #116	; 0x74
 800d1ee:	d50e      	bpl.n	800d20e <_svfiprintf_r+0x32>
 800d1f0:	690b      	ldr	r3, [r1, #16]
 800d1f2:	b963      	cbnz	r3, 800d20e <_svfiprintf_r+0x32>
 800d1f4:	2140      	movs	r1, #64	; 0x40
 800d1f6:	f7ff fb93 	bl	800c920 <_malloc_r>
 800d1fa:	6028      	str	r0, [r5, #0]
 800d1fc:	6128      	str	r0, [r5, #16]
 800d1fe:	b920      	cbnz	r0, 800d20a <_svfiprintf_r+0x2e>
 800d200:	230c      	movs	r3, #12
 800d202:	603b      	str	r3, [r7, #0]
 800d204:	f04f 30ff 	mov.w	r0, #4294967295
 800d208:	e0d0      	b.n	800d3ac <_svfiprintf_r+0x1d0>
 800d20a:	2340      	movs	r3, #64	; 0x40
 800d20c:	616b      	str	r3, [r5, #20]
 800d20e:	2300      	movs	r3, #0
 800d210:	9309      	str	r3, [sp, #36]	; 0x24
 800d212:	2320      	movs	r3, #32
 800d214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d218:	2330      	movs	r3, #48	; 0x30
 800d21a:	f04f 0901 	mov.w	r9, #1
 800d21e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d222:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d3c4 <_svfiprintf_r+0x1e8>
 800d226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d22a:	4623      	mov	r3, r4
 800d22c:	469a      	mov	sl, r3
 800d22e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d232:	b10a      	cbz	r2, 800d238 <_svfiprintf_r+0x5c>
 800d234:	2a25      	cmp	r2, #37	; 0x25
 800d236:	d1f9      	bne.n	800d22c <_svfiprintf_r+0x50>
 800d238:	ebba 0b04 	subs.w	fp, sl, r4
 800d23c:	d00b      	beq.n	800d256 <_svfiprintf_r+0x7a>
 800d23e:	465b      	mov	r3, fp
 800d240:	4622      	mov	r2, r4
 800d242:	4629      	mov	r1, r5
 800d244:	4638      	mov	r0, r7
 800d246:	f7ff ff6f 	bl	800d128 <__ssputs_r>
 800d24a:	3001      	adds	r0, #1
 800d24c:	f000 80a9 	beq.w	800d3a2 <_svfiprintf_r+0x1c6>
 800d250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d252:	445a      	add	r2, fp
 800d254:	9209      	str	r2, [sp, #36]	; 0x24
 800d256:	f89a 3000 	ldrb.w	r3, [sl]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f000 80a1 	beq.w	800d3a2 <_svfiprintf_r+0x1c6>
 800d260:	2300      	movs	r3, #0
 800d262:	f04f 32ff 	mov.w	r2, #4294967295
 800d266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d26a:	f10a 0a01 	add.w	sl, sl, #1
 800d26e:	9304      	str	r3, [sp, #16]
 800d270:	9307      	str	r3, [sp, #28]
 800d272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d276:	931a      	str	r3, [sp, #104]	; 0x68
 800d278:	4654      	mov	r4, sl
 800d27a:	2205      	movs	r2, #5
 800d27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d280:	4850      	ldr	r0, [pc, #320]	; (800d3c4 <_svfiprintf_r+0x1e8>)
 800d282:	f7fe fc62 	bl	800bb4a <memchr>
 800d286:	9a04      	ldr	r2, [sp, #16]
 800d288:	b9d8      	cbnz	r0, 800d2c2 <_svfiprintf_r+0xe6>
 800d28a:	06d0      	lsls	r0, r2, #27
 800d28c:	bf44      	itt	mi
 800d28e:	2320      	movmi	r3, #32
 800d290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d294:	0711      	lsls	r1, r2, #28
 800d296:	bf44      	itt	mi
 800d298:	232b      	movmi	r3, #43	; 0x2b
 800d29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d29e:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d2a4:	d015      	beq.n	800d2d2 <_svfiprintf_r+0xf6>
 800d2a6:	4654      	mov	r4, sl
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	f04f 0c0a 	mov.w	ip, #10
 800d2ae:	9a07      	ldr	r2, [sp, #28]
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2b6:	3b30      	subs	r3, #48	; 0x30
 800d2b8:	2b09      	cmp	r3, #9
 800d2ba:	d94d      	bls.n	800d358 <_svfiprintf_r+0x17c>
 800d2bc:	b1b0      	cbz	r0, 800d2ec <_svfiprintf_r+0x110>
 800d2be:	9207      	str	r2, [sp, #28]
 800d2c0:	e014      	b.n	800d2ec <_svfiprintf_r+0x110>
 800d2c2:	eba0 0308 	sub.w	r3, r0, r8
 800d2c6:	fa09 f303 	lsl.w	r3, r9, r3
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	46a2      	mov	sl, r4
 800d2ce:	9304      	str	r3, [sp, #16]
 800d2d0:	e7d2      	b.n	800d278 <_svfiprintf_r+0x9c>
 800d2d2:	9b03      	ldr	r3, [sp, #12]
 800d2d4:	1d19      	adds	r1, r3, #4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	9103      	str	r1, [sp, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	bfbb      	ittet	lt
 800d2de:	425b      	neglt	r3, r3
 800d2e0:	f042 0202 	orrlt.w	r2, r2, #2
 800d2e4:	9307      	strge	r3, [sp, #28]
 800d2e6:	9307      	strlt	r3, [sp, #28]
 800d2e8:	bfb8      	it	lt
 800d2ea:	9204      	strlt	r2, [sp, #16]
 800d2ec:	7823      	ldrb	r3, [r4, #0]
 800d2ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d2f0:	d10c      	bne.n	800d30c <_svfiprintf_r+0x130>
 800d2f2:	7863      	ldrb	r3, [r4, #1]
 800d2f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d2f6:	d134      	bne.n	800d362 <_svfiprintf_r+0x186>
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	3402      	adds	r4, #2
 800d2fc:	1d1a      	adds	r2, r3, #4
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	9203      	str	r2, [sp, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	bfb8      	it	lt
 800d306:	f04f 33ff 	movlt.w	r3, #4294967295
 800d30a:	9305      	str	r3, [sp, #20]
 800d30c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d3c8 <_svfiprintf_r+0x1ec>
 800d310:	2203      	movs	r2, #3
 800d312:	4650      	mov	r0, sl
 800d314:	7821      	ldrb	r1, [r4, #0]
 800d316:	f7fe fc18 	bl	800bb4a <memchr>
 800d31a:	b138      	cbz	r0, 800d32c <_svfiprintf_r+0x150>
 800d31c:	2240      	movs	r2, #64	; 0x40
 800d31e:	9b04      	ldr	r3, [sp, #16]
 800d320:	eba0 000a 	sub.w	r0, r0, sl
 800d324:	4082      	lsls	r2, r0
 800d326:	4313      	orrs	r3, r2
 800d328:	3401      	adds	r4, #1
 800d32a:	9304      	str	r3, [sp, #16]
 800d32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d330:	2206      	movs	r2, #6
 800d332:	4826      	ldr	r0, [pc, #152]	; (800d3cc <_svfiprintf_r+0x1f0>)
 800d334:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d338:	f7fe fc07 	bl	800bb4a <memchr>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d038      	beq.n	800d3b2 <_svfiprintf_r+0x1d6>
 800d340:	4b23      	ldr	r3, [pc, #140]	; (800d3d0 <_svfiprintf_r+0x1f4>)
 800d342:	bb1b      	cbnz	r3, 800d38c <_svfiprintf_r+0x1b0>
 800d344:	9b03      	ldr	r3, [sp, #12]
 800d346:	3307      	adds	r3, #7
 800d348:	f023 0307 	bic.w	r3, r3, #7
 800d34c:	3308      	adds	r3, #8
 800d34e:	9303      	str	r3, [sp, #12]
 800d350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d352:	4433      	add	r3, r6
 800d354:	9309      	str	r3, [sp, #36]	; 0x24
 800d356:	e768      	b.n	800d22a <_svfiprintf_r+0x4e>
 800d358:	460c      	mov	r4, r1
 800d35a:	2001      	movs	r0, #1
 800d35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d360:	e7a6      	b.n	800d2b0 <_svfiprintf_r+0xd4>
 800d362:	2300      	movs	r3, #0
 800d364:	f04f 0c0a 	mov.w	ip, #10
 800d368:	4619      	mov	r1, r3
 800d36a:	3401      	adds	r4, #1
 800d36c:	9305      	str	r3, [sp, #20]
 800d36e:	4620      	mov	r0, r4
 800d370:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d374:	3a30      	subs	r2, #48	; 0x30
 800d376:	2a09      	cmp	r2, #9
 800d378:	d903      	bls.n	800d382 <_svfiprintf_r+0x1a6>
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d0c6      	beq.n	800d30c <_svfiprintf_r+0x130>
 800d37e:	9105      	str	r1, [sp, #20]
 800d380:	e7c4      	b.n	800d30c <_svfiprintf_r+0x130>
 800d382:	4604      	mov	r4, r0
 800d384:	2301      	movs	r3, #1
 800d386:	fb0c 2101 	mla	r1, ip, r1, r2
 800d38a:	e7f0      	b.n	800d36e <_svfiprintf_r+0x192>
 800d38c:	ab03      	add	r3, sp, #12
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	462a      	mov	r2, r5
 800d392:	4638      	mov	r0, r7
 800d394:	4b0f      	ldr	r3, [pc, #60]	; (800d3d4 <_svfiprintf_r+0x1f8>)
 800d396:	a904      	add	r1, sp, #16
 800d398:	f7fd fe5c 	bl	800b054 <_printf_float>
 800d39c:	1c42      	adds	r2, r0, #1
 800d39e:	4606      	mov	r6, r0
 800d3a0:	d1d6      	bne.n	800d350 <_svfiprintf_r+0x174>
 800d3a2:	89ab      	ldrh	r3, [r5, #12]
 800d3a4:	065b      	lsls	r3, r3, #25
 800d3a6:	f53f af2d 	bmi.w	800d204 <_svfiprintf_r+0x28>
 800d3aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3ac:	b01d      	add	sp, #116	; 0x74
 800d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b2:	ab03      	add	r3, sp, #12
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	462a      	mov	r2, r5
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	4b06      	ldr	r3, [pc, #24]	; (800d3d4 <_svfiprintf_r+0x1f8>)
 800d3bc:	a904      	add	r1, sp, #16
 800d3be:	f7fe f8e9 	bl	800b594 <_printf_i>
 800d3c2:	e7eb      	b.n	800d39c <_svfiprintf_r+0x1c0>
 800d3c4:	0800e584 	.word	0x0800e584
 800d3c8:	0800e58a 	.word	0x0800e58a
 800d3cc:	0800e58e 	.word	0x0800e58e
 800d3d0:	0800b055 	.word	0x0800b055
 800d3d4:	0800d129 	.word	0x0800d129

0800d3d8 <__sflush_r>:
 800d3d8:	898a      	ldrh	r2, [r1, #12]
 800d3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3dc:	4605      	mov	r5, r0
 800d3de:	0710      	lsls	r0, r2, #28
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	d457      	bmi.n	800d494 <__sflush_r+0xbc>
 800d3e4:	684b      	ldr	r3, [r1, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	dc04      	bgt.n	800d3f4 <__sflush_r+0x1c>
 800d3ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	dc01      	bgt.n	800d3f4 <__sflush_r+0x1c>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3f6:	2e00      	cmp	r6, #0
 800d3f8:	d0fa      	beq.n	800d3f0 <__sflush_r+0x18>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d400:	682f      	ldr	r7, [r5, #0]
 800d402:	6a21      	ldr	r1, [r4, #32]
 800d404:	602b      	str	r3, [r5, #0]
 800d406:	d032      	beq.n	800d46e <__sflush_r+0x96>
 800d408:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d40a:	89a3      	ldrh	r3, [r4, #12]
 800d40c:	075a      	lsls	r2, r3, #29
 800d40e:	d505      	bpl.n	800d41c <__sflush_r+0x44>
 800d410:	6863      	ldr	r3, [r4, #4]
 800d412:	1ac0      	subs	r0, r0, r3
 800d414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d416:	b10b      	cbz	r3, 800d41c <__sflush_r+0x44>
 800d418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d41a:	1ac0      	subs	r0, r0, r3
 800d41c:	2300      	movs	r3, #0
 800d41e:	4602      	mov	r2, r0
 800d420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d422:	4628      	mov	r0, r5
 800d424:	6a21      	ldr	r1, [r4, #32]
 800d426:	47b0      	blx	r6
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	89a3      	ldrh	r3, [r4, #12]
 800d42c:	d106      	bne.n	800d43c <__sflush_r+0x64>
 800d42e:	6829      	ldr	r1, [r5, #0]
 800d430:	291d      	cmp	r1, #29
 800d432:	d82b      	bhi.n	800d48c <__sflush_r+0xb4>
 800d434:	4a28      	ldr	r2, [pc, #160]	; (800d4d8 <__sflush_r+0x100>)
 800d436:	410a      	asrs	r2, r1
 800d438:	07d6      	lsls	r6, r2, #31
 800d43a:	d427      	bmi.n	800d48c <__sflush_r+0xb4>
 800d43c:	2200      	movs	r2, #0
 800d43e:	6062      	str	r2, [r4, #4]
 800d440:	6922      	ldr	r2, [r4, #16]
 800d442:	04d9      	lsls	r1, r3, #19
 800d444:	6022      	str	r2, [r4, #0]
 800d446:	d504      	bpl.n	800d452 <__sflush_r+0x7a>
 800d448:	1c42      	adds	r2, r0, #1
 800d44a:	d101      	bne.n	800d450 <__sflush_r+0x78>
 800d44c:	682b      	ldr	r3, [r5, #0]
 800d44e:	b903      	cbnz	r3, 800d452 <__sflush_r+0x7a>
 800d450:	6560      	str	r0, [r4, #84]	; 0x54
 800d452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d454:	602f      	str	r7, [r5, #0]
 800d456:	2900      	cmp	r1, #0
 800d458:	d0ca      	beq.n	800d3f0 <__sflush_r+0x18>
 800d45a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d45e:	4299      	cmp	r1, r3
 800d460:	d002      	beq.n	800d468 <__sflush_r+0x90>
 800d462:	4628      	mov	r0, r5
 800d464:	f7ff f9ec 	bl	800c840 <_free_r>
 800d468:	2000      	movs	r0, #0
 800d46a:	6360      	str	r0, [r4, #52]	; 0x34
 800d46c:	e7c1      	b.n	800d3f2 <__sflush_r+0x1a>
 800d46e:	2301      	movs	r3, #1
 800d470:	4628      	mov	r0, r5
 800d472:	47b0      	blx	r6
 800d474:	1c41      	adds	r1, r0, #1
 800d476:	d1c8      	bne.n	800d40a <__sflush_r+0x32>
 800d478:	682b      	ldr	r3, [r5, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d0c5      	beq.n	800d40a <__sflush_r+0x32>
 800d47e:	2b1d      	cmp	r3, #29
 800d480:	d001      	beq.n	800d486 <__sflush_r+0xae>
 800d482:	2b16      	cmp	r3, #22
 800d484:	d101      	bne.n	800d48a <__sflush_r+0xb2>
 800d486:	602f      	str	r7, [r5, #0]
 800d488:	e7b2      	b.n	800d3f0 <__sflush_r+0x18>
 800d48a:	89a3      	ldrh	r3, [r4, #12]
 800d48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d490:	81a3      	strh	r3, [r4, #12]
 800d492:	e7ae      	b.n	800d3f2 <__sflush_r+0x1a>
 800d494:	690f      	ldr	r7, [r1, #16]
 800d496:	2f00      	cmp	r7, #0
 800d498:	d0aa      	beq.n	800d3f0 <__sflush_r+0x18>
 800d49a:	0793      	lsls	r3, r2, #30
 800d49c:	bf18      	it	ne
 800d49e:	2300      	movne	r3, #0
 800d4a0:	680e      	ldr	r6, [r1, #0]
 800d4a2:	bf08      	it	eq
 800d4a4:	694b      	ldreq	r3, [r1, #20]
 800d4a6:	1bf6      	subs	r6, r6, r7
 800d4a8:	600f      	str	r7, [r1, #0]
 800d4aa:	608b      	str	r3, [r1, #8]
 800d4ac:	2e00      	cmp	r6, #0
 800d4ae:	dd9f      	ble.n	800d3f0 <__sflush_r+0x18>
 800d4b0:	4633      	mov	r3, r6
 800d4b2:	463a      	mov	r2, r7
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	6a21      	ldr	r1, [r4, #32]
 800d4b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d4bc:	47e0      	blx	ip
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	dc06      	bgt.n	800d4d0 <__sflush_r+0xf8>
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4cc:	81a3      	strh	r3, [r4, #12]
 800d4ce:	e790      	b.n	800d3f2 <__sflush_r+0x1a>
 800d4d0:	4407      	add	r7, r0
 800d4d2:	1a36      	subs	r6, r6, r0
 800d4d4:	e7ea      	b.n	800d4ac <__sflush_r+0xd4>
 800d4d6:	bf00      	nop
 800d4d8:	dfbffffe 	.word	0xdfbffffe

0800d4dc <_fflush_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	690b      	ldr	r3, [r1, #16]
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	b913      	cbnz	r3, 800d4ec <_fflush_r+0x10>
 800d4e6:	2500      	movs	r5, #0
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}
 800d4ec:	b118      	cbz	r0, 800d4f6 <_fflush_r+0x1a>
 800d4ee:	6a03      	ldr	r3, [r0, #32]
 800d4f0:	b90b      	cbnz	r3, 800d4f6 <_fflush_r+0x1a>
 800d4f2:	f7fe f9fd 	bl	800b8f0 <__sinit>
 800d4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d0f3      	beq.n	800d4e6 <_fflush_r+0xa>
 800d4fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d500:	07d0      	lsls	r0, r2, #31
 800d502:	d404      	bmi.n	800d50e <_fflush_r+0x32>
 800d504:	0599      	lsls	r1, r3, #22
 800d506:	d402      	bmi.n	800d50e <_fflush_r+0x32>
 800d508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d50a:	f7fe fb1c 	bl	800bb46 <__retarget_lock_acquire_recursive>
 800d50e:	4628      	mov	r0, r5
 800d510:	4621      	mov	r1, r4
 800d512:	f7ff ff61 	bl	800d3d8 <__sflush_r>
 800d516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d518:	4605      	mov	r5, r0
 800d51a:	07da      	lsls	r2, r3, #31
 800d51c:	d4e4      	bmi.n	800d4e8 <_fflush_r+0xc>
 800d51e:	89a3      	ldrh	r3, [r4, #12]
 800d520:	059b      	lsls	r3, r3, #22
 800d522:	d4e1      	bmi.n	800d4e8 <_fflush_r+0xc>
 800d524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d526:	f7fe fb0f 	bl	800bb48 <__retarget_lock_release_recursive>
 800d52a:	e7dd      	b.n	800d4e8 <_fflush_r+0xc>

0800d52c <memmove>:
 800d52c:	4288      	cmp	r0, r1
 800d52e:	b510      	push	{r4, lr}
 800d530:	eb01 0402 	add.w	r4, r1, r2
 800d534:	d902      	bls.n	800d53c <memmove+0x10>
 800d536:	4284      	cmp	r4, r0
 800d538:	4623      	mov	r3, r4
 800d53a:	d807      	bhi.n	800d54c <memmove+0x20>
 800d53c:	1e43      	subs	r3, r0, #1
 800d53e:	42a1      	cmp	r1, r4
 800d540:	d008      	beq.n	800d554 <memmove+0x28>
 800d542:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d54a:	e7f8      	b.n	800d53e <memmove+0x12>
 800d54c:	4601      	mov	r1, r0
 800d54e:	4402      	add	r2, r0
 800d550:	428a      	cmp	r2, r1
 800d552:	d100      	bne.n	800d556 <memmove+0x2a>
 800d554:	bd10      	pop	{r4, pc}
 800d556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d55a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d55e:	e7f7      	b.n	800d550 <memmove+0x24>

0800d560 <_sbrk_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	2300      	movs	r3, #0
 800d564:	4d05      	ldr	r5, [pc, #20]	; (800d57c <_sbrk_r+0x1c>)
 800d566:	4604      	mov	r4, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	602b      	str	r3, [r5, #0]
 800d56c:	f7f4 fc7c 	bl	8001e68 <_sbrk>
 800d570:	1c43      	adds	r3, r0, #1
 800d572:	d102      	bne.n	800d57a <_sbrk_r+0x1a>
 800d574:	682b      	ldr	r3, [r5, #0]
 800d576:	b103      	cbz	r3, 800d57a <_sbrk_r+0x1a>
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	bd38      	pop	{r3, r4, r5, pc}
 800d57c:	2000185c 	.word	0x2000185c

0800d580 <memcpy>:
 800d580:	440a      	add	r2, r1
 800d582:	4291      	cmp	r1, r2
 800d584:	f100 33ff 	add.w	r3, r0, #4294967295
 800d588:	d100      	bne.n	800d58c <memcpy+0xc>
 800d58a:	4770      	bx	lr
 800d58c:	b510      	push	{r4, lr}
 800d58e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d592:	4291      	cmp	r1, r2
 800d594:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d598:	d1f9      	bne.n	800d58e <memcpy+0xe>
 800d59a:	bd10      	pop	{r4, pc}

0800d59c <__assert_func>:
 800d59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d59e:	4614      	mov	r4, r2
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4b09      	ldr	r3, [pc, #36]	; (800d5c8 <__assert_func+0x2c>)
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68d8      	ldr	r0, [r3, #12]
 800d5aa:	b14c      	cbz	r4, 800d5c0 <__assert_func+0x24>
 800d5ac:	4b07      	ldr	r3, [pc, #28]	; (800d5cc <__assert_func+0x30>)
 800d5ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5b2:	9100      	str	r1, [sp, #0]
 800d5b4:	462b      	mov	r3, r5
 800d5b6:	4906      	ldr	r1, [pc, #24]	; (800d5d0 <__assert_func+0x34>)
 800d5b8:	f000 f870 	bl	800d69c <fiprintf>
 800d5bc:	f000 f880 	bl	800d6c0 <abort>
 800d5c0:	4b04      	ldr	r3, [pc, #16]	; (800d5d4 <__assert_func+0x38>)
 800d5c2:	461c      	mov	r4, r3
 800d5c4:	e7f3      	b.n	800d5ae <__assert_func+0x12>
 800d5c6:	bf00      	nop
 800d5c8:	20000264 	.word	0x20000264
 800d5cc:	0800e59f 	.word	0x0800e59f
 800d5d0:	0800e5ac 	.word	0x0800e5ac
 800d5d4:	0800e5da 	.word	0x0800e5da

0800d5d8 <_calloc_r>:
 800d5d8:	b570      	push	{r4, r5, r6, lr}
 800d5da:	fba1 5402 	umull	r5, r4, r1, r2
 800d5de:	b934      	cbnz	r4, 800d5ee <_calloc_r+0x16>
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	f7ff f99d 	bl	800c920 <_malloc_r>
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	b928      	cbnz	r0, 800d5f6 <_calloc_r+0x1e>
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	bd70      	pop	{r4, r5, r6, pc}
 800d5ee:	220c      	movs	r2, #12
 800d5f0:	2600      	movs	r6, #0
 800d5f2:	6002      	str	r2, [r0, #0]
 800d5f4:	e7f9      	b.n	800d5ea <_calloc_r+0x12>
 800d5f6:	462a      	mov	r2, r5
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	f7fe fa26 	bl	800ba4a <memset>
 800d5fe:	e7f4      	b.n	800d5ea <_calloc_r+0x12>

0800d600 <__ascii_mbtowc>:
 800d600:	b082      	sub	sp, #8
 800d602:	b901      	cbnz	r1, 800d606 <__ascii_mbtowc+0x6>
 800d604:	a901      	add	r1, sp, #4
 800d606:	b142      	cbz	r2, 800d61a <__ascii_mbtowc+0x1a>
 800d608:	b14b      	cbz	r3, 800d61e <__ascii_mbtowc+0x1e>
 800d60a:	7813      	ldrb	r3, [r2, #0]
 800d60c:	600b      	str	r3, [r1, #0]
 800d60e:	7812      	ldrb	r2, [r2, #0]
 800d610:	1e10      	subs	r0, r2, #0
 800d612:	bf18      	it	ne
 800d614:	2001      	movne	r0, #1
 800d616:	b002      	add	sp, #8
 800d618:	4770      	bx	lr
 800d61a:	4610      	mov	r0, r2
 800d61c:	e7fb      	b.n	800d616 <__ascii_mbtowc+0x16>
 800d61e:	f06f 0001 	mvn.w	r0, #1
 800d622:	e7f8      	b.n	800d616 <__ascii_mbtowc+0x16>

0800d624 <_realloc_r>:
 800d624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d628:	4680      	mov	r8, r0
 800d62a:	4614      	mov	r4, r2
 800d62c:	460e      	mov	r6, r1
 800d62e:	b921      	cbnz	r1, 800d63a <_realloc_r+0x16>
 800d630:	4611      	mov	r1, r2
 800d632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d636:	f7ff b973 	b.w	800c920 <_malloc_r>
 800d63a:	b92a      	cbnz	r2, 800d648 <_realloc_r+0x24>
 800d63c:	f7ff f900 	bl	800c840 <_free_r>
 800d640:	4625      	mov	r5, r4
 800d642:	4628      	mov	r0, r5
 800d644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d648:	f000 f841 	bl	800d6ce <_malloc_usable_size_r>
 800d64c:	4284      	cmp	r4, r0
 800d64e:	4607      	mov	r7, r0
 800d650:	d802      	bhi.n	800d658 <_realloc_r+0x34>
 800d652:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d656:	d812      	bhi.n	800d67e <_realloc_r+0x5a>
 800d658:	4621      	mov	r1, r4
 800d65a:	4640      	mov	r0, r8
 800d65c:	f7ff f960 	bl	800c920 <_malloc_r>
 800d660:	4605      	mov	r5, r0
 800d662:	2800      	cmp	r0, #0
 800d664:	d0ed      	beq.n	800d642 <_realloc_r+0x1e>
 800d666:	42bc      	cmp	r4, r7
 800d668:	4622      	mov	r2, r4
 800d66a:	4631      	mov	r1, r6
 800d66c:	bf28      	it	cs
 800d66e:	463a      	movcs	r2, r7
 800d670:	f7ff ff86 	bl	800d580 <memcpy>
 800d674:	4631      	mov	r1, r6
 800d676:	4640      	mov	r0, r8
 800d678:	f7ff f8e2 	bl	800c840 <_free_r>
 800d67c:	e7e1      	b.n	800d642 <_realloc_r+0x1e>
 800d67e:	4635      	mov	r5, r6
 800d680:	e7df      	b.n	800d642 <_realloc_r+0x1e>

0800d682 <__ascii_wctomb>:
 800d682:	4603      	mov	r3, r0
 800d684:	4608      	mov	r0, r1
 800d686:	b141      	cbz	r1, 800d69a <__ascii_wctomb+0x18>
 800d688:	2aff      	cmp	r2, #255	; 0xff
 800d68a:	d904      	bls.n	800d696 <__ascii_wctomb+0x14>
 800d68c:	228a      	movs	r2, #138	; 0x8a
 800d68e:	f04f 30ff 	mov.w	r0, #4294967295
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	4770      	bx	lr
 800d696:	2001      	movs	r0, #1
 800d698:	700a      	strb	r2, [r1, #0]
 800d69a:	4770      	bx	lr

0800d69c <fiprintf>:
 800d69c:	b40e      	push	{r1, r2, r3}
 800d69e:	b503      	push	{r0, r1, lr}
 800d6a0:	4601      	mov	r1, r0
 800d6a2:	ab03      	add	r3, sp, #12
 800d6a4:	4805      	ldr	r0, [pc, #20]	; (800d6bc <fiprintf+0x20>)
 800d6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6aa:	6800      	ldr	r0, [r0, #0]
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	f000 f83d 	bl	800d72c <_vfiprintf_r>
 800d6b2:	b002      	add	sp, #8
 800d6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6b8:	b003      	add	sp, #12
 800d6ba:	4770      	bx	lr
 800d6bc:	20000264 	.word	0x20000264

0800d6c0 <abort>:
 800d6c0:	2006      	movs	r0, #6
 800d6c2:	b508      	push	{r3, lr}
 800d6c4:	f000 fa0a 	bl	800dadc <raise>
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	f7f4 fb5a 	bl	8001d82 <_exit>

0800d6ce <_malloc_usable_size_r>:
 800d6ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6d2:	1f18      	subs	r0, r3, #4
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	bfbc      	itt	lt
 800d6d8:	580b      	ldrlt	r3, [r1, r0]
 800d6da:	18c0      	addlt	r0, r0, r3
 800d6dc:	4770      	bx	lr

0800d6de <__sfputc_r>:
 800d6de:	6893      	ldr	r3, [r2, #8]
 800d6e0:	b410      	push	{r4}
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	6093      	str	r3, [r2, #8]
 800d6e8:	da07      	bge.n	800d6fa <__sfputc_r+0x1c>
 800d6ea:	6994      	ldr	r4, [r2, #24]
 800d6ec:	42a3      	cmp	r3, r4
 800d6ee:	db01      	blt.n	800d6f4 <__sfputc_r+0x16>
 800d6f0:	290a      	cmp	r1, #10
 800d6f2:	d102      	bne.n	800d6fa <__sfputc_r+0x1c>
 800d6f4:	bc10      	pop	{r4}
 800d6f6:	f000 b933 	b.w	800d960 <__swbuf_r>
 800d6fa:	6813      	ldr	r3, [r2, #0]
 800d6fc:	1c58      	adds	r0, r3, #1
 800d6fe:	6010      	str	r0, [r2, #0]
 800d700:	7019      	strb	r1, [r3, #0]
 800d702:	4608      	mov	r0, r1
 800d704:	bc10      	pop	{r4}
 800d706:	4770      	bx	lr

0800d708 <__sfputs_r>:
 800d708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70a:	4606      	mov	r6, r0
 800d70c:	460f      	mov	r7, r1
 800d70e:	4614      	mov	r4, r2
 800d710:	18d5      	adds	r5, r2, r3
 800d712:	42ac      	cmp	r4, r5
 800d714:	d101      	bne.n	800d71a <__sfputs_r+0x12>
 800d716:	2000      	movs	r0, #0
 800d718:	e007      	b.n	800d72a <__sfputs_r+0x22>
 800d71a:	463a      	mov	r2, r7
 800d71c:	4630      	mov	r0, r6
 800d71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d722:	f7ff ffdc 	bl	800d6de <__sfputc_r>
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	d1f3      	bne.n	800d712 <__sfputs_r+0xa>
 800d72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d72c <_vfiprintf_r>:
 800d72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d730:	460d      	mov	r5, r1
 800d732:	4614      	mov	r4, r2
 800d734:	4698      	mov	r8, r3
 800d736:	4606      	mov	r6, r0
 800d738:	b09d      	sub	sp, #116	; 0x74
 800d73a:	b118      	cbz	r0, 800d744 <_vfiprintf_r+0x18>
 800d73c:	6a03      	ldr	r3, [r0, #32]
 800d73e:	b90b      	cbnz	r3, 800d744 <_vfiprintf_r+0x18>
 800d740:	f7fe f8d6 	bl	800b8f0 <__sinit>
 800d744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d746:	07d9      	lsls	r1, r3, #31
 800d748:	d405      	bmi.n	800d756 <_vfiprintf_r+0x2a>
 800d74a:	89ab      	ldrh	r3, [r5, #12]
 800d74c:	059a      	lsls	r2, r3, #22
 800d74e:	d402      	bmi.n	800d756 <_vfiprintf_r+0x2a>
 800d750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d752:	f7fe f9f8 	bl	800bb46 <__retarget_lock_acquire_recursive>
 800d756:	89ab      	ldrh	r3, [r5, #12]
 800d758:	071b      	lsls	r3, r3, #28
 800d75a:	d501      	bpl.n	800d760 <_vfiprintf_r+0x34>
 800d75c:	692b      	ldr	r3, [r5, #16]
 800d75e:	b99b      	cbnz	r3, 800d788 <_vfiprintf_r+0x5c>
 800d760:	4629      	mov	r1, r5
 800d762:	4630      	mov	r0, r6
 800d764:	f000 f93a 	bl	800d9dc <__swsetup_r>
 800d768:	b170      	cbz	r0, 800d788 <_vfiprintf_r+0x5c>
 800d76a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d76c:	07dc      	lsls	r4, r3, #31
 800d76e:	d504      	bpl.n	800d77a <_vfiprintf_r+0x4e>
 800d770:	f04f 30ff 	mov.w	r0, #4294967295
 800d774:	b01d      	add	sp, #116	; 0x74
 800d776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77a:	89ab      	ldrh	r3, [r5, #12]
 800d77c:	0598      	lsls	r0, r3, #22
 800d77e:	d4f7      	bmi.n	800d770 <_vfiprintf_r+0x44>
 800d780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d782:	f7fe f9e1 	bl	800bb48 <__retarget_lock_release_recursive>
 800d786:	e7f3      	b.n	800d770 <_vfiprintf_r+0x44>
 800d788:	2300      	movs	r3, #0
 800d78a:	9309      	str	r3, [sp, #36]	; 0x24
 800d78c:	2320      	movs	r3, #32
 800d78e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d792:	2330      	movs	r3, #48	; 0x30
 800d794:	f04f 0901 	mov.w	r9, #1
 800d798:	f8cd 800c 	str.w	r8, [sp, #12]
 800d79c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d94c <_vfiprintf_r+0x220>
 800d7a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7a4:	4623      	mov	r3, r4
 800d7a6:	469a      	mov	sl, r3
 800d7a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ac:	b10a      	cbz	r2, 800d7b2 <_vfiprintf_r+0x86>
 800d7ae:	2a25      	cmp	r2, #37	; 0x25
 800d7b0:	d1f9      	bne.n	800d7a6 <_vfiprintf_r+0x7a>
 800d7b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d7b6:	d00b      	beq.n	800d7d0 <_vfiprintf_r+0xa4>
 800d7b8:	465b      	mov	r3, fp
 800d7ba:	4622      	mov	r2, r4
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f7ff ffa2 	bl	800d708 <__sfputs_r>
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	f000 80a9 	beq.w	800d91c <_vfiprintf_r+0x1f0>
 800d7ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7cc:	445a      	add	r2, fp
 800d7ce:	9209      	str	r2, [sp, #36]	; 0x24
 800d7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f000 80a1 	beq.w	800d91c <_vfiprintf_r+0x1f0>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7e4:	f10a 0a01 	add.w	sl, sl, #1
 800d7e8:	9304      	str	r3, [sp, #16]
 800d7ea:	9307      	str	r3, [sp, #28]
 800d7ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d7f2:	4654      	mov	r4, sl
 800d7f4:	2205      	movs	r2, #5
 800d7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7fa:	4854      	ldr	r0, [pc, #336]	; (800d94c <_vfiprintf_r+0x220>)
 800d7fc:	f7fe f9a5 	bl	800bb4a <memchr>
 800d800:	9a04      	ldr	r2, [sp, #16]
 800d802:	b9d8      	cbnz	r0, 800d83c <_vfiprintf_r+0x110>
 800d804:	06d1      	lsls	r1, r2, #27
 800d806:	bf44      	itt	mi
 800d808:	2320      	movmi	r3, #32
 800d80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d80e:	0713      	lsls	r3, r2, #28
 800d810:	bf44      	itt	mi
 800d812:	232b      	movmi	r3, #43	; 0x2b
 800d814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d818:	f89a 3000 	ldrb.w	r3, [sl]
 800d81c:	2b2a      	cmp	r3, #42	; 0x2a
 800d81e:	d015      	beq.n	800d84c <_vfiprintf_r+0x120>
 800d820:	4654      	mov	r4, sl
 800d822:	2000      	movs	r0, #0
 800d824:	f04f 0c0a 	mov.w	ip, #10
 800d828:	9a07      	ldr	r2, [sp, #28]
 800d82a:	4621      	mov	r1, r4
 800d82c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d830:	3b30      	subs	r3, #48	; 0x30
 800d832:	2b09      	cmp	r3, #9
 800d834:	d94d      	bls.n	800d8d2 <_vfiprintf_r+0x1a6>
 800d836:	b1b0      	cbz	r0, 800d866 <_vfiprintf_r+0x13a>
 800d838:	9207      	str	r2, [sp, #28]
 800d83a:	e014      	b.n	800d866 <_vfiprintf_r+0x13a>
 800d83c:	eba0 0308 	sub.w	r3, r0, r8
 800d840:	fa09 f303 	lsl.w	r3, r9, r3
 800d844:	4313      	orrs	r3, r2
 800d846:	46a2      	mov	sl, r4
 800d848:	9304      	str	r3, [sp, #16]
 800d84a:	e7d2      	b.n	800d7f2 <_vfiprintf_r+0xc6>
 800d84c:	9b03      	ldr	r3, [sp, #12]
 800d84e:	1d19      	adds	r1, r3, #4
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	9103      	str	r1, [sp, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	bfbb      	ittet	lt
 800d858:	425b      	neglt	r3, r3
 800d85a:	f042 0202 	orrlt.w	r2, r2, #2
 800d85e:	9307      	strge	r3, [sp, #28]
 800d860:	9307      	strlt	r3, [sp, #28]
 800d862:	bfb8      	it	lt
 800d864:	9204      	strlt	r2, [sp, #16]
 800d866:	7823      	ldrb	r3, [r4, #0]
 800d868:	2b2e      	cmp	r3, #46	; 0x2e
 800d86a:	d10c      	bne.n	800d886 <_vfiprintf_r+0x15a>
 800d86c:	7863      	ldrb	r3, [r4, #1]
 800d86e:	2b2a      	cmp	r3, #42	; 0x2a
 800d870:	d134      	bne.n	800d8dc <_vfiprintf_r+0x1b0>
 800d872:	9b03      	ldr	r3, [sp, #12]
 800d874:	3402      	adds	r4, #2
 800d876:	1d1a      	adds	r2, r3, #4
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	9203      	str	r2, [sp, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	bfb8      	it	lt
 800d880:	f04f 33ff 	movlt.w	r3, #4294967295
 800d884:	9305      	str	r3, [sp, #20]
 800d886:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d950 <_vfiprintf_r+0x224>
 800d88a:	2203      	movs	r2, #3
 800d88c:	4650      	mov	r0, sl
 800d88e:	7821      	ldrb	r1, [r4, #0]
 800d890:	f7fe f95b 	bl	800bb4a <memchr>
 800d894:	b138      	cbz	r0, 800d8a6 <_vfiprintf_r+0x17a>
 800d896:	2240      	movs	r2, #64	; 0x40
 800d898:	9b04      	ldr	r3, [sp, #16]
 800d89a:	eba0 000a 	sub.w	r0, r0, sl
 800d89e:	4082      	lsls	r2, r0
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	3401      	adds	r4, #1
 800d8a4:	9304      	str	r3, [sp, #16]
 800d8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8aa:	2206      	movs	r2, #6
 800d8ac:	4829      	ldr	r0, [pc, #164]	; (800d954 <_vfiprintf_r+0x228>)
 800d8ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8b2:	f7fe f94a 	bl	800bb4a <memchr>
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d03f      	beq.n	800d93a <_vfiprintf_r+0x20e>
 800d8ba:	4b27      	ldr	r3, [pc, #156]	; (800d958 <_vfiprintf_r+0x22c>)
 800d8bc:	bb1b      	cbnz	r3, 800d906 <_vfiprintf_r+0x1da>
 800d8be:	9b03      	ldr	r3, [sp, #12]
 800d8c0:	3307      	adds	r3, #7
 800d8c2:	f023 0307 	bic.w	r3, r3, #7
 800d8c6:	3308      	adds	r3, #8
 800d8c8:	9303      	str	r3, [sp, #12]
 800d8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8cc:	443b      	add	r3, r7
 800d8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d8d0:	e768      	b.n	800d7a4 <_vfiprintf_r+0x78>
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	2001      	movs	r0, #1
 800d8d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8da:	e7a6      	b.n	800d82a <_vfiprintf_r+0xfe>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f04f 0c0a 	mov.w	ip, #10
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	3401      	adds	r4, #1
 800d8e6:	9305      	str	r3, [sp, #20]
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ee:	3a30      	subs	r2, #48	; 0x30
 800d8f0:	2a09      	cmp	r2, #9
 800d8f2:	d903      	bls.n	800d8fc <_vfiprintf_r+0x1d0>
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d0c6      	beq.n	800d886 <_vfiprintf_r+0x15a>
 800d8f8:	9105      	str	r1, [sp, #20]
 800d8fa:	e7c4      	b.n	800d886 <_vfiprintf_r+0x15a>
 800d8fc:	4604      	mov	r4, r0
 800d8fe:	2301      	movs	r3, #1
 800d900:	fb0c 2101 	mla	r1, ip, r1, r2
 800d904:	e7f0      	b.n	800d8e8 <_vfiprintf_r+0x1bc>
 800d906:	ab03      	add	r3, sp, #12
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	462a      	mov	r2, r5
 800d90c:	4630      	mov	r0, r6
 800d90e:	4b13      	ldr	r3, [pc, #76]	; (800d95c <_vfiprintf_r+0x230>)
 800d910:	a904      	add	r1, sp, #16
 800d912:	f7fd fb9f 	bl	800b054 <_printf_float>
 800d916:	4607      	mov	r7, r0
 800d918:	1c78      	adds	r0, r7, #1
 800d91a:	d1d6      	bne.n	800d8ca <_vfiprintf_r+0x19e>
 800d91c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d91e:	07d9      	lsls	r1, r3, #31
 800d920:	d405      	bmi.n	800d92e <_vfiprintf_r+0x202>
 800d922:	89ab      	ldrh	r3, [r5, #12]
 800d924:	059a      	lsls	r2, r3, #22
 800d926:	d402      	bmi.n	800d92e <_vfiprintf_r+0x202>
 800d928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d92a:	f7fe f90d 	bl	800bb48 <__retarget_lock_release_recursive>
 800d92e:	89ab      	ldrh	r3, [r5, #12]
 800d930:	065b      	lsls	r3, r3, #25
 800d932:	f53f af1d 	bmi.w	800d770 <_vfiprintf_r+0x44>
 800d936:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d938:	e71c      	b.n	800d774 <_vfiprintf_r+0x48>
 800d93a:	ab03      	add	r3, sp, #12
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	462a      	mov	r2, r5
 800d940:	4630      	mov	r0, r6
 800d942:	4b06      	ldr	r3, [pc, #24]	; (800d95c <_vfiprintf_r+0x230>)
 800d944:	a904      	add	r1, sp, #16
 800d946:	f7fd fe25 	bl	800b594 <_printf_i>
 800d94a:	e7e4      	b.n	800d916 <_vfiprintf_r+0x1ea>
 800d94c:	0800e584 	.word	0x0800e584
 800d950:	0800e58a 	.word	0x0800e58a
 800d954:	0800e58e 	.word	0x0800e58e
 800d958:	0800b055 	.word	0x0800b055
 800d95c:	0800d709 	.word	0x0800d709

0800d960 <__swbuf_r>:
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	460e      	mov	r6, r1
 800d964:	4614      	mov	r4, r2
 800d966:	4605      	mov	r5, r0
 800d968:	b118      	cbz	r0, 800d972 <__swbuf_r+0x12>
 800d96a:	6a03      	ldr	r3, [r0, #32]
 800d96c:	b90b      	cbnz	r3, 800d972 <__swbuf_r+0x12>
 800d96e:	f7fd ffbf 	bl	800b8f0 <__sinit>
 800d972:	69a3      	ldr	r3, [r4, #24]
 800d974:	60a3      	str	r3, [r4, #8]
 800d976:	89a3      	ldrh	r3, [r4, #12]
 800d978:	071a      	lsls	r2, r3, #28
 800d97a:	d525      	bpl.n	800d9c8 <__swbuf_r+0x68>
 800d97c:	6923      	ldr	r3, [r4, #16]
 800d97e:	b31b      	cbz	r3, 800d9c8 <__swbuf_r+0x68>
 800d980:	6823      	ldr	r3, [r4, #0]
 800d982:	6922      	ldr	r2, [r4, #16]
 800d984:	b2f6      	uxtb	r6, r6
 800d986:	1a98      	subs	r0, r3, r2
 800d988:	6963      	ldr	r3, [r4, #20]
 800d98a:	4637      	mov	r7, r6
 800d98c:	4283      	cmp	r3, r0
 800d98e:	dc04      	bgt.n	800d99a <__swbuf_r+0x3a>
 800d990:	4621      	mov	r1, r4
 800d992:	4628      	mov	r0, r5
 800d994:	f7ff fda2 	bl	800d4dc <_fflush_r>
 800d998:	b9e0      	cbnz	r0, 800d9d4 <__swbuf_r+0x74>
 800d99a:	68a3      	ldr	r3, [r4, #8]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	60a3      	str	r3, [r4, #8]
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	6022      	str	r2, [r4, #0]
 800d9a6:	701e      	strb	r6, [r3, #0]
 800d9a8:	6962      	ldr	r2, [r4, #20]
 800d9aa:	1c43      	adds	r3, r0, #1
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d004      	beq.n	800d9ba <__swbuf_r+0x5a>
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	07db      	lsls	r3, r3, #31
 800d9b4:	d506      	bpl.n	800d9c4 <__swbuf_r+0x64>
 800d9b6:	2e0a      	cmp	r6, #10
 800d9b8:	d104      	bne.n	800d9c4 <__swbuf_r+0x64>
 800d9ba:	4621      	mov	r1, r4
 800d9bc:	4628      	mov	r0, r5
 800d9be:	f7ff fd8d 	bl	800d4dc <_fflush_r>
 800d9c2:	b938      	cbnz	r0, 800d9d4 <__swbuf_r+0x74>
 800d9c4:	4638      	mov	r0, r7
 800d9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f000 f806 	bl	800d9dc <__swsetup_r>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d0d5      	beq.n	800d980 <__swbuf_r+0x20>
 800d9d4:	f04f 37ff 	mov.w	r7, #4294967295
 800d9d8:	e7f4      	b.n	800d9c4 <__swbuf_r+0x64>
	...

0800d9dc <__swsetup_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4b2a      	ldr	r3, [pc, #168]	; (800da88 <__swsetup_r+0xac>)
 800d9e0:	4605      	mov	r5, r0
 800d9e2:	6818      	ldr	r0, [r3, #0]
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	b118      	cbz	r0, 800d9f0 <__swsetup_r+0x14>
 800d9e8:	6a03      	ldr	r3, [r0, #32]
 800d9ea:	b90b      	cbnz	r3, 800d9f0 <__swsetup_r+0x14>
 800d9ec:	f7fd ff80 	bl	800b8f0 <__sinit>
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9f6:	0718      	lsls	r0, r3, #28
 800d9f8:	d422      	bmi.n	800da40 <__swsetup_r+0x64>
 800d9fa:	06d9      	lsls	r1, r3, #27
 800d9fc:	d407      	bmi.n	800da0e <__swsetup_r+0x32>
 800d9fe:	2309      	movs	r3, #9
 800da00:	602b      	str	r3, [r5, #0]
 800da02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da06:	f04f 30ff 	mov.w	r0, #4294967295
 800da0a:	81a3      	strh	r3, [r4, #12]
 800da0c:	e034      	b.n	800da78 <__swsetup_r+0x9c>
 800da0e:	0758      	lsls	r0, r3, #29
 800da10:	d512      	bpl.n	800da38 <__swsetup_r+0x5c>
 800da12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da14:	b141      	cbz	r1, 800da28 <__swsetup_r+0x4c>
 800da16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da1a:	4299      	cmp	r1, r3
 800da1c:	d002      	beq.n	800da24 <__swsetup_r+0x48>
 800da1e:	4628      	mov	r0, r5
 800da20:	f7fe ff0e 	bl	800c840 <_free_r>
 800da24:	2300      	movs	r3, #0
 800da26:	6363      	str	r3, [r4, #52]	; 0x34
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	2300      	movs	r3, #0
 800da32:	6063      	str	r3, [r4, #4]
 800da34:	6923      	ldr	r3, [r4, #16]
 800da36:	6023      	str	r3, [r4, #0]
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	f043 0308 	orr.w	r3, r3, #8
 800da3e:	81a3      	strh	r3, [r4, #12]
 800da40:	6923      	ldr	r3, [r4, #16]
 800da42:	b94b      	cbnz	r3, 800da58 <__swsetup_r+0x7c>
 800da44:	89a3      	ldrh	r3, [r4, #12]
 800da46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da4e:	d003      	beq.n	800da58 <__swsetup_r+0x7c>
 800da50:	4621      	mov	r1, r4
 800da52:	4628      	mov	r0, r5
 800da54:	f000 f883 	bl	800db5e <__smakebuf_r>
 800da58:	89a0      	ldrh	r0, [r4, #12]
 800da5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da5e:	f010 0301 	ands.w	r3, r0, #1
 800da62:	d00a      	beq.n	800da7a <__swsetup_r+0x9e>
 800da64:	2300      	movs	r3, #0
 800da66:	60a3      	str	r3, [r4, #8]
 800da68:	6963      	ldr	r3, [r4, #20]
 800da6a:	425b      	negs	r3, r3
 800da6c:	61a3      	str	r3, [r4, #24]
 800da6e:	6923      	ldr	r3, [r4, #16]
 800da70:	b943      	cbnz	r3, 800da84 <__swsetup_r+0xa8>
 800da72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da76:	d1c4      	bne.n	800da02 <__swsetup_r+0x26>
 800da78:	bd38      	pop	{r3, r4, r5, pc}
 800da7a:	0781      	lsls	r1, r0, #30
 800da7c:	bf58      	it	pl
 800da7e:	6963      	ldrpl	r3, [r4, #20]
 800da80:	60a3      	str	r3, [r4, #8]
 800da82:	e7f4      	b.n	800da6e <__swsetup_r+0x92>
 800da84:	2000      	movs	r0, #0
 800da86:	e7f7      	b.n	800da78 <__swsetup_r+0x9c>
 800da88:	20000264 	.word	0x20000264

0800da8c <_raise_r>:
 800da8c:	291f      	cmp	r1, #31
 800da8e:	b538      	push	{r3, r4, r5, lr}
 800da90:	4604      	mov	r4, r0
 800da92:	460d      	mov	r5, r1
 800da94:	d904      	bls.n	800daa0 <_raise_r+0x14>
 800da96:	2316      	movs	r3, #22
 800da98:	6003      	str	r3, [r0, #0]
 800da9a:	f04f 30ff 	mov.w	r0, #4294967295
 800da9e:	bd38      	pop	{r3, r4, r5, pc}
 800daa0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800daa2:	b112      	cbz	r2, 800daaa <_raise_r+0x1e>
 800daa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800daa8:	b94b      	cbnz	r3, 800dabe <_raise_r+0x32>
 800daaa:	4620      	mov	r0, r4
 800daac:	f000 f830 	bl	800db10 <_getpid_r>
 800dab0:	462a      	mov	r2, r5
 800dab2:	4601      	mov	r1, r0
 800dab4:	4620      	mov	r0, r4
 800dab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daba:	f000 b817 	b.w	800daec <_kill_r>
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d00a      	beq.n	800dad8 <_raise_r+0x4c>
 800dac2:	1c59      	adds	r1, r3, #1
 800dac4:	d103      	bne.n	800dace <_raise_r+0x42>
 800dac6:	2316      	movs	r3, #22
 800dac8:	6003      	str	r3, [r0, #0]
 800daca:	2001      	movs	r0, #1
 800dacc:	e7e7      	b.n	800da9e <_raise_r+0x12>
 800dace:	2400      	movs	r4, #0
 800dad0:	4628      	mov	r0, r5
 800dad2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dad6:	4798      	blx	r3
 800dad8:	2000      	movs	r0, #0
 800dada:	e7e0      	b.n	800da9e <_raise_r+0x12>

0800dadc <raise>:
 800dadc:	4b02      	ldr	r3, [pc, #8]	; (800dae8 <raise+0xc>)
 800dade:	4601      	mov	r1, r0
 800dae0:	6818      	ldr	r0, [r3, #0]
 800dae2:	f7ff bfd3 	b.w	800da8c <_raise_r>
 800dae6:	bf00      	nop
 800dae8:	20000264 	.word	0x20000264

0800daec <_kill_r>:
 800daec:	b538      	push	{r3, r4, r5, lr}
 800daee:	2300      	movs	r3, #0
 800daf0:	4d06      	ldr	r5, [pc, #24]	; (800db0c <_kill_r+0x20>)
 800daf2:	4604      	mov	r4, r0
 800daf4:	4608      	mov	r0, r1
 800daf6:	4611      	mov	r1, r2
 800daf8:	602b      	str	r3, [r5, #0]
 800dafa:	f7f4 f932 	bl	8001d62 <_kill>
 800dafe:	1c43      	adds	r3, r0, #1
 800db00:	d102      	bne.n	800db08 <_kill_r+0x1c>
 800db02:	682b      	ldr	r3, [r5, #0]
 800db04:	b103      	cbz	r3, 800db08 <_kill_r+0x1c>
 800db06:	6023      	str	r3, [r4, #0]
 800db08:	bd38      	pop	{r3, r4, r5, pc}
 800db0a:	bf00      	nop
 800db0c:	2000185c 	.word	0x2000185c

0800db10 <_getpid_r>:
 800db10:	f7f4 b920 	b.w	8001d54 <_getpid>

0800db14 <__swhatbuf_r>:
 800db14:	b570      	push	{r4, r5, r6, lr}
 800db16:	460c      	mov	r4, r1
 800db18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db1c:	4615      	mov	r5, r2
 800db1e:	2900      	cmp	r1, #0
 800db20:	461e      	mov	r6, r3
 800db22:	b096      	sub	sp, #88	; 0x58
 800db24:	da0c      	bge.n	800db40 <__swhatbuf_r+0x2c>
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	2100      	movs	r1, #0
 800db2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800db2e:	bf0c      	ite	eq
 800db30:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800db34:	2340      	movne	r3, #64	; 0x40
 800db36:	2000      	movs	r0, #0
 800db38:	6031      	str	r1, [r6, #0]
 800db3a:	602b      	str	r3, [r5, #0]
 800db3c:	b016      	add	sp, #88	; 0x58
 800db3e:	bd70      	pop	{r4, r5, r6, pc}
 800db40:	466a      	mov	r2, sp
 800db42:	f000 f849 	bl	800dbd8 <_fstat_r>
 800db46:	2800      	cmp	r0, #0
 800db48:	dbed      	blt.n	800db26 <__swhatbuf_r+0x12>
 800db4a:	9901      	ldr	r1, [sp, #4]
 800db4c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800db50:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800db54:	4259      	negs	r1, r3
 800db56:	4159      	adcs	r1, r3
 800db58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db5c:	e7eb      	b.n	800db36 <__swhatbuf_r+0x22>

0800db5e <__smakebuf_r>:
 800db5e:	898b      	ldrh	r3, [r1, #12]
 800db60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db62:	079d      	lsls	r5, r3, #30
 800db64:	4606      	mov	r6, r0
 800db66:	460c      	mov	r4, r1
 800db68:	d507      	bpl.n	800db7a <__smakebuf_r+0x1c>
 800db6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	6123      	str	r3, [r4, #16]
 800db72:	2301      	movs	r3, #1
 800db74:	6163      	str	r3, [r4, #20]
 800db76:	b002      	add	sp, #8
 800db78:	bd70      	pop	{r4, r5, r6, pc}
 800db7a:	466a      	mov	r2, sp
 800db7c:	ab01      	add	r3, sp, #4
 800db7e:	f7ff ffc9 	bl	800db14 <__swhatbuf_r>
 800db82:	9900      	ldr	r1, [sp, #0]
 800db84:	4605      	mov	r5, r0
 800db86:	4630      	mov	r0, r6
 800db88:	f7fe feca 	bl	800c920 <_malloc_r>
 800db8c:	b948      	cbnz	r0, 800dba2 <__smakebuf_r+0x44>
 800db8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db92:	059a      	lsls	r2, r3, #22
 800db94:	d4ef      	bmi.n	800db76 <__smakebuf_r+0x18>
 800db96:	f023 0303 	bic.w	r3, r3, #3
 800db9a:	f043 0302 	orr.w	r3, r3, #2
 800db9e:	81a3      	strh	r3, [r4, #12]
 800dba0:	e7e3      	b.n	800db6a <__smakebuf_r+0xc>
 800dba2:	89a3      	ldrh	r3, [r4, #12]
 800dba4:	6020      	str	r0, [r4, #0]
 800dba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbaa:	81a3      	strh	r3, [r4, #12]
 800dbac:	9b00      	ldr	r3, [sp, #0]
 800dbae:	6120      	str	r0, [r4, #16]
 800dbb0:	6163      	str	r3, [r4, #20]
 800dbb2:	9b01      	ldr	r3, [sp, #4]
 800dbb4:	b15b      	cbz	r3, 800dbce <__smakebuf_r+0x70>
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbbc:	f000 f81e 	bl	800dbfc <_isatty_r>
 800dbc0:	b128      	cbz	r0, 800dbce <__smakebuf_r+0x70>
 800dbc2:	89a3      	ldrh	r3, [r4, #12]
 800dbc4:	f023 0303 	bic.w	r3, r3, #3
 800dbc8:	f043 0301 	orr.w	r3, r3, #1
 800dbcc:	81a3      	strh	r3, [r4, #12]
 800dbce:	89a3      	ldrh	r3, [r4, #12]
 800dbd0:	431d      	orrs	r5, r3
 800dbd2:	81a5      	strh	r5, [r4, #12]
 800dbd4:	e7cf      	b.n	800db76 <__smakebuf_r+0x18>
	...

0800dbd8 <_fstat_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	2300      	movs	r3, #0
 800dbdc:	4d06      	ldr	r5, [pc, #24]	; (800dbf8 <_fstat_r+0x20>)
 800dbde:	4604      	mov	r4, r0
 800dbe0:	4608      	mov	r0, r1
 800dbe2:	4611      	mov	r1, r2
 800dbe4:	602b      	str	r3, [r5, #0]
 800dbe6:	f7f4 f91a 	bl	8001e1e <_fstat>
 800dbea:	1c43      	adds	r3, r0, #1
 800dbec:	d102      	bne.n	800dbf4 <_fstat_r+0x1c>
 800dbee:	682b      	ldr	r3, [r5, #0]
 800dbf0:	b103      	cbz	r3, 800dbf4 <_fstat_r+0x1c>
 800dbf2:	6023      	str	r3, [r4, #0]
 800dbf4:	bd38      	pop	{r3, r4, r5, pc}
 800dbf6:	bf00      	nop
 800dbf8:	2000185c 	.word	0x2000185c

0800dbfc <_isatty_r>:
 800dbfc:	b538      	push	{r3, r4, r5, lr}
 800dbfe:	2300      	movs	r3, #0
 800dc00:	4d05      	ldr	r5, [pc, #20]	; (800dc18 <_isatty_r+0x1c>)
 800dc02:	4604      	mov	r4, r0
 800dc04:	4608      	mov	r0, r1
 800dc06:	602b      	str	r3, [r5, #0]
 800dc08:	f7f4 f918 	bl	8001e3c <_isatty>
 800dc0c:	1c43      	adds	r3, r0, #1
 800dc0e:	d102      	bne.n	800dc16 <_isatty_r+0x1a>
 800dc10:	682b      	ldr	r3, [r5, #0]
 800dc12:	b103      	cbz	r3, 800dc16 <_isatty_r+0x1a>
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
 800dc18:	2000185c 	.word	0x2000185c

0800dc1c <atan2>:
 800dc1c:	f000 ba8c 	b.w	800e138 <__ieee754_atan2>

0800dc20 <sqrt>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	4606      	mov	r6, r0
 800dc24:	460f      	mov	r7, r1
 800dc26:	f000 f9ad 	bl	800df84 <__ieee754_sqrt>
 800dc2a:	4632      	mov	r2, r6
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	460d      	mov	r5, r1
 800dc30:	463b      	mov	r3, r7
 800dc32:	4630      	mov	r0, r6
 800dc34:	4639      	mov	r1, r7
 800dc36:	f7f2 fee9 	bl	8000a0c <__aeabi_dcmpun>
 800dc3a:	b990      	cbnz	r0, 800dc62 <sqrt+0x42>
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	2300      	movs	r3, #0
 800dc40:	4630      	mov	r0, r6
 800dc42:	4639      	mov	r1, r7
 800dc44:	f7f2 feba 	bl	80009bc <__aeabi_dcmplt>
 800dc48:	b158      	cbz	r0, 800dc62 <sqrt+0x42>
 800dc4a:	f7fd ff51 	bl	800baf0 <__errno>
 800dc4e:	2321      	movs	r3, #33	; 0x21
 800dc50:	2200      	movs	r2, #0
 800dc52:	6003      	str	r3, [r0, #0]
 800dc54:	2300      	movs	r3, #0
 800dc56:	4610      	mov	r0, r2
 800dc58:	4619      	mov	r1, r3
 800dc5a:	f7f2 fd67 	bl	800072c <__aeabi_ddiv>
 800dc5e:	4604      	mov	r4, r0
 800dc60:	460d      	mov	r5, r1
 800dc62:	4620      	mov	r0, r4
 800dc64:	4629      	mov	r1, r5
 800dc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc68 <atan>:
 800dc68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6c:	4bb6      	ldr	r3, [pc, #728]	; (800df48 <atan+0x2e0>)
 800dc6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dc72:	429e      	cmp	r6, r3
 800dc74:	4604      	mov	r4, r0
 800dc76:	460d      	mov	r5, r1
 800dc78:	468b      	mov	fp, r1
 800dc7a:	dd17      	ble.n	800dcac <atan+0x44>
 800dc7c:	4bb3      	ldr	r3, [pc, #716]	; (800df4c <atan+0x2e4>)
 800dc7e:	429e      	cmp	r6, r3
 800dc80:	dc01      	bgt.n	800dc86 <atan+0x1e>
 800dc82:	d109      	bne.n	800dc98 <atan+0x30>
 800dc84:	b140      	cbz	r0, 800dc98 <atan+0x30>
 800dc86:	4622      	mov	r2, r4
 800dc88:	462b      	mov	r3, r5
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	f7f2 fa6d 	bl	800016c <__adddf3>
 800dc92:	4604      	mov	r4, r0
 800dc94:	460d      	mov	r5, r1
 800dc96:	e005      	b.n	800dca4 <atan+0x3c>
 800dc98:	f1bb 0f00 	cmp.w	fp, #0
 800dc9c:	4cac      	ldr	r4, [pc, #688]	; (800df50 <atan+0x2e8>)
 800dc9e:	f300 8121 	bgt.w	800dee4 <atan+0x27c>
 800dca2:	4dac      	ldr	r5, [pc, #688]	; (800df54 <atan+0x2ec>)
 800dca4:	4620      	mov	r0, r4
 800dca6:	4629      	mov	r1, r5
 800dca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcac:	4baa      	ldr	r3, [pc, #680]	; (800df58 <atan+0x2f0>)
 800dcae:	429e      	cmp	r6, r3
 800dcb0:	dc11      	bgt.n	800dcd6 <atan+0x6e>
 800dcb2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dcb6:	429e      	cmp	r6, r3
 800dcb8:	dc0a      	bgt.n	800dcd0 <atan+0x68>
 800dcba:	a38b      	add	r3, pc, #556	; (adr r3, 800dee8 <atan+0x280>)
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	f7f2 fa54 	bl	800016c <__adddf3>
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	4ba5      	ldr	r3, [pc, #660]	; (800df5c <atan+0x2f4>)
 800dcc8:	f7f2 fe96 	bl	80009f8 <__aeabi_dcmpgt>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d1e9      	bne.n	800dca4 <atan+0x3c>
 800dcd0:	f04f 3aff 	mov.w	sl, #4294967295
 800dcd4:	e027      	b.n	800dd26 <atan+0xbe>
 800dcd6:	f000 f951 	bl	800df7c <fabs>
 800dcda:	4ba1      	ldr	r3, [pc, #644]	; (800df60 <atan+0x2f8>)
 800dcdc:	4604      	mov	r4, r0
 800dcde:	429e      	cmp	r6, r3
 800dce0:	460d      	mov	r5, r1
 800dce2:	f300 80b8 	bgt.w	800de56 <atan+0x1ee>
 800dce6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dcea:	429e      	cmp	r6, r3
 800dcec:	f300 809c 	bgt.w	800de28 <atan+0x1c0>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	f7f2 fa3a 	bl	800016c <__adddf3>
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	4b98      	ldr	r3, [pc, #608]	; (800df5c <atan+0x2f4>)
 800dcfc:	f7f2 fa34 	bl	8000168 <__aeabi_dsub>
 800dd00:	2200      	movs	r2, #0
 800dd02:	4606      	mov	r6, r0
 800dd04:	460f      	mov	r7, r1
 800dd06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	4629      	mov	r1, r5
 800dd0e:	f7f2 fa2d 	bl	800016c <__adddf3>
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	4630      	mov	r0, r6
 800dd18:	4639      	mov	r1, r7
 800dd1a:	f7f2 fd07 	bl	800072c <__aeabi_ddiv>
 800dd1e:	f04f 0a00 	mov.w	sl, #0
 800dd22:	4604      	mov	r4, r0
 800dd24:	460d      	mov	r5, r1
 800dd26:	4622      	mov	r2, r4
 800dd28:	462b      	mov	r3, r5
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	f7f2 fbd3 	bl	80004d8 <__aeabi_dmul>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4680      	mov	r8, r0
 800dd38:	4689      	mov	r9, r1
 800dd3a:	f7f2 fbcd 	bl	80004d8 <__aeabi_dmul>
 800dd3e:	a36c      	add	r3, pc, #432	; (adr r3, 800def0 <atan+0x288>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	4606      	mov	r6, r0
 800dd46:	460f      	mov	r7, r1
 800dd48:	f7f2 fbc6 	bl	80004d8 <__aeabi_dmul>
 800dd4c:	a36a      	add	r3, pc, #424	; (adr r3, 800def8 <atan+0x290>)
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	f7f2 fa0b 	bl	800016c <__adddf3>
 800dd56:	4632      	mov	r2, r6
 800dd58:	463b      	mov	r3, r7
 800dd5a:	f7f2 fbbd 	bl	80004d8 <__aeabi_dmul>
 800dd5e:	a368      	add	r3, pc, #416	; (adr r3, 800df00 <atan+0x298>)
 800dd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd64:	f7f2 fa02 	bl	800016c <__adddf3>
 800dd68:	4632      	mov	r2, r6
 800dd6a:	463b      	mov	r3, r7
 800dd6c:	f7f2 fbb4 	bl	80004d8 <__aeabi_dmul>
 800dd70:	a365      	add	r3, pc, #404	; (adr r3, 800df08 <atan+0x2a0>)
 800dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd76:	f7f2 f9f9 	bl	800016c <__adddf3>
 800dd7a:	4632      	mov	r2, r6
 800dd7c:	463b      	mov	r3, r7
 800dd7e:	f7f2 fbab 	bl	80004d8 <__aeabi_dmul>
 800dd82:	a363      	add	r3, pc, #396	; (adr r3, 800df10 <atan+0x2a8>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	f7f2 f9f0 	bl	800016c <__adddf3>
 800dd8c:	4632      	mov	r2, r6
 800dd8e:	463b      	mov	r3, r7
 800dd90:	f7f2 fba2 	bl	80004d8 <__aeabi_dmul>
 800dd94:	a360      	add	r3, pc, #384	; (adr r3, 800df18 <atan+0x2b0>)
 800dd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9a:	f7f2 f9e7 	bl	800016c <__adddf3>
 800dd9e:	4642      	mov	r2, r8
 800dda0:	464b      	mov	r3, r9
 800dda2:	f7f2 fb99 	bl	80004d8 <__aeabi_dmul>
 800dda6:	a35e      	add	r3, pc, #376	; (adr r3, 800df20 <atan+0x2b8>)
 800dda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddac:	4680      	mov	r8, r0
 800ddae:	4689      	mov	r9, r1
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	4639      	mov	r1, r7
 800ddb4:	f7f2 fb90 	bl	80004d8 <__aeabi_dmul>
 800ddb8:	a35b      	add	r3, pc, #364	; (adr r3, 800df28 <atan+0x2c0>)
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	f7f2 f9d3 	bl	8000168 <__aeabi_dsub>
 800ddc2:	4632      	mov	r2, r6
 800ddc4:	463b      	mov	r3, r7
 800ddc6:	f7f2 fb87 	bl	80004d8 <__aeabi_dmul>
 800ddca:	a359      	add	r3, pc, #356	; (adr r3, 800df30 <atan+0x2c8>)
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	f7f2 f9ca 	bl	8000168 <__aeabi_dsub>
 800ddd4:	4632      	mov	r2, r6
 800ddd6:	463b      	mov	r3, r7
 800ddd8:	f7f2 fb7e 	bl	80004d8 <__aeabi_dmul>
 800dddc:	a356      	add	r3, pc, #344	; (adr r3, 800df38 <atan+0x2d0>)
 800ddde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde2:	f7f2 f9c1 	bl	8000168 <__aeabi_dsub>
 800dde6:	4632      	mov	r2, r6
 800dde8:	463b      	mov	r3, r7
 800ddea:	f7f2 fb75 	bl	80004d8 <__aeabi_dmul>
 800ddee:	a354      	add	r3, pc, #336	; (adr r3, 800df40 <atan+0x2d8>)
 800ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf4:	f7f2 f9b8 	bl	8000168 <__aeabi_dsub>
 800ddf8:	4632      	mov	r2, r6
 800ddfa:	463b      	mov	r3, r7
 800ddfc:	f7f2 fb6c 	bl	80004d8 <__aeabi_dmul>
 800de00:	4602      	mov	r2, r0
 800de02:	460b      	mov	r3, r1
 800de04:	4640      	mov	r0, r8
 800de06:	4649      	mov	r1, r9
 800de08:	f7f2 f9b0 	bl	800016c <__adddf3>
 800de0c:	4622      	mov	r2, r4
 800de0e:	462b      	mov	r3, r5
 800de10:	f7f2 fb62 	bl	80004d8 <__aeabi_dmul>
 800de14:	f1ba 3fff 	cmp.w	sl, #4294967295
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	d144      	bne.n	800dea8 <atan+0x240>
 800de1e:	4620      	mov	r0, r4
 800de20:	4629      	mov	r1, r5
 800de22:	f7f2 f9a1 	bl	8000168 <__aeabi_dsub>
 800de26:	e734      	b.n	800dc92 <atan+0x2a>
 800de28:	2200      	movs	r2, #0
 800de2a:	4b4c      	ldr	r3, [pc, #304]	; (800df5c <atan+0x2f4>)
 800de2c:	f7f2 f99c 	bl	8000168 <__aeabi_dsub>
 800de30:	2200      	movs	r2, #0
 800de32:	4606      	mov	r6, r0
 800de34:	460f      	mov	r7, r1
 800de36:	4620      	mov	r0, r4
 800de38:	4629      	mov	r1, r5
 800de3a:	4b48      	ldr	r3, [pc, #288]	; (800df5c <atan+0x2f4>)
 800de3c:	f7f2 f996 	bl	800016c <__adddf3>
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	4630      	mov	r0, r6
 800de46:	4639      	mov	r1, r7
 800de48:	f7f2 fc70 	bl	800072c <__aeabi_ddiv>
 800de4c:	f04f 0a01 	mov.w	sl, #1
 800de50:	4604      	mov	r4, r0
 800de52:	460d      	mov	r5, r1
 800de54:	e767      	b.n	800dd26 <atan+0xbe>
 800de56:	4b43      	ldr	r3, [pc, #268]	; (800df64 <atan+0x2fc>)
 800de58:	429e      	cmp	r6, r3
 800de5a:	da1a      	bge.n	800de92 <atan+0x22a>
 800de5c:	2200      	movs	r2, #0
 800de5e:	4b42      	ldr	r3, [pc, #264]	; (800df68 <atan+0x300>)
 800de60:	f7f2 f982 	bl	8000168 <__aeabi_dsub>
 800de64:	2200      	movs	r2, #0
 800de66:	4606      	mov	r6, r0
 800de68:	460f      	mov	r7, r1
 800de6a:	4620      	mov	r0, r4
 800de6c:	4629      	mov	r1, r5
 800de6e:	4b3e      	ldr	r3, [pc, #248]	; (800df68 <atan+0x300>)
 800de70:	f7f2 fb32 	bl	80004d8 <__aeabi_dmul>
 800de74:	2200      	movs	r2, #0
 800de76:	4b39      	ldr	r3, [pc, #228]	; (800df5c <atan+0x2f4>)
 800de78:	f7f2 f978 	bl	800016c <__adddf3>
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	4630      	mov	r0, r6
 800de82:	4639      	mov	r1, r7
 800de84:	f7f2 fc52 	bl	800072c <__aeabi_ddiv>
 800de88:	f04f 0a02 	mov.w	sl, #2
 800de8c:	4604      	mov	r4, r0
 800de8e:	460d      	mov	r5, r1
 800de90:	e749      	b.n	800dd26 <atan+0xbe>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	2000      	movs	r0, #0
 800de98:	4934      	ldr	r1, [pc, #208]	; (800df6c <atan+0x304>)
 800de9a:	f7f2 fc47 	bl	800072c <__aeabi_ddiv>
 800de9e:	f04f 0a03 	mov.w	sl, #3
 800dea2:	4604      	mov	r4, r0
 800dea4:	460d      	mov	r5, r1
 800dea6:	e73e      	b.n	800dd26 <atan+0xbe>
 800dea8:	4b31      	ldr	r3, [pc, #196]	; (800df70 <atan+0x308>)
 800deaa:	4e32      	ldr	r6, [pc, #200]	; (800df74 <atan+0x30c>)
 800deac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb4:	f7f2 f958 	bl	8000168 <__aeabi_dsub>
 800deb8:	4622      	mov	r2, r4
 800deba:	462b      	mov	r3, r5
 800debc:	f7f2 f954 	bl	8000168 <__aeabi_dsub>
 800dec0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800decc:	f7f2 f94c 	bl	8000168 <__aeabi_dsub>
 800ded0:	f1bb 0f00 	cmp.w	fp, #0
 800ded4:	4604      	mov	r4, r0
 800ded6:	460d      	mov	r5, r1
 800ded8:	f6bf aee4 	bge.w	800dca4 <atan+0x3c>
 800dedc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dee0:	461d      	mov	r5, r3
 800dee2:	e6df      	b.n	800dca4 <atan+0x3c>
 800dee4:	4d24      	ldr	r5, [pc, #144]	; (800df78 <atan+0x310>)
 800dee6:	e6dd      	b.n	800dca4 <atan+0x3c>
 800dee8:	8800759c 	.word	0x8800759c
 800deec:	7e37e43c 	.word	0x7e37e43c
 800def0:	e322da11 	.word	0xe322da11
 800def4:	3f90ad3a 	.word	0x3f90ad3a
 800def8:	24760deb 	.word	0x24760deb
 800defc:	3fa97b4b 	.word	0x3fa97b4b
 800df00:	a0d03d51 	.word	0xa0d03d51
 800df04:	3fb10d66 	.word	0x3fb10d66
 800df08:	c54c206e 	.word	0xc54c206e
 800df0c:	3fb745cd 	.word	0x3fb745cd
 800df10:	920083ff 	.word	0x920083ff
 800df14:	3fc24924 	.word	0x3fc24924
 800df18:	5555550d 	.word	0x5555550d
 800df1c:	3fd55555 	.word	0x3fd55555
 800df20:	2c6a6c2f 	.word	0x2c6a6c2f
 800df24:	bfa2b444 	.word	0xbfa2b444
 800df28:	52defd9a 	.word	0x52defd9a
 800df2c:	3fadde2d 	.word	0x3fadde2d
 800df30:	af749a6d 	.word	0xaf749a6d
 800df34:	3fb3b0f2 	.word	0x3fb3b0f2
 800df38:	fe231671 	.word	0xfe231671
 800df3c:	3fbc71c6 	.word	0x3fbc71c6
 800df40:	9998ebc4 	.word	0x9998ebc4
 800df44:	3fc99999 	.word	0x3fc99999
 800df48:	440fffff 	.word	0x440fffff
 800df4c:	7ff00000 	.word	0x7ff00000
 800df50:	54442d18 	.word	0x54442d18
 800df54:	bff921fb 	.word	0xbff921fb
 800df58:	3fdbffff 	.word	0x3fdbffff
 800df5c:	3ff00000 	.word	0x3ff00000
 800df60:	3ff2ffff 	.word	0x3ff2ffff
 800df64:	40038000 	.word	0x40038000
 800df68:	3ff80000 	.word	0x3ff80000
 800df6c:	bff00000 	.word	0xbff00000
 800df70:	0800e700 	.word	0x0800e700
 800df74:	0800e6e0 	.word	0x0800e6e0
 800df78:	3ff921fb 	.word	0x3ff921fb

0800df7c <fabs>:
 800df7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df80:	4619      	mov	r1, r3
 800df82:	4770      	bx	lr

0800df84 <__ieee754_sqrt>:
 800df84:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800e128 <__ieee754_sqrt+0x1a4>
 800df88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df8c:	ea3c 0c01 	bics.w	ip, ip, r1
 800df90:	460b      	mov	r3, r1
 800df92:	4606      	mov	r6, r0
 800df94:	460d      	mov	r5, r1
 800df96:	460a      	mov	r2, r1
 800df98:	4604      	mov	r4, r0
 800df9a:	d10e      	bne.n	800dfba <__ieee754_sqrt+0x36>
 800df9c:	4602      	mov	r2, r0
 800df9e:	f7f2 fa9b 	bl	80004d8 <__aeabi_dmul>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4630      	mov	r0, r6
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	f7f2 f8df 	bl	800016c <__adddf3>
 800dfae:	4606      	mov	r6, r0
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfba:	2900      	cmp	r1, #0
 800dfbc:	dc0d      	bgt.n	800dfda <__ieee754_sqrt+0x56>
 800dfbe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800dfc2:	ea5c 0c00 	orrs.w	ip, ip, r0
 800dfc6:	d0f4      	beq.n	800dfb2 <__ieee754_sqrt+0x2e>
 800dfc8:	b139      	cbz	r1, 800dfda <__ieee754_sqrt+0x56>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	f7f2 f8cc 	bl	8000168 <__aeabi_dsub>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	f7f2 fbaa 	bl	800072c <__aeabi_ddiv>
 800dfd8:	e7e9      	b.n	800dfae <__ieee754_sqrt+0x2a>
 800dfda:	1512      	asrs	r2, r2, #20
 800dfdc:	f000 8089 	beq.w	800e0f2 <__ieee754_sqrt+0x16e>
 800dfe0:	2500      	movs	r5, #0
 800dfe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfe6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dfea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dfee:	07d2      	lsls	r2, r2, #31
 800dff0:	bf5c      	itt	pl
 800dff2:	005b      	lslpl	r3, r3, #1
 800dff4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800dff8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dffc:	bf58      	it	pl
 800dffe:	0064      	lslpl	r4, r4, #1
 800e000:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800e004:	0062      	lsls	r2, r4, #1
 800e006:	2016      	movs	r0, #22
 800e008:	4629      	mov	r1, r5
 800e00a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800e00e:	1076      	asrs	r6, r6, #1
 800e010:	190f      	adds	r7, r1, r4
 800e012:	429f      	cmp	r7, r3
 800e014:	bfde      	ittt	le
 800e016:	1bdb      	suble	r3, r3, r7
 800e018:	1939      	addle	r1, r7, r4
 800e01a:	192d      	addle	r5, r5, r4
 800e01c:	005b      	lsls	r3, r3, #1
 800e01e:	3801      	subs	r0, #1
 800e020:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e024:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e028:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e02c:	d1f0      	bne.n	800e010 <__ieee754_sqrt+0x8c>
 800e02e:	4604      	mov	r4, r0
 800e030:	2720      	movs	r7, #32
 800e032:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800e036:	428b      	cmp	r3, r1
 800e038:	eb0c 0e00 	add.w	lr, ip, r0
 800e03c:	dc02      	bgt.n	800e044 <__ieee754_sqrt+0xc0>
 800e03e:	d113      	bne.n	800e068 <__ieee754_sqrt+0xe4>
 800e040:	4596      	cmp	lr, r2
 800e042:	d811      	bhi.n	800e068 <__ieee754_sqrt+0xe4>
 800e044:	f1be 0f00 	cmp.w	lr, #0
 800e048:	eb0e 000c 	add.w	r0, lr, ip
 800e04c:	da56      	bge.n	800e0fc <__ieee754_sqrt+0x178>
 800e04e:	2800      	cmp	r0, #0
 800e050:	db54      	blt.n	800e0fc <__ieee754_sqrt+0x178>
 800e052:	f101 0801 	add.w	r8, r1, #1
 800e056:	1a5b      	subs	r3, r3, r1
 800e058:	4641      	mov	r1, r8
 800e05a:	4596      	cmp	lr, r2
 800e05c:	bf88      	it	hi
 800e05e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e062:	eba2 020e 	sub.w	r2, r2, lr
 800e066:	4464      	add	r4, ip
 800e068:	005b      	lsls	r3, r3, #1
 800e06a:	3f01      	subs	r7, #1
 800e06c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e070:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e074:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e078:	d1dd      	bne.n	800e036 <__ieee754_sqrt+0xb2>
 800e07a:	4313      	orrs	r3, r2
 800e07c:	d01b      	beq.n	800e0b6 <__ieee754_sqrt+0x132>
 800e07e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e12c <__ieee754_sqrt+0x1a8>
 800e082:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e130 <__ieee754_sqrt+0x1ac>
 800e086:	e9da 0100 	ldrd	r0, r1, [sl]
 800e08a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e08e:	f7f2 f86b 	bl	8000168 <__aeabi_dsub>
 800e092:	e9da 8900 	ldrd	r8, r9, [sl]
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	4640      	mov	r0, r8
 800e09c:	4649      	mov	r1, r9
 800e09e:	f7f2 fc97 	bl	80009d0 <__aeabi_dcmple>
 800e0a2:	b140      	cbz	r0, 800e0b6 <__ieee754_sqrt+0x132>
 800e0a4:	e9da 0100 	ldrd	r0, r1, [sl]
 800e0a8:	e9db 2300 	ldrd	r2, r3, [fp]
 800e0ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e0b0:	d126      	bne.n	800e100 <__ieee754_sqrt+0x17c>
 800e0b2:	463c      	mov	r4, r7
 800e0b4:	3501      	adds	r5, #1
 800e0b6:	106b      	asrs	r3, r5, #1
 800e0b8:	0864      	lsrs	r4, r4, #1
 800e0ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e0be:	07ea      	lsls	r2, r5, #31
 800e0c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e0c4:	bf48      	it	mi
 800e0c6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800e0d0:	e76d      	b.n	800dfae <__ieee754_sqrt+0x2a>
 800e0d2:	0ae3      	lsrs	r3, r4, #11
 800e0d4:	3915      	subs	r1, #21
 800e0d6:	0564      	lsls	r4, r4, #21
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d0fa      	beq.n	800e0d2 <__ieee754_sqrt+0x14e>
 800e0dc:	02d8      	lsls	r0, r3, #11
 800e0de:	d50a      	bpl.n	800e0f6 <__ieee754_sqrt+0x172>
 800e0e0:	f1c2 0020 	rsb	r0, r2, #32
 800e0e4:	fa24 f000 	lsr.w	r0, r4, r0
 800e0e8:	1e55      	subs	r5, r2, #1
 800e0ea:	4094      	lsls	r4, r2
 800e0ec:	4303      	orrs	r3, r0
 800e0ee:	1b4a      	subs	r2, r1, r5
 800e0f0:	e776      	b.n	800dfe0 <__ieee754_sqrt+0x5c>
 800e0f2:	4611      	mov	r1, r2
 800e0f4:	e7f0      	b.n	800e0d8 <__ieee754_sqrt+0x154>
 800e0f6:	005b      	lsls	r3, r3, #1
 800e0f8:	3201      	adds	r2, #1
 800e0fa:	e7ef      	b.n	800e0dc <__ieee754_sqrt+0x158>
 800e0fc:	4688      	mov	r8, r1
 800e0fe:	e7aa      	b.n	800e056 <__ieee754_sqrt+0xd2>
 800e100:	f7f2 f834 	bl	800016c <__adddf3>
 800e104:	e9da 8900 	ldrd	r8, r9, [sl]
 800e108:	4602      	mov	r2, r0
 800e10a:	460b      	mov	r3, r1
 800e10c:	4640      	mov	r0, r8
 800e10e:	4649      	mov	r1, r9
 800e110:	f7f2 fc54 	bl	80009bc <__aeabi_dcmplt>
 800e114:	b120      	cbz	r0, 800e120 <__ieee754_sqrt+0x19c>
 800e116:	1ca1      	adds	r1, r4, #2
 800e118:	bf08      	it	eq
 800e11a:	3501      	addeq	r5, #1
 800e11c:	3402      	adds	r4, #2
 800e11e:	e7ca      	b.n	800e0b6 <__ieee754_sqrt+0x132>
 800e120:	3401      	adds	r4, #1
 800e122:	f024 0401 	bic.w	r4, r4, #1
 800e126:	e7c6      	b.n	800e0b6 <__ieee754_sqrt+0x132>
 800e128:	7ff00000 	.word	0x7ff00000
 800e12c:	200003d8 	.word	0x200003d8
 800e130:	200003e0 	.word	0x200003e0
 800e134:	00000000 	.word	0x00000000

0800e138 <__ieee754_atan2>:
 800e138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	4617      	mov	r7, r2
 800e13e:	4692      	mov	sl, r2
 800e140:	4699      	mov	r9, r3
 800e142:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e146:	427b      	negs	r3, r7
 800e148:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800e2c8 <__ieee754_atan2+0x190>
 800e14c:	433b      	orrs	r3, r7
 800e14e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e152:	4543      	cmp	r3, r8
 800e154:	4604      	mov	r4, r0
 800e156:	460d      	mov	r5, r1
 800e158:	d809      	bhi.n	800e16e <__ieee754_atan2+0x36>
 800e15a:	4246      	negs	r6, r0
 800e15c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e160:	4306      	orrs	r6, r0
 800e162:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800e166:	4546      	cmp	r6, r8
 800e168:	468e      	mov	lr, r1
 800e16a:	4683      	mov	fp, r0
 800e16c:	d908      	bls.n	800e180 <__ieee754_atan2+0x48>
 800e16e:	4652      	mov	r2, sl
 800e170:	464b      	mov	r3, r9
 800e172:	4620      	mov	r0, r4
 800e174:	4629      	mov	r1, r5
 800e176:	f7f1 fff9 	bl	800016c <__adddf3>
 800e17a:	4604      	mov	r4, r0
 800e17c:	460d      	mov	r5, r1
 800e17e:	e019      	b.n	800e1b4 <__ieee754_atan2+0x7c>
 800e180:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800e184:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800e188:	433e      	orrs	r6, r7
 800e18a:	d103      	bne.n	800e194 <__ieee754_atan2+0x5c>
 800e18c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e190:	f7ff bd6a 	b.w	800dc68 <atan>
 800e194:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800e198:	f006 0602 	and.w	r6, r6, #2
 800e19c:	ea53 0b0b 	orrs.w	fp, r3, fp
 800e1a0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800e1a4:	d10a      	bne.n	800e1bc <__ieee754_atan2+0x84>
 800e1a6:	2e02      	cmp	r6, #2
 800e1a8:	d067      	beq.n	800e27a <__ieee754_atan2+0x142>
 800e1aa:	2e03      	cmp	r6, #3
 800e1ac:	d102      	bne.n	800e1b4 <__ieee754_atan2+0x7c>
 800e1ae:	a53a      	add	r5, pc, #232	; (adr r5, 800e298 <__ieee754_atan2+0x160>)
 800e1b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1bc:	4317      	orrs	r7, r2
 800e1be:	d106      	bne.n	800e1ce <__ieee754_atan2+0x96>
 800e1c0:	f1be 0f00 	cmp.w	lr, #0
 800e1c4:	da64      	bge.n	800e290 <__ieee754_atan2+0x158>
 800e1c6:	a536      	add	r5, pc, #216	; (adr r5, 800e2a0 <__ieee754_atan2+0x168>)
 800e1c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e1cc:	e7f2      	b.n	800e1b4 <__ieee754_atan2+0x7c>
 800e1ce:	4542      	cmp	r2, r8
 800e1d0:	d10f      	bne.n	800e1f2 <__ieee754_atan2+0xba>
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	f106 36ff 	add.w	r6, r6, #4294967295
 800e1d8:	d107      	bne.n	800e1ea <__ieee754_atan2+0xb2>
 800e1da:	2e02      	cmp	r6, #2
 800e1dc:	d851      	bhi.n	800e282 <__ieee754_atan2+0x14a>
 800e1de:	4b3b      	ldr	r3, [pc, #236]	; (800e2cc <__ieee754_atan2+0x194>)
 800e1e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e1e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e1e8:	e7e4      	b.n	800e1b4 <__ieee754_atan2+0x7c>
 800e1ea:	2e02      	cmp	r6, #2
 800e1ec:	d84d      	bhi.n	800e28a <__ieee754_atan2+0x152>
 800e1ee:	4b38      	ldr	r3, [pc, #224]	; (800e2d0 <__ieee754_atan2+0x198>)
 800e1f0:	e7f6      	b.n	800e1e0 <__ieee754_atan2+0xa8>
 800e1f2:	4543      	cmp	r3, r8
 800e1f4:	d0e4      	beq.n	800e1c0 <__ieee754_atan2+0x88>
 800e1f6:	1a9b      	subs	r3, r3, r2
 800e1f8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e1fc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e200:	da21      	bge.n	800e246 <__ieee754_atan2+0x10e>
 800e202:	f1b9 0f00 	cmp.w	r9, #0
 800e206:	da01      	bge.n	800e20c <__ieee754_atan2+0xd4>
 800e208:	323c      	adds	r2, #60	; 0x3c
 800e20a:	db20      	blt.n	800e24e <__ieee754_atan2+0x116>
 800e20c:	4652      	mov	r2, sl
 800e20e:	464b      	mov	r3, r9
 800e210:	4620      	mov	r0, r4
 800e212:	4629      	mov	r1, r5
 800e214:	f7f2 fa8a 	bl	800072c <__aeabi_ddiv>
 800e218:	f7ff feb0 	bl	800df7c <fabs>
 800e21c:	f7ff fd24 	bl	800dc68 <atan>
 800e220:	4604      	mov	r4, r0
 800e222:	460d      	mov	r5, r1
 800e224:	2e01      	cmp	r6, #1
 800e226:	d015      	beq.n	800e254 <__ieee754_atan2+0x11c>
 800e228:	2e02      	cmp	r6, #2
 800e22a:	d017      	beq.n	800e25c <__ieee754_atan2+0x124>
 800e22c:	2e00      	cmp	r6, #0
 800e22e:	d0c1      	beq.n	800e1b4 <__ieee754_atan2+0x7c>
 800e230:	a31d      	add	r3, pc, #116	; (adr r3, 800e2a8 <__ieee754_atan2+0x170>)
 800e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e236:	4620      	mov	r0, r4
 800e238:	4629      	mov	r1, r5
 800e23a:	f7f1 ff95 	bl	8000168 <__aeabi_dsub>
 800e23e:	a31c      	add	r3, pc, #112	; (adr r3, 800e2b0 <__ieee754_atan2+0x178>)
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	e016      	b.n	800e274 <__ieee754_atan2+0x13c>
 800e246:	a51c      	add	r5, pc, #112	; (adr r5, 800e2b8 <__ieee754_atan2+0x180>)
 800e248:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e24c:	e7ea      	b.n	800e224 <__ieee754_atan2+0xec>
 800e24e:	2400      	movs	r4, #0
 800e250:	2500      	movs	r5, #0
 800e252:	e7e7      	b.n	800e224 <__ieee754_atan2+0xec>
 800e254:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e258:	461d      	mov	r5, r3
 800e25a:	e7ab      	b.n	800e1b4 <__ieee754_atan2+0x7c>
 800e25c:	a312      	add	r3, pc, #72	; (adr r3, 800e2a8 <__ieee754_atan2+0x170>)
 800e25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e262:	4620      	mov	r0, r4
 800e264:	4629      	mov	r1, r5
 800e266:	f7f1 ff7f 	bl	8000168 <__aeabi_dsub>
 800e26a:	4602      	mov	r2, r0
 800e26c:	460b      	mov	r3, r1
 800e26e:	a110      	add	r1, pc, #64	; (adr r1, 800e2b0 <__ieee754_atan2+0x178>)
 800e270:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e274:	f7f1 ff78 	bl	8000168 <__aeabi_dsub>
 800e278:	e77f      	b.n	800e17a <__ieee754_atan2+0x42>
 800e27a:	a50d      	add	r5, pc, #52	; (adr r5, 800e2b0 <__ieee754_atan2+0x178>)
 800e27c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e280:	e798      	b.n	800e1b4 <__ieee754_atan2+0x7c>
 800e282:	a50f      	add	r5, pc, #60	; (adr r5, 800e2c0 <__ieee754_atan2+0x188>)
 800e284:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e288:	e794      	b.n	800e1b4 <__ieee754_atan2+0x7c>
 800e28a:	2400      	movs	r4, #0
 800e28c:	2500      	movs	r5, #0
 800e28e:	e791      	b.n	800e1b4 <__ieee754_atan2+0x7c>
 800e290:	a509      	add	r5, pc, #36	; (adr r5, 800e2b8 <__ieee754_atan2+0x180>)
 800e292:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e296:	e78d      	b.n	800e1b4 <__ieee754_atan2+0x7c>
 800e298:	54442d18 	.word	0x54442d18
 800e29c:	c00921fb 	.word	0xc00921fb
 800e2a0:	54442d18 	.word	0x54442d18
 800e2a4:	bff921fb 	.word	0xbff921fb
 800e2a8:	33145c07 	.word	0x33145c07
 800e2ac:	3ca1a626 	.word	0x3ca1a626
 800e2b0:	54442d18 	.word	0x54442d18
 800e2b4:	400921fb 	.word	0x400921fb
 800e2b8:	54442d18 	.word	0x54442d18
 800e2bc:	3ff921fb 	.word	0x3ff921fb
 800e2c0:	54442d18 	.word	0x54442d18
 800e2c4:	3fe921fb 	.word	0x3fe921fb
 800e2c8:	7ff00000 	.word	0x7ff00000
 800e2cc:	0800e720 	.word	0x0800e720
 800e2d0:	0800e738 	.word	0x0800e738

0800e2d4 <_init>:
 800e2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2d6:	bf00      	nop
 800e2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2da:	bc08      	pop	{r3}
 800e2dc:	469e      	mov	lr, r3
 800e2de:	4770      	bx	lr

0800e2e0 <_fini>:
 800e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2e2:	bf00      	nop
 800e2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2e6:	bc08      	pop	{r3}
 800e2e8:	469e      	mov	lr, r3
 800e2ea:	4770      	bx	lr
