
RobotBalanceador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adfc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800af10  0800af10  0001af10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aff8  0800aff8  00020270  2**0
                  CONTENTS
  4 .ARM          00000000  0800aff8  0800aff8  00020270  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aff8  0800aff8  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aff8  0800aff8  0001aff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800affc  0800affc  0001affc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800b000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  20000270  0800b270  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016d0  0800b270  000216d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020299  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149e0  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038e3  00000000  00000000  00034cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec5  00000000  00000000  000398e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b053  00000000  00000000  0003a7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab1e  00000000  00000000  00055800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ff07  00000000  00000000  0007031e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000544c  00000000  00000000  00100228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00105674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000270 	.word	0x20000270
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aef4 	.word	0x0800aef4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000274 	.word	0x20000274
 800014c:	0800aef4 	.word	0x0800aef4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_frsub>:
 8000a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	e002      	b.n	8000a34 <__addsf3>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fsub>:
 8000a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a34 <__addsf3>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	bf1f      	itttt	ne
 8000a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a3c:	ea92 0f03 	teqne	r2, r3
 8000a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a48:	d06a      	beq.n	8000b20 <__addsf3+0xec>
 8000a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a52:	bfc1      	itttt	gt
 8000a54:	18d2      	addgt	r2, r2, r3
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	4048      	eorgt	r0, r1
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	2b19      	cmp	r3, #25
 8000a62:	bf88      	it	hi
 8000a64:	4770      	bxhi	lr
 8000a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4249      	negne	r1, r1
 8000a86:	ea92 0f03 	teq	r2, r3
 8000a8a:	d03f      	beq.n	8000b0c <__addsf3+0xd8>
 8000a8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a90:	fa41 fc03 	asr.w	ip, r1, r3
 8000a94:	eb10 000c 	adds.w	r0, r0, ip
 8000a98:	f1c3 0320 	rsb	r3, r3, #32
 8000a9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	d502      	bpl.n	8000aac <__addsf3+0x78>
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab0:	d313      	bcc.n	8000ada <__addsf3+0xa6>
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ab6:	d306      	bcc.n	8000ac6 <__addsf3+0x92>
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	2afe      	cmp	r2, #254	; 0xfe
 8000ac4:	d251      	bcs.n	8000b6a <__addsf3+0x136>
 8000ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ace:	bf08      	it	eq
 8000ad0:	f020 0001 	biceq.w	r0, r0, #1
 8000ad4:	ea40 0003 	orr.w	r0, r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	0049      	lsls	r1, r1, #1
 8000adc:	eb40 0000 	adc.w	r0, r0, r0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ae8:	d2ed      	bcs.n	8000ac6 <__addsf3+0x92>
 8000aea:	fab0 fc80 	clz	ip, r0
 8000aee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af2:	ebb2 020c 	subs.w	r2, r2, ip
 8000af6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afa:	bfaa      	itet	ge
 8000afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b00:	4252      	neglt	r2, r2
 8000b02:	4318      	orrge	r0, r3
 8000b04:	bfbc      	itt	lt
 8000b06:	40d0      	lsrlt	r0, r2
 8000b08:	4318      	orrlt	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	f092 0f00 	teq	r2, #0
 8000b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b14:	bf06      	itte	eq
 8000b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1a:	3201      	addeq	r2, #1
 8000b1c:	3b01      	subne	r3, #1
 8000b1e:	e7b5      	b.n	8000a8c <__addsf3+0x58>
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d021      	beq.n	8000b74 <__addsf3+0x140>
 8000b30:	ea92 0f03 	teq	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__addsf3+0x10c>
 8000b36:	f092 0f00 	teq	r2, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	4770      	bx	lr
 8000b40:	ea90 0f01 	teq	r0, r1
 8000b44:	bf1c      	itt	ne
 8000b46:	2000      	movne	r0, #0
 8000b48:	4770      	bxne	lr
 8000b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b4e:	d104      	bne.n	8000b5a <__addsf3+0x126>
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	bf28      	it	cs
 8000b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b58:	4770      	bx	lr
 8000b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b5e:	bf3c      	itt	cc
 8000b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bxcc	lr
 8000b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	4770      	bx	lr
 8000b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b78:	bf16      	itet	ne
 8000b7a:	4608      	movne	r0, r1
 8000b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b80:	4601      	movne	r1, r0
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	bf06      	itte	eq
 8000b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8a:	ea90 0f01 	teqeq	r0, r1
 8000b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_ui2f>:
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e004      	b.n	8000ba4 <__aeabi_i2f+0x8>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_i2f>:
 8000b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	bf48      	it	mi
 8000ba2:	4240      	negmi	r0, r0
 8000ba4:	ea5f 0c00 	movs.w	ip, r0
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	e01c      	b.n	8000bf2 <__aeabi_l2f+0x2a>

08000bb8 <__aeabi_ul2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <__aeabi_l2f+0x14>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_l2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__aeabi_l2f+0x14>
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bdc:	ea5f 0c01 	movs.w	ip, r1
 8000be0:	bf02      	ittt	eq
 8000be2:	4684      	moveq	ip, r0
 8000be4:	4601      	moveq	r1, r0
 8000be6:	2000      	moveq	r0, #0
 8000be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bec:	bf08      	it	eq
 8000bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bf6:	fabc f28c 	clz	r2, ip
 8000bfa:	3a08      	subs	r2, #8
 8000bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c00:	db10      	blt.n	8000c24 <__aeabi_l2f+0x5c>
 8000c02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c06:	4463      	add	r3, ip
 8000c08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f102 0220 	add.w	r2, r2, #32
 8000c28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c34:	fa21 f202 	lsr.w	r2, r1, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fmul>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d06f      	beq.n	8000d3c <__aeabi_fmul+0xf8>
 8000c5c:	441a      	add	r2, r3
 8000c5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c62:	0240      	lsls	r0, r0, #9
 8000c64:	bf18      	it	ne
 8000c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6a:	d01e      	beq.n	8000caa <__aeabi_fmul+0x66>
 8000c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c78:	fba0 3101 	umull	r3, r1, r0, r1
 8000c7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c84:	bf3e      	ittt	cc
 8000c86:	0049      	lslcc	r1, r1, #1
 8000c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	ea40 0001 	orr.w	r0, r0, r1
 8000c92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c96:	2afd      	cmp	r2, #253	; 0xfd
 8000c98:	d81d      	bhi.n	8000cd6 <__aeabi_fmul+0x92>
 8000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	4770      	bx	lr
 8000caa:	f090 0f00 	teq	r0, #0
 8000cae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb2:	bf08      	it	eq
 8000cb4:	0249      	lsleq	r1, r1, #9
 8000cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cbe:	3a7f      	subs	r2, #127	; 0x7f
 8000cc0:	bfc2      	ittt	gt
 8000cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cca:	4770      	bxgt	lr
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	dc5d      	bgt.n	8000d94 <__aeabi_fmul+0x150>
 8000cd8:	f112 0f19 	cmn.w	r2, #25
 8000cdc:	bfdc      	itt	le
 8000cde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce2:	4770      	bxle	lr
 8000ce4:	f1c2 0200 	rsb	r2, r2, #0
 8000ce8:	0041      	lsls	r1, r0, #1
 8000cea:	fa21 f102 	lsr.w	r1, r1, r2
 8000cee:	f1c2 0220 	rsb	r2, r2, #32
 8000cf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfa:	f140 0000 	adc.w	r0, r0, #0
 8000cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d02:	bf08      	it	eq
 8000d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d08:	4770      	bx	lr
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fmul+0xce>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fmul+0xe6>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e78f      	b.n	8000c5c <__aeabi_fmul+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	bf18      	it	ne
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_fmul+0x11e>
 8000d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d50:	bf18      	it	ne
 8000d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d56:	d1d8      	bne.n	8000d0a <__aeabi_fmul+0xc6>
 8000d58:	ea80 0001 	eor.w	r0, r0, r1
 8000d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f090 0f00 	teq	r0, #0
 8000d66:	bf17      	itett	ne
 8000d68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	f091 0f00 	teqne	r1, #0
 8000d72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d76:	d014      	beq.n	8000da2 <__aeabi_fmul+0x15e>
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_fmul+0x13e>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d10f      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d82:	ea93 0f0c 	teq	r3, ip
 8000d86:	d103      	bne.n	8000d90 <__aeabi_fmul+0x14c>
 8000d88:	024b      	lsls	r3, r1, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	4608      	movne	r0, r1
 8000d8e:	d108      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da0:	4770      	bx	lr
 8000da2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fdiv>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d069      	beq.n	8000e98 <__aeabi_fdiv+0xec>
 8000dc4:	eba2 0203 	sub.w	r2, r2, r3
 8000dc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd2:	d037      	beq.n	8000e44 <__aeabi_fdiv+0x98>
 8000dd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de4:	428b      	cmp	r3, r1
 8000de6:	bf38      	it	cc
 8000de8:	005b      	lslcc	r3, r3, #1
 8000dea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df2:	428b      	cmp	r3, r1
 8000df4:	bf24      	itt	cs
 8000df6:	1a5b      	subcs	r3, r3, r1
 8000df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0e:	bf24      	itt	cs
 8000e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	bf18      	it	ne
 8000e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2e:	d1e0      	bne.n	8000df2 <__aeabi_fdiv+0x46>
 8000e30:	2afd      	cmp	r2, #253	; 0xfd
 8000e32:	f63f af50 	bhi.w	8000cd6 <__aeabi_fmul+0x92>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4c:	327f      	adds	r2, #127	; 0x7f
 8000e4e:	bfc2      	ittt	gt
 8000e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e58:	4770      	bxgt	lr
 8000e5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	3a01      	subs	r2, #1
 8000e64:	e737      	b.n	8000cd6 <__aeabi_fmul+0x92>
 8000e66:	f092 0f00 	teq	r2, #0
 8000e6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0040      	lsleq	r0, r0, #1
 8000e72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e76:	3a01      	subeq	r2, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fdiv+0xc2>
 8000e7a:	ea40 000c 	orr.w	r0, r0, ip
 8000e7e:	f093 0f00 	teq	r3, #0
 8000e82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0049      	lsleq	r1, r1, #1
 8000e8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e8e:	3b01      	subeq	r3, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fdiv+0xda>
 8000e92:	ea41 010c 	orr.w	r1, r1, ip
 8000e96:	e795      	b.n	8000dc4 <__aeabi_fdiv+0x18>
 8000e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d108      	bne.n	8000eb4 <__aeabi_fdiv+0x108>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	f47f af7d 	bne.w	8000da2 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	f47f af70 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e776      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_fdiv+0x118>
 8000eba:	024b      	lsls	r3, r1, #9
 8000ebc:	f43f af4c 	beq.w	8000d58 <__aeabi_fmul+0x114>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1ca      	bne.n	8000e66 <__aeabi_fdiv+0xba>
 8000ed0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed4:	f47f af5c 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000ed8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000edc:	f47f af3c 	bne.w	8000d58 <__aeabi_fmul+0x114>
 8000ee0:	e75f      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ee2:	bf00      	nop

08000ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0320 	and.w	r3, r3, #32
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT1_IN1_Pin|MOT1_IN2_Pin|MOT2_IN1_Pin|MOT2_IN2_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f240 4107 	movw	r1, #1031	; 0x407
 8000f46:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_GPIO_Init+0x94>)
 8000f48:	f001 f99c 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOT1_IN1_Pin|MOT1_IN2_Pin|MOT2_IN1_Pin|MOT2_IN2_Pin;
 8000f4c:	f240 4307 	movw	r3, #1031	; 0x407
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_GPIO_Init+0x94>)
 8000f66:	f001 f809 	bl	8001f7c <HAL_GPIO_Init>

}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010c00 	.word	0x40010c00

08000f7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f82:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <MX_I2C1_Init+0x54>)
 8000f84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <MX_I2C1_Init+0x58>)
 8000f8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_I2C1_Init+0x50>)
 8000fba:	f001 f97b 	bl	80022b4 <HAL_I2C_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fc4:	f000 f8f4 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000028c 	.word	0x2000028c
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	000186a0 	.word	0x000186a0

08000fd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_I2C_MspInit+0x90>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d132      	bne.n	800105e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_I2C_MspInit+0x94>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <HAL_I2C_MspInit+0x94>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_I2C_MspInit+0x94>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001010:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4812      	ldr	r0, [pc, #72]	; (8001070 <HAL_I2C_MspInit+0x98>)
 8001026:	f000 ffa9 	bl	8001f7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_I2C_MspInit+0x9c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
 8001040:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <HAL_I2C_MspInit+0x9c>)
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_I2C_MspInit+0x94>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_I2C_MspInit+0x94>)
 800104c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_I2C_MspInit+0x94>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40005400 	.word	0x40005400
 800106c:	40021000 	.word	0x40021000
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40010000 	.word	0x40010000

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f000 fe0e 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f83c 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f7ff ff2e 	bl	8000ee4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001088:	f008 ff30 	bl	8009eec <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800108c:	f7ff ff76 	bl	8000f7c <MX_I2C1_Init>
  MX_TIM4_Init();
 8001090:	f000 fd00 	bl	8001a94 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001094:	f000 fc84 	bl	80019a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Inicializar variables
  last_mpu_time = HAL_GetTick();
 8001098:	f000 fe58 	bl	8001d4c <HAL_GetTick>
 800109c:	4603      	mov	r3, r0
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <main+0x74>)
 80010a0:	6013      	str	r3, [r2, #0]

  // Inicialización del PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010a2:	2100      	movs	r1, #0
 80010a4:	4812      	ldr	r0, [pc, #72]	; (80010f0 <main+0x78>)
 80010a6:	f004 fbcd 	bl	8005844 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010aa:	2104      	movs	r1, #4
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <main+0x78>)
 80010ae:	f004 fbc9 	bl	8005844 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 0);
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <main+0x78>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 0);
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <main+0x78>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
  // __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); El DRV8870 utiliza 4 pines de PWM
  // __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0);
  // Esperar para la inicialización del MPU6050
  while (MPU6050_Init(&hi2c1) == 1);
 80010c2:	bf00      	nop
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <main+0x7c>)
 80010c6:	f000 f878 	bl	80011ba <MPU6050_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d0f9      	beq.n	80010c4 <main+0x4c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

    // Lectura del MPU6050 cada 100ms
    if (HAL_GetTick() - last_mpu_time > 100) {
 80010d0:	f000 fe3c 	bl	8001d4c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <main+0x74>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b64      	cmp	r3, #100	; 0x64
 80010de:	d9f7      	bls.n	80010d0 <main+0x58>
      MPU6050_Read_All(&hi2c1, &MPU6050);
 80010e0:	4905      	ldr	r1, [pc, #20]	; (80010f8 <main+0x80>)
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <main+0x7c>)
 80010e4:	f000 f8c0 	bl	8001268 <MPU6050_Read_All>
    if (HAL_GetTick() - last_mpu_time > 100) {
 80010e8:	e7f2      	b.n	80010d0 <main+0x58>
 80010ea:	bf00      	nop
 80010ec:	200002e0 	.word	0x200002e0
 80010f0:	20000344 	.word	0x20000344
 80010f4:	2000028c 	.word	0x2000028c
 80010f8:	200002e8 	.word	0x200002e8

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f009 fb64 	bl	800a7d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112c:	2301      	movs	r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113a:	2301      	movs	r3, #1
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001148:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fe74 	bl	8004e40 <HAL_RCC_OscConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800115e:	f000 f827 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	230f      	movs	r3, #15
 8001164:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001172:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f004 f8e0 	bl	8005344 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800118a:	f000 f811 	bl	80011b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800118e:	2310      	movs	r3, #16
 8001190:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fa4d 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80011a4:	f000 f804 	bl	80011b0 <Error_Handler>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	; 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>

080011ba <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b088      	sub	sp, #32
 80011be:	af04      	add	r7, sp, #16
 80011c0:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f107 030f 	add.w	r3, r7, #15
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	2275      	movs	r2, #117	; 0x75
 80011d4:	21d0      	movs	r1, #208	; 0xd0
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f001 faaa 	bl	8002730 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	2b68      	cmp	r3, #104	; 0x68
 80011e0:	d13d      	bne.n	800125e <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80011e6:	2364      	movs	r3, #100	; 0x64
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f107 030e 	add.w	r3, r7, #14
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	226b      	movs	r2, #107	; 0x6b
 80011f8:	21d0      	movs	r1, #208	; 0xd0
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f001 f99e 	bl	800253c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001200:	2307      	movs	r3, #7
 8001202:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001204:	2364      	movs	r3, #100	; 0x64
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	2301      	movs	r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	f107 030e 	add.w	r3, r7, #14
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	2219      	movs	r2, #25
 8001216:	21d0      	movs	r1, #208	; 0xd0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f001 f98f 	bl	800253c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800121e:	2300      	movs	r3, #0
 8001220:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	f107 030e 	add.w	r3, r7, #14
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	221c      	movs	r2, #28
 8001234:	21d0      	movs	r1, #208	; 0xd0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f001 f980 	bl	800253c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800123c:	2300      	movs	r3, #0
 800123e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9302      	str	r3, [sp, #8]
 8001244:	2301      	movs	r3, #1
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	f107 030e 	add.w	r3, r7, #14
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	221b      	movs	r2, #27
 8001252:	21d0      	movs	r1, #208	; 0xd0
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f001 f971 	bl	800253c <HAL_I2C_Mem_Write>
        return 0;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <MPU6050_Init+0xa6>
    }
    return 1;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800126c:	b094      	sub	sp, #80	; 0x50
 800126e:	af04      	add	r7, sp, #16
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001274:	2364      	movs	r3, #100	; 0x64
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	230e      	movs	r3, #14
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	223b      	movs	r2, #59	; 0x3b
 8001286:	21d0      	movs	r1, #208	; 0xd0
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f001 fa51 	bl	8002730 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800128e:	7a3b      	ldrb	r3, [r7, #8]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
 8001294:	7a7b      	ldrb	r3, [r7, #9]
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21a      	sxth	r2, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80012a0:	7abb      	ldrb	r3, [r7, #10]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80012b2:	7b3b      	ldrb	r3, [r7, #12]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	7b7b      	ldrb	r3, [r7, #13]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21a      	sxth	r2, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80012d2:	7c3b      	ldrb	r3, [r7, #16]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	7c7b      	ldrb	r3, [r7, #17]
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21a      	sxth	r2, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80012e4:	7cbb      	ldrb	r3, [r7, #18]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7cfb      	ldrb	r3, [r7, #19]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80012f6:	7d3b      	ldrb	r3, [r7, #20]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	7d7b      	ldrb	r3, [r7, #21]
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b21a      	sxth	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f870 	bl	80003f4 <__aeabi_i2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b95      	ldr	r3, [pc, #596]	; (8001570 <MPU6050_Read_All+0x308>)
 800131a:	f7ff f9ff 	bl	800071c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	6839      	ldr	r1, [r7, #0]
 8001324:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f860 	bl	80003f4 <__aeabi_i2d>
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <MPU6050_Read_All+0x308>)
 800133a:	f7ff f9ef 	bl	800071c <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f850 	bl	80003f4 <__aeabi_i2d>
 8001354:	a380      	add	r3, pc, #512	; (adr r3, 8001558 <MPU6050_Read_All+0x2f0>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f9df 	bl	800071c <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	6839      	ldr	r1, [r7, #0]
 8001364:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001368:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fc15 	bl	8000b9c <__aeabi_i2f>
 8001372:	4603      	mov	r3, r0
 8001374:	497f      	ldr	r1, [pc, #508]	; (8001574 <MPU6050_Read_All+0x30c>)
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fd18 	bl	8000dac <__aeabi_fdiv>
 800137c:	4603      	mov	r3, r0
 800137e:	497e      	ldr	r1, [pc, #504]	; (8001578 <MPU6050_Read_All+0x310>)
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fb57 	bl	8000a34 <__addsf3>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f82d 	bl	80003f4 <__aeabi_i2d>
 800139a:	a371      	add	r3, pc, #452	; (adr r3, 8001560 <MPU6050_Read_All+0x2f8>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f9bc 	bl	800071c <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f81d 	bl	80003f4 <__aeabi_i2d>
 80013ba:	a369      	add	r3, pc, #420	; (adr r3, 8001560 <MPU6050_Read_All+0x2f8>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f9ac 	bl	800071c <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f80d 	bl	80003f4 <__aeabi_i2d>
 80013da:	a361      	add	r3, pc, #388	; (adr r3, 8001560 <MPU6050_Read_All+0x2f8>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f99c 	bl	800071c <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	6839      	ldr	r1, [r7, #0]
 80013ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80013ee:	f000 fcad 	bl	8001d4c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b61      	ldr	r3, [pc, #388]	; (800157c <MPU6050_Read_All+0x314>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe ffea 	bl	80003d4 <__aeabi_ui2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <MPU6050_Read_All+0x318>)
 8001406:	f7ff f989 	bl	800071c <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001412:	f000 fc9b 	bl	8001d4c <HAL_GetTick>
 8001416:	4603      	mov	r3, r0
 8001418:	4a58      	ldr	r2, [pc, #352]	; (800157c <MPU6050_Read_All+0x314>)
 800141a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	461a      	mov	r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	fb03 f202 	mul.w	r2, r3, r2
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001434:	4619      	mov	r1, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800143c:	fb01 f303 	mul.w	r3, r1, r3
 8001440:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe ffd6 	bl	80003f4 <__aeabi_i2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f009 f9f6 	bl	800a840 <sqrt>
 8001454:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001464:	f7ff fa98 	bl	8000998 <__aeabi_dcmpeq>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d119      	bne.n	80014a2 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ffbd 	bl	80003f4 <__aeabi_i2d>
 800147a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800147e:	f7ff f94d 	bl	800071c <__aeabi_ddiv>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f009 f9fd 	bl	800a888 <atan>
 800148e:	a336      	add	r3, pc, #216	; (adr r3, 8001568 <MPU6050_Read_All+0x300>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f818 	bl	80004c8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80014a0:	e005      	b.n	80014ae <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	425b      	negs	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe ff9c 	bl	80003f4 <__aeabi_i2d>
 80014bc:	4682      	mov	sl, r0
 80014be:	468b      	mov	fp, r1
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ff94 	bl	80003f4 <__aeabi_i2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4650      	mov	r0, sl
 80014d2:	4659      	mov	r1, fp
 80014d4:	f009 f9b2 	bl	800a83c <atan2>
 80014d8:	a323      	add	r3, pc, #140	; (adr r3, 8001568 <MPU6050_Read_All+0x300>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7fe fff3 	bl	80004c8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <MPU6050_Read_All+0x31c>)
 80014f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014f4:	f7ff fa5a 	bl	80009ac <__aeabi_dcmplt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00a      	beq.n	8001514 <MPU6050_Read_All+0x2ac>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MPU6050_Read_All+0x320>)
 800150a:	f7ff fa6d 	bl	80009e8 <__aeabi_dcmpgt>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d114      	bne.n	800153e <MPU6050_Read_All+0x2d6>
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MPU6050_Read_All+0x320>)
 800151a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800151e:	f7ff fa63 	bl	80009e8 <__aeabi_dcmpgt>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d033      	beq.n	8001590 <MPU6050_Read_All+0x328>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MPU6050_Read_All+0x31c>)
 8001534:	f7ff fa3a 	bl	80009ac <__aeabi_dcmplt>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d028      	beq.n	8001590 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 800153e:	4913      	ldr	r1, [pc, #76]	; (800158c <MPU6050_Read_All+0x324>)
 8001540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001544:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800154e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001552:	e030      	b.n	80015b6 <MPU6050_Read_All+0x34e>
 8001554:	f3af 8000 	nop.w
 8001558:	00000000 	.word	0x00000000
 800155c:	40cc2900 	.word	0x40cc2900
 8001560:	00000000 	.word	0x00000000
 8001564:	40606000 	.word	0x40606000
 8001568:	1a63c1f8 	.word	0x1a63c1f8
 800156c:	404ca5dc 	.word	0x404ca5dc
 8001570:	40d00000 	.word	0x40d00000
 8001574:	43aa0000 	.word	0x43aa0000
 8001578:	42121eb8 	.word	0x42121eb8
 800157c:	20000340 	.word	0x20000340
 8001580:	408f4000 	.word	0x408f4000
 8001584:	c0568000 	.word	0xc0568000
 8001588:	40568000 	.word	0x40568000
 800158c:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001596:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800159a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800159e:	e9cd 2300 	strd	r2, r3, [sp]
 80015a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015a6:	481c      	ldr	r0, [pc, #112]	; (8001618 <MPU6050_Read_All+0x3b0>)
 80015a8:	f000 f83c 	bl	8001624 <Kalman_getAngle>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	6839      	ldr	r1, [r7, #0]
 80015b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80015bc:	4690      	mov	r8, r2
 80015be:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <MPU6050_Read_All+0x3b4>)
 80015c8:	4640      	mov	r0, r8
 80015ca:	4649      	mov	r1, r9
 80015cc:	f7ff fa0c 	bl	80009e8 <__aeabi_dcmpgt>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015dc:	4614      	mov	r4, r2
 80015de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015f6:	e9cd 2300 	strd	r2, r3, [sp]
 80015fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015fe:	4808      	ldr	r0, [pc, #32]	; (8001620 <MPU6050_Read_All+0x3b8>)
 8001600:	f000 f810 	bl	8001624 <Kalman_getAngle>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800160e:	bf00      	nop
 8001610:	3740      	adds	r7, #64	; 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001618:	20000048 	.word	0x20000048
 800161c:	40568000 	.word	0x40568000
 8001620:	20000000 	.word	0x20000000

08001624 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b092      	sub	sp, #72	; 0x48
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001636:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800163a:	f7fe fd8d 	bl	8000158 <__aeabi_dsub>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800164c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001650:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001654:	f7fe ff38 	bl	80004c8 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4620      	mov	r0, r4
 800165e:	4629      	mov	r1, r5
 8001660:	f7fe fd7c 	bl	800015c <__adddf3>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800167a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800167e:	f7fe ff23 	bl	80004c8 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001690:	f7fe fd62 	bl	8000158 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80016a2:	f7fe fd59 	bl	8000158 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe fd52 	bl	800015c <__adddf3>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016c4:	f7fe ff00 	bl	80004c8 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fd44 	bl	800015c <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	68f9      	ldr	r1, [r7, #12]
 80016da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80016ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016ee:	f7fe feeb 	bl	80004c8 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4620      	mov	r0, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	f7fe fd2d 	bl	8000158 <__aeabi_dsub>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001714:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001718:	f7fe fed6 	bl	80004c8 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4620      	mov	r0, r4
 8001722:	4629      	mov	r1, r5
 8001724:	f7fe fd18 	bl	8000158 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800173e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001742:	f7fe fec1 	bl	80004c8 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7fe fd05 	bl	800015c <__adddf3>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	68f9      	ldr	r1, [r7, #12]
 8001758:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001768:	f7fe fcf8 	bl	800015c <__adddf3>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800177a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800177e:	f7fe ffcd 	bl	800071c <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001794:	f7fe ffc2 	bl	800071c <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017aa:	f7fe fcd5 	bl	8000158 <__aeabi_dsub>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80017bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017c4:	f7fe fe80 	bl	80004c8 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4620      	mov	r0, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	f7fe fcc4 	bl	800015c <__adddf3>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80017e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017ec:	f7fe fe6c 	bl	80004c8 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4620      	mov	r0, r4
 80017f6:	4629      	mov	r1, r5
 80017f8:	f7fe fcb0 	bl	800015c <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800180c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001816:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001820:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001828:	f7fe fe4e 	bl	80004c8 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fc90 	bl	8000158 <__aeabi_dsub>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	68f9      	ldr	r1, [r7, #12]
 800183e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001848:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800184c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001850:	f7fe fe3a 	bl	80004c8 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fc7c 	bl	8000158 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001870:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001878:	f7fe fe26 	bl	80004c8 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fc68 	bl	8000158 <__aeabi_dsub>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	68f9      	ldr	r1, [r7, #12]
 800188e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001898:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800189c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a0:	f7fe fe12 	bl	80004c8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fc54 	bl	8000158 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	68f9      	ldr	r1, [r7, #12]
 80018b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	3748      	adds	r7, #72	; 0x48
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_MspInit+0x5c>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_MspInit+0x5c>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6193      	str	r3, [r2, #24]
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_MspInit+0x5c>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_MspInit+0x5c>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_MspInit+0x5c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_MspInit+0x5c>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_MspInit+0x60>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_MspInit+0x60>)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000

08001930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001934:	e7fe      	b.n	8001934 <NMI_Handler+0x4>

08001936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <MemManage_Handler+0x4>

08001942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler+0x4>

0800194e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001976:	f000 f9d7 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001986:	f001 fe16 	bl	80035b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200010a0 	.word	0x200010a0

08001994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	615a      	str	r2, [r3, #20]
 80019c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <MX_TIM2_Init+0xf0>)
 80019c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <MX_TIM2_Init+0xf0>)
 80019cc:	2248      	movs	r2, #72	; 0x48
 80019ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <MX_TIM2_Init+0xf0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80019d6:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <MX_TIM2_Init+0xf0>)
 80019d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <MX_TIM2_Init+0xf0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <MX_TIM2_Init+0xf0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ea:	4829      	ldr	r0, [pc, #164]	; (8001a90 <MX_TIM2_Init+0xf0>)
 80019ec:	f003 feda 	bl	80057a4 <HAL_TIM_PWM_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019f6:	f7ff fbdb 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	4619      	mov	r1, r3
 8001a08:	4821      	ldr	r0, [pc, #132]	; (8001a90 <MX_TIM2_Init+0xf0>)
 8001a0a:	f004 fb3b 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a14:	f7ff fbcc 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a18:	2360      	movs	r3, #96	; 0x60
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4818      	ldr	r0, [pc, #96]	; (8001a90 <MX_TIM2_Init+0xf0>)
 8001a30:	f004 f84c 	bl	8005acc <HAL_TIM_PWM_ConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a3a:	f7ff fbb9 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2204      	movs	r2, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4812      	ldr	r0, [pc, #72]	; (8001a90 <MX_TIM2_Init+0xf0>)
 8001a46:	f004 f841 	bl	8005acc <HAL_TIM_PWM_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a50:	f7ff fbae 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2208      	movs	r2, #8
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480d      	ldr	r0, [pc, #52]	; (8001a90 <MX_TIM2_Init+0xf0>)
 8001a5c:	f004 f836 	bl	8005acc <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001a66:	f7ff fba3 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <MX_TIM2_Init+0xf0>)
 8001a72:	f004 f82b 	bl	8005acc <HAL_TIM_PWM_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001a7c:	f7ff fb98 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a80:	4803      	ldr	r0, [pc, #12]	; (8001a90 <MX_TIM2_Init+0xf0>)
 8001a82:	f000 f8b5 	bl	8001bf0 <HAL_TIM_MspPostInit>

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000344 	.word	0x20000344

08001a94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	; 0x30
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2224      	movs	r2, #36	; 0x24
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f008 fe98 	bl	800a7d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <MX_TIM4_Init+0xa0>)
 8001ab2:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <MX_TIM4_Init+0xa4>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_TIM4_Init+0xa0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_TIM4_Init+0xa0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_TIM4_Init+0xa0>)
 8001ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_TIM4_Init+0xa0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_TIM4_Init+0xa0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	4619      	mov	r1, r3
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <MX_TIM4_Init+0xa0>)
 8001b02:	f003 ff41 	bl	8005988 <HAL_TIM_Encoder_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b0c:	f7ff fb50 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_TIM4_Init+0xa0>)
 8001b1e:	f004 fab1 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001b28:	f7ff fb42 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	3730      	adds	r7, #48	; 0x30
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000038c 	.word	0x2000038c
 8001b38:	40000800 	.word	0x40000800

08001b3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4c:	d10b      	bne.n	8001b66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_TIM_PWM_MspInit+0x34>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_TIM_PWM_MspInit+0x34>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_TIM_PWM_MspInit+0x34>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x70>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d123      	bne.n	8001bdc <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	61d3      	str	r3, [r2, #28]
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc4:	23c0      	movs	r3, #192	; 0xc0
 8001bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <HAL_TIM_Encoder_MspInit+0x78>)
 8001bd8:	f000 f9d0 	bl	8001f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40000800 	.word	0x40000800
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010c00 	.word	0x40010c00

08001bf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0e:	d117      	bne.n	8001c40 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_TIM_MspPostInit+0x58>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <HAL_TIM_MspPostInit+0x58>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_TIM_MspPostInit+0x58>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8001c28:	230f      	movs	r3, #15
 8001c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2302      	movs	r3, #2
 8001c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <HAL_TIM_MspPostInit+0x5c>)
 8001c3c:	f000 f99e 	bl	8001f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800

08001c50 <Reset_Handler>:
 8001c50:	f7ff fea0 	bl	8001994 <SystemInit>
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <LoopFillZerobss+0xe>)
 8001c56:	490c      	ldr	r1, [pc, #48]	; (8001c88 <LoopFillZerobss+0x12>)
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <LoopFillZerobss+0x16>)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:
 8001c5e:	58d4      	ldr	r4, [r2, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:
 8001c64:	18c4      	adds	r4, r0, r3
 8001c66:	428c      	cmp	r4, r1
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <LoopFillZerobss+0x1a>)
 8001c6c:	4c09      	ldr	r4, [pc, #36]	; (8001c94 <LoopFillZerobss+0x1e>)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:
 8001c76:	42a2      	cmp	r2, r4
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>
 8001c7a:	f008 fdbb 	bl	800a7f4 <__libc_init_array>
 8001c7e:	f7ff f9fb 	bl	8001078 <main>
 8001c82:	4770      	bx	lr
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000270 	.word	0x20000270
 8001c8c:	0800b000 	.word	0x0800b000
 8001c90:	20000270 	.word	0x20000270
 8001c94:	200016d0 	.word	0x200016d0

08001c98 <ADC1_2_IRQHandler>:
 8001c98:	e7fe      	b.n	8001c98 <ADC1_2_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_Init+0x28>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_Init+0x28>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 f923 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	200f      	movs	r0, #15
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fe08 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f93b 	bl	8001f62 <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 f903 	bl	8001f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000090 	.word	0x20000090
 8001d20:	20000098 	.word	0x20000098
 8001d24:	20000094 	.word	0x20000094

08001d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_IncTick+0x1c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x20>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_IncTick+0x20>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000098 	.word	0x20000098
 8001d48:	200003d4 	.word	0x200003d4

08001d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_GetTick+0x10>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	200003d4 	.word	0x200003d4

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4906      	ldr	r1, [pc, #24]	; (8001df8 <__NVIC_EnableIRQ+0x34>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	; (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	; (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1c3 0307 	rsb	r3, r3, #7
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2304      	movcs	r3, #4
 8001e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d902      	bls.n	8001e80 <NVIC_EncodePriority+0x30>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3b03      	subs	r3, #3
 8001e7e:	e000      	b.n	8001e82 <NVIC_EncodePriority+0x32>
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	4313      	orrs	r3, r2
         );
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f7ff ff90 	bl	8001dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff2d 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f20:	f7ff ff42 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff90 	bl	8001e50 <NVIC_EncodePriority>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff5f 	bl	8001dfc <__NVIC_SetPriority>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff35 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffa2 	bl	8001eb4 <SysTick_Config>
 8001f70:	4603      	mov	r3, r0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b08b      	sub	sp, #44	; 0x2c
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8e:	e169      	b.n	8002264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f90:	2201      	movs	r2, #1
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	f040 8158 	bne.w	800225e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4a9a      	ldr	r2, [pc, #616]	; (800221c <HAL_GPIO_Init+0x2a0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d05e      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fb8:	4a98      	ldr	r2, [pc, #608]	; (800221c <HAL_GPIO_Init+0x2a0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d875      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fbe:	4a98      	ldr	r2, [pc, #608]	; (8002220 <HAL_GPIO_Init+0x2a4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d058      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fc4:	4a96      	ldr	r2, [pc, #600]	; (8002220 <HAL_GPIO_Init+0x2a4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d86f      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fca:	4a96      	ldr	r2, [pc, #600]	; (8002224 <HAL_GPIO_Init+0x2a8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d052      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fd0:	4a94      	ldr	r2, [pc, #592]	; (8002224 <HAL_GPIO_Init+0x2a8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d869      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fd6:	4a94      	ldr	r2, [pc, #592]	; (8002228 <HAL_GPIO_Init+0x2ac>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d04c      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fdc:	4a92      	ldr	r2, [pc, #584]	; (8002228 <HAL_GPIO_Init+0x2ac>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d863      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fe2:	4a92      	ldr	r2, [pc, #584]	; (800222c <HAL_GPIO_Init+0x2b0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d046      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fe8:	4a90      	ldr	r2, [pc, #576]	; (800222c <HAL_GPIO_Init+0x2b0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d85d      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fee:	2b12      	cmp	r3, #18
 8001ff0:	d82a      	bhi.n	8002048 <HAL_GPIO_Init+0xcc>
 8001ff2:	2b12      	cmp	r3, #18
 8001ff4:	d859      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001ff6:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_GPIO_Init+0x80>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	08002077 	.word	0x08002077
 8002000:	08002051 	.word	0x08002051
 8002004:	08002063 	.word	0x08002063
 8002008:	080020a5 	.word	0x080020a5
 800200c:	080020ab 	.word	0x080020ab
 8002010:	080020ab 	.word	0x080020ab
 8002014:	080020ab 	.word	0x080020ab
 8002018:	080020ab 	.word	0x080020ab
 800201c:	080020ab 	.word	0x080020ab
 8002020:	080020ab 	.word	0x080020ab
 8002024:	080020ab 	.word	0x080020ab
 8002028:	080020ab 	.word	0x080020ab
 800202c:	080020ab 	.word	0x080020ab
 8002030:	080020ab 	.word	0x080020ab
 8002034:	080020ab 	.word	0x080020ab
 8002038:	080020ab 	.word	0x080020ab
 800203c:	080020ab 	.word	0x080020ab
 8002040:	08002059 	.word	0x08002059
 8002044:	0800206d 	.word	0x0800206d
 8002048:	4a79      	ldr	r2, [pc, #484]	; (8002230 <HAL_GPIO_Init+0x2b4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800204e:	e02c      	b.n	80020aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	623b      	str	r3, [r7, #32]
          break;
 8002056:	e029      	b.n	80020ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	3304      	adds	r3, #4
 800205e:	623b      	str	r3, [r7, #32]
          break;
 8002060:	e024      	b.n	80020ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	3308      	adds	r3, #8
 8002068:	623b      	str	r3, [r7, #32]
          break;
 800206a:	e01f      	b.n	80020ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	330c      	adds	r3, #12
 8002072:	623b      	str	r3, [r7, #32]
          break;
 8002074:	e01a      	b.n	80020ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800207e:	2304      	movs	r3, #4
 8002080:	623b      	str	r3, [r7, #32]
          break;
 8002082:	e013      	b.n	80020ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800208c:	2308      	movs	r3, #8
 800208e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	611a      	str	r2, [r3, #16]
          break;
 8002096:	e009      	b.n	80020ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002098:	2308      	movs	r3, #8
 800209a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	615a      	str	r2, [r3, #20]
          break;
 80020a2:	e003      	b.n	80020ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
          break;
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_Init+0x130>
          break;
 80020aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2bff      	cmp	r3, #255	; 0xff
 80020b0:	d801      	bhi.n	80020b6 <HAL_GPIO_Init+0x13a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	e001      	b.n	80020ba <HAL_GPIO_Init+0x13e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2bff      	cmp	r3, #255	; 0xff
 80020c0:	d802      	bhi.n	80020c8 <HAL_GPIO_Init+0x14c>
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	e002      	b.n	80020ce <HAL_GPIO_Init+0x152>
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	3b08      	subs	r3, #8
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	210f      	movs	r1, #15
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	6a39      	ldr	r1, [r7, #32]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	431a      	orrs	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80b1 	beq.w	800225e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020fc:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <HAL_GPIO_Init+0x2b8>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4a4c      	ldr	r2, [pc, #304]	; (8002234 <HAL_GPIO_Init+0x2b8>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6193      	str	r3, [r2, #24]
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_GPIO_Init+0x2b8>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002114:	4a48      	ldr	r2, [pc, #288]	; (8002238 <HAL_GPIO_Init+0x2bc>)
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4013      	ands	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <HAL_GPIO_Init+0x2c0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <HAL_GPIO_Init+0x1ec>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3f      	ldr	r2, [pc, #252]	; (8002240 <HAL_GPIO_Init+0x2c4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00d      	beq.n	8002164 <HAL_GPIO_Init+0x1e8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <HAL_GPIO_Init+0x2c8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d007      	beq.n	8002160 <HAL_GPIO_Init+0x1e4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3d      	ldr	r2, [pc, #244]	; (8002248 <HAL_GPIO_Init+0x2cc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_GPIO_Init+0x1e0>
 8002158:	2303      	movs	r3, #3
 800215a:	e006      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 800215c:	2304      	movs	r3, #4
 800215e:	e004      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002160:	2302      	movs	r3, #2
 8002162:	e002      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002168:	2300      	movs	r3, #0
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4093      	lsls	r3, r2
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800217a:	492f      	ldr	r1, [pc, #188]	; (8002238 <HAL_GPIO_Init+0x2bc>)
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_GPIO_Init+0x2d0>)
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	492c      	ldr	r1, [pc, #176]	; (800224c <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021a2:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4928      	ldr	r1, [pc, #160]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4922      	ldr	r1, [pc, #136]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	491e      	ldr	r1, [pc, #120]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4918      	ldr	r1, [pc, #96]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4914      	ldr	r1, [pc, #80]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d021      	beq.n	8002250 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_GPIO_Init+0x2d0>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	490e      	ldr	r1, [pc, #56]	; (800224c <HAL_GPIO_Init+0x2d0>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
 8002218:	e021      	b.n	800225e <HAL_GPIO_Init+0x2e2>
 800221a:	bf00      	nop
 800221c:	10320000 	.word	0x10320000
 8002220:	10310000 	.word	0x10310000
 8002224:	10220000 	.word	0x10220000
 8002228:	10210000 	.word	0x10210000
 800222c:	10120000 	.word	0x10120000
 8002230:	10110000 	.word	0x10110000
 8002234:	40021000 	.word	0x40021000
 8002238:	40010000 	.word	0x40010000
 800223c:	40010800 	.word	0x40010800
 8002240:	40010c00 	.word	0x40010c00
 8002244:	40011000 	.word	0x40011000
 8002248:	40011400 	.word	0x40011400
 800224c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_GPIO_Init+0x304>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	43db      	mvns	r3, r3
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <HAL_GPIO_Init+0x304>)
 800225a:	4013      	ands	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	3301      	adds	r3, #1
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	f47f ae8e 	bne.w	8001f90 <HAL_GPIO_Init+0x14>
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	372c      	adds	r7, #44	; 0x2c
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	40010400 	.word	0x40010400

08002284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
 8002290:	4613      	mov	r3, r2
 8002292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002294:	787b      	ldrb	r3, [r7, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022a0:	e003      	b.n	80022aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e12b      	b.n	800251e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fe7c 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	; 0x24
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002318:	f003 f95c 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 800231c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a81      	ldr	r2, [pc, #516]	; (8002528 <HAL_I2C_Init+0x274>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d807      	bhi.n	8002338 <HAL_I2C_Init+0x84>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a80      	ldr	r2, [pc, #512]	; (800252c <HAL_I2C_Init+0x278>)
 800232c:	4293      	cmp	r3, r2
 800232e:	bf94      	ite	ls
 8002330:	2301      	movls	r3, #1
 8002332:	2300      	movhi	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e006      	b.n	8002346 <HAL_I2C_Init+0x92>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a7d      	ldr	r2, [pc, #500]	; (8002530 <HAL_I2C_Init+0x27c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	bf94      	ite	ls
 8002340:	2301      	movls	r3, #1
 8002342:	2300      	movhi	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0e7      	b.n	800251e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4a78      	ldr	r2, [pc, #480]	; (8002534 <HAL_I2C_Init+0x280>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9b      	lsrs	r3, r3, #18
 8002358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a6a      	ldr	r2, [pc, #424]	; (8002528 <HAL_I2C_Init+0x274>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d802      	bhi.n	8002388 <HAL_I2C_Init+0xd4>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3301      	adds	r3, #1
 8002386:	e009      	b.n	800239c <HAL_I2C_Init+0xe8>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	4a69      	ldr	r2, [pc, #420]	; (8002538 <HAL_I2C_Init+0x284>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	3301      	adds	r3, #1
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	495c      	ldr	r1, [pc, #368]	; (8002528 <HAL_I2C_Init+0x274>)
 80023b8:	428b      	cmp	r3, r1
 80023ba:	d819      	bhi.n	80023f0 <HAL_I2C_Init+0x13c>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1e59      	subs	r1, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023d0:	400b      	ands	r3, r1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_I2C_Init+0x138>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e59      	subs	r1, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	e051      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 80023ec:	2304      	movs	r3, #4
 80023ee:	e04f      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d111      	bne.n	800241c <HAL_I2C_Init+0x168>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1e58      	subs	r0, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	440b      	add	r3, r1
 8002406:	fbb0 f3f3 	udiv	r3, r0, r3
 800240a:	3301      	adds	r3, #1
 800240c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e012      	b.n	8002442 <HAL_I2C_Init+0x18e>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	0099      	lsls	r1, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Init+0x196>
 8002446:	2301      	movs	r3, #1
 8002448:	e022      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10e      	bne.n	8002470 <HAL_I2C_Init+0x1bc>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e58      	subs	r0, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	440b      	add	r3, r1
 8002460:	fbb0 f3f3 	udiv	r3, r0, r3
 8002464:	3301      	adds	r3, #1
 8002466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246e:	e00f      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e58      	subs	r0, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	0099      	lsls	r1, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	6809      	ldr	r1, [r1, #0]
 8002494:	4313      	orrs	r3, r2
 8002496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6911      	ldr	r1, [r2, #16]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68d2      	ldr	r2, [r2, #12]
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	000186a0 	.word	0x000186a0
 800252c:	001e847f 	.word	0x001e847f
 8002530:	003d08ff 	.word	0x003d08ff
 8002534:	431bde83 	.word	0x431bde83
 8002538:	10624dd3 	.word	0x10624dd3

0800253c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4603      	mov	r3, r0
 800254c:	817b      	strh	r3, [r7, #10]
 800254e:	460b      	mov	r3, r1
 8002550:	813b      	strh	r3, [r7, #8]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002556:	f7ff fbf9 	bl	8001d4c <HAL_GetTick>
 800255a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b20      	cmp	r3, #32
 8002566:	f040 80d9 	bne.w	800271c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2319      	movs	r3, #25
 8002570:	2201      	movs	r2, #1
 8002572:	496d      	ldr	r1, [pc, #436]	; (8002728 <HAL_I2C_Mem_Write+0x1ec>)
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fccd 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002580:	2302      	movs	r3, #2
 8002582:	e0cc      	b.n	800271e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_I2C_Mem_Write+0x56>
 800258e:	2302      	movs	r3, #2
 8002590:	e0c5      	b.n	800271e <HAL_I2C_Mem_Write+0x1e2>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d007      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2221      	movs	r2, #33	; 0x21
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a3a      	ldr	r2, [r7, #32]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4a4d      	ldr	r2, [pc, #308]	; (800272c <HAL_I2C_Mem_Write+0x1f0>)
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025fa:	88f8      	ldrh	r0, [r7, #6]
 80025fc:	893a      	ldrh	r2, [r7, #8]
 80025fe:	8979      	ldrh	r1, [r7, #10]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4603      	mov	r3, r0
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fb04 	bl	8002c18 <I2C_RequestMemoryWrite>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d052      	beq.n	80026bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e081      	b.n	800271e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fd92 	bl	8003148 <I2C_WaitOnTXEFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	2b04      	cmp	r3, #4
 8002630:	d107      	bne.n	8002642 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06b      	b.n	800271e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d11b      	bne.n	80026bc <HAL_I2C_Mem_Write+0x180>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	d017      	beq.n	80026bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1aa      	bne.n	800261a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fd85 	bl	80031d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00d      	beq.n	80026f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d107      	bne.n	80026ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e016      	b.n	800271e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	e000      	b.n	800271e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
  }
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	00100002 	.word	0x00100002
 800272c:	ffff0000 	.word	0xffff0000

08002730 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	4603      	mov	r3, r0
 8002740:	817b      	strh	r3, [r7, #10]
 8002742:	460b      	mov	r3, r1
 8002744:	813b      	strh	r3, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800274e:	f7ff fafd 	bl	8001d4c <HAL_GetTick>
 8002752:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b20      	cmp	r3, #32
 800275e:	f040 8250 	bne.w	8002c02 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2319      	movs	r3, #25
 8002768:	2201      	movs	r2, #1
 800276a:	4982      	ldr	r1, [pc, #520]	; (8002974 <HAL_I2C_Mem_Read+0x244>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fbd1 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
 800277a:	e243      	b.n	8002c04 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_I2C_Mem_Read+0x5a>
 8002786:	2302      	movs	r3, #2
 8002788:	e23c      	b.n	8002c04 <HAL_I2C_Mem_Read+0x4d4>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d007      	beq.n	80027b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2222      	movs	r2, #34	; 0x22
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2240      	movs	r2, #64	; 0x40
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80027e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a62      	ldr	r2, [pc, #392]	; (8002978 <HAL_I2C_Mem_Read+0x248>)
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027f2:	88f8      	ldrh	r0, [r7, #6]
 80027f4:	893a      	ldrh	r2, [r7, #8]
 80027f6:	8979      	ldrh	r1, [r7, #10]
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	4603      	mov	r3, r0
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fa9e 	bl	8002d44 <I2C_RequestMemoryRead>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e1f8      	b.n	8002c04 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	d113      	bne.n	8002842 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e1cc      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002846:	2b01      	cmp	r3, #1
 8002848:	d11e      	bne.n	8002888 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800285a:	b672      	cpsid	i
}
 800285c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002884:	b662      	cpsie	i
}
 8002886:	e035      	b.n	80028f4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b02      	cmp	r3, #2
 800288e:	d11e      	bne.n	80028ce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028a0:	b672      	cpsid	i
}
 80028a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028ca:	b662      	cpsie	i
}
 80028cc:	e012      	b.n	80028f4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80028f4:	e172      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	f200 811f 	bhi.w	8002b3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	2b01      	cmp	r3, #1
 8002906:	d123      	bne.n	8002950 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fcab 	bl	8003268 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e173      	b.n	8002c04 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800294e:	e145      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	2b02      	cmp	r3, #2
 8002956:	d152      	bne.n	80029fe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	2200      	movs	r2, #0
 8002960:	4906      	ldr	r1, [pc, #24]	; (800297c <HAL_I2C_Mem_Read+0x24c>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fad6 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e148      	b.n	8002c04 <HAL_I2C_Mem_Read+0x4d4>
 8002972:	bf00      	nop
 8002974:	00100002 	.word	0x00100002
 8002978:	ffff0000 	.word	0xffff0000
 800297c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029c6:	b662      	cpsie	i
}
 80029c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029fc:	e0ee      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	2200      	movs	r2, #0
 8002a06:	4981      	ldr	r1, [pc, #516]	; (8002c0c <HAL_I2C_Mem_Read+0x4dc>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fa83 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0f5      	b.n	8002c04 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a28:	b672      	cpsid	i
}
 8002a2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <HAL_I2C_Mem_Read+0x4e0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	4a6b      	ldr	r2, [pc, #428]	; (8002c14 <HAL_I2C_Mem_Read+0x4e4>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a1a      	lsrs	r2, r3, #8
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00da      	lsls	r2, r3, #3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d118      	bne.n	8002ab6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa6:	b662      	cpsie	i
}
 8002aa8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0a6      	b.n	8002c04 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d1d9      	bne.n	8002a78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b06:	b662      	cpsie	i
}
 8002b08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b3c:	e04e      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fb90 	bl	8003268 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e058      	b.n	8002c04 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d124      	bne.n	8002bdc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f ae88 	bne.w	80028f6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	00010004 	.word	0x00010004
 8002c10:	20000090 	.word	0x20000090
 8002c14:	14f8b589 	.word	0x14f8b589

08002c18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	813b      	strh	r3, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f960 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c68:	d103      	bne.n	8002c72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e05f      	b.n	8002d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	492d      	ldr	r1, [pc, #180]	; (8002d40 <I2C_RequestMemoryWrite+0x128>)
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f9bb 	bl	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e04c      	b.n	8002d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	6a39      	ldr	r1, [r7, #32]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fa46 	bl	8003148 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d107      	bne.n	8002cda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e02b      	b.n	8002d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce4:	893b      	ldrh	r3, [r7, #8]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	611a      	str	r2, [r3, #16]
 8002cee:	e021      	b.n	8002d34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf0:	893b      	ldrh	r3, [r7, #8]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fa20 	bl	8003148 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00d      	beq.n	8002d2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d107      	bne.n	8002d26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e005      	b.n	8002d36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2a:	893b      	ldrh	r3, [r7, #8]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	00010002 	.word	0x00010002

08002d44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	460b      	mov	r3, r1
 8002d58:	813b      	strh	r3, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f8c2 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da4:	d103      	bne.n	8002dae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0aa      	b.n	8002f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002db2:	897b      	ldrh	r3, [r7, #10]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	6a3a      	ldr	r2, [r7, #32]
 8002dc6:	4952      	ldr	r1, [pc, #328]	; (8002f10 <I2C_RequestMemoryRead+0x1cc>)
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f91d 	bl	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e097      	b.n	8002f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	6a39      	ldr	r1, [r7, #32]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f9a8 	bl	8003148 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00d      	beq.n	8002e1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d107      	bne.n	8002e16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e076      	b.n	8002f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d105      	bne.n	8002e2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e20:	893b      	ldrh	r3, [r7, #8]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	611a      	str	r2, [r3, #16]
 8002e2a:	e021      	b.n	8002e70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e2c:	893b      	ldrh	r3, [r7, #8]
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	6a39      	ldr	r1, [r7, #32]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f982 	bl	8003148 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d107      	bne.n	8002e62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e050      	b.n	8002f08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e66:	893b      	ldrh	r3, [r7, #8]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e72:	6a39      	ldr	r1, [r7, #32]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f967 	bl	8003148 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d107      	bne.n	8002e98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e035      	b.n	8002f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f82b 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed2:	d103      	bne.n	8002edc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e013      	b.n	8002f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ee0:	897b      	ldrh	r3, [r7, #10]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	6a3a      	ldr	r2, [r7, #32]
 8002ef4:	4906      	ldr	r1, [pc, #24]	; (8002f10 <I2C_RequestMemoryRead+0x1cc>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f886 	bl	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	00010002 	.word	0x00010002

08002f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f24:	e048      	b.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d044      	beq.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe ff0d 	bl	8001d4c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d139      	bne.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10d      	bne.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	43da      	mvns	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	e00c      	b.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d116      	bne.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e023      	b.n	8003000 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d10d      	bne.n	8002fde <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	e00c      	b.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d093      	beq.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003016:	e071      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d123      	bne.n	8003070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003040:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f043 0204 	orr.w	r2, r3, #4
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e067      	b.n	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d041      	beq.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7fe fe68 	bl	8001d4c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d302      	bcc.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d136      	bne.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10c      	bne.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e00b      	b.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	43da      	mvns	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d016      	beq.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e021      	b.n	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	0c1b      	lsrs	r3, r3, #16
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d10c      	bne.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	43da      	mvns	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf14      	ite	ne
 8003118:	2301      	movne	r3, #1
 800311a:	2300      	moveq	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e00b      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4013      	ands	r3, r2
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf14      	ite	ne
 8003132:	2301      	movne	r3, #1
 8003134:	2300      	moveq	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f47f af6d 	bne.w	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003154:	e034      	b.n	80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f8e3 	bl	8003322 <I2C_IsAcknowledgeFailed>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e034      	b.n	80031d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d028      	beq.n	80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316e:	f7fe fded 	bl	8001d4c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	d302      	bcc.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d11d      	bne.n	80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318e:	2b80      	cmp	r3, #128	; 0x80
 8003190:	d016      	beq.n	80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e007      	b.n	80031d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d1c3      	bne.n	8003156 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e4:	e034      	b.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f89b 	bl	8003322 <I2C_IsAcknowledgeFailed>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e034      	b.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d028      	beq.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fe:	f7fe fda5 	bl	8001d4c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d302      	bcc.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11d      	bne.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d016      	beq.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e007      	b.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d1c3      	bne.n	80031e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003274:	e049      	b.n	800330a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b10      	cmp	r3, #16
 8003282:	d119      	bne.n	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0210 	mvn.w	r2, #16
 800328c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e030      	b.n	800331a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b8:	f7fe fd48 	bl	8001d4c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d302      	bcc.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11d      	bne.n	800330a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d016      	beq.n	800330a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e007      	b.n	800331a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d1ae      	bne.n	8003276 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	d11b      	bne.n	8003372 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003342:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0204 	orr.w	r2, r3, #4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0e8      	b.n	8003562 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d106      	bne.n	80033aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f006 ff6d 	bl	800a284 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2203      	movs	r2, #3
 80033ae:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f002 fee2 	bl	8006186 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033cc:	f002 feb8 	bl	8006140 <USB_CoreInit>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0bf      	b.n	8003562 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f002 fee6 	bl	80061ba <USB_SetCurrentMode>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0b0      	b.n	8003562 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	e03e      	b.n	8003484 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003406:	7bfa      	ldrb	r2, [r7, #15]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	3311      	adds	r3, #17
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	3310      	adds	r3, #16
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	3313      	adds	r3, #19
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	3320      	adds	r3, #32
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	440b      	add	r3, r1
 8003464:	3324      	adds	r3, #36	; 0x24
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	3301      	adds	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	791b      	ldrb	r3, [r3, #4]
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	429a      	cmp	r2, r3
 800348c:	d3bb      	bcc.n	8003406 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	e044      	b.n	800351e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	f203 1351 	addw	r3, r3, #337	; 0x151
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	440b      	add	r3, r1
 80034b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	f203 1353 	addw	r3, r3, #339	; 0x153
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	440b      	add	r3, r1
 80034e4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	440b      	add	r3, r1
 80034fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	440b      	add	r3, r1
 8003510:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	3301      	adds	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	791b      	ldrb	r3, [r3, #4]
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	429a      	cmp	r2, r3
 8003526:	d3b5      	bcc.n	8003494 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003532:	f002 fe4e 	bl	80061d2 <USB_DevInit>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e00c      	b.n	8003562 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f005 f8cd 	bl	80086fa <USB_DevDisconnect>

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_PCD_Start+0x16>
 800357c:	2302      	movs	r3, #2
 800357e:	e016      	b.n	80035ae <HAL_PCD_Start+0x44>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f002 fde4 	bl	800615a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003592:	2101      	movs	r1, #1
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f007 f8e8 	bl	800a76a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f005 f8a1 	bl	80086e6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b088      	sub	sp, #32
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f005 f8a3 	bl	800870e <USB_ReadInterrupts>
 80035c8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fb1a 	bl	8003c0e <PCD_EP_ISR_Handler>

    return;
 80035da:	e119      	b.n	8003810 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d013      	beq.n	800360e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f8:	b292      	uxth	r2, r2
 80035fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f006 febb 	bl	800a37a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003604:	2100      	movs	r1, #0
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f905 	bl	8003816 <HAL_PCD_SetAddress>

    return;
 800360c:	e100      	b.n	8003810 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00c      	beq.n	8003632 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003620:	b29a      	uxth	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800362a:	b292      	uxth	r2, r2
 800362c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003630:	e0ee      	b.n	8003810 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00c      	beq.n	8003656 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364e:	b292      	uxth	r2, r2
 8003650:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003654:	e0dc      	b.n	8003810 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d027      	beq.n	80036b0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003668:	b29a      	uxth	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0204 	bic.w	r2, r2, #4
 8003672:	b292      	uxth	r2, r2
 8003674:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003680:	b29a      	uxth	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0208 	bic.w	r2, r2, #8
 800368a:	b292      	uxth	r2, r2
 800368c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f006 feab 	bl	800a3ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036a8:	b292      	uxth	r2, r2
 80036aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80036ae:	e0af      	b.n	8003810 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8083 	beq.w	80037c2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80036bc:	2300      	movs	r3, #0
 80036be:	77fb      	strb	r3, [r7, #31]
 80036c0:	e010      	b.n	80036e4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	7ffb      	ldrb	r3, [r7, #31]
 80036d0:	8812      	ldrh	r2, [r2, #0]
 80036d2:	b292      	uxth	r2, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	3320      	adds	r3, #32
 80036d8:	443b      	add	r3, r7
 80036da:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	3301      	adds	r3, #1
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
 80036e6:	2b07      	cmp	r3, #7
 80036e8:	d9eb      	bls.n	80036c2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	b292      	uxth	r2, r2
 80036fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	b292      	uxth	r2, r2
 8003716:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800371a:	bf00      	nop
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003724:	b29b      	uxth	r3, r3
 8003726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f6      	beq.n	800371c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003736:	b29a      	uxth	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003740:	b292      	uxth	r2, r2
 8003742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e00f      	b.n	800376c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800374c:	7ffb      	ldrb	r3, [r7, #31]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	4611      	mov	r1, r2
 8003754:	7ffa      	ldrb	r2, [r7, #31]
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	440a      	add	r2, r1
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	3320      	adds	r3, #32
 800375e:	443b      	add	r3, r7
 8003760:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003764:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003766:	7ffb      	ldrb	r3, [r7, #31]
 8003768:	3301      	adds	r3, #1
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	7ffb      	ldrb	r3, [r7, #31]
 800376e:	2b07      	cmp	r3, #7
 8003770:	d9ec      	bls.n	800374c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0208 	orr.w	r2, r2, #8
 8003784:	b292      	uxth	r2, r2
 8003786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379c:	b292      	uxth	r2, r2
 800379e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0204 	orr.w	r2, r2, #4
 80037b4:	b292      	uxth	r2, r2
 80037b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f006 fdfc 	bl	800a3b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80037c0:	e026      	b.n	8003810 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00f      	beq.n	80037ec <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037de:	b292      	uxth	r2, r2
 80037e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f006 fdba 	bl	800a35e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80037ea:	e011      	b.n	8003810 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003808:	b292      	uxth	r2, r2
 800380a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800380e:	bf00      	nop
  }
}
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_PCD_SetAddress+0x1a>
 800382c:	2302      	movs	r3, #2
 800382e:	e012      	b.n	8003856 <HAL_PCD_SetAddress+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f004 ff3a 	bl	80086c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	4608      	mov	r0, r1
 8003868:	4611      	mov	r1, r2
 800386a:	461a      	mov	r2, r3
 800386c:	4603      	mov	r3, r0
 800386e:	70fb      	strb	r3, [r7, #3]
 8003870:	460b      	mov	r3, r1
 8003872:	803b      	strh	r3, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800387c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003880:	2b00      	cmp	r3, #0
 8003882:	da0e      	bge.n	80038a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	f003 0207 	and.w	r2, r3, #7
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	3310      	adds	r3, #16
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	705a      	strb	r2, [r3, #1]
 80038a0:	e00e      	b.n	80038c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	f003 0207 	and.w	r2, r3, #7
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038cc:	883a      	ldrh	r2, [r7, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	78ba      	ldrb	r2, [r7, #2]
 80038d6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038d8:	78bb      	ldrb	r3, [r7, #2]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d102      	bne.n	80038e4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_PCD_EP_Open+0x94>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e00e      	b.n	8003910 <HAL_PCD_EP_Open+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	4618      	mov	r0, r3
 8003902:	f002 fc83 	bl	800620c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800390e:	7afb      	ldrb	r3, [r7, #11]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003928:	2b00      	cmp	r3, #0
 800392a:	da0e      	bge.n	800394a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 0207 	and.w	r2, r3, #7
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	3310      	adds	r3, #16
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	705a      	strb	r2, [r3, #1]
 8003948:	e00e      	b.n	8003968 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 0207 	and.w	r2, r3, #7
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_PCD_EP_Close+0x6a>
 800397e:	2302      	movs	r3, #2
 8003980:	e00e      	b.n	80039a0 <HAL_PCD_EP_Close+0x88>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	4618      	mov	r0, r3
 8003992:	f002 fffb 	bl	800698c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	460b      	mov	r3, r1
 80039b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b8:	7afb      	ldrb	r3, [r7, #11]
 80039ba:	f003 0207 	and.w	r2, r3, #7
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039e8:	7afb      	ldrb	r3, [r7, #11]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6979      	ldr	r1, [r7, #20]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f003 f9b2 	bl	8006d64 <USB_EPStartXfer>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 0207 	and.w	r2, r3, #7
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003a2c:	681b      	ldr	r3, [r3, #0]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	460b      	mov	r3, r1
 8003a46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a48:	7afb      	ldrb	r3, [r7, #11]
 8003a4a:	f003 0207 	and.w	r2, r3, #7
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	3310      	adds	r3, #16
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2201      	movs	r2, #1
 8003a82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a84:	7afb      	ldrb	r3, [r7, #11]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6979      	ldr	r1, [r7, #20]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 f964 	bl	8006d64 <USB_EPStartXfer>

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	7912      	ldrb	r2, [r2, #4]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e04c      	b.n	8003b5e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	da0e      	bge.n	8003aea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	f003 0207 	and.w	r2, r3, #7
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	3310      	adds	r3, #16
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	705a      	strb	r2, [r3, #1]
 8003ae8:	e00c      	b.n	8003b04 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_PCD_EP_SetStall+0x7e>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e01c      	b.n	8003b5e <HAL_PCD_EP_SetStall+0xb8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68f9      	ldr	r1, [r7, #12]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 fcc7 	bl	80084c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d108      	bne.n	8003b54 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f004 fdec 	bl	800872c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	7912      	ldrb	r2, [r2, #4]
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e040      	b.n	8003c06 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da0e      	bge.n	8003baa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	3310      	adds	r3, #16
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	705a      	strb	r2, [r3, #1]
 8003ba8:	e00e      	b.n	8003bc8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	f003 0207 	and.w	r2, r3, #7
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_PCD_EP_ClrStall+0x82>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e00e      	b.n	8003c06 <HAL_PCD_EP_ClrStall+0xa0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68f9      	ldr	r1, [r7, #12]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f004 fcb5 	bl	8008566 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b096      	sub	sp, #88	; 0x58
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c16:	e3bc      	b.n	8004392 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003c32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 8176 	bne.w	8003f28 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d14f      	bne.n	8003ce8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c58:	81fb      	strh	r3, [r7, #14]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	89fb      	ldrh	r3, [r7, #14]
 8003c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3310      	adds	r3, #16
 8003c70:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	3302      	adds	r3, #2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	441a      	add	r2, r3
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003caa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003cac:	2100      	movs	r1, #0
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f006 fb3b 	bl	800a32a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7b5b      	ldrb	r3, [r3, #13]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8369 	beq.w	8004392 <PCD_EP_ISR_Handler+0x784>
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 8364 	bne.w	8004392 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7b5b      	ldrb	r3, [r3, #13]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	b292      	uxth	r2, r2
 8003cdc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	735a      	strb	r2, [r3, #13]
 8003ce6:	e354      	b.n	8004392 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003cee:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003cfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d034      	beq.n	8003d70 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	3306      	adds	r3, #6
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d30:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d42:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f004 fd41 	bl	80087cc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d56:	4013      	ands	r3, r2
 8003d58:	823b      	strh	r3, [r7, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	8a3a      	ldrh	r2, [r7, #16]
 8003d60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d64:	b292      	uxth	r2, r2
 8003d66:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f006 fab1 	bl	800a2d0 <HAL_PCD_SetupStageCallback>
 8003d6e:	e310      	b.n	8004392 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d70:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f280 830c 	bge.w	8004392 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d86:	4013      	ands	r3, r2
 8003d88:	83fb      	strh	r3, [r7, #30]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	8bfa      	ldrh	r2, [r7, #30]
 8003d90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d94:	b292      	uxth	r2, r2
 8003d96:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	3306      	adds	r3, #6
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d019      	beq.n	8003e00 <PCD_EP_ISR_Handler+0x1f2>
 8003dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dda:	6959      	ldr	r1, [r3, #20]
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dde:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f004 fcf1 	bl	80087cc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	441a      	add	r2, r3
 8003df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003df8:	2100      	movs	r1, #0
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f006 fa7a 	bl	800a2f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 82bd 	bne.w	8004392 <PCD_EP_ISR_Handler+0x784>
 8003e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e24:	f000 82b5 	beq.w	8004392 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b3e      	cmp	r3, #62	; 0x3e
 8003e5e:	d91d      	bls.n	8003e9c <PCD_EP_ISR_Handler+0x28e>
 8003e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	647b      	str	r3, [r7, #68]	; 0x44
 8003e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <PCD_EP_ISR_Handler+0x26c>
 8003e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e76:	3b01      	subs	r3, #1
 8003e78:	647b      	str	r3, [r7, #68]	; 0x44
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	801a      	strh	r2, [r3, #0]
 8003e9a:	e026      	b.n	8003eea <PCD_EP_ISR_Handler+0x2dc>
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <PCD_EP_ISR_Handler+0x2ac>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e017      	b.n	8003eea <PCD_EP_ISR_Handler+0x2dc>
 8003eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <PCD_EP_ISR_Handler+0x2c6>
 8003ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	029b      	lsls	r3, r3, #10
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	827b      	strh	r3, [r7, #18]
 8003efc:	8a7b      	ldrh	r3, [r7, #18]
 8003efe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f02:	827b      	strh	r3, [r7, #18]
 8003f04:	8a7b      	ldrh	r3, [r7, #18]
 8003f06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f0a:	827b      	strh	r3, [r7, #18]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	8a7b      	ldrh	r3, [r7, #18]
 8003f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	8013      	strh	r3, [r2, #0]
 8003f26:	e234      	b.n	8004392 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f3c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f280 80fc 	bge.w	800413e <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003f74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f7c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f94:	7b1b      	ldrb	r3, [r3, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d125      	bne.n	8003fe6 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	3306      	adds	r3, #6
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003fc6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8092 	beq.w	80040f4 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd6:	6959      	ldr	r1, [r3, #20]
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fda:	88da      	ldrh	r2, [r3, #6]
 8003fdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fe0:	f004 fbf4 	bl	80087cc <USB_ReadPMA>
 8003fe4:	e086      	b.n	80040f4 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe8:	78db      	ldrb	r3, [r3, #3]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d10a      	bne.n	8004004 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003fee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9d9 	bl	80043ae <HAL_PCD_EP_DB_Receive>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004002:	e077      	b.n	80040f4 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004040:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004044:	b29b      	uxth	r3, r3
 8004046:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d024      	beq.n	80040ac <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406a:	b29b      	uxth	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	3302      	adds	r3, #2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800408a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800408e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004092:	2b00      	cmp	r3, #0
 8004094:	d02e      	beq.n	80040f4 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409c:	6959      	ldr	r1, [r3, #20]
 800409e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a0:	891a      	ldrh	r2, [r3, #8]
 80040a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80040a6:	f004 fb91 	bl	80087cc <USB_ReadPMA>
 80040aa:	e023      	b.n	80040f4 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	3306      	adds	r3, #6
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040d4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80040d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e6:	6959      	ldr	r1, [r3, #20]
 80040e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ea:	895a      	ldrh	r2, [r3, #10]
 80040ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80040f0:	f004 fb6c 	bl	80087cc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80040f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80040fc:	441a      	add	r2, r3
 80040fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004100:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800410a:	441a      	add	r2, r3
 800410c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <PCD_EP_ISR_Handler+0x516>
 8004118:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800411c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	429a      	cmp	r2, r3
 8004122:	d206      	bcs.n	8004132 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f006 f8e2 	bl	800a2f4 <HAL_PCD_DataOutStageCallback>
 8004130:	e005      	b.n	800413e <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004138:	4618      	mov	r0, r3
 800413a:	f002 fe13 	bl	8006d64 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800413e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8123 	beq.w	8004392 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 800414c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	3310      	adds	r3, #16
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004198:	b29b      	uxth	r3, r3
 800419a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	78db      	ldrb	r3, [r3, #3]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	f040 80a2 	bne.w	80042ea <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 80041a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a8:	2200      	movs	r2, #0
 80041aa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	7b1b      	ldrb	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8093 	beq.w	80042dc <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d046      	beq.n	8004250 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c4:	785b      	ldrb	r3, [r3, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d126      	bne.n	8004218 <PCD_EP_ISR_Handler+0x60a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d8:	b29b      	uxth	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	4413      	add	r3, r2
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
 80041e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	011a      	lsls	r2, r3, #4
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	4413      	add	r3, r2
 80041ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041f0:	623b      	str	r3, [r7, #32]
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	801a      	strh	r2, [r3, #0]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800420c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004210:	b29a      	uxth	r2, r3
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	801a      	strh	r2, [r3, #0]
 8004216:	e061      	b.n	80042dc <PCD_EP_ISR_Handler+0x6ce>
 8004218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d15d      	bne.n	80042dc <PCD_EP_ISR_Handler+0x6ce>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	4413      	add	r3, r2
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	011a      	lsls	r2, r3, #4
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	4413      	add	r3, r2
 8004242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	2200      	movs	r2, #0
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	e045      	b.n	80042dc <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004258:	785b      	ldrb	r3, [r3, #1]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d126      	bne.n	80042ac <PCD_EP_ISR_Handler+0x69e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426c:	b29b      	uxth	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004272:	4413      	add	r3, r2
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
 8004276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	011a      	lsls	r2, r3, #4
 800427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427e:	4413      	add	r3, r2
 8004280:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004284:	633b      	str	r3, [r7, #48]	; 0x30
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004290:	b29a      	uxth	r2, r3
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	e017      	b.n	80042dc <PCD_EP_ISR_Handler+0x6ce>
 80042ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ae:	785b      	ldrb	r3, [r3, #1]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d113      	bne.n	80042dc <PCD_EP_ISR_Handler+0x6ce>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042bc:	b29b      	uxth	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c2:	4413      	add	r3, r2
 80042c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	011a      	lsls	r2, r3, #4
 80042cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ce:	4413      	add	r3, r2
 80042d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2200      	movs	r2, #0
 80042da:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f006 f821 	bl	800a32a <HAL_PCD_DataInStageCallback>
 80042e8:	e053      	b.n	8004392 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80042ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d146      	bne.n	8004384 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fe:	b29b      	uxth	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	3302      	adds	r3, #2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800431e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800432a:	429a      	cmp	r2, r3
 800432c:	d907      	bls.n	800433e <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 800432e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433a:	619a      	str	r2, [r3, #24]
 800433c:	e002      	b.n	8004344 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 800433e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004340:	2200      	movs	r2, #0
 8004342:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800434c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f005 ffe9 	bl	800a32a <HAL_PCD_DataInStageCallback>
 8004358:	e01b      	b.n	8004392 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800435a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004362:	441a      	add	r2, r3
 8004364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004366:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004370:	441a      	add	r2, r3
 8004372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004374:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800437c:	4618      	mov	r0, r3
 800437e:	f002 fcf1 	bl	8006d64 <USB_EPStartXfer>
 8004382:	e006      	b.n	8004392 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004384:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004388:	461a      	mov	r2, r3
 800438a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f91b 	bl	80045c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800439a:	b29b      	uxth	r3, r3
 800439c:	b21b      	sxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f6ff ac3a 	blt.w	8003c18 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3758      	adds	r7, #88	; 0x58
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b088      	sub	sp, #32
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d07e      	beq.n	80044c4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4413      	add	r3, r2
 80043da:	3302      	adds	r3, #2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	8b7b      	ldrh	r3, [r7, #26]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d306      	bcc.n	8004408 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	8b7b      	ldrh	r3, [r7, #26]
 8004400:	1ad2      	subs	r2, r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	619a      	str	r2, [r3, #24]
 8004406:	e002      	b.n	800440e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d123      	bne.n	800445e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	833b      	strh	r3, [r7, #24]
 8004432:	8b3b      	ldrh	r3, [r7, #24]
 8004434:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004438:	833b      	strh	r3, [r7, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	441a      	add	r2, r3
 8004448:	8b3b      	ldrh	r3, [r7, #24]
 800444a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800444e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445a:	b29b      	uxth	r3, r3
 800445c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01f      	beq.n	80044a8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	82fb      	strh	r3, [r7, #22]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	8afb      	ldrh	r3, [r7, #22]
 8004494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044a8:	8b7b      	ldrh	r3, [r7, #26]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8087 	beq.w	80045be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6959      	ldr	r1, [r3, #20]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	891a      	ldrh	r2, [r3, #8]
 80044bc:	8b7b      	ldrh	r3, [r7, #26]
 80044be:	f004 f985 	bl	80087cc <USB_ReadPMA>
 80044c2:	e07c      	b.n	80045be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	3306      	adds	r3, #6
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	8b7b      	ldrh	r3, [r7, #26]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d306      	bcc.n	8004506 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	8b7b      	ldrh	r3, [r7, #26]
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	619a      	str	r2, [r3, #24]
 8004504:	e002      	b.n	800450c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2200      	movs	r2, #0
 800450a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d123      	bne.n	800455c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	83fb      	strh	r3, [r7, #30]
 8004530:	8bfb      	ldrh	r3, [r7, #30]
 8004532:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004536:	83fb      	strh	r3, [r7, #30]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	8bfb      	ldrh	r3, [r7, #30]
 8004548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004558:	b29b      	uxth	r3, r3
 800455a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11f      	bne.n	80045a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004580:	83bb      	strh	r3, [r7, #28]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	8bbb      	ldrh	r3, [r7, #28]
 8004592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80045a6:	8b7b      	ldrh	r3, [r7, #26]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6959      	ldr	r1, [r3, #20]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	895a      	ldrh	r2, [r3, #10]
 80045b8:	8b7b      	ldrh	r3, [r7, #26]
 80045ba:	f004 f907 	bl	80087cc <USB_ReadPMA>
    }
  }

  return count;
 80045be:	8b7b      	ldrh	r3, [r7, #26]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b0a4      	sub	sp, #144	; 0x90
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 81dd 	beq.w	800499c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	3302      	adds	r3, #2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800460a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004616:	429a      	cmp	r2, r3
 8004618:	d907      	bls.n	800462a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	619a      	str	r2, [r3, #24]
 8004628:	e002      	b.n	8004630 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2200      	movs	r2, #0
 800462e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f040 80b9 	bne.w	80047ac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	785b      	ldrb	r3, [r3, #1]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d126      	bne.n	8004690 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004650:	b29b      	uxth	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	4413      	add	r3, r2
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	011a      	lsls	r2, r3, #4
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	4413      	add	r3, r2
 8004664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004674:	b29a      	uxth	r2, r3
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004688:	b29a      	uxth	r2, r3
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	801a      	strh	r2, [r3, #0]
 800468e:	e01a      	b.n	80046c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d116      	bne.n	80046c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ac:	4413      	add	r3, r2
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	011a      	lsls	r2, r3, #4
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	4413      	add	r3, r2
 80046ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046be:	633b      	str	r3, [r7, #48]	; 0x30
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2200      	movs	r2, #0
 80046c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d126      	bne.n	8004722 <HAL_PCD_EP_DB_Transmit+0x15a>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	011a      	lsls	r2, r3, #4
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	4413      	add	r3, r2
 80046f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004706:	b29a      	uxth	r2, r3
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471a:	b29a      	uxth	r2, r3
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	e017      	b.n	8004752 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d113      	bne.n	8004752 <HAL_PCD_EP_DB_Transmit+0x18a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004732:	b29b      	uxth	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	4413      	add	r3, r2
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	011a      	lsls	r2, r3, #4
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	4413      	add	r3, r2
 8004746:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800474a:	623b      	str	r3, [r7, #32]
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	2200      	movs	r2, #0
 8004750:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f005 fde6 	bl	800a32a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 82fc 	beq.w	8004d62 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004784:	82fb      	strh	r3, [r7, #22]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	8afb      	ldrh	r3, [r7, #22]
 8004796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800479e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	8013      	strh	r3, [r2, #0]
 80047aa:	e2da      	b.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d021      	beq.n	80047fa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80047e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004800:	2b01      	cmp	r3, #1
 8004802:	f040 82ae 	bne.w	8004d62 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800480e:	441a      	add	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800481c:	441a      	add	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	d30b      	bcc.n	8004846 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6a1a      	ldr	r2, [r3, #32]
 800483a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	621a      	str	r2, [r3, #32]
 8004844:	e017      	b.n	8004876 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d108      	bne.n	8004860 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800484e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800485e:	e00a      	b.n	8004876 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	785b      	ldrb	r3, [r3, #1]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d165      	bne.n	800494a <HAL_PCD_EP_DB_Transmit+0x382>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800488c:	b29b      	uxth	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004892:	4413      	add	r3, r2
 8004894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	011a      	lsls	r2, r3, #4
 800489c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489e:	4413      	add	r3, r2
 80048a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ba:	2b3e      	cmp	r3, #62	; 0x3e
 80048bc:	d91d      	bls.n	80048fa <HAL_PCD_EP_DB_Transmit+0x332>
 80048be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x310>
 80048d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d4:	3b01      	subs	r3, #1
 80048d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	029b      	lsls	r3, r3, #10
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4313      	orrs	r3, r2
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	801a      	strh	r2, [r3, #0]
 80048f8:	e044      	b.n	8004984 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <HAL_PCD_EP_DB_Transmit+0x350>
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004910:	b29a      	uxth	r2, r3
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	801a      	strh	r2, [r3, #0]
 8004916:	e035      	b.n	8004984 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_PCD_EP_DB_Transmit+0x36a>
 800492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492e:	3301      	adds	r3, #1
 8004930:	64bb      	str	r3, [r7, #72]	; 0x48
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29a      	uxth	r2, r3
 8004938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493a:	b29b      	uxth	r3, r3
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	b29b      	uxth	r3, r3
 8004940:	4313      	orrs	r3, r2
 8004942:	b29a      	uxth	r2, r3
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e01c      	b.n	8004984 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d118      	bne.n	8004984 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	647b      	str	r3, [r7, #68]	; 0x44
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004960:	b29b      	uxth	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004966:	4413      	add	r3, r2
 8004968:	647b      	str	r3, [r7, #68]	; 0x44
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	011a      	lsls	r2, r3, #4
 8004970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004972:	4413      	add	r3, r2
 8004974:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004978:	643b      	str	r3, [r7, #64]	; 0x40
 800497a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800497e:	b29a      	uxth	r2, r3
 8004980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004982:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6959      	ldr	r1, [r3, #20]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	891a      	ldrh	r2, [r3, #8]
 8004990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004994:	b29b      	uxth	r3, r3
 8004996:	f003 fed4 	bl	8008742 <USB_WritePMA>
 800499a:	e1e2      	b.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4413      	add	r3, r2
 80049b0:	3306      	adds	r3, #6
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	6812      	ldr	r2, [r2, #0]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d307      	bcc.n	80049e4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049dc:	1ad2      	subs	r2, r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	619a      	str	r2, [r3, #24]
 80049e2:	e002      	b.n	80049ea <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2200      	movs	r2, #0
 80049e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 80c0 	bne.w	8004b74 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d126      	bne.n	8004a4a <HAL_PCD_EP_DB_Transmit+0x482>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a10:	4413      	add	r3, r2
 8004a12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	011a      	lsls	r2, r3, #4
 8004a1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a22:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a32:	801a      	strh	r2, [r3, #0]
 8004a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	e01a      	b.n	8004a80 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d116      	bne.n	8004a80 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	667b      	str	r3, [r7, #100]	; 0x64
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a66:	4413      	add	r3, r2
 8004a68:	667b      	str	r3, [r7, #100]	; 0x64
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	011a      	lsls	r2, r3, #4
 8004a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a72:	4413      	add	r3, r2
 8004a74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a78:	663b      	str	r3, [r7, #96]	; 0x60
 8004a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	677b      	str	r3, [r7, #116]	; 0x74
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	785b      	ldrb	r3, [r3, #1]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d12b      	bne.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa2:	4413      	add	r3, r2
 8004aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	011a      	lsls	r2, r3, #4
 8004aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aae:	4413      	add	r3, r2
 8004ab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004aca:	801a      	strh	r2, [r3, #0]
 8004acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	e017      	b.n	8004b16 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d113      	bne.n	8004b16 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004afc:	4413      	add	r3, r2
 8004afe:	677b      	str	r3, [r7, #116]	; 0x74
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	011a      	lsls	r2, r3, #4
 8004b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b08:	4413      	add	r3, r2
 8004b0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b12:	2200      	movs	r2, #0
 8004b14:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f005 fc04 	bl	800a32a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f040 811a 	bne.w	8004d62 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8013      	strh	r3, [r2, #0]
 8004b72:	e0f6      	b.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d121      	bne.n	8004bc2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	f040 80ca 	bne.w	8004d62 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004bd6:	441a      	add	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004be4:	441a      	add	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	6a1a      	ldr	r2, [r3, #32]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d30b      	bcc.n	8004c0e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	6a1a      	ldr	r2, [r3, #32]
 8004c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c06:	1ad2      	subs	r2, r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	621a      	str	r2, [r3, #32]
 8004c0c:	e017      	b.n	8004c3e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d108      	bne.n	8004c28 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004c16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004c26:	e00a      	b.n	8004c3e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2200      	movs	r2, #0
 8004c34:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	657b      	str	r3, [r7, #84]	; 0x54
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d165      	bne.n	8004d18 <HAL_PCD_EP_DB_Transmit+0x750>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c60:	4413      	add	r3, r2
 8004c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	011a      	lsls	r2, r3, #4
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c82:	801a      	strh	r2, [r3, #0]
 8004c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c88:	2b3e      	cmp	r3, #62	; 0x3e
 8004c8a:	d91d      	bls.n	8004cc8 <HAL_PCD_EP_DB_Transmit+0x700>
 8004c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	029b      	lsls	r3, r3, #10
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	e041      	b.n	8004d4c <HAL_PCD_EP_DB_Transmit+0x784>
 8004cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	e032      	b.n	8004d4c <HAL_PCD_EP_DB_Transmit+0x784>
 8004ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_PCD_EP_DB_Transmit+0x738>
 8004cfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	029b      	lsls	r3, r3, #10
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	e019      	b.n	8004d4c <HAL_PCD_EP_DB_Transmit+0x784>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d115      	bne.n	8004d4c <HAL_PCD_EP_DB_Transmit+0x784>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d2e:	4413      	add	r3, r2
 8004d30:	657b      	str	r3, [r7, #84]	; 0x54
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	011a      	lsls	r2, r3, #4
 8004d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d40:	653b      	str	r3, [r7, #80]	; 0x50
 8004d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d4a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6959      	ldr	r1, [r3, #20]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	895a      	ldrh	r2, [r3, #10]
 8004d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f003 fcf0 	bl	8008742 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7c:	82bb      	strh	r3, [r7, #20]
 8004d7e:	8abb      	ldrh	r3, [r7, #20]
 8004d80:	f083 0310 	eor.w	r3, r3, #16
 8004d84:	82bb      	strh	r3, [r7, #20]
 8004d86:	8abb      	ldrh	r3, [r7, #20]
 8004d88:	f083 0320 	eor.w	r3, r3, #32
 8004d8c:	82bb      	strh	r3, [r7, #20]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	8abb      	ldrh	r3, [r7, #20]
 8004d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3790      	adds	r7, #144	; 0x90
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	817b      	strh	r3, [r7, #10]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dda:	897b      	ldrh	r3, [r7, #10]
 8004ddc:	f003 0207 	and.w	r2, r3, #7
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	3310      	adds	r3, #16
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e009      	b.n	8004e06 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004df2:	897a      	ldrh	r2, [r7, #10]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e06:	893b      	ldrh	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d107      	bne.n	8004e1c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	80da      	strh	r2, [r3, #6]
 8004e1a:	e00b      	b.n	8004e34 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e272      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8087 	beq.w	8004f6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e60:	4b92      	ldr	r3, [pc, #584]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d00c      	beq.n	8004e86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e6c:	4b8f      	ldr	r3, [pc, #572]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d112      	bne.n	8004e9e <HAL_RCC_OscConfig+0x5e>
 8004e78:	4b8c      	ldr	r3, [pc, #560]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d10b      	bne.n	8004e9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e86:	4b89      	ldr	r3, [pc, #548]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d06c      	beq.n	8004f6c <HAL_RCC_OscConfig+0x12c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d168      	bne.n	8004f6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e24c      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea6:	d106      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x76>
 8004ea8:	4b80      	ldr	r3, [pc, #512]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a7f      	ldr	r2, [pc, #508]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	e02e      	b.n	8004f14 <HAL_RCC_OscConfig+0xd4>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x98>
 8004ebe:	4b7b      	ldr	r3, [pc, #492]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7a      	ldr	r2, [pc, #488]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b78      	ldr	r3, [pc, #480]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a77      	ldr	r2, [pc, #476]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e01d      	b.n	8004f14 <HAL_RCC_OscConfig+0xd4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0xbc>
 8004ee2:	4b72      	ldr	r3, [pc, #456]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a71      	ldr	r2, [pc, #452]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	4b6f      	ldr	r3, [pc, #444]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a6e      	ldr	r2, [pc, #440]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e00b      	b.n	8004f14 <HAL_RCC_OscConfig+0xd4>
 8004efc:	4b6b      	ldr	r3, [pc, #428]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a6a      	ldr	r2, [pc, #424]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	4b68      	ldr	r3, [pc, #416]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a67      	ldr	r2, [pc, #412]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d013      	beq.n	8004f44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fc ff16 	bl	8001d4c <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f24:	f7fc ff12 	bl	8001d4c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	; 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e200      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	4b5d      	ldr	r3, [pc, #372]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0xe4>
 8004f42:	e014      	b.n	8004f6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fc ff02 	bl	8001d4c <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f4c:	f7fc fefe 	bl	8001d4c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e1ec      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5e:	4b53      	ldr	r3, [pc, #332]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x10c>
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d063      	beq.n	8005042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f7a:	4b4c      	ldr	r3, [pc, #304]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f86:	4b49      	ldr	r3, [pc, #292]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d11c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x18c>
 8004f92:	4b46      	ldr	r3, [pc, #280]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d116      	bne.n	8004fcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9e:	4b43      	ldr	r3, [pc, #268]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x176>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e1c0      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb6:	4b3d      	ldr	r3, [pc, #244]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4939      	ldr	r1, [pc, #228]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	e03a      	b.n	8005042 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd4:	4b36      	ldr	r3, [pc, #216]	; (80050b0 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fda:	f7fc feb7 	bl	8001d4c <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe2:	f7fc feb3 	bl	8001d4c <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e1a1      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005000:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	4927      	ldr	r1, [pc, #156]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
 8005014:	e015      	b.n	8005042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005016:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <HAL_RCC_OscConfig+0x270>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501c:	f7fc fe96 	bl	8001d4c <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005024:	f7fc fe92 	bl	8001d4c <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e180      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005036:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d03a      	beq.n	80050c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d019      	beq.n	800508a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005056:	4b17      	ldr	r3, [pc, #92]	; (80050b4 <HAL_RCC_OscConfig+0x274>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505c:	f7fc fe76 	bl	8001d4c <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005064:	f7fc fe72 	bl	8001d4c <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e160      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <HAL_RCC_OscConfig+0x26c>)
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005082:	2001      	movs	r0, #1
 8005084:	f000 faba 	bl	80055fc <RCC_Delay>
 8005088:	e01c      	b.n	80050c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800508a:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <HAL_RCC_OscConfig+0x274>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005090:	f7fc fe5c 	bl	8001d4c <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005096:	e00f      	b.n	80050b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005098:	f7fc fe58 	bl	8001d4c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d908      	bls.n	80050b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e146      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
 80050b0:	42420000 	.word	0x42420000
 80050b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b8:	4b92      	ldr	r3, [pc, #584]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e9      	bne.n	8005098 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 80a6 	beq.w	800521e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d2:	2300      	movs	r3, #0
 80050d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d6:	4b8b      	ldr	r3, [pc, #556]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e2:	4b88      	ldr	r3, [pc, #544]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	4a87      	ldr	r2, [pc, #540]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ec:	61d3      	str	r3, [r2, #28]
 80050ee:	4b85      	ldr	r3, [pc, #532]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fe:	4b82      	ldr	r3, [pc, #520]	; (8005308 <HAL_RCC_OscConfig+0x4c8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d118      	bne.n	800513c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800510a:	4b7f      	ldr	r3, [pc, #508]	; (8005308 <HAL_RCC_OscConfig+0x4c8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a7e      	ldr	r2, [pc, #504]	; (8005308 <HAL_RCC_OscConfig+0x4c8>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005116:	f7fc fe19 	bl	8001d4c <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511e:	f7fc fe15 	bl	8001d4c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b64      	cmp	r3, #100	; 0x64
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e103      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005130:	4b75      	ldr	r3, [pc, #468]	; (8005308 <HAL_RCC_OscConfig+0x4c8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d106      	bne.n	8005152 <HAL_RCC_OscConfig+0x312>
 8005144:	4b6f      	ldr	r3, [pc, #444]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	4a6e      	ldr	r2, [pc, #440]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	6213      	str	r3, [r2, #32]
 8005150:	e02d      	b.n	80051ae <HAL_RCC_OscConfig+0x36e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10c      	bne.n	8005174 <HAL_RCC_OscConfig+0x334>
 800515a:	4b6a      	ldr	r3, [pc, #424]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	4a69      	ldr	r2, [pc, #420]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	6213      	str	r3, [r2, #32]
 8005166:	4b67      	ldr	r3, [pc, #412]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	4a66      	ldr	r2, [pc, #408]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 800516c:	f023 0304 	bic.w	r3, r3, #4
 8005170:	6213      	str	r3, [r2, #32]
 8005172:	e01c      	b.n	80051ae <HAL_RCC_OscConfig+0x36e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b05      	cmp	r3, #5
 800517a:	d10c      	bne.n	8005196 <HAL_RCC_OscConfig+0x356>
 800517c:	4b61      	ldr	r3, [pc, #388]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	4a60      	ldr	r2, [pc, #384]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005182:	f043 0304 	orr.w	r3, r3, #4
 8005186:	6213      	str	r3, [r2, #32]
 8005188:	4b5e      	ldr	r3, [pc, #376]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	4a5d      	ldr	r2, [pc, #372]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	6213      	str	r3, [r2, #32]
 8005194:	e00b      	b.n	80051ae <HAL_RCC_OscConfig+0x36e>
 8005196:	4b5b      	ldr	r3, [pc, #364]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4a5a      	ldr	r2, [pc, #360]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	6213      	str	r3, [r2, #32]
 80051a2:	4b58      	ldr	r3, [pc, #352]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	4a57      	ldr	r2, [pc, #348]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	f023 0304 	bic.w	r3, r3, #4
 80051ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d015      	beq.n	80051e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b6:	f7fc fdc9 	bl	8001d4c <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051bc:	e00a      	b.n	80051d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051be:	f7fc fdc5 	bl	8001d4c <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e0b1      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d4:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0ee      	beq.n	80051be <HAL_RCC_OscConfig+0x37e>
 80051e0:	e014      	b.n	800520c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e2:	f7fc fdb3 	bl	8001d4c <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e8:	e00a      	b.n	8005200 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ea:	f7fc fdaf 	bl	8001d4c <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e09b      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005200:	4b40      	ldr	r3, [pc, #256]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ee      	bne.n	80051ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d105      	bne.n	800521e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005212:	4b3c      	ldr	r3, [pc, #240]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4a3b      	ldr	r2, [pc, #236]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800521c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8087 	beq.w	8005336 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005228:	4b36      	ldr	r3, [pc, #216]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 030c 	and.w	r3, r3, #12
 8005230:	2b08      	cmp	r3, #8
 8005232:	d061      	beq.n	80052f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d146      	bne.n	80052ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523c:	4b33      	ldr	r3, [pc, #204]	; (800530c <HAL_RCC_OscConfig+0x4cc>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005242:	f7fc fd83 	bl	8001d4c <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524a:	f7fc fd7f 	bl	8001d4c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e06d      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800525c:	4b29      	ldr	r3, [pc, #164]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005270:	d108      	bne.n	8005284 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005272:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	4921      	ldr	r1, [pc, #132]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005280:	4313      	orrs	r3, r2
 8005282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005284:	4b1f      	ldr	r3, [pc, #124]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a19      	ldr	r1, [r3, #32]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	430b      	orrs	r3, r1
 8005296:	491b      	ldr	r1, [pc, #108]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_RCC_OscConfig+0x4cc>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a2:	f7fc fd53 	bl	8001d4c <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052aa:	f7fc fd4f 	bl	8001d4c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e03d      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052bc:	4b11      	ldr	r3, [pc, #68]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x46a>
 80052c8:	e035      	b.n	8005336 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ca:	4b10      	ldr	r3, [pc, #64]	; (800530c <HAL_RCC_OscConfig+0x4cc>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fc fd3c 	bl	8001d4c <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d8:	f7fc fd38 	bl	8001d4c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e026      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0x498>
 80052f6:	e01e      	b.n	8005336 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e019      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
 8005304:	40021000 	.word	0x40021000
 8005308:	40007000 	.word	0x40007000
 800530c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_OscConfig+0x500>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	429a      	cmp	r2, r3
 8005322:	d106      	bne.n	8005332 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d001      	beq.n	8005336 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40021000 	.word	0x40021000

08005344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0d0      	b.n	80054fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005358:	4b6a      	ldr	r3, [pc, #424]	; (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d910      	bls.n	8005388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b67      	ldr	r3, [pc, #412]	; (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 0207 	bic.w	r2, r3, #7
 800536e:	4965      	ldr	r1, [pc, #404]	; (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b63      	ldr	r3, [pc, #396]	; (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0b8      	b.n	80054fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d020      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a0:	4b59      	ldr	r3, [pc, #356]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a58      	ldr	r2, [pc, #352]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80053a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b8:	4b53      	ldr	r3, [pc, #332]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4a52      	ldr	r2, [pc, #328]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c4:	4b50      	ldr	r3, [pc, #320]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	494d      	ldr	r1, [pc, #308]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d040      	beq.n	8005464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d115      	bne.n	8005422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e07f      	b.n	80054fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005402:	4b41      	ldr	r3, [pc, #260]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e073      	b.n	80054fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005412:	4b3d      	ldr	r3, [pc, #244]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e06b      	b.n	80054fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005422:	4b39      	ldr	r3, [pc, #228]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f023 0203 	bic.w	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4936      	ldr	r1, [pc, #216]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005434:	f7fc fc8a 	bl	8001d4c <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	e00a      	b.n	8005452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543c:	f7fc fc86 	bl	8001d4c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	; 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e053      	b.n	80054fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	4b2d      	ldr	r3, [pc, #180]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 020c 	and.w	r2, r3, #12
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	429a      	cmp	r2, r3
 8005462:	d1eb      	bne.n	800543c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005464:	4b27      	ldr	r3, [pc, #156]	; (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d210      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 0207 	bic.w	r2, r3, #7
 800547a:	4922      	ldr	r1, [pc, #136]	; (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	4b20      	ldr	r3, [pc, #128]	; (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e032      	b.n	80054fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4916      	ldr	r1, [pc, #88]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	490e      	ldr	r1, [pc, #56]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054d2:	f000 f821 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 80054d6:	4602      	mov	r2, r0
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	490a      	ldr	r1, [pc, #40]	; (800550c <HAL_RCC_ClockConfig+0x1c8>)
 80054e4:	5ccb      	ldrb	r3, [r1, r3]
 80054e6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <HAL_RCC_ClockConfig+0x1cc>)
 80054ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <HAL_RCC_ClockConfig+0x1d0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fc fbe8 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40022000 	.word	0x40022000
 8005508:	40021000 	.word	0x40021000
 800550c:	0800af58 	.word	0x0800af58
 8005510:	20000090 	.word	0x20000090
 8005514:	20000094 	.word	0x20000094

08005518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	2300      	movs	r3, #0
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	2300      	movs	r3, #0
 800552c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005532:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 030c 	and.w	r3, r3, #12
 800553e:	2b04      	cmp	r3, #4
 8005540:	d002      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x30>
 8005542:	2b08      	cmp	r3, #8
 8005544:	d003      	beq.n	800554e <HAL_RCC_GetSysClockFreq+0x36>
 8005546:	e027      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800554a:	613b      	str	r3, [r7, #16]
      break;
 800554c:	e027      	b.n	800559e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	0c9b      	lsrs	r3, r3, #18
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	4a17      	ldr	r2, [pc, #92]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005558:	5cd3      	ldrb	r3, [r2, r3]
 800555a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d010      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	0c5b      	lsrs	r3, r3, #17
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	4a11      	ldr	r2, [pc, #68]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a0d      	ldr	r2, [pc, #52]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800557a:	fb03 f202 	mul.w	r2, r3, r2
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e004      	b.n	8005592 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a0c      	ldr	r2, [pc, #48]	; (80055bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	613b      	str	r3, [r7, #16]
      break;
 8005596:	e002      	b.n	800559e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800559a:	613b      	str	r3, [r7, #16]
      break;
 800559c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800559e:	693b      	ldr	r3, [r7, #16]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40021000 	.word	0x40021000
 80055b0:	007a1200 	.word	0x007a1200
 80055b4:	0800af70 	.word	0x0800af70
 80055b8:	0800af80 	.word	0x0800af80
 80055bc:	003d0900 	.word	0x003d0900

080055c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c4:	4b02      	ldr	r3, [pc, #8]	; (80055d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr
 80055d0:	20000090 	.word	0x20000090

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055d8:	f7ff fff2 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4903      	ldr	r1, [pc, #12]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40021000 	.word	0x40021000
 80055f8:	0800af68 	.word	0x0800af68

080055fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <RCC_Delay+0x34>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <RCC_Delay+0x38>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	0a5b      	lsrs	r3, r3, #9
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005618:	bf00      	nop
  }
  while (Delay --);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e5a      	subs	r2, r3, #1
 800561e:	60fa      	str	r2, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1f9      	bne.n	8005618 <RCC_Delay+0x1c>
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	20000090 	.word	0x20000090
 8005634:	10624dd3 	.word	0x10624dd3

08005638 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d07d      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005654:	2300      	movs	r3, #0
 8005656:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005658:	4b4f      	ldr	r3, [pc, #316]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10d      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005664:	4b4c      	ldr	r3, [pc, #304]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	4a4b      	ldr	r2, [pc, #300]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566e:	61d3      	str	r3, [r2, #28]
 8005670:	4b49      	ldr	r3, [pc, #292]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800567c:	2301      	movs	r3, #1
 800567e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005680:	4b46      	ldr	r3, [pc, #280]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	2b00      	cmp	r3, #0
 800568a:	d118      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800568c:	4b43      	ldr	r3, [pc, #268]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a42      	ldr	r2, [pc, #264]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005698:	f7fc fb58 	bl	8001d4c <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569e:	e008      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a0:	f7fc fb54 	bl	8001d4c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e06d      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b2:	4b3a      	ldr	r3, [pc, #232]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056be:	4b36      	ldr	r3, [pc, #216]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d02e      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d027      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056dc:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056e6:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ec:	4b2c      	ldr	r3, [pc, #176]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056f2:	4a29      	ldr	r2, [pc, #164]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d014      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005702:	f7fc fb23 	bl	8001d4c <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005708:	e00a      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570a:	f7fc fb1f 	bl	8001d4c <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f241 3288 	movw	r2, #5000	; 0x1388
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e036      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005720:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0ee      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800572c:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	4917      	ldr	r1, [pc, #92]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573a:	4313      	orrs	r3, r2
 800573c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d105      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	4a13      	ldr	r2, [pc, #76]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800575c:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	490b      	ldr	r1, [pc, #44]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576a:	4313      	orrs	r3, r2
 800576c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	4904      	ldr	r1, [pc, #16]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005788:	4313      	orrs	r3, r2
 800578a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40021000 	.word	0x40021000
 800579c:	40007000 	.word	0x40007000
 80057a0:	42420440 	.word	0x42420440

080057a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e041      	b.n	800583a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fc f9b6 	bl	8001b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f000 fa34 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <HAL_TIM_PWM_Start+0x24>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	e022      	b.n	80058ae <HAL_TIM_PWM_Start+0x6a>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b04      	cmp	r3, #4
 800586c:	d109      	bne.n	8005882 <HAL_TIM_PWM_Start+0x3e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	bf14      	ite	ne
 800587a:	2301      	movne	r3, #1
 800587c:	2300      	moveq	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	e015      	b.n	80058ae <HAL_TIM_PWM_Start+0x6a>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d109      	bne.n	800589c <HAL_TIM_PWM_Start+0x58>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	bf14      	ite	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2300      	moveq	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	e008      	b.n	80058ae <HAL_TIM_PWM_Start+0x6a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e05e      	b.n	8005974 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_PWM_Start+0x82>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c4:	e013      	b.n	80058ee <HAL_TIM_PWM_Start+0xaa>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_PWM_Start+0x92>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d4:	e00b      	b.n	80058ee <HAL_TIM_PWM_Start+0xaa>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d104      	bne.n	80058e6 <HAL_TIM_PWM_Start+0xa2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e4:	e003      	b.n	80058ee <HAL_TIM_PWM_Start+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2201      	movs	r2, #1
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fba0 	bl	800603c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1e      	ldr	r2, [pc, #120]	; (800597c <HAL_TIM_PWM_Start+0x138>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d107      	bne.n	8005916 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005914:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_TIM_PWM_Start+0x138>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_TIM_PWM_Start+0xfa>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005928:	d009      	beq.n	800593e <HAL_TIM_PWM_Start+0xfa>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a14      	ldr	r2, [pc, #80]	; (8005980 <HAL_TIM_PWM_Start+0x13c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIM_PWM_Start+0xfa>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a12      	ldr	r2, [pc, #72]	; (8005984 <HAL_TIM_PWM_Start+0x140>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d111      	bne.n	8005962 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b06      	cmp	r3, #6
 800594e:	d010      	beq.n	8005972 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005960:	e007      	b.n	8005972 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0201 	orr.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800

08005988 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e093      	b.n	8005ac4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7fc f8df 	bl	8001b74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059cc:	f023 0307 	bic.w	r3, r3, #7
 80059d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	4619      	mov	r1, r3
 80059dc:	4610      	mov	r0, r2
 80059de:	f000 f937 	bl	8005c50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a28:	f023 030c 	bic.w	r3, r3, #12
 8005a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	4313      	orrs	r3, r2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	011a      	lsls	r2, r3, #4
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	031b      	lsls	r3, r3, #12
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	4313      	orrs	r3, r2
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e0ae      	b.n	8005c48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	f200 809f 	bhi.w	8005c38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b35 	.word	0x08005b35
 8005b04:	08005c39 	.word	0x08005c39
 8005b08:	08005c39 	.word	0x08005c39
 8005b0c:	08005c39 	.word	0x08005c39
 8005b10:	08005b75 	.word	0x08005b75
 8005b14:	08005c39 	.word	0x08005c39
 8005b18:	08005c39 	.word	0x08005c39
 8005b1c:	08005c39 	.word	0x08005c39
 8005b20:	08005bb7 	.word	0x08005bb7
 8005b24:	08005c39 	.word	0x08005c39
 8005b28:	08005c39 	.word	0x08005c39
 8005b2c:	08005c39 	.word	0x08005c39
 8005b30:	08005bf7 	.word	0x08005bf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f8f6 	bl	8005d2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0208 	orr.w	r2, r2, #8
 8005b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0204 	bic.w	r2, r2, #4
 8005b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6999      	ldr	r1, [r3, #24]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	619a      	str	r2, [r3, #24]
      break;
 8005b72:	e064      	b.n	8005c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f93c 	bl	8005df8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6999      	ldr	r1, [r3, #24]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	619a      	str	r2, [r3, #24]
      break;
 8005bb4:	e043      	b.n	8005c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 f985 	bl	8005ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0208 	orr.w	r2, r2, #8
 8005bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0204 	bic.w	r2, r2, #4
 8005be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69d9      	ldr	r1, [r3, #28]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	61da      	str	r2, [r3, #28]
      break;
 8005bf4:	e023      	b.n	8005c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f9cf 	bl	8005fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69d9      	ldr	r1, [r3, #28]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	021a      	lsls	r2, r3, #8
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	61da      	str	r2, [r3, #28]
      break;
 8005c36:	e002      	b.n	8005c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a2f      	ldr	r2, [pc, #188]	; (8005d20 <TIM_Base_SetConfig+0xd0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x30>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x30>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a2c      	ldr	r2, [pc, #176]	; (8005d24 <TIM_Base_SetConfig+0xd4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x30>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a2b      	ldr	r2, [pc, #172]	; (8005d28 <TIM_Base_SetConfig+0xd8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <TIM_Base_SetConfig+0xd0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_Base_SetConfig+0x62>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d007      	beq.n	8005cb2 <TIM_Base_SetConfig+0x62>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1f      	ldr	r2, [pc, #124]	; (8005d24 <TIM_Base_SetConfig+0xd4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_Base_SetConfig+0x62>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a1e      	ldr	r2, [pc, #120]	; (8005d28 <TIM_Base_SetConfig+0xd8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <TIM_Base_SetConfig+0xd0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d103      	bne.n	8005cf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	611a      	str	r2, [r3, #16]
  }
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr
 8005d20:	40012c00 	.word	0x40012c00
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800

08005d2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f023 0201 	bic.w	r2, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f023 0302 	bic.w	r3, r3, #2
 8005d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a1c      	ldr	r2, [pc, #112]	; (8005df4 <TIM_OC1_SetConfig+0xc8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d10c      	bne.n	8005da2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 0308 	bic.w	r3, r3, #8
 8005d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f023 0304 	bic.w	r3, r3, #4
 8005da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a13      	ldr	r2, [pc, #76]	; (8005df4 <TIM_OC1_SetConfig+0xc8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d111      	bne.n	8005dce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00

08005df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f023 0210 	bic.w	r2, r3, #16
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f023 0320 	bic.w	r3, r3, #32
 8005e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <TIM_OC2_SetConfig+0xd0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10d      	bne.n	8005e74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <TIM_OC2_SetConfig+0xd0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d113      	bne.n	8005ea4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr
 8005ec8:	40012c00 	.word	0x40012c00

08005ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1d      	ldr	r2, [pc, #116]	; (8005f9c <TIM_OC3_SetConfig+0xd0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d10d      	bne.n	8005f46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a14      	ldr	r2, [pc, #80]	; (8005f9c <TIM_OC3_SetConfig+0xd0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d113      	bne.n	8005f76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	621a      	str	r2, [r3, #32]
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40012c00 	.word	0x40012c00

08005fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	031b      	lsls	r3, r3, #12
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a0f      	ldr	r2, [pc, #60]	; (8006038 <TIM_OC4_SetConfig+0x98>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d109      	bne.n	8006014 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	019b      	lsls	r3, r3, #6
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr
 8006038:	40012c00 	.word	0x40012c00

0800603c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	2201      	movs	r2, #1
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1a      	ldr	r2, [r3, #32]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	43db      	mvns	r3, r3
 800605e:	401a      	ands	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1a      	ldr	r2, [r3, #32]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	431a      	orrs	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006098:	2302      	movs	r3, #2
 800609a:	e046      	b.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a16      	ldr	r2, [pc, #88]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d009      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a12      	ldr	r2, [pc, #72]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a10      	ldr	r2, [pc, #64]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d10c      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4313      	orrs	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr
 8006134:	40012c00 	.word	0x40012c00
 8006138:	40000400 	.word	0x40000400
 800613c:	40000800 	.word	0x40000800

08006140 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	4638      	mov	r0, r7
 800614a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800616a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800616e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	b29a      	uxth	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800618e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006192:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4013      	ands	r3, r2
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr

080061ba <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr

080061d2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	4638      	mov	r0, r7
 80061dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800620c:	b480      	push	{r7}
 800620e:	b09d      	sub	sp, #116	; 0x74
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	78db      	ldrb	r3, [r3, #3]
 800623a:	2b03      	cmp	r3, #3
 800623c:	d81f      	bhi.n	800627e <USB_ActivateEndpoint+0x72>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <USB_ActivateEndpoint+0x38>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006255 	.word	0x08006255
 8006248:	08006271 	.word	0x08006271
 800624c:	08006287 	.word	0x08006287
 8006250:	08006263 	.word	0x08006263
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006254:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800625c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006260:	e012      	b.n	8006288 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006262:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006266:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800626a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800626e:	e00b      	b.n	8006288 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006270:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006274:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006278:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800627c:	e004      	b.n	8006288 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006284:	e000      	b.n	8006288 <USB_ActivateEndpoint+0x7c>
      break;
 8006286:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	441a      	add	r2, r3
 8006292:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	441a      	add	r2, r3
 80062d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	7b1b      	ldrb	r3, [r3, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f040 8178 	bne.w	80065ea <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	785b      	ldrb	r3, [r3, #1]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 8084 	beq.w	800640c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630e:	b29b      	uxth	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	4413      	add	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	011a      	lsls	r2, r3, #4
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	88db      	ldrh	r3, [r3, #6]
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	b29b      	uxth	r3, r3
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	827b      	strh	r3, [r7, #18]
 8006346:	8a7b      	ldrh	r3, [r7, #18]
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01b      	beq.n	8006388 <USB_ActivateEndpoint+0x17c>
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	823b      	strh	r3, [r7, #16]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	8a3b      	ldrh	r3, [r7, #16]
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	78db      	ldrb	r3, [r3, #3]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d020      	beq.n	80063d2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a6:	81bb      	strh	r3, [r7, #12]
 80063a8:	89bb      	ldrh	r3, [r7, #12]
 80063aa:	f083 0320 	eor.w	r3, r3, #32
 80063ae:	81bb      	strh	r3, [r7, #12]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	441a      	add	r2, r3
 80063ba:	89bb      	ldrh	r3, [r7, #12]
 80063bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	8013      	strh	r3, [r2, #0]
 80063d0:	e2d5      	b.n	800697e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e8:	81fb      	strh	r3, [r7, #14]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	441a      	add	r2, r3
 80063f4:	89fb      	ldrh	r3, [r7, #14]
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]
 800640a:	e2b8      	b.n	800697e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006416:	b29b      	uxth	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	4413      	add	r3, r2
 800641e:	633b      	str	r3, [r7, #48]	; 0x30
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	011a      	lsls	r2, r3, #4
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	4413      	add	r3, r2
 800642a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	88db      	ldrh	r3, [r3, #6]
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	b29b      	uxth	r3, r3
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	4413      	add	r3, r2
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	011a      	lsls	r2, r3, #4
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	4413      	add	r3, r2
 800645e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800646e:	b29a      	uxth	r2, r3
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b3e      	cmp	r3, #62	; 0x3e
 800647a:	d91d      	bls.n	80064b8 <USB_ActivateEndpoint+0x2ac>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	66bb      	str	r3, [r7, #104]	; 0x68
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	2b00      	cmp	r3, #0
 800648e:	d102      	bne.n	8006496 <USB_ActivateEndpoint+0x28a>
 8006490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006492:	3b01      	subs	r3, #1
 8006494:	66bb      	str	r3, [r7, #104]	; 0x68
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29a      	uxth	r2, r3
 800649c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800649e:	b29b      	uxth	r3, r3
 80064a0:	029b      	lsls	r3, r3, #10
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	4313      	orrs	r3, r2
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	e026      	b.n	8006506 <USB_ActivateEndpoint+0x2fa>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <USB_ActivateEndpoint+0x2ca>
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	e017      	b.n	8006506 <USB_ActivateEndpoint+0x2fa>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	085b      	lsrs	r3, r3, #1
 80064dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <USB_ActivateEndpoint+0x2e4>
 80064ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ec:	3301      	adds	r3, #1
 80064ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	029b      	lsls	r3, r3, #10
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	4313      	orrs	r3, r2
 8006500:	b29a      	uxth	r2, r3
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	847b      	strh	r3, [r7, #34]	; 0x22
 8006514:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01b      	beq.n	8006556 <USB_ActivateEndpoint+0x34a>
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006534:	843b      	strh	r3, [r7, #32]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	441a      	add	r2, r3
 8006540:	8c3b      	ldrh	r3, [r7, #32]
 8006542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800654e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006552:	b29b      	uxth	r3, r3
 8006554:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d124      	bne.n	80065a8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006574:	83bb      	strh	r3, [r7, #28]
 8006576:	8bbb      	ldrh	r3, [r7, #28]
 8006578:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800657c:	83bb      	strh	r3, [r7, #28]
 800657e:	8bbb      	ldrh	r3, [r7, #28]
 8006580:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006584:	83bb      	strh	r3, [r7, #28]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	441a      	add	r2, r3
 8006590:	8bbb      	ldrh	r3, [r7, #28]
 8006592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]
 80065a6:	e1ea      	b.n	800697e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065be:	83fb      	strh	r3, [r7, #30]
 80065c0:	8bfb      	ldrh	r3, [r7, #30]
 80065c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065c6:	83fb      	strh	r3, [r7, #30]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	441a      	add	r2, r3
 80065d2:	8bfb      	ldrh	r3, [r7, #30]
 80065d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	8013      	strh	r3, [r2, #0]
 80065e8:	e1c9      	b.n	800697e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	78db      	ldrb	r3, [r3, #3]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d11e      	bne.n	8006630 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006608:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	441a      	add	r2, r3
 8006616:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800661a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800661e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006622:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662a:	b29b      	uxth	r3, r3
 800662c:	8013      	strh	r3, [r2, #0]
 800662e:	e01d      	b.n	800666c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006646:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	441a      	add	r2, r3
 8006654:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800665c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006668:	b29b      	uxth	r3, r3
 800666a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006676:	b29b      	uxth	r3, r3
 8006678:	461a      	mov	r2, r3
 800667a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800667c:	4413      	add	r3, r2
 800667e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	011a      	lsls	r2, r3, #4
 8006686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006688:	4413      	add	r3, r2
 800668a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800668e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	891b      	ldrh	r3, [r3, #8]
 8006694:	085b      	lsrs	r3, r3, #1
 8006696:	b29b      	uxth	r3, r3
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800669e:	801a      	strh	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	657b      	str	r3, [r7, #84]	; 0x54
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b0:	4413      	add	r3, r2
 80066b2:	657b      	str	r3, [r7, #84]	; 0x54
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	011a      	lsls	r2, r3, #4
 80066ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80066c2:	653b      	str	r3, [r7, #80]	; 0x50
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	895b      	ldrh	r3, [r3, #10]
 80066c8:	085b      	lsrs	r3, r3, #1
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f040 8093 	bne.w	8006804 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80066ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80066f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01b      	beq.n	8006732 <USB_ActivateEndpoint+0x526>
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006710:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	441a      	add	r2, r3
 800671c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800671e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800672a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672e:	b29b      	uxth	r3, r3
 8006730:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006740:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01b      	beq.n	8006782 <USB_ActivateEndpoint+0x576>
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800675c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006760:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	441a      	add	r2, r3
 800676c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800676e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800677a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800677e:	b29b      	uxth	r3, r3
 8006780:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006798:	873b      	strh	r3, [r7, #56]	; 0x38
 800679a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800679c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80067a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80067a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	441a      	add	r2, r3
 80067b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80067b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	441a      	add	r2, r3
 80067ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fe:	b29b      	uxth	r3, r3
 8006800:	8013      	strh	r3, [r2, #0]
 8006802:	e0bc      	b.n	800697e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006814:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01d      	beq.n	800685c <USB_ActivateEndpoint+0x650>
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006836:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	441a      	add	r2, r3
 8006844:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006858:	b29b      	uxth	r3, r3
 800685a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800686c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01d      	beq.n	80068b4 <USB_ActivateEndpoint+0x6a8>
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	78db      	ldrb	r3, [r3, #3]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d024      	beq.n	8006906 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80068d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068da:	f083 0320 	eor.w	r3, r3, #32
 80068de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	441a      	add	r2, r3
 80068ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]
 8006904:	e01d      	b.n	8006942 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	441a      	add	r2, r3
 800692a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800692e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693e:	b29b      	uxth	r3, r3
 8006940:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006958:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	441a      	add	r2, r3
 8006966:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800696a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697a:	b29b      	uxth	r3, r3
 800697c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800697e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006982:	4618      	mov	r0, r3
 8006984:	3774      	adds	r7, #116	; 0x74
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800698c:	b480      	push	{r7}
 800698e:	b08d      	sub	sp, #52	; 0x34
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	7b1b      	ldrb	r3, [r3, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 808e 	bne.w	8006abc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d044      	beq.n	8006a32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	81bb      	strh	r3, [r7, #12]
 80069b6:	89bb      	ldrh	r3, [r7, #12]
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01b      	beq.n	80069f8 <USB_DeactivateEndpoint+0x6c>
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d6:	817b      	strh	r3, [r7, #10]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	441a      	add	r2, r3
 80069e2:	897b      	ldrh	r3, [r7, #10]
 80069e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0e:	813b      	strh	r3, [r7, #8]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	893b      	ldrh	r3, [r7, #8]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]
 8006a30:	e192      	b.n	8006d58 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	827b      	strh	r3, [r7, #18]
 8006a40:	8a7b      	ldrh	r3, [r7, #18]
 8006a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01b      	beq.n	8006a82 <USB_DeactivateEndpoint+0xf6>
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a60:	823b      	strh	r3, [r7, #16]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	8a3b      	ldrh	r3, [r7, #16]
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a98:	81fb      	strh	r3, [r7, #14]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	89fb      	ldrh	r3, [r7, #14]
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]
 8006aba:	e14d      	b.n	8006d58 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f040 80a5 	bne.w	8006c10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	843b      	strh	r3, [r7, #32]
 8006ad4:	8c3b      	ldrh	r3, [r7, #32]
 8006ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01b      	beq.n	8006b16 <USB_DeactivateEndpoint+0x18a>
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af4:	83fb      	strh	r3, [r7, #30]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	441a      	add	r2, r3
 8006b00:	8bfb      	ldrh	r3, [r7, #30]
 8006b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	83bb      	strh	r3, [r7, #28]
 8006b24:	8bbb      	ldrh	r3, [r7, #28]
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01b      	beq.n	8006b66 <USB_DeactivateEndpoint+0x1da>
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	837b      	strh	r3, [r7, #26]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	8b7b      	ldrh	r3, [r7, #26]
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7c:	833b      	strh	r3, [r7, #24]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8b3b      	ldrh	r3, [r7, #24]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb4:	82fb      	strh	r3, [r7, #22]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	441a      	add	r2, r3
 8006bc0:	8afb      	ldrh	r3, [r7, #22]
 8006bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bec:	82bb      	strh	r3, [r7, #20]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	8abb      	ldrh	r3, [r7, #20]
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]
 8006c0e:	e0a3      	b.n	8006d58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01b      	beq.n	8006c60 <USB_DeactivateEndpoint+0x2d4>
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01b      	beq.n	8006cb0 <USB_DeactivateEndpoint+0x324>
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	441a      	add	r2, r3
 8006c9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3734      	adds	r7, #52	; 0x34
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b0c2      	sub	sp, #264	; 0x108
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d72:	6018      	str	r0, [r3, #0]
 8006d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	f040 86b7 	bne.w	8007afe <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d908      	bls.n	8006dbe <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006dbc:	e007      	b.n	8006dce <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	7b1b      	ldrb	r3, [r3, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d13a      	bne.n	8006e54 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6959      	ldr	r1, [r3, #20]
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	88da      	ldrh	r2, [r3, #6]
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e00:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e04:	6800      	ldr	r0, [r0, #0]
 8006e06:	f001 fc9c 	bl	8008742 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	011a      	lsls	r2, r3, #4
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	f000 be1f 	b.w	8007a92 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	78db      	ldrb	r3, [r3, #3]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	f040 8462 	bne.w	800772a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6a1a      	ldr	r2, [r3, #32]
 8006e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	f240 83df 	bls.w	8007642 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	441a      	add	r2, r3
 8006ec8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a1a      	ldr	r2, [r3, #32]
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef0:	1ad2      	subs	r2, r2, r3
 8006ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 81c7 	beq.w	80072b4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	633b      	str	r3, [r7, #48]	; 0x30
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d177      	bne.n	8007032 <USB_EPStartXfer+0x2ce>
 8006f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	4413      	add	r3, r2
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	011a      	lsls	r2, r3, #4
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	4413      	add	r3, r2
 8006f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	801a      	strh	r2, [r3, #0]
 8006f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f92:	2b3e      	cmp	r3, #62	; 0x3e
 8006f94:	d921      	bls.n	8006fda <USB_EPStartXfer+0x276>
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d104      	bne.n	8006fb6 <USB_EPStartXfer+0x252>
 8006fac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	e050      	b.n	800707c <USB_EPStartXfer+0x318>
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <USB_EPStartXfer+0x294>
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e041      	b.n	800707c <USB_EPStartXfer+0x318>
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <USB_EPStartXfer+0x2b4>
 800700e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007012:	3301      	adds	r3, #1
 8007014:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007022:	b29b      	uxth	r3, r3
 8007024:	029b      	lsls	r3, r3, #10
 8007026:	b29b      	uxth	r3, r3
 8007028:	4313      	orrs	r3, r2
 800702a:	b29a      	uxth	r2, r3
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	801a      	strh	r2, [r3, #0]
 8007030:	e024      	b.n	800707c <USB_EPStartXfer+0x318>
 8007032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d11c      	bne.n	800707c <USB_EPStartXfer+0x318>
 8007042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007050:	b29b      	uxth	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007056:	4413      	add	r3, r2
 8007058:	633b      	str	r3, [r7, #48]	; 0x30
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	011a      	lsls	r2, r3, #4
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	4413      	add	r3, r2
 800706c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007076:	b29a      	uxth	r2, r3
 8007078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800707c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	895b      	ldrh	r3, [r3, #10]
 8007088:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800708c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6959      	ldr	r1, [r3, #20]
 8007098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709c:	b29b      	uxth	r3, r3
 800709e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070aa:	6800      	ldr	r0, [r0, #0]
 80070ac:	f001 fb49 	bl	8008742 <USB_WritePMA>
            ep->xfer_buff += len;
 80070b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695a      	ldr	r2, [r3, #20]
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c0:	441a      	add	r2, r3
 80070c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a1a      	ldr	r2, [r3, #32]
 80070da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d90f      	bls.n	800710a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80070ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6a1a      	ldr	r2, [r3, #32]
 80070f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fa:	1ad2      	subs	r2, r2, r3
 80070fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	621a      	str	r2, [r3, #32]
 8007108:	e00e      	b.n	8007128 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800710a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800711a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2200      	movs	r2, #0
 8007126:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d177      	bne.n	8007228 <USB_EPStartXfer+0x4c4>
 8007138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007152:	b29b      	uxth	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	4413      	add	r3, r2
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	011a      	lsls	r2, r3, #4
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	4413      	add	r3, r2
 800716e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007172:	617b      	str	r3, [r7, #20]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800717e:	b29a      	uxth	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007188:	2b3e      	cmp	r3, #62	; 0x3e
 800718a:	d921      	bls.n	80071d0 <USB_EPStartXfer+0x46c>
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007190:	095b      	lsrs	r3, r3, #5
 8007192:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719a:	f003 031f 	and.w	r3, r3, #31
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <USB_EPStartXfer+0x448>
 80071a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a6:	3b01      	subs	r3, #1
 80071a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	b29b      	uxth	r3, r3
 80071c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	e056      	b.n	800727e <USB_EPStartXfer+0x51a>
 80071d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <USB_EPStartXfer+0x48a>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e047      	b.n	800727e <USB_EPStartXfer+0x51a>
 80071ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <USB_EPStartXfer+0x4aa>
 8007204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007208:	3301      	adds	r3, #1
 800720a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29a      	uxth	r2, r3
 8007214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007218:	b29b      	uxth	r3, r3
 800721a:	029b      	lsls	r3, r3, #10
 800721c:	b29b      	uxth	r3, r3
 800721e:	4313      	orrs	r3, r2
 8007220:	b29a      	uxth	r2, r3
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	e02a      	b.n	800727e <USB_EPStartXfer+0x51a>
 8007228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d122      	bne.n	800727e <USB_EPStartXfer+0x51a>
 8007238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	623b      	str	r3, [r7, #32]
 8007244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007252:	b29b      	uxth	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	4413      	add	r3, r2
 800725a:	623b      	str	r3, [r7, #32]
 800725c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	011a      	lsls	r2, r3, #4
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	4413      	add	r3, r2
 800726e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007278:	b29a      	uxth	r2, r3
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	891b      	ldrh	r3, [r3, #8]
 800728a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6959      	ldr	r1, [r3, #20]
 800729a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f001 fa48 	bl	8008742 <USB_WritePMA>
 80072b2:	e3ee      	b.n	8007a92 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	785b      	ldrb	r3, [r3, #1]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d177      	bne.n	80073b4 <USB_EPStartXfer+0x650>
 80072c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80072d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072de:	b29b      	uxth	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e4:	4413      	add	r3, r2
 80072e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	011a      	lsls	r2, r3, #4
 80072f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f8:	4413      	add	r3, r2
 80072fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800730a:	b29a      	uxth	r2, r3
 800730c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007314:	2b3e      	cmp	r3, #62	; 0x3e
 8007316:	d921      	bls.n	800735c <USB_EPStartXfer+0x5f8>
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007326:	f003 031f 	and.w	r3, r3, #31
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <USB_EPStartXfer+0x5d4>
 800732e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007332:	3b01      	subs	r3, #1
 8007334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29a      	uxth	r2, r3
 800733e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007342:	b29b      	uxth	r3, r3
 8007344:	029b      	lsls	r3, r3, #10
 8007346:	b29b      	uxth	r3, r3
 8007348:	4313      	orrs	r3, r2
 800734a:	b29b      	uxth	r3, r3
 800734c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007354:	b29a      	uxth	r2, r3
 8007356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007358:	801a      	strh	r2, [r3, #0]
 800735a:	e056      	b.n	800740a <USB_EPStartXfer+0x6a6>
 800735c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <USB_EPStartXfer+0x616>
 8007364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007372:	b29a      	uxth	r2, r3
 8007374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	e047      	b.n	800740a <USB_EPStartXfer+0x6a6>
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <USB_EPStartXfer+0x636>
 8007390:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007394:	3301      	adds	r3, #1
 8007396:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800739a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	029b      	lsls	r3, r3, #10
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	4313      	orrs	r3, r2
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	e02a      	b.n	800740a <USB_EPStartXfer+0x6a6>
 80073b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d122      	bne.n	800740a <USB_EPStartXfer+0x6a6>
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	653b      	str	r3, [r7, #80]	; 0x50
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073de:	b29b      	uxth	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e4:	4413      	add	r3, r2
 80073e6:	653b      	str	r3, [r7, #80]	; 0x50
 80073e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	011a      	lsls	r2, r3, #4
 80073f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f8:	4413      	add	r3, r2
 80073fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007404:	b29a      	uxth	r2, r3
 8007406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007408:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	891b      	ldrh	r3, [r3, #8]
 8007416:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800741a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6959      	ldr	r1, [r3, #20]
 8007426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800742a:	b29b      	uxth	r3, r3
 800742c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007430:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007434:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007438:	6800      	ldr	r0, [r0, #0]
 800743a:	f001 f982 	bl	8008742 <USB_WritePMA>
            ep->xfer_buff += len;
 800743e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695a      	ldr	r2, [r3, #20]
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744e:	441a      	add	r2, r3
 8007450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800745c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6a1a      	ldr	r2, [r3, #32]
 8007468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	429a      	cmp	r2, r3
 8007476:	d90f      	bls.n	8007498 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6a1a      	ldr	r2, [r3, #32]
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007488:	1ad2      	subs	r2, r2, r3
 800748a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	621a      	str	r2, [r3, #32]
 8007496:	e00e      	b.n	80074b6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80074a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2200      	movs	r2, #0
 80074b4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	643b      	str	r3, [r7, #64]	; 0x40
 80074c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d177      	bne.n	80075c2 <USB_EPStartXfer+0x85e>
 80074d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80074de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	4413      	add	r3, r2
 80074f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	011a      	lsls	r2, r3, #4
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	4413      	add	r3, r2
 8007508:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007518:	b29a      	uxth	r2, r3
 800751a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751c:	801a      	strh	r2, [r3, #0]
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007522:	2b3e      	cmp	r3, #62	; 0x3e
 8007524:	d921      	bls.n	800756a <USB_EPStartXfer+0x806>
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <USB_EPStartXfer+0x7e2>
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	3b01      	subs	r3, #1
 8007542:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29a      	uxth	r2, r3
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007550:	b29b      	uxth	r3, r3
 8007552:	029b      	lsls	r3, r3, #10
 8007554:	b29b      	uxth	r3, r3
 8007556:	4313      	orrs	r3, r2
 8007558:	b29b      	uxth	r3, r3
 800755a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007562:	b29a      	uxth	r2, r3
 8007564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	e050      	b.n	800760c <USB_EPStartXfer+0x8a8>
 800756a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <USB_EPStartXfer+0x824>
 8007572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007580:	b29a      	uxth	r2, r3
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	e041      	b.n	800760c <USB_EPStartXfer+0x8a8>
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758c:	085b      	lsrs	r3, r3, #1
 800758e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <USB_EPStartXfer+0x844>
 800759e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	029b      	lsls	r3, r3, #10
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	4313      	orrs	r3, r2
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	e024      	b.n	800760c <USB_EPStartXfer+0x8a8>
 80075c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d11c      	bne.n	800760c <USB_EPStartXfer+0x8a8>
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e6:	4413      	add	r3, r2
 80075e8:	643b      	str	r3, [r7, #64]	; 0x40
 80075ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	011a      	lsls	r2, r3, #4
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	4413      	add	r3, r2
 80075fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007606:	b29a      	uxth	r2, r3
 8007608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800760c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	895b      	ldrh	r3, [r3, #10]
 8007618:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800761c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6959      	ldr	r1, [r3, #20]
 8007628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762c:	b29b      	uxth	r3, r3
 800762e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007632:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007636:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800763a:	6800      	ldr	r0, [r0, #0]
 800763c:	f001 f881 	bl	8008742 <USB_WritePMA>
 8007640:	e227      	b.n	8007a92 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007678:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800767c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	441a      	add	r2, r3
 8007696:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800769a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800769e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80076ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ce:	4413      	add	r3, r2
 80076d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	011a      	lsls	r2, r3, #4
 80076e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076e2:	4413      	add	r3, r2
 80076e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	891b      	ldrh	r3, [r3, #8]
 8007700:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6959      	ldr	r1, [r3, #20]
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007714:	b29b      	uxth	r3, r3
 8007716:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800771a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800771e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007722:	6800      	ldr	r0, [r0, #0]
 8007724:	f001 f80d 	bl	8008742 <USB_WritePMA>
 8007728:	e1b3      	b.n	8007a92 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800772a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6a1a      	ldr	r2, [r3, #32]
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773a:	1ad2      	subs	r2, r2, r3
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80c6 	beq.w	80078fc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	673b      	str	r3, [r7, #112]	; 0x70
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	785b      	ldrb	r3, [r3, #1]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d177      	bne.n	800787c <USB_EPStartXfer+0xb18>
 800778c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	66bb      	str	r3, [r7, #104]	; 0x68
 8007798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ac:	4413      	add	r3, r2
 80077ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	011a      	lsls	r2, r3, #4
 80077be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077c0:	4413      	add	r3, r2
 80077c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077c6:	667b      	str	r3, [r7, #100]	; 0x64
 80077c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077d6:	801a      	strh	r2, [r3, #0]
 80077d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077dc:	2b3e      	cmp	r3, #62	; 0x3e
 80077de:	d921      	bls.n	8007824 <USB_EPStartXfer+0xac0>
 80077e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e4:	095b      	lsrs	r3, r3, #5
 80077e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d104      	bne.n	8007800 <USB_EPStartXfer+0xa9c>
 80077f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077fa:	3b01      	subs	r3, #1
 80077fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29a      	uxth	r2, r3
 8007806:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800780a:	b29b      	uxth	r3, r3
 800780c:	029b      	lsls	r3, r3, #10
 800780e:	b29b      	uxth	r3, r3
 8007810:	4313      	orrs	r3, r2
 8007812:	b29b      	uxth	r3, r3
 8007814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781c:	b29a      	uxth	r2, r3
 800781e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	e050      	b.n	80078c6 <USB_EPStartXfer+0xb62>
 8007824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <USB_EPStartXfer+0xade>
 800782c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800783a:	b29a      	uxth	r2, r3
 800783c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	e041      	b.n	80078c6 <USB_EPStartXfer+0xb62>
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007846:	085b      	lsrs	r3, r3, #1
 8007848:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800784c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <USB_EPStartXfer+0xafe>
 8007858:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800785c:	3301      	adds	r3, #1
 800785e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29a      	uxth	r2, r3
 8007868:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800786c:	b29b      	uxth	r3, r3
 800786e:	029b      	lsls	r3, r3, #10
 8007870:	b29b      	uxth	r3, r3
 8007872:	4313      	orrs	r3, r2
 8007874:	b29a      	uxth	r2, r3
 8007876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007878:	801a      	strh	r2, [r3, #0]
 800787a:	e024      	b.n	80078c6 <USB_EPStartXfer+0xb62>
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d11c      	bne.n	80078c6 <USB_EPStartXfer+0xb62>
 800788c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789a:	b29b      	uxth	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078a0:	4413      	add	r3, r2
 80078a2:	673b      	str	r3, [r7, #112]	; 0x70
 80078a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	011a      	lsls	r2, r3, #4
 80078b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078b4:	4413      	add	r3, r2
 80078b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80078c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	895b      	ldrh	r3, [r3, #10]
 80078d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6959      	ldr	r1, [r3, #20]
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078f4:	6800      	ldr	r0, [r0, #0]
 80078f6:	f000 ff24 	bl	8008742 <USB_WritePMA>
 80078fa:	e0ca      	b.n	8007a92 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	785b      	ldrb	r3, [r3, #1]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d177      	bne.n	80079fc <USB_EPStartXfer+0xc98>
 800790c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007910:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007926:	b29b      	uxth	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800792c:	4413      	add	r3, r2
 800792e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	011a      	lsls	r2, r3, #4
 800793e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007940:	4413      	add	r3, r2
 8007942:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007946:	67bb      	str	r3, [r7, #120]	; 0x78
 8007948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007952:	b29a      	uxth	r2, r3
 8007954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795c:	2b3e      	cmp	r3, #62	; 0x3e
 800795e:	d921      	bls.n	80079a4 <USB_EPStartXfer+0xc40>
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007964:	095b      	lsrs	r3, r3, #5
 8007966:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796e:	f003 031f 	and.w	r3, r3, #31
 8007972:	2b00      	cmp	r3, #0
 8007974:	d104      	bne.n	8007980 <USB_EPStartXfer+0xc1c>
 8007976:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800797a:	3b01      	subs	r3, #1
 800797c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29a      	uxth	r2, r3
 8007986:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800798a:	b29b      	uxth	r3, r3
 800798c:	029b      	lsls	r3, r3, #10
 800798e:	b29b      	uxth	r3, r3
 8007990:	4313      	orrs	r3, r2
 8007992:	b29b      	uxth	r3, r3
 8007994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799c:	b29a      	uxth	r2, r3
 800799e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	e05c      	b.n	8007a5e <USB_EPStartXfer+0xcfa>
 80079a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <USB_EPStartXfer+0xc5e>
 80079ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079be:	801a      	strh	r2, [r3, #0]
 80079c0:	e04d      	b.n	8007a5e <USB_EPStartXfer+0xcfa>
 80079c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <USB_EPStartXfer+0xc7e>
 80079d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079dc:	3301      	adds	r3, #1
 80079de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	029b      	lsls	r3, r3, #10
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	4313      	orrs	r3, r2
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f8:	801a      	strh	r2, [r3, #0]
 80079fa:	e030      	b.n	8007a5e <USB_EPStartXfer+0xcfa>
 80079fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	785b      	ldrb	r3, [r3, #1]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d128      	bne.n	8007a5e <USB_EPStartXfer+0xcfa>
 8007a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a30:	4413      	add	r3, r2
 8007a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	011a      	lsls	r2, r3, #4
 8007a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a48:	4413      	add	r3, r2
 8007a4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	891b      	ldrh	r3, [r3, #8]
 8007a6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6959      	ldr	r1, [r3, #20]
 8007a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f000 fe58 	bl	8008742 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab8:	817b      	strh	r3, [r7, #10]
 8007aba:	897b      	ldrh	r3, [r7, #10]
 8007abc:	f083 0310 	eor.w	r3, r3, #16
 8007ac0:	817b      	strh	r3, [r7, #10]
 8007ac2:	897b      	ldrh	r3, [r7, #10]
 8007ac4:	f083 0320 	eor.w	r3, r3, #32
 8007ac8:	817b      	strh	r3, [r7, #10]
 8007aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	441a      	add	r2, r3
 8007ae4:	897b      	ldrh	r3, [r7, #10]
 8007ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	8013      	strh	r3, [r2, #0]
 8007afa:	f000 bcde 	b.w	80084ba <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	7b1b      	ldrb	r3, [r3, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f040 80bb 	bne.w	8007c86 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d917      	bls.n	8007b5c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699a      	ldr	r2, [r3, #24]
 8007b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4c:	1ad2      	subs	r2, r2, r3
 8007b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	619a      	str	r2, [r3, #24]
 8007b5a:	e00e      	b.n	8007b7a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2200      	movs	r2, #0
 8007b78:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	011a      	lsls	r2, r3, #4
 8007bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8007bda:	d924      	bls.n	8007c26 <USB_EPStartXfer+0xec2>
 8007bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be0:	095b      	lsrs	r3, r3, #5
 8007be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bea:	f003 031f 	and.w	r3, r3, #31
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d104      	bne.n	8007bfc <USB_EPStartXfer+0xe98>
 8007bf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	029b      	lsls	r3, r3, #10
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c20:	801a      	strh	r2, [r3, #0]
 8007c22:	f000 bc10 	b.w	8008446 <USB_EPStartXfer+0x16e2>
 8007c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10c      	bne.n	8007c48 <USB_EPStartXfer+0xee4>
 8007c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c44:	801a      	strh	r2, [r3, #0]
 8007c46:	e3fe      	b.n	8008446 <USB_EPStartXfer+0x16e2>
 8007c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4c:	085b      	lsrs	r3, r3, #1
 8007c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <USB_EPStartXfer+0xf04>
 8007c5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c62:	3301      	adds	r3, #1
 8007c64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	029b      	lsls	r3, r3, #10
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	e3df      	b.n	8008446 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	78db      	ldrb	r3, [r3, #3]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	f040 8218 	bne.w	80080c8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f040 809d 	bne.w	8007de4 <USB_EPStartXfer+0x1080>
 8007caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cce:	4413      	add	r3, r2
 8007cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	011a      	lsls	r2, r3, #4
 8007ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b3e      	cmp	r3, #62	; 0x3e
 8007d12:	d92b      	bls.n	8007d6c <USB_EPStartXfer+0x1008>
 8007d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	095b      	lsrs	r3, r3, #5
 8007d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	f003 031f 	and.w	r3, r3, #31
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d104      	bne.n	8007d44 <USB_EPStartXfer+0xfe0>
 8007d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	029b      	lsls	r3, r3, #10
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	4313      	orrs	r3, r2
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d68:	801a      	strh	r2, [r3, #0]
 8007d6a:	e070      	b.n	8007e4e <USB_EPStartXfer+0x10ea>
 8007d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10c      	bne.n	8007d96 <USB_EPStartXfer+0x1032>
 8007d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d92:	801a      	strh	r2, [r3, #0]
 8007d94:	e05b      	b.n	8007e4e <USB_EPStartXfer+0x10ea>
 8007d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	085b      	lsrs	r3, r3, #1
 8007da4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d004      	beq.n	8007dc6 <USB_EPStartXfer+0x1062>
 8007dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	029b      	lsls	r3, r3, #10
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	e034      	b.n	8007e4e <USB_EPStartXfer+0x10ea>
 8007de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d12c      	bne.n	8007e4e <USB_EPStartXfer+0x10ea>
 8007df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e18:	4413      	add	r3, r2
 8007e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	011a      	lsls	r2, r3, #4
 8007e2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e30:	4413      	add	r3, r2
 8007e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f040 809d 	bne.w	8007fa8 <USB_EPStartXfer+0x1244>
 8007e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e92:	4413      	add	r3, r2
 8007e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	011a      	lsls	r2, r3, #4
 8007ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eaa:	4413      	add	r3, r2
 8007eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed6:	d92b      	bls.n	8007f30 <USB_EPStartXfer+0x11cc>
 8007ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	095b      	lsrs	r3, r3, #5
 8007ee6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d104      	bne.n	8007f08 <USB_EPStartXfer+0x11a4>
 8007efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f02:	3b01      	subs	r3, #1
 8007f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	029b      	lsls	r3, r3, #10
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f2c:	801a      	strh	r2, [r3, #0]
 8007f2e:	e069      	b.n	8008004 <USB_EPStartXfer+0x12a0>
 8007f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10c      	bne.n	8007f5a <USB_EPStartXfer+0x11f6>
 8007f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f56:	801a      	strh	r2, [r3, #0]
 8007f58:	e054      	b.n	8008004 <USB_EPStartXfer+0x12a0>
 8007f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <USB_EPStartXfer+0x1226>
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f84:	3301      	adds	r3, #1
 8007f86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	029b      	lsls	r3, r3, #10
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa4:	801a      	strh	r2, [r3, #0]
 8007fa6:	e02d      	b.n	8008004 <USB_EPStartXfer+0x12a0>
 8007fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	785b      	ldrb	r3, [r3, #1]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d125      	bne.n	8008004 <USB_EPStartXfer+0x12a0>
 8007fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fce:	4413      	add	r3, r2
 8007fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	011a      	lsls	r2, r3, #4
 8007fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008002:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8218 	beq.w	8008446 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008036:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800803a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <USB_EPStartXfer+0x12ea>
 8008042:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10d      	bne.n	800806a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800804e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008056:	2b00      	cmp	r3, #0
 8008058:	f040 81f5 	bne.w	8008446 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800805c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	f040 81ee 	bne.w	8008446 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800806a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008090:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	441a      	add	r2, r3
 80080ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80080b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	8013      	strh	r3, [r2, #0]
 80080c6:	e1be      	b.n	8008446 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80080c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	78db      	ldrb	r3, [r3, #3]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	f040 81b4 	bne.w	8008442 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80080da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d917      	bls.n	8008126 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80080f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008116:	1ad2      	subs	r2, r2, r3
 8008118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	619a      	str	r2, [r3, #24]
 8008124:	e00e      	b.n	8008144 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2200      	movs	r2, #0
 8008142:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 8085 	bne.w	8008260 <USB_EPStartXfer+0x14fc>
 8008156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800817a:	4413      	add	r3, r2
 800817c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	011a      	lsls	r2, r3, #4
 800818e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008192:	4413      	add	r3, r2
 8008194:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800819c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081ae:	801a      	strh	r2, [r3, #0]
 80081b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b4:	2b3e      	cmp	r3, #62	; 0x3e
 80081b6:	d923      	bls.n	8008200 <USB_EPStartXfer+0x149c>
 80081b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c6:	f003 031f 	and.w	r3, r3, #31
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <USB_EPStartXfer+0x1474>
 80081ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d2:	3b01      	subs	r3, #1
 80081d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29a      	uxth	r2, r3
 80081e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	029b      	lsls	r3, r3, #10
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	4313      	orrs	r3, r2
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	e060      	b.n	80082c2 <USB_EPStartXfer+0x155e>
 8008200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10c      	bne.n	8008222 <USB_EPStartXfer+0x14be>
 8008208:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008218:	b29a      	uxth	r2, r3
 800821a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	e04f      	b.n	80082c2 <USB_EPStartXfer+0x155e>
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800822c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d004      	beq.n	8008242 <USB_EPStartXfer+0x14de>
 8008238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823c:	3301      	adds	r3, #1
 800823e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008242:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29a      	uxth	r2, r3
 800824a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800824e:	b29b      	uxth	r3, r3
 8008250:	029b      	lsls	r3, r3, #10
 8008252:	b29b      	uxth	r3, r3
 8008254:	4313      	orrs	r3, r2
 8008256:	b29a      	uxth	r2, r3
 8008258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800825c:	801a      	strh	r2, [r3, #0]
 800825e:	e030      	b.n	80082c2 <USB_EPStartXfer+0x155e>
 8008260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d128      	bne.n	80082c2 <USB_EPStartXfer+0x155e>
 8008270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800827e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800828c:	b29b      	uxth	r3, r3
 800828e:	461a      	mov	r2, r3
 8008290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008294:	4413      	add	r3, r2
 8008296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800829a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	011a      	lsls	r2, r3, #4
 80082a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ac:	4413      	add	r3, r2
 80082ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082c0:	801a      	strh	r2, [r3, #0]
 80082c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f040 8085 	bne.w	80083ec <USB_EPStartXfer+0x1688>
 80082e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082fe:	b29b      	uxth	r3, r3
 8008300:	461a      	mov	r2, r3
 8008302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008306:	4413      	add	r3, r2
 8008308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800830c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	011a      	lsls	r2, r3, #4
 800831a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800831e:	4413      	add	r3, r2
 8008320:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008340:	2b3e      	cmp	r3, #62	; 0x3e
 8008342:	d923      	bls.n	800838c <USB_EPStartXfer+0x1628>
 8008344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008348:	095b      	lsrs	r3, r3, #5
 800834a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800834e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008352:	f003 031f 	and.w	r3, r3, #31
 8008356:	2b00      	cmp	r3, #0
 8008358:	d104      	bne.n	8008364 <USB_EPStartXfer+0x1600>
 800835a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800835e:	3b01      	subs	r3, #1
 8008360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29a      	uxth	r2, r3
 800836c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008370:	b29b      	uxth	r3, r3
 8008372:	029b      	lsls	r3, r3, #10
 8008374:	b29b      	uxth	r3, r3
 8008376:	4313      	orrs	r3, r2
 8008378:	b29b      	uxth	r3, r3
 800837a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800837e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008382:	b29a      	uxth	r2, r3
 8008384:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008388:	801a      	strh	r2, [r3, #0]
 800838a:	e05c      	b.n	8008446 <USB_EPStartXfer+0x16e2>
 800838c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10c      	bne.n	80083ae <USB_EPStartXfer+0x164a>
 8008394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	e04b      	b.n	8008446 <USB_EPStartXfer+0x16e2>
 80083ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b2:	085b      	lsrs	r3, r3, #1
 80083b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <USB_EPStartXfer+0x166a>
 80083c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083c8:	3301      	adds	r3, #1
 80083ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083da:	b29b      	uxth	r3, r3
 80083dc:	029b      	lsls	r3, r3, #10
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	e02c      	b.n	8008446 <USB_EPStartXfer+0x16e2>
 80083ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d124      	bne.n	8008446 <USB_EPStartXfer+0x16e2>
 80083fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840a:	b29b      	uxth	r3, r3
 800840c:	461a      	mov	r2, r3
 800840e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008412:	4413      	add	r3, r2
 8008414:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	011a      	lsls	r2, r3, #4
 8008426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800842a:	4413      	add	r3, r2
 800842c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008438:	b29a      	uxth	r2, r3
 800843a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800843e:	801a      	strh	r2, [r3, #0]
 8008440:	e001      	b.n	8008446 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e03a      	b.n	80084bc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008470:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008474:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008478:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800847c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008480:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008484:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	441a      	add	r2, r3
 80084a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	785b      	ldrb	r3, [r3, #1]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d020      	beq.n	800851a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ee:	81bb      	strh	r3, [r7, #12]
 80084f0:	89bb      	ldrh	r3, [r7, #12]
 80084f2:	f083 0310 	eor.w	r3, r3, #16
 80084f6:	81bb      	strh	r3, [r7, #12]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	441a      	add	r2, r3
 8008502:	89bb      	ldrh	r3, [r7, #12]
 8008504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800850c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008514:	b29b      	uxth	r3, r3
 8008516:	8013      	strh	r3, [r2, #0]
 8008518:	e01f      	b.n	800855a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800852c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008530:	81fb      	strh	r3, [r7, #14]
 8008532:	89fb      	ldrh	r3, [r7, #14]
 8008534:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008538:	81fb      	strh	r3, [r7, #14]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	441a      	add	r2, r3
 8008544:	89fb      	ldrh	r3, [r7, #14]
 8008546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800854e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008556:	b29b      	uxth	r3, r3
 8008558:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	bc80      	pop	{r7}
 8008564:	4770      	bx	lr

08008566 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008566:	b480      	push	{r7}
 8008568:	b087      	sub	sp, #28
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	7b1b      	ldrb	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f040 809d 	bne.w	80086b4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d04c      	beq.n	800861c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	823b      	strh	r3, [r7, #16]
 8008590:	8a3b      	ldrh	r3, [r7, #16]
 8008592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01b      	beq.n	80085d2 <USB_EPClearStall+0x6c>
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b0:	81fb      	strh	r3, [r7, #14]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	78db      	ldrb	r3, [r3, #3]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d06c      	beq.n	80086b4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f0:	81bb      	strh	r3, [r7, #12]
 80085f2:	89bb      	ldrh	r3, [r7, #12]
 80085f4:	f083 0320 	eor.w	r3, r3, #32
 80085f8:	81bb      	strh	r3, [r7, #12]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	441a      	add	r2, r3
 8008604:	89bb      	ldrh	r3, [r7, #12]
 8008606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800860e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008616:	b29b      	uxth	r3, r3
 8008618:	8013      	strh	r3, [r2, #0]
 800861a:	e04b      	b.n	80086b4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	82fb      	strh	r3, [r7, #22]
 800862a:	8afb      	ldrh	r3, [r7, #22]
 800862c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01b      	beq.n	800866c <USB_EPClearStall+0x106>
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	b29b      	uxth	r3, r3
 8008642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864a:	82bb      	strh	r3, [r7, #20]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	441a      	add	r2, r3
 8008656:	8abb      	ldrh	r3, [r7, #20]
 8008658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008668:	b29b      	uxth	r3, r3
 800866a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b29b      	uxth	r3, r3
 800867a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800867e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008682:	827b      	strh	r3, [r7, #18]
 8008684:	8a7b      	ldrh	r3, [r7, #18]
 8008686:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800868a:	827b      	strh	r3, [r7, #18]
 800868c:	8a7b      	ldrh	r3, [r7, #18]
 800868e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008692:	827b      	strh	r3, [r7, #18]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	441a      	add	r2, r3
 800869e:	8a7b      	ldrh	r3, [r7, #18]
 80086a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d103      	bne.n	80086da <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2280      	movs	r2, #128	; 0x80
 80086d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr

080086e6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800870e:	b480      	push	{r7}
 8008710:	b085      	sub	sp, #20
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800871c:	b29b      	uxth	r3, r3
 800871e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008720:	68fb      	ldr	r3, [r7, #12]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008742:	b480      	push	{r7}
 8008744:	b08b      	sub	sp, #44	; 0x2c
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	4611      	mov	r1, r2
 800874e:	461a      	mov	r2, r3
 8008750:	460b      	mov	r3, r1
 8008752:	80fb      	strh	r3, [r7, #6]
 8008754:	4613      	mov	r3, r2
 8008756:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008758:	88bb      	ldrh	r3, [r7, #4]
 800875a:	3301      	adds	r3, #1
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	005a      	lsls	r2, r3, #1
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008774:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
 800877a:	e01e      	b.n	80087ba <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	3301      	adds	r3, #1
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	021b      	lsls	r3, r3, #8
 800878a:	b21a      	sxth	r2, r3
 800878c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008790:	4313      	orrs	r3, r2
 8008792:	b21b      	sxth	r3, r3
 8008794:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	8a7a      	ldrh	r2, [r7, #18]
 800879a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	3302      	adds	r3, #2
 80087a0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	3302      	adds	r3, #2
 80087a6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	3301      	adds	r3, #1
 80087ac:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	3301      	adds	r3, #1
 80087b2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	3b01      	subs	r3, #1
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1dd      	bne.n	800877c <USB_WritePMA+0x3a>
  }
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	372c      	adds	r7, #44	; 0x2c
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bc80      	pop	{r7}
 80087ca:	4770      	bx	lr

080087cc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b08b      	sub	sp, #44	; 0x2c
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4611      	mov	r1, r2
 80087d8:	461a      	mov	r2, r3
 80087da:	460b      	mov	r3, r1
 80087dc:	80fb      	strh	r3, [r7, #6]
 80087de:	4613      	mov	r3, r2
 80087e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087e2:	88bb      	ldrh	r3, [r7, #4]
 80087e4:	085b      	lsrs	r3, r3, #1
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087f2:	88fb      	ldrh	r3, [r7, #6]
 80087f4:	005a      	lsls	r2, r3, #1
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087fe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
 8008804:	e01b      	b.n	800883e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	3302      	adds	r3, #2
 8008812:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	b2da      	uxtb	r2, r3
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	3301      	adds	r3, #1
 8008820:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	0a1b      	lsrs	r3, r3, #8
 8008826:	b2da      	uxtb	r2, r3
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	3301      	adds	r3, #1
 8008830:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	3302      	adds	r3, #2
 8008836:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	3b01      	subs	r3, #1
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e0      	bne.n	8008806 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008844:	88bb      	ldrh	r3, [r7, #4]
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d007      	beq.n	8008860 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	b29b      	uxth	r3, r3
 8008856:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	b2da      	uxtb	r2, r3
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	701a      	strb	r2, [r3, #0]
  }
}
 8008860:	bf00      	nop
 8008862:	372c      	adds	r7, #44	; 0x2c
 8008864:	46bd      	mov	sp, r7
 8008866:	bc80      	pop	{r7}
 8008868:	4770      	bx	lr

0800886a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	460b      	mov	r3, r1
 8008874:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	7c1b      	ldrb	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d115      	bne.n	80088ae <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008886:	2202      	movs	r2, #2
 8008888:	2181      	movs	r1, #129	; 0x81
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 fe31 	bl	800a4f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800889a:	2202      	movs	r2, #2
 800889c:	2101      	movs	r1, #1
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 fe27 	bl	800a4f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80088ac:	e012      	b.n	80088d4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088ae:	2340      	movs	r3, #64	; 0x40
 80088b0:	2202      	movs	r2, #2
 80088b2:	2181      	movs	r1, #129	; 0x81
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 fe1c 	bl	800a4f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088c0:	2340      	movs	r3, #64	; 0x40
 80088c2:	2202      	movs	r2, #2
 80088c4:	2101      	movs	r1, #1
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 fe13 	bl	800a4f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088d4:	2308      	movs	r3, #8
 80088d6:	2203      	movs	r2, #3
 80088d8:	2182      	movs	r1, #130	; 0x82
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fe09 	bl	800a4f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088e6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80088ea:	f001 ff29 	bl	800a740 <USBD_static_malloc>
 80088ee:	4602      	mov	r2, r0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008900:	2301      	movs	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]
 8008904:	e026      	b.n	8008954 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2200      	movs	r2, #0
 800891c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7c1b      	ldrb	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d109      	bne.n	8008944 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800893a:	2101      	movs	r1, #1
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 fec8 	bl	800a6d2 <USBD_LL_PrepareReceive>
 8008942:	e007      	b.n	8008954 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800894a:	2340      	movs	r3, #64	; 0x40
 800894c:	2101      	movs	r1, #1
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 febf 	bl	800a6d2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008954:	7bfb      	ldrb	r3, [r7, #15]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800896e:	2181      	movs	r1, #129	; 0x81
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 fde4 	bl	800a53e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800897c:	2101      	movs	r1, #1
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fddd 	bl	800a53e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800898c:	2182      	movs	r1, #130	; 0x82
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 fdd5 	bl	800a53e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00e      	beq.n	80089c2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 fecf 	bl	800a758 <USBD_static_free>
    pdev->pClassData = NULL;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089dc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d039      	beq.n	8008a6a <USBD_CDC_Setup+0x9e>
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d17f      	bne.n	8008afa <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	88db      	ldrh	r3, [r3, #6]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d029      	beq.n	8008a56 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	b25b      	sxtb	r3, r3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	da11      	bge.n	8008a30 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a18:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	88d2      	ldrh	r2, [r2, #6]
 8008a1e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a20:	6939      	ldr	r1, [r7, #16]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	88db      	ldrh	r3, [r3, #6]
 8008a26:	461a      	mov	r2, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f001 f9da 	bl	8009de2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a2e:	e06b      	b.n	8008b08 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	785a      	ldrb	r2, [r3, #1]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a46:	6939      	ldr	r1, [r7, #16]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	88db      	ldrh	r3, [r3, #6]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 f9f5 	bl	8009e3e <USBD_CtlPrepareRx>
      break;
 8008a54:	e058      	b.n	8008b08 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	7850      	ldrb	r0, [r2, #1]
 8008a62:	2200      	movs	r2, #0
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	4798      	blx	r3
      break;
 8008a68:	e04e      	b.n	8008b08 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	785b      	ldrb	r3, [r3, #1]
 8008a6e:	2b0b      	cmp	r3, #11
 8008a70:	d02e      	beq.n	8008ad0 <USBD_CDC_Setup+0x104>
 8008a72:	2b0b      	cmp	r3, #11
 8008a74:	dc38      	bgt.n	8008ae8 <USBD_CDC_Setup+0x11c>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <USBD_CDC_Setup+0xb4>
 8008a7a:	2b0a      	cmp	r3, #10
 8008a7c:	d014      	beq.n	8008aa8 <USBD_CDC_Setup+0xdc>
 8008a7e:	e033      	b.n	8008ae8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d107      	bne.n	8008a9a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008a8a:	f107 030c 	add.w	r3, r7, #12
 8008a8e:	2202      	movs	r2, #2
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f001 f9a5 	bl	8009de2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a98:	e02e      	b.n	8008af8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 f936 	bl	8009d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8008aa6:	e027      	b.n	8008af8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d107      	bne.n	8008ac2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ab2:	f107 030f 	add.w	r3, r7, #15
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 f991 	bl	8009de2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ac0:	e01a      	b.n	8008af8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f001 f922 	bl	8009d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8008aca:	2302      	movs	r3, #2
 8008acc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ace:	e013      	b.n	8008af8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d00d      	beq.n	8008af6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 f916 	bl	8009d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ae6:	e006      	b.n	8008af6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 f90f 	bl	8009d0e <USBD_CtlError>
          ret = USBD_FAIL;
 8008af0:	2302      	movs	r3, #2
 8008af2:	75fb      	strb	r3, [r7, #23]
          break;
 8008af4:	e000      	b.n	8008af8 <USBD_CDC_Setup+0x12c>
          break;
 8008af6:	bf00      	nop
      }
      break;
 8008af8:	e006      	b.n	8008b08 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f906 	bl	8009d0e <USBD_CtlError>
      ret = USBD_FAIL;
 8008b02:	2302      	movs	r3, #2
 8008b04:	75fb      	strb	r3, [r7, #23]
      break;
 8008b06:	bf00      	nop
  }

  return ret;
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b24:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b2c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d03a      	beq.n	8008bae <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b38:	78fa      	ldrb	r2, [r7, #3]
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	331c      	adds	r3, #28
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d029      	beq.n	8008ba2 <USBD_CDC_DataIn+0x90>
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	4613      	mov	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	331c      	adds	r3, #28
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	78f9      	ldrb	r1, [r7, #3]
 8008b62:	68b8      	ldr	r0, [r7, #8]
 8008b64:	460b      	mov	r3, r1
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	4403      	add	r3, r0
 8008b6e:	3320      	adds	r3, #32
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b76:	fb01 f303 	mul.w	r3, r1, r3
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d110      	bne.n	8008ba2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b80:	78fa      	ldrb	r2, [r7, #3]
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	331c      	adds	r3, #28
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b94:	78f9      	ldrb	r1, [r7, #3]
 8008b96:	2300      	movs	r3, #0
 8008b98:	2200      	movs	r2, #0
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fd76 	bl	800a68c <USBD_LL_Transmit>
 8008ba0:	e003      	b.n	8008baa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	e000      	b.n	8008bb0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008bae:	2302      	movs	r3, #2
  }
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 fda1 	bl	800a718 <USBD_LL_GetRxDataSize>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00d      	beq.n	8008c04 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4798      	blx	r3

    return USBD_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	e000      	b.n	8008c06 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c04:	2302      	movs	r3, #2
  }
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d015      	beq.n	8008c54 <USBD_CDC_EP0_RxReady+0x46>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c2e:	2bff      	cmp	r3, #255	; 0xff
 8008c30:	d010      	beq.n	8008c54 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c40:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c48:	b292      	uxth	r2, r2
 8008c4a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	22ff      	movs	r2, #255	; 0xff
 8008c50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2243      	movs	r2, #67	; 0x43
 8008c6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c6e:	4b03      	ldr	r3, [pc, #12]	; (8008c7c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bc80      	pop	{r7}
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	20000124 	.word	0x20000124

08008c80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2243      	movs	r2, #67	; 0x43
 8008c8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008c8e:	4b03      	ldr	r3, [pc, #12]	; (8008c9c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bc80      	pop	{r7}
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	200000e0 	.word	0x200000e0

08008ca0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2243      	movs	r2, #67	; 0x43
 8008cac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008cae:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bc80      	pop	{r7}
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	20000168 	.word	0x20000168

08008cc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	220a      	movs	r2, #10
 8008ccc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008cce:	4b03      	ldr	r3, [pc, #12]	; (8008cdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bc80      	pop	{r7}
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	2000009c 	.word	0x2000009c

08008ce0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008cea:	2302      	movs	r3, #2
 8008cec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr

08008d0c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d20:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d2a:	88fa      	ldrh	r2, [r7, #6]
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr

08008d3e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bc80      	pop	{r7}
 8008d62:	4770      	bx	lr

08008d64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d017      	beq.n	8008dae <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	7c1b      	ldrb	r3, [r3, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d90:	2101      	movs	r1, #1
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fc9d 	bl	800a6d2 <USBD_LL_PrepareReceive>
 8008d98:	e007      	b.n	8008daa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	2101      	movs	r1, #1
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 fc94 	bl	800a6d2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e000      	b.n	8008db0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008dae:	2302      	movs	r3, #2
  }
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e01a      	b.n	8008e06 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	79fa      	ldrb	r2, [r7, #7]
 8008dfc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f001 fb02 	bl	800a408 <USBD_LL_Init>

  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b085      	sub	sp, #20
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d006      	beq.n	8008e30 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]
 8008e2e:	e001      	b.n	8008e34 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e30:	2302      	movs	r3, #2
 8008e32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bc80      	pop	{r7}
 8008e3e:	4770      	bx	lr

08008e40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 fb37 	bl	800a4bc <USBD_LL_Start>

  return USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr

08008e6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00c      	beq.n	8008ea0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	4798      	blx	r3
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	78fa      	ldrb	r2, [r7, #3]
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3

  return USBD_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fed7 	bl	8009c96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d016      	beq.n	8008f3a <USBD_LL_SetupStage+0x6a>
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d81c      	bhi.n	8008f4a <USBD_LL_SetupStage+0x7a>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <USBD_LL_SetupStage+0x4a>
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d008      	beq.n	8008f2a <USBD_LL_SetupStage+0x5a>
 8008f18:	e017      	b.n	8008f4a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f9ca 	bl	80092bc <USBD_StdDevReq>
      break;
 8008f28:	e01a      	b.n	8008f60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa2c 	bl	8009390 <USBD_StdItfReq>
      break;
 8008f38:	e012      	b.n	8008f60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa6c 	bl	8009420 <USBD_StdEPReq>
      break;
 8008f48:	e00a      	b.n	8008f60 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 fb0f 	bl	800a57c <USBD_LL_StallEP>
      break;
 8008f5e:	bf00      	nop
  }

  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b086      	sub	sp, #24
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	460b      	mov	r3, r1
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f78:	7afb      	ldrb	r3, [r7, #11]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d14b      	bne.n	8009016 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008f84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d134      	bne.n	8008ffa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d919      	bls.n	8008fd0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	1ad2      	subs	r2, r2, r3
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d203      	bcs.n	8008fbe <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	e002      	b.n	8008fc4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 ff56 	bl	8009e7a <USBD_CtlContinueRx>
 8008fce:	e038      	b.n	8009042 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d105      	bne.n	8008ff2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 ff53 	bl	8009e9e <USBD_CtlSendStatus>
 8008ff8:	e023      	b.n	8009042 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009000:	2b05      	cmp	r3, #5
 8009002:	d11e      	bne.n	8009042 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800900c:	2100      	movs	r1, #0
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f001 fab4 	bl	800a57c <USBD_LL_StallEP>
 8009014:	e015      	b.n	8009042 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00d      	beq.n	800903e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009028:	2b03      	cmp	r3, #3
 800902a:	d108      	bne.n	800903e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	7afa      	ldrb	r2, [r7, #11]
 8009036:	4611      	mov	r1, r2
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	4798      	blx	r3
 800903c:	e001      	b.n	8009042 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800903e:	2302      	movs	r3, #2
 8009040:	e000      	b.n	8009044 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	460b      	mov	r3, r1
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800905a:	7afb      	ldrb	r3, [r7, #11]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d17f      	bne.n	8009160 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3314      	adds	r3, #20
 8009064:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800906c:	2b02      	cmp	r3, #2
 800906e:	d15c      	bne.n	800912a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	429a      	cmp	r2, r3
 800907a:	d915      	bls.n	80090a8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	1ad2      	subs	r2, r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	b29b      	uxth	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 fec0 	bl	8009e1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800909a:	2300      	movs	r3, #0
 800909c:	2200      	movs	r2, #0
 800909e:	2100      	movs	r1, #0
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f001 fb16 	bl	800a6d2 <USBD_LL_PrepareReceive>
 80090a6:	e04e      	b.n	8009146 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	6912      	ldr	r2, [r2, #16]
 80090b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80090b4:	fb01 f202 	mul.w	r2, r1, r2
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d11c      	bne.n	80090f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d316      	bcc.n	80090f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d20f      	bcs.n	80090f8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090d8:	2200      	movs	r2, #0
 80090da:	2100      	movs	r1, #0
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 fe9c 	bl	8009e1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ea:	2300      	movs	r3, #0
 80090ec:	2200      	movs	r2, #0
 80090ee:	2100      	movs	r1, #0
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f001 faee 	bl	800a6d2 <USBD_LL_PrepareReceive>
 80090f6:	e026      	b.n	8009146 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00a      	beq.n	800911a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800910a:	2b03      	cmp	r3, #3
 800910c:	d105      	bne.n	800911a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800911a:	2180      	movs	r1, #128	; 0x80
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f001 fa2d 	bl	800a57c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 fece 	bl	8009ec4 <USBD_CtlReceiveStatus>
 8009128:	e00d      	b.n	8009146 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009130:	2b04      	cmp	r3, #4
 8009132:	d004      	beq.n	800913e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800913a:	2b00      	cmp	r3, #0
 800913c:	d103      	bne.n	8009146 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800913e:	2180      	movs	r1, #128	; 0x80
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f001 fa1b 	bl	800a57c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800914c:	2b01      	cmp	r3, #1
 800914e:	d11d      	bne.n	800918c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f7ff fe81 	bl	8008e58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800915e:	e015      	b.n	800918c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00d      	beq.n	8009188 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009172:	2b03      	cmp	r3, #3
 8009174:	d108      	bne.n	8009188 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	7afa      	ldrb	r2, [r7, #11]
 8009180:	4611      	mov	r1, r2
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	4798      	blx	r3
 8009186:	e001      	b.n	800918c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009188:	2302      	movs	r3, #2
 800918a:	e000      	b.n	800918e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	2200      	movs	r2, #0
 80091a2:	2100      	movs	r1, #0
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 f9a4 	bl	800a4f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2240      	movs	r2, #64	; 0x40
 80091b6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091ba:	2340      	movs	r3, #64	; 0x40
 80091bc:	2200      	movs	r2, #0
 80091be:	2180      	movs	r1, #128	; 0x80
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 f996 	bl	800a4f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2240      	movs	r2, #64	; 0x40
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d009      	beq.n	800920e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	6852      	ldr	r2, [r2, #4]
 8009206:	b2d2      	uxtb	r2, r2
 8009208:	4611      	mov	r1, r2
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	4798      	blx	r3
  }

  return USBD_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	78fa      	ldrb	r2, [r7, #3]
 8009228:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr

08009236 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2204      	movs	r2, #4
 800924e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr

0800925e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800925e:	b480      	push	{r7}
 8009260:	b083      	sub	sp, #12
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800926c:	2b04      	cmp	r3, #4
 800926e:	d105      	bne.n	800927c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009296:	2b03      	cmp	r3, #3
 8009298:	d10b      	bne.n	80092b2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092d2:	2b40      	cmp	r3, #64	; 0x40
 80092d4:	d005      	beq.n	80092e2 <USBD_StdDevReq+0x26>
 80092d6:	2b40      	cmp	r3, #64	; 0x40
 80092d8:	d84f      	bhi.n	800937a <USBD_StdDevReq+0xbe>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <USBD_StdDevReq+0x36>
 80092de:	2b20      	cmp	r3, #32
 80092e0:	d14b      	bne.n	800937a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	4798      	blx	r3
      break;
 80092f0:	e048      	b.n	8009384 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	2b09      	cmp	r3, #9
 80092f8:	d839      	bhi.n	800936e <USBD_StdDevReq+0xb2>
 80092fa:	a201      	add	r2, pc, #4	; (adr r2, 8009300 <USBD_StdDevReq+0x44>)
 80092fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009300:	08009351 	.word	0x08009351
 8009304:	08009365 	.word	0x08009365
 8009308:	0800936f 	.word	0x0800936f
 800930c:	0800935b 	.word	0x0800935b
 8009310:	0800936f 	.word	0x0800936f
 8009314:	08009333 	.word	0x08009333
 8009318:	08009329 	.word	0x08009329
 800931c:	0800936f 	.word	0x0800936f
 8009320:	08009347 	.word	0x08009347
 8009324:	0800933d 	.word	0x0800933d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f9dc 	bl	80096e8 <USBD_GetDescriptor>
          break;
 8009330:	e022      	b.n	8009378 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fb3f 	bl	80099b8 <USBD_SetAddress>
          break;
 800933a:	e01d      	b.n	8009378 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fb7e 	bl	8009a40 <USBD_SetConfig>
          break;
 8009344:	e018      	b.n	8009378 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fc07 	bl	8009b5c <USBD_GetConfig>
          break;
 800934e:	e013      	b.n	8009378 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fc37 	bl	8009bc6 <USBD_GetStatus>
          break;
 8009358:	e00e      	b.n	8009378 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fc65 	bl	8009c2c <USBD_SetFeature>
          break;
 8009362:	e009      	b.n	8009378 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fc74 	bl	8009c54 <USBD_ClrFeature>
          break;
 800936c:	e004      	b.n	8009378 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fccc 	bl	8009d0e <USBD_CtlError>
          break;
 8009376:	bf00      	nop
      }
      break;
 8009378:	e004      	b.n	8009384 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fcc6 	bl	8009d0e <USBD_CtlError>
      break;
 8009382:	bf00      	nop
  }

  return ret;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop

08009390 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093a6:	2b40      	cmp	r3, #64	; 0x40
 80093a8:	d005      	beq.n	80093b6 <USBD_StdItfReq+0x26>
 80093aa:	2b40      	cmp	r3, #64	; 0x40
 80093ac:	d82e      	bhi.n	800940c <USBD_StdItfReq+0x7c>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <USBD_StdItfReq+0x26>
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	d12a      	bne.n	800940c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093bc:	3b01      	subs	r3, #1
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d81d      	bhi.n	80093fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	889b      	ldrh	r3, [r3, #4]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d813      	bhi.n	80093f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
 80093da:	4603      	mov	r3, r0
 80093dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	88db      	ldrh	r3, [r3, #6]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d110      	bne.n	8009408 <USBD_StdItfReq+0x78>
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10d      	bne.n	8009408 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fd56 	bl	8009e9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093f2:	e009      	b.n	8009408 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fc89 	bl	8009d0e <USBD_CtlError>
          break;
 80093fc:	e004      	b.n	8009408 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fc84 	bl	8009d0e <USBD_CtlError>
          break;
 8009406:	e000      	b.n	800940a <USBD_StdItfReq+0x7a>
          break;
 8009408:	bf00      	nop
      }
      break;
 800940a:	e004      	b.n	8009416 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fc7d 	bl	8009d0e <USBD_CtlError>
      break;
 8009414:	bf00      	nop
  }

  return USBD_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	889b      	ldrh	r3, [r3, #4]
 8009432:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800943c:	2b40      	cmp	r3, #64	; 0x40
 800943e:	d007      	beq.n	8009450 <USBD_StdEPReq+0x30>
 8009440:	2b40      	cmp	r3, #64	; 0x40
 8009442:	f200 8146 	bhi.w	80096d2 <USBD_StdEPReq+0x2b2>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <USBD_StdEPReq+0x40>
 800944a:	2b20      	cmp	r3, #32
 800944c:	f040 8141 	bne.w	80096d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	4798      	blx	r3
      break;
 800945e:	e13d      	b.n	80096dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009468:	2b20      	cmp	r3, #32
 800946a:	d10a      	bne.n	8009482 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	4798      	blx	r3
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	e12d      	b.n	80096de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	2b03      	cmp	r3, #3
 8009488:	d007      	beq.n	800949a <USBD_StdEPReq+0x7a>
 800948a:	2b03      	cmp	r3, #3
 800948c:	f300 811b 	bgt.w	80096c6 <USBD_StdEPReq+0x2a6>
 8009490:	2b00      	cmp	r3, #0
 8009492:	d072      	beq.n	800957a <USBD_StdEPReq+0x15a>
 8009494:	2b01      	cmp	r3, #1
 8009496:	d03a      	beq.n	800950e <USBD_StdEPReq+0xee>
 8009498:	e115      	b.n	80096c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d002      	beq.n	80094aa <USBD_StdEPReq+0x8a>
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d015      	beq.n	80094d4 <USBD_StdEPReq+0xb4>
 80094a8:	e02b      	b.n	8009502 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00c      	beq.n	80094ca <USBD_StdEPReq+0xaa>
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b80      	cmp	r3, #128	; 0x80
 80094b4:	d009      	beq.n	80094ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 f85e 	bl	800a57c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094c0:	2180      	movs	r1, #128	; 0x80
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 f85a 	bl	800a57c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094c8:	e020      	b.n	800950c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fc1e 	bl	8009d0e <USBD_CtlError>
              break;
 80094d2:	e01b      	b.n	800950c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	885b      	ldrh	r3, [r3, #2]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10e      	bne.n	80094fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00b      	beq.n	80094fa <USBD_StdEPReq+0xda>
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b80      	cmp	r3, #128	; 0x80
 80094e6:	d008      	beq.n	80094fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	88db      	ldrh	r3, [r3, #6]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 f841 	bl	800a57c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fccf 	bl	8009e9e <USBD_CtlSendStatus>

              break;
 8009500:	e004      	b.n	800950c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fc02 	bl	8009d0e <USBD_CtlError>
              break;
 800950a:	bf00      	nop
          }
          break;
 800950c:	e0e0      	b.n	80096d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009514:	2b02      	cmp	r3, #2
 8009516:	d002      	beq.n	800951e <USBD_StdEPReq+0xfe>
 8009518:	2b03      	cmp	r3, #3
 800951a:	d015      	beq.n	8009548 <USBD_StdEPReq+0x128>
 800951c:	e026      	b.n	800956c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00c      	beq.n	800953e <USBD_StdEPReq+0x11e>
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b80      	cmp	r3, #128	; 0x80
 8009528:	d009      	beq.n	800953e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 f824 	bl	800a57c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009534:	2180      	movs	r1, #128	; 0x80
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 f820 	bl	800a57c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800953c:	e01c      	b.n	8009578 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fbe4 	bl	8009d0e <USBD_CtlError>
              break;
 8009546:	e017      	b.n	8009578 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	885b      	ldrh	r3, [r3, #2]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d112      	bne.n	8009576 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 f82b 	bl	800a5ba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fc9a 	bl	8009e9e <USBD_CtlSendStatus>
              }
              break;
 800956a:	e004      	b.n	8009576 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fbcd 	bl	8009d0e <USBD_CtlError>
              break;
 8009574:	e000      	b.n	8009578 <USBD_StdEPReq+0x158>
              break;
 8009576:	bf00      	nop
          }
          break;
 8009578:	e0aa      	b.n	80096d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009580:	2b02      	cmp	r3, #2
 8009582:	d002      	beq.n	800958a <USBD_StdEPReq+0x16a>
 8009584:	2b03      	cmp	r3, #3
 8009586:	d032      	beq.n	80095ee <USBD_StdEPReq+0x1ce>
 8009588:	e097      	b.n	80096ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d007      	beq.n	80095a0 <USBD_StdEPReq+0x180>
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2b80      	cmp	r3, #128	; 0x80
 8009594:	d004      	beq.n	80095a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fbb8 	bl	8009d0e <USBD_CtlError>
                break;
 800959e:	e091      	b.n	80096c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	da0b      	bge.n	80095c0 <USBD_StdEPReq+0x1a0>
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	3310      	adds	r3, #16
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	4413      	add	r3, r2
 80095bc:	3304      	adds	r3, #4
 80095be:	e00b      	b.n	80095d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	4413      	add	r3, r2
 80095d6:	3304      	adds	r3, #4
 80095d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2202      	movs	r2, #2
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fbfb 	bl	8009de2 <USBD_CtlSendData>
              break;
 80095ec:	e06a      	b.n	80096c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	da11      	bge.n	800961a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	f003 020f 	and.w	r2, r3, #15
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	3318      	adds	r3, #24
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d117      	bne.n	8009640 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fb7b 	bl	8009d0e <USBD_CtlError>
                  break;
 8009618:	e054      	b.n	80096c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	f003 020f 	and.w	r2, r3, #15
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	440b      	add	r3, r1
 800962c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d104      	bne.n	8009640 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fb68 	bl	8009d0e <USBD_CtlError>
                  break;
 800963e:	e041      	b.n	80096c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009640:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009644:	2b00      	cmp	r3, #0
 8009646:	da0b      	bge.n	8009660 <USBD_StdEPReq+0x240>
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	3310      	adds	r3, #16
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	4413      	add	r3, r2
 800965c:	3304      	adds	r3, #4
 800965e:	e00b      	b.n	8009678 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009666:	4613      	mov	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	4413      	add	r3, r2
 8009676:	3304      	adds	r3, #4
 8009678:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <USBD_StdEPReq+0x266>
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	2b80      	cmp	r3, #128	; 0x80
 8009684:	d103      	bne.n	800968e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	e00e      	b.n	80096ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 ffb0 	bl	800a5f8 <USBD_LL_IsStallEP>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2201      	movs	r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	e002      	b.n	80096ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2202      	movs	r2, #2
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fb95 	bl	8009de2 <USBD_CtlSendData>
              break;
 80096b8:	e004      	b.n	80096c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fb26 	bl	8009d0e <USBD_CtlError>
              break;
 80096c2:	bf00      	nop
          }
          break;
 80096c4:	e004      	b.n	80096d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fb20 	bl	8009d0e <USBD_CtlError>
          break;
 80096ce:	bf00      	nop
      }
      break;
 80096d0:	e004      	b.n	80096dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fb1a 	bl	8009d0e <USBD_CtlError>
      break;
 80096da:	bf00      	nop
  }

  return ret;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	0a1b      	lsrs	r3, r3, #8
 8009704:	b29b      	uxth	r3, r3
 8009706:	3b01      	subs	r3, #1
 8009708:	2b06      	cmp	r3, #6
 800970a:	f200 8128 	bhi.w	800995e <USBD_GetDescriptor+0x276>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <USBD_GetDescriptor+0x2c>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009731 	.word	0x08009731
 8009718:	08009749 	.word	0x08009749
 800971c:	08009789 	.word	0x08009789
 8009720:	0800995f 	.word	0x0800995f
 8009724:	0800995f 	.word	0x0800995f
 8009728:	080098ff 	.word	0x080098ff
 800972c:	0800992b 	.word	0x0800992b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
      break;
 8009746:	e112      	b.n	800996e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7c1b      	ldrb	r3, [r3, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10d      	bne.n	800976c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009758:	f107 0208 	add.w	r2, r7, #8
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3301      	adds	r3, #1
 8009766:	2202      	movs	r2, #2
 8009768:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800976a:	e100      	b.n	800996e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009774:	f107 0208 	add.w	r2, r7, #8
 8009778:	4610      	mov	r0, r2
 800977a:	4798      	blx	r3
 800977c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3301      	adds	r3, #1
 8009782:	2202      	movs	r2, #2
 8009784:	701a      	strb	r2, [r3, #0]
      break;
 8009786:	e0f2      	b.n	800996e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	885b      	ldrh	r3, [r3, #2]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b05      	cmp	r3, #5
 8009790:	f200 80ac 	bhi.w	80098ec <USBD_GetDescriptor+0x204>
 8009794:	a201      	add	r2, pc, #4	; (adr r2, 800979c <USBD_GetDescriptor+0xb4>)
 8009796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979a:	bf00      	nop
 800979c:	080097b5 	.word	0x080097b5
 80097a0:	080097e9 	.word	0x080097e9
 80097a4:	0800981d 	.word	0x0800981d
 80097a8:	08009851 	.word	0x08009851
 80097ac:	08009885 	.word	0x08009885
 80097b0:	080098b9 	.word	0x080098b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7c12      	ldrb	r2, [r2, #16]
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d6:	e091      	b.n	80098fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa97 	bl	8009d0e <USBD_CtlError>
            err++;
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	3301      	adds	r3, #1
 80097e4:	72fb      	strb	r3, [r7, #11]
          break;
 80097e6:	e089      	b.n	80098fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00b      	beq.n	800980c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	7c12      	ldrb	r2, [r2, #16]
 8009800:	f107 0108 	add.w	r1, r7, #8
 8009804:	4610      	mov	r0, r2
 8009806:	4798      	blx	r3
 8009808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980a:	e077      	b.n	80098fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa7d 	bl	8009d0e <USBD_CtlError>
            err++;
 8009814:	7afb      	ldrb	r3, [r7, #11]
 8009816:	3301      	adds	r3, #1
 8009818:	72fb      	strb	r3, [r7, #11]
          break;
 800981a:	e06f      	b.n	80098fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00b      	beq.n	8009840 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	7c12      	ldrb	r2, [r2, #16]
 8009834:	f107 0108 	add.w	r1, r7, #8
 8009838:	4610      	mov	r0, r2
 800983a:	4798      	blx	r3
 800983c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800983e:	e05d      	b.n	80098fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fa63 	bl	8009d0e <USBD_CtlError>
            err++;
 8009848:	7afb      	ldrb	r3, [r7, #11]
 800984a:	3301      	adds	r3, #1
 800984c:	72fb      	strb	r3, [r7, #11]
          break;
 800984e:	e055      	b.n	80098fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00b      	beq.n	8009874 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	7c12      	ldrb	r2, [r2, #16]
 8009868:	f107 0108 	add.w	r1, r7, #8
 800986c:	4610      	mov	r0, r2
 800986e:	4798      	blx	r3
 8009870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009872:	e043      	b.n	80098fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fa49 	bl	8009d0e <USBD_CtlError>
            err++;
 800987c:	7afb      	ldrb	r3, [r7, #11]
 800987e:	3301      	adds	r3, #1
 8009880:	72fb      	strb	r3, [r7, #11]
          break;
 8009882:	e03b      	b.n	80098fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00b      	beq.n	80098a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	7c12      	ldrb	r2, [r2, #16]
 800989c:	f107 0108 	add.w	r1, r7, #8
 80098a0:	4610      	mov	r0, r2
 80098a2:	4798      	blx	r3
 80098a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098a6:	e029      	b.n	80098fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fa2f 	bl	8009d0e <USBD_CtlError>
            err++;
 80098b0:	7afb      	ldrb	r3, [r7, #11]
 80098b2:	3301      	adds	r3, #1
 80098b4:	72fb      	strb	r3, [r7, #11]
          break;
 80098b6:	e021      	b.n	80098fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	7c12      	ldrb	r2, [r2, #16]
 80098d0:	f107 0108 	add.w	r1, r7, #8
 80098d4:	4610      	mov	r0, r2
 80098d6:	4798      	blx	r3
 80098d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098da:	e00f      	b.n	80098fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fa15 	bl	8009d0e <USBD_CtlError>
            err++;
 80098e4:	7afb      	ldrb	r3, [r7, #11]
 80098e6:	3301      	adds	r3, #1
 80098e8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ea:	e007      	b.n	80098fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa0d 	bl	8009d0e <USBD_CtlError>
          err++;
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	3301      	adds	r3, #1
 80098f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80098fa:	e038      	b.n	800996e <USBD_GetDescriptor+0x286>
 80098fc:	e037      	b.n	800996e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	7c1b      	ldrb	r3, [r3, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d109      	bne.n	800991a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990e:	f107 0208 	add.w	r2, r7, #8
 8009912:	4610      	mov	r0, r2
 8009914:	4798      	blx	r3
 8009916:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009918:	e029      	b.n	800996e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f9f6 	bl	8009d0e <USBD_CtlError>
        err++;
 8009922:	7afb      	ldrb	r3, [r7, #11]
 8009924:	3301      	adds	r3, #1
 8009926:	72fb      	strb	r3, [r7, #11]
      break;
 8009928:	e021      	b.n	800996e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	7c1b      	ldrb	r3, [r3, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10d      	bne.n	800994e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993a:	f107 0208 	add.w	r2, r7, #8
 800993e:	4610      	mov	r0, r2
 8009940:	4798      	blx	r3
 8009942:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3301      	adds	r3, #1
 8009948:	2207      	movs	r2, #7
 800994a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800994c:	e00f      	b.n	800996e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f9dc 	bl	8009d0e <USBD_CtlError>
        err++;
 8009956:	7afb      	ldrb	r3, [r7, #11]
 8009958:	3301      	adds	r3, #1
 800995a:	72fb      	strb	r3, [r7, #11]
      break;
 800995c:	e007      	b.n	800996e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f9d4 	bl	8009d0e <USBD_CtlError>
      err++;
 8009966:	7afb      	ldrb	r3, [r7, #11]
 8009968:	3301      	adds	r3, #1
 800996a:	72fb      	strb	r3, [r7, #11]
      break;
 800996c:	bf00      	nop
  }

  if (err != 0U)
 800996e:	7afb      	ldrb	r3, [r7, #11]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d11c      	bne.n	80099ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009974:	893b      	ldrh	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d011      	beq.n	800999e <USBD_GetDescriptor+0x2b6>
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	88db      	ldrh	r3, [r3, #6]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00d      	beq.n	800999e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88da      	ldrh	r2, [r3, #6]
 8009986:	893b      	ldrh	r3, [r7, #8]
 8009988:	4293      	cmp	r3, r2
 800998a:	bf28      	it	cs
 800998c:	4613      	movcs	r3, r2
 800998e:	b29b      	uxth	r3, r3
 8009990:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009992:	893b      	ldrh	r3, [r7, #8]
 8009994:	461a      	mov	r2, r3
 8009996:	68f9      	ldr	r1, [r7, #12]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fa22 	bl	8009de2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	88db      	ldrh	r3, [r3, #6]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d104      	bne.n	80099b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa79 	bl	8009e9e <USBD_CtlSendStatus>
 80099ac:	e000      	b.n	80099b0 <USBD_GetDescriptor+0x2c8>
    return;
 80099ae:	bf00      	nop
    }
  }
}
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop

080099b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	889b      	ldrh	r3, [r3, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d130      	bne.n	8009a2c <USBD_SetAddress+0x74>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88db      	ldrh	r3, [r3, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d12c      	bne.n	8009a2c <USBD_SetAddress+0x74>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	2b7f      	cmp	r3, #127	; 0x7f
 80099d8:	d828      	bhi.n	8009a2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	885b      	ldrh	r3, [r3, #2]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d104      	bne.n	80099fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f98b 	bl	8009d0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099f8:	e01d      	b.n	8009a36 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	7bfa      	ldrb	r2, [r7, #15]
 80099fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fe21 	bl	800a64e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fa46 	bl	8009e9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a12:	7bfb      	ldrb	r3, [r7, #15]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d004      	beq.n	8009a22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a20:	e009      	b.n	8009a36 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2a:	e004      	b.n	8009a36 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f96d 	bl	8009d0e <USBD_CtlError>
  }
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	885b      	ldrh	r3, [r3, #2]
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	4b41      	ldr	r3, [pc, #260]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a54:	4b40      	ldr	r3, [pc, #256]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d904      	bls.n	8009a66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f955 	bl	8009d0e <USBD_CtlError>
 8009a64:	e075      	b.n	8009b52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d002      	beq.n	8009a76 <USBD_SetConfig+0x36>
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d023      	beq.n	8009abc <USBD_SetConfig+0x7c>
 8009a74:	e062      	b.n	8009b3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009a76:	4b38      	ldr	r3, [pc, #224]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d01a      	beq.n	8009ab4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009a7e:	4b36      	ldr	r3, [pc, #216]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a90:	4b31      	ldr	r3, [pc, #196]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff f9e8 	bl	8008e6c <USBD_SetClassConfig>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d104      	bne.n	8009aac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f932 	bl	8009d0e <USBD_CtlError>
            return;
 8009aaa:	e052      	b.n	8009b52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f9f6 	bl	8009e9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ab2:	e04e      	b.n	8009b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f9f2 	bl	8009e9e <USBD_CtlSendStatus>
        break;
 8009aba:	e04a      	b.n	8009b52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009abc:	4b26      	ldr	r3, [pc, #152]	; (8009b58 <USBD_SetConfig+0x118>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d112      	bne.n	8009aea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009acc:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <USBD_SetConfig+0x118>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009ad6:	4b20      	ldr	r3, [pc, #128]	; (8009b58 <USBD_SetConfig+0x118>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff f9e4 	bl	8008eaa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f9db 	bl	8009e9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ae8:	e033      	b.n	8009b52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009aea:	4b1b      	ldr	r3, [pc, #108]	; (8009b58 <USBD_SetConfig+0x118>)
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d01d      	beq.n	8009b34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff f9d2 	bl	8008eaa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b06:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <USBD_SetConfig+0x118>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b10:	4b11      	ldr	r3, [pc, #68]	; (8009b58 <USBD_SetConfig+0x118>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff f9a8 	bl	8008e6c <USBD_SetClassConfig>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d104      	bne.n	8009b2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f8f2 	bl	8009d0e <USBD_CtlError>
            return;
 8009b2a:	e012      	b.n	8009b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f9b6 	bl	8009e9e <USBD_CtlSendStatus>
        break;
 8009b32:	e00e      	b.n	8009b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f9b2 	bl	8009e9e <USBD_CtlSendStatus>
        break;
 8009b3a:	e00a      	b.n	8009b52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f8e5 	bl	8009d0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b44:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <USBD_SetConfig+0x118>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff f9ad 	bl	8008eaa <USBD_ClrClassConfig>
        break;
 8009b50:	bf00      	nop
    }
  }
}
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	200003d8 	.word	0x200003d8

08009b5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	88db      	ldrh	r3, [r3, #6]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d004      	beq.n	8009b78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f8cc 	bl	8009d0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b76:	e022      	b.n	8009bbe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	dc02      	bgt.n	8009b88 <USBD_GetConfig+0x2c>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	dc03      	bgt.n	8009b8e <USBD_GetConfig+0x32>
 8009b86:	e015      	b.n	8009bb4 <USBD_GetConfig+0x58>
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d00b      	beq.n	8009ba4 <USBD_GetConfig+0x48>
 8009b8c:	e012      	b.n	8009bb4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3308      	adds	r3, #8
 8009b98:	2201      	movs	r2, #1
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f920 	bl	8009de2 <USBD_CtlSendData>
        break;
 8009ba2:	e00c      	b.n	8009bbe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	2201      	movs	r2, #1
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f918 	bl	8009de2 <USBD_CtlSendData>
        break;
 8009bb2:	e004      	b.n	8009bbe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f8a9 	bl	8009d0e <USBD_CtlError>
        break;
 8009bbc:	bf00      	nop
}
 8009bbe:	bf00      	nop
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b082      	sub	sp, #8
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d81e      	bhi.n	8009c1a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	88db      	ldrh	r3, [r3, #6]
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d004      	beq.n	8009bee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f891 	bl	8009d0e <USBD_CtlError>
        break;
 8009bec:	e01a      	b.n	8009c24 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f043 0202 	orr.w	r2, r3, #2
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	330c      	adds	r3, #12
 8009c0e:	2202      	movs	r2, #2
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f8e5 	bl	8009de2 <USBD_CtlSendData>
      break;
 8009c18:	e004      	b.n	8009c24 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f876 	bl	8009d0e <USBD_CtlError>
      break;
 8009c22:	bf00      	nop
  }
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	885b      	ldrh	r3, [r3, #2]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d106      	bne.n	8009c4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f929 	bl	8009e9e <USBD_CtlSendStatus>
  }
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c64:	3b01      	subs	r3, #1
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d80b      	bhi.n	8009c82 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	885b      	ldrh	r3, [r3, #2]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d10c      	bne.n	8009c8c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f90f 	bl	8009e9e <USBD_CtlSendStatus>
      }
      break;
 8009c80:	e004      	b.n	8009c8c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f842 	bl	8009d0e <USBD_CtlError>
      break;
 8009c8a:	e000      	b.n	8009c8e <USBD_ClrFeature+0x3a>
      break;
 8009c8c:	bf00      	nop
  }
}
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	781a      	ldrb	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	785a      	ldrb	r2, [r3, #1]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	3303      	adds	r3, #3
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	4413      	add	r3, r2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	3305      	adds	r3, #5
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	021b      	lsls	r3, r3, #8
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	4413      	add	r3, r2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	3306      	adds	r3, #6
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	3307      	adds	r3, #7
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	021b      	lsls	r3, r3, #8
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	4413      	add	r3, r2
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	80da      	strh	r2, [r3, #6]

}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bc80      	pop	{r7}
 8009d0c:	4770      	bx	lr

08009d0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d18:	2180      	movs	r1, #128	; 0x80
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fc2e 	bl	800a57c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d20:	2100      	movs	r1, #0
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fc2a 	bl	800a57c <USBD_LL_StallEP>
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d032      	beq.n	8009dac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f000 f834 	bl	8009db4 <USBD_GetLen>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	3301      	adds	r3, #1
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	75fa      	strb	r2, [r7, #23]
 8009d60:	461a      	mov	r2, r3
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4413      	add	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	7812      	ldrb	r2, [r2, #0]
 8009d6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	75fa      	strb	r2, [r7, #23]
 8009d72:	461a      	mov	r2, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	4413      	add	r3, r2
 8009d78:	2203      	movs	r2, #3
 8009d7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009d7c:	e012      	b.n	8009da4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	60fa      	str	r2, [r7, #12]
 8009d84:	7dfa      	ldrb	r2, [r7, #23]
 8009d86:	1c51      	adds	r1, r2, #1
 8009d88:	75f9      	strb	r1, [r7, #23]
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	440a      	add	r2, r1
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	75fa      	strb	r2, [r7, #23]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	4413      	add	r3, r2
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e8      	bne.n	8009d7e <USBD_GetString+0x4e>
    }
  }
}
 8009dac:	bf00      	nop
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009dc0:	e005      	b.n	8009dce <USBD_GetLen+0x1a>
  {
    len++;
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1f5      	bne.n	8009dc2 <USBD_GetLen+0xe>
  }

  return len;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bc80      	pop	{r7}
 8009de0:	4770      	bx	lr

08009de2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b084      	sub	sp, #16
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	4613      	mov	r3, r2
 8009dee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2202      	movs	r2, #2
 8009df4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009df8:	88fa      	ldrh	r2, [r7, #6]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009dfe:	88fa      	ldrh	r2, [r7, #6]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e04:	88fb      	ldrh	r3, [r7, #6]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	2100      	movs	r1, #0
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f000 fc3e 	bl	800a68c <USBD_LL_Transmit>

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	4613      	mov	r3, r2
 8009e26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e28:	88fb      	ldrh	r3, [r7, #6]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f000 fc2c 	bl	800a68c <USBD_LL_Transmit>

  return USBD_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	60f8      	str	r0, [r7, #12]
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2203      	movs	r2, #3
 8009e50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e54:	88fa      	ldrh	r2, [r7, #6]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e5c:	88fa      	ldrh	r2, [r7, #6]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e64:	88fb      	ldrh	r3, [r7, #6]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	2100      	movs	r1, #0
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 fc31 	bl	800a6d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	4613      	mov	r3, r2
 8009e86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fc1f 	bl	800a6d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2204      	movs	r2, #4
 8009eaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fbe9 	bl	800a68c <USBD_LL_Transmit>

  return USBD_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2205      	movs	r2, #5
 8009ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fbf9 	bl	800a6d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	4912      	ldr	r1, [pc, #72]	; (8009f3c <MX_USB_DEVICE_Init+0x50>)
 8009ef4:	4812      	ldr	r0, [pc, #72]	; (8009f40 <MX_USB_DEVICE_Init+0x54>)
 8009ef6:	f7fe ff5f 	bl	8008db8 <USBD_Init>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f00:	f7f7 f956 	bl	80011b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f04:	490f      	ldr	r1, [pc, #60]	; (8009f44 <MX_USB_DEVICE_Init+0x58>)
 8009f06:	480e      	ldr	r0, [pc, #56]	; (8009f40 <MX_USB_DEVICE_Init+0x54>)
 8009f08:	f7fe ff81 	bl	8008e0e <USBD_RegisterClass>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f12:	f7f7 f94d 	bl	80011b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f16:	490c      	ldr	r1, [pc, #48]	; (8009f48 <MX_USB_DEVICE_Init+0x5c>)
 8009f18:	4809      	ldr	r0, [pc, #36]	; (8009f40 <MX_USB_DEVICE_Init+0x54>)
 8009f1a:	f7fe fee1 	bl	8008ce0 <USBD_CDC_RegisterInterface>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f24:	f7f7 f944 	bl	80011b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f28:	4805      	ldr	r0, [pc, #20]	; (8009f40 <MX_USB_DEVICE_Init+0x54>)
 8009f2a:	f7fe ff89 	bl	8008e40 <USBD_Start>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f34:	f7f7 f93c 	bl	80011b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f38:	bf00      	nop
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	200001bc 	.word	0x200001bc
 8009f40:	200003dc 	.word	0x200003dc
 8009f44:	200000a8 	.word	0x200000a8
 8009f48:	200001ac 	.word	0x200001ac

08009f4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f50:	2200      	movs	r2, #0
 8009f52:	4905      	ldr	r1, [pc, #20]	; (8009f68 <CDC_Init_FS+0x1c>)
 8009f54:	4805      	ldr	r0, [pc, #20]	; (8009f6c <CDC_Init_FS+0x20>)
 8009f56:	f7fe fed9 	bl	8008d0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f5a:	4905      	ldr	r1, [pc, #20]	; (8009f70 <CDC_Init_FS+0x24>)
 8009f5c:	4803      	ldr	r0, [pc, #12]	; (8009f6c <CDC_Init_FS+0x20>)
 8009f5e:	f7fe feee 	bl	8008d3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20000aa0 	.word	0x20000aa0
 8009f6c:	200003dc 	.word	0x200003dc
 8009f70:	200006a0 	.word	0x200006a0

08009f74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bc80      	pop	{r7}
 8009f80:	4770      	bx	lr
	...

08009f84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	71fb      	strb	r3, [r7, #7]
 8009f90:	4613      	mov	r3, r2
 8009f92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f94:	79fb      	ldrb	r3, [r7, #7]
 8009f96:	2b23      	cmp	r3, #35	; 0x23
 8009f98:	d84a      	bhi.n	800a030 <CDC_Control_FS+0xac>
 8009f9a:	a201      	add	r2, pc, #4	; (adr r2, 8009fa0 <CDC_Control_FS+0x1c>)
 8009f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa0:	0800a031 	.word	0x0800a031
 8009fa4:	0800a031 	.word	0x0800a031
 8009fa8:	0800a031 	.word	0x0800a031
 8009fac:	0800a031 	.word	0x0800a031
 8009fb0:	0800a031 	.word	0x0800a031
 8009fb4:	0800a031 	.word	0x0800a031
 8009fb8:	0800a031 	.word	0x0800a031
 8009fbc:	0800a031 	.word	0x0800a031
 8009fc0:	0800a031 	.word	0x0800a031
 8009fc4:	0800a031 	.word	0x0800a031
 8009fc8:	0800a031 	.word	0x0800a031
 8009fcc:	0800a031 	.word	0x0800a031
 8009fd0:	0800a031 	.word	0x0800a031
 8009fd4:	0800a031 	.word	0x0800a031
 8009fd8:	0800a031 	.word	0x0800a031
 8009fdc:	0800a031 	.word	0x0800a031
 8009fe0:	0800a031 	.word	0x0800a031
 8009fe4:	0800a031 	.word	0x0800a031
 8009fe8:	0800a031 	.word	0x0800a031
 8009fec:	0800a031 	.word	0x0800a031
 8009ff0:	0800a031 	.word	0x0800a031
 8009ff4:	0800a031 	.word	0x0800a031
 8009ff8:	0800a031 	.word	0x0800a031
 8009ffc:	0800a031 	.word	0x0800a031
 800a000:	0800a031 	.word	0x0800a031
 800a004:	0800a031 	.word	0x0800a031
 800a008:	0800a031 	.word	0x0800a031
 800a00c:	0800a031 	.word	0x0800a031
 800a010:	0800a031 	.word	0x0800a031
 800a014:	0800a031 	.word	0x0800a031
 800a018:	0800a031 	.word	0x0800a031
 800a01c:	0800a031 	.word	0x0800a031
 800a020:	0800a031 	.word	0x0800a031
 800a024:	0800a031 	.word	0x0800a031
 800a028:	0800a031 	.word	0x0800a031
 800a02c:	0800a031 	.word	0x0800a031
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a030:	bf00      	nop
  }

  return (USBD_OK);
 800a032:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	bc80      	pop	{r7}
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop

0800a040 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	4805      	ldr	r0, [pc, #20]	; (800a064 <CDC_Receive_FS+0x24>)
 800a04e:	f7fe fe76 	bl	8008d3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a052:	4804      	ldr	r0, [pc, #16]	; (800a064 <CDC_Receive_FS+0x24>)
 800a054:	f7fe fe86 	bl	8008d64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a058:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	200003dc 	.word	0x200003dc

0800a068 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	6039      	str	r1, [r7, #0]
 800a072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2212      	movs	r2, #18
 800a078:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a07a:	4b03      	ldr	r3, [pc, #12]	; (800a088 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	bc80      	pop	{r7}
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	200001d8 	.word	0x200001d8

0800a08c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	6039      	str	r1, [r7, #0]
 800a096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2204      	movs	r2, #4
 800a09c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a09e:	4b03      	ldr	r3, [pc, #12]	; (800a0ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bc80      	pop	{r7}
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	200001ec 	.word	0x200001ec

0800a0b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	6039      	str	r1, [r7, #0]
 800a0ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0bc:	79fb      	ldrb	r3, [r7, #7]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d105      	bne.n	800a0ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	4907      	ldr	r1, [pc, #28]	; (800a0e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a0c6:	4808      	ldr	r0, [pc, #32]	; (800a0e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0c8:	f7ff fe32 	bl	8009d30 <USBD_GetString>
 800a0cc:	e004      	b.n	800a0d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	4904      	ldr	r1, [pc, #16]	; (800a0e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a0d2:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0d4:	f7ff fe2c 	bl	8009d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0d8:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20000ea0 	.word	0x20000ea0
 800a0e8:	0800af10 	.word	0x0800af10

0800a0ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	4904      	ldr	r1, [pc, #16]	; (800a10c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a0fc:	4804      	ldr	r0, [pc, #16]	; (800a110 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a0fe:	f7ff fe17 	bl	8009d30 <USBD_GetString>
  return USBD_StrDesc;
 800a102:	4b02      	ldr	r3, [pc, #8]	; (800a10c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a104:	4618      	mov	r0, r3
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000ea0 	.word	0x20000ea0
 800a110:	0800af28 	.word	0x0800af28

0800a114 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	221a      	movs	r2, #26
 800a124:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a126:	f000 f843 	bl	800a1b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a12a:	4b02      	ldr	r3, [pc, #8]	; (800a134 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	200001f0 	.word	0x200001f0

0800a138 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	6039      	str	r1, [r7, #0]
 800a142:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a144:	79fb      	ldrb	r3, [r7, #7]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d105      	bne.n	800a156 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	4907      	ldr	r1, [pc, #28]	; (800a16c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a14e:	4808      	ldr	r0, [pc, #32]	; (800a170 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a150:	f7ff fdee 	bl	8009d30 <USBD_GetString>
 800a154:	e004      	b.n	800a160 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	4904      	ldr	r1, [pc, #16]	; (800a16c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a15a:	4805      	ldr	r0, [pc, #20]	; (800a170 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a15c:	f7ff fde8 	bl	8009d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a160:	4b02      	ldr	r3, [pc, #8]	; (800a16c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000ea0 	.word	0x20000ea0
 800a170:	0800af3c 	.word	0x0800af3c

0800a174 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	6039      	str	r1, [r7, #0]
 800a17e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d105      	bne.n	800a192 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	4907      	ldr	r1, [pc, #28]	; (800a1a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a18a:	4808      	ldr	r0, [pc, #32]	; (800a1ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a18c:	f7ff fdd0 	bl	8009d30 <USBD_GetString>
 800a190:	e004      	b.n	800a19c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	4904      	ldr	r1, [pc, #16]	; (800a1a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a196:	4805      	ldr	r0, [pc, #20]	; (800a1ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a198:	f7ff fdca 	bl	8009d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a19c:	4b02      	ldr	r3, [pc, #8]	; (800a1a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000ea0 	.word	0x20000ea0
 800a1ac:	0800af48 	.word	0x0800af48

0800a1b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a1b6:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <Get_SerialNum+0x44>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a1bc:	4b0e      	ldr	r3, [pc, #56]	; (800a1f8 <Get_SerialNum+0x48>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a1c2:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <Get_SerialNum+0x4c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d009      	beq.n	800a1ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a1d6:	2208      	movs	r2, #8
 800a1d8:	4909      	ldr	r1, [pc, #36]	; (800a200 <Get_SerialNum+0x50>)
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 f814 	bl	800a208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a1e0:	2204      	movs	r2, #4
 800a1e2:	4908      	ldr	r1, [pc, #32]	; (800a204 <Get_SerialNum+0x54>)
 800a1e4:	68b8      	ldr	r0, [r7, #8]
 800a1e6:	f000 f80f 	bl	800a208 <IntToUnicode>
  }
}
 800a1ea:	bf00      	nop
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	1ffff7e8 	.word	0x1ffff7e8
 800a1f8:	1ffff7ec 	.word	0x1ffff7ec
 800a1fc:	1ffff7f0 	.word	0x1ffff7f0
 800a200:	200001f2 	.word	0x200001f2
 800a204:	20000202 	.word	0x20000202

0800a208 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a216:	2300      	movs	r3, #0
 800a218:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a21a:	2300      	movs	r3, #0
 800a21c:	75fb      	strb	r3, [r7, #23]
 800a21e:	e027      	b.n	800a270 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	0f1b      	lsrs	r3, r3, #28
 800a224:	2b09      	cmp	r3, #9
 800a226:	d80b      	bhi.n	800a240 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	0f1b      	lsrs	r3, r3, #28
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	4619      	mov	r1, r3
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	440b      	add	r3, r1
 800a238:	3230      	adds	r2, #48	; 0x30
 800a23a:	b2d2      	uxtb	r2, r2
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	e00a      	b.n	800a256 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	0f1b      	lsrs	r3, r3, #28
 800a244:	b2da      	uxtb	r2, r3
 800a246:	7dfb      	ldrb	r3, [r7, #23]
 800a248:	005b      	lsls	r3, r3, #1
 800a24a:	4619      	mov	r1, r3
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	440b      	add	r3, r1
 800a250:	3237      	adds	r2, #55	; 0x37
 800a252:	b2d2      	uxtb	r2, r2
 800a254:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	011b      	lsls	r3, r3, #4
 800a25a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a25c:	7dfb      	ldrb	r3, [r7, #23]
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	3301      	adds	r3, #1
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	4413      	add	r3, r2
 800a266:	2200      	movs	r2, #0
 800a268:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	3301      	adds	r3, #1
 800a26e:	75fb      	strb	r3, [r7, #23]
 800a270:	7dfa      	ldrb	r2, [r7, #23]
 800a272:	79fb      	ldrb	r3, [r7, #7]
 800a274:	429a      	cmp	r2, r3
 800a276:	d3d3      	bcc.n	800a220 <IntToUnicode+0x18>
  }
}
 800a278:	bf00      	nop
 800a27a:	bf00      	nop
 800a27c:	371c      	adds	r7, #28
 800a27e:	46bd      	mov	sp, r7
 800a280:	bc80      	pop	{r7}
 800a282:	4770      	bx	lr

0800a284 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a0d      	ldr	r2, [pc, #52]	; (800a2c8 <HAL_PCD_MspInit+0x44>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d113      	bne.n	800a2be <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a296:	4b0d      	ldr	r3, [pc, #52]	; (800a2cc <HAL_PCD_MspInit+0x48>)
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	4a0c      	ldr	r2, [pc, #48]	; (800a2cc <HAL_PCD_MspInit+0x48>)
 800a29c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2a0:	61d3      	str	r3, [r2, #28]
 800a2a2:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <HAL_PCD_MspInit+0x48>)
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	2014      	movs	r0, #20
 800a2b4:	f7f7 fe2b 	bl	8001f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a2b8:	2014      	movs	r0, #20
 800a2ba:	f7f7 fe44 	bl	8001f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	40005c00 	.word	0x40005c00
 800a2cc:	40021000 	.word	0x40021000

0800a2d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	f7fe fdf2 	bl	8008ed0 <USBD_LL_SetupStage>
}
 800a2ec:	bf00      	nop
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800a306:	78fa      	ldrb	r2, [r7, #3]
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	4613      	mov	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	440b      	add	r3, r1
 800a314:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	78fb      	ldrb	r3, [r7, #3]
 800a31c:	4619      	mov	r1, r3
 800a31e:	f7fe fe24 	bl	8008f6a <USBD_LL_DataOutStage>
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b082      	sub	sp, #8
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	460b      	mov	r3, r1
 800a334:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800a33c:	78fa      	ldrb	r2, [r7, #3]
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	440b      	add	r3, r1
 800a34a:	3324      	adds	r3, #36	; 0x24
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	78fb      	ldrb	r3, [r7, #3]
 800a350:	4619      	mov	r1, r3
 800a352:	f7fe fe7b 	bl	800904c <USBD_LL_DataInStage>
}
 800a356:	bf00      	nop
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b082      	sub	sp, #8
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fe ff8b 	bl	8009288 <USBD_LL_SOF>
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a382:	2301      	movs	r3, #1
 800a384:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	799b      	ldrb	r3, [r3, #6]
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d001      	beq.n	800a392 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a38e:	f7f6 ff0f 	bl	80011b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a398:	7bfa      	ldrb	r2, [r7, #15]
 800a39a:	4611      	mov	r1, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fe ff3b 	bl	8009218 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe fef4 	bl	8009196 <USBD_LL_Reset>
}
 800a3ae:	bf00      	nop
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe ff35 	bl	8009236 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	7a9b      	ldrb	r3, [r3, #10]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d005      	beq.n	800a3e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3d4:	4b04      	ldr	r3, [pc, #16]	; (800a3e8 <HAL_PCD_SuspendCallback+0x30>)
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	4a03      	ldr	r2, [pc, #12]	; (800a3e8 <HAL_PCD_SuspendCallback+0x30>)
 800a3da:	f043 0306 	orr.w	r3, r3, #6
 800a3de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	e000ed00 	.word	0xe000ed00

0800a3ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fe ff2f 	bl	800925e <USBD_LL_Resume>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a410:	4a28      	ldr	r2, [pc, #160]	; (800a4b4 <USBD_LL_Init+0xac>)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a26      	ldr	r2, [pc, #152]	; (800a4b4 <USBD_LL_Init+0xac>)
 800a41c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a420:	4b24      	ldr	r3, [pc, #144]	; (800a4b4 <USBD_LL_Init+0xac>)
 800a422:	4a25      	ldr	r2, [pc, #148]	; (800a4b8 <USBD_LL_Init+0xb0>)
 800a424:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a426:	4b23      	ldr	r3, [pc, #140]	; (800a4b4 <USBD_LL_Init+0xac>)
 800a428:	2208      	movs	r2, #8
 800a42a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a42c:	4b21      	ldr	r3, [pc, #132]	; (800a4b4 <USBD_LL_Init+0xac>)
 800a42e:	2202      	movs	r2, #2
 800a430:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a432:	4b20      	ldr	r3, [pc, #128]	; (800a4b4 <USBD_LL_Init+0xac>)
 800a434:	2200      	movs	r2, #0
 800a436:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a438:	4b1e      	ldr	r3, [pc, #120]	; (800a4b4 <USBD_LL_Init+0xac>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a43e:	4b1d      	ldr	r3, [pc, #116]	; (800a4b4 <USBD_LL_Init+0xac>)
 800a440:	2200      	movs	r2, #0
 800a442:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a444:	481b      	ldr	r0, [pc, #108]	; (800a4b4 <USBD_LL_Init+0xac>)
 800a446:	f7f8 ff9a 	bl	800337e <HAL_PCD_Init>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a450:	f7f6 feae 	bl	80011b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a45a:	2318      	movs	r3, #24
 800a45c:	2200      	movs	r2, #0
 800a45e:	2100      	movs	r1, #0
 800a460:	f7fa fcac 	bl	8004dbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a46a:	2358      	movs	r3, #88	; 0x58
 800a46c:	2200      	movs	r2, #0
 800a46e:	2180      	movs	r1, #128	; 0x80
 800a470:	f7fa fca4 	bl	8004dbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a47a:	23c0      	movs	r3, #192	; 0xc0
 800a47c:	2200      	movs	r2, #0
 800a47e:	2181      	movs	r1, #129	; 0x81
 800a480:	f7fa fc9c 	bl	8004dbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a48a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a48e:	2200      	movs	r2, #0
 800a490:	2101      	movs	r1, #1
 800a492:	f7fa fc93 	bl	8004dbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a49c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2182      	movs	r1, #130	; 0x82
 800a4a4:	f7fa fc8a 	bl	8004dbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	200010a0 	.word	0x200010a0
 800a4b8:	40005c00 	.word	0x40005c00

0800a4bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7f9 f849 	bl	800356a <HAL_PCD_Start>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 f94e 	bl	800a780 <USBD_Get_USB_Status>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	4608      	mov	r0, r1
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	461a      	mov	r2, r3
 800a500:	4603      	mov	r3, r0
 800a502:	70fb      	strb	r3, [r7, #3]
 800a504:	460b      	mov	r3, r1
 800a506:	70bb      	strb	r3, [r7, #2]
 800a508:	4613      	mov	r3, r2
 800a50a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a51a:	78bb      	ldrb	r3, [r7, #2]
 800a51c:	883a      	ldrh	r2, [r7, #0]
 800a51e:	78f9      	ldrb	r1, [r7, #3]
 800a520:	f7f9 f99d 	bl	800385e <HAL_PCD_EP_Open>
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f928 	bl	800a780 <USBD_Get_USB_Status>
 800a530:	4603      	mov	r3, r0
 800a532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a534:	7bbb      	ldrb	r3, [r7, #14]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	460b      	mov	r3, r1
 800a548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a558:	78fa      	ldrb	r2, [r7, #3]
 800a55a:	4611      	mov	r1, r2
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7f9 f9db 	bl	8003918 <HAL_PCD_EP_Close>
 800a562:	4603      	mov	r3, r0
 800a564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 f909 	bl	800a780 <USBD_Get_USB_Status>
 800a56e:	4603      	mov	r3, r0
 800a570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a572:	7bbb      	ldrb	r3, [r7, #14]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a596:	78fa      	ldrb	r2, [r7, #3]
 800a598:	4611      	mov	r1, r2
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7f9 fa83 	bl	8003aa6 <HAL_PCD_EP_SetStall>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 f8ea 	bl	800a780 <USBD_Get_USB_Status>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5d4:	78fa      	ldrb	r2, [r7, #3]
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7f9 fac4 	bl	8003b66 <HAL_PCD_EP_ClrStall>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 f8cb 	bl	800a780 <USBD_Get_USB_Status>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a60a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a60c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a610:	2b00      	cmp	r3, #0
 800a612:	da0b      	bge.n	800a62c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a61a:	68f9      	ldr	r1, [r7, #12]
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	440b      	add	r3, r1
 800a626:	3312      	adds	r3, #18
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	e00b      	b.n	800a644 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a62c:	78fb      	ldrb	r3, [r7, #3]
 800a62e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a632:	68f9      	ldr	r1, [r7, #12]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	440b      	add	r3, r1
 800a63e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800a642:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	bc80      	pop	{r7}
 800a64c:	4770      	bx	lr

0800a64e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	460b      	mov	r3, r1
 800a658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a668:	78fa      	ldrb	r2, [r7, #3]
 800a66a:	4611      	mov	r1, r2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7f9 f8d2 	bl	8003816 <HAL_PCD_SetAddress>
 800a672:	4603      	mov	r3, r0
 800a674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 f881 	bl	800a780 <USBD_Get_USB_Status>
 800a67e:	4603      	mov	r3, r0
 800a680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a682:	7bbb      	ldrb	r3, [r7, #14]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	607a      	str	r2, [r7, #4]
 800a696:	461a      	mov	r2, r3
 800a698:	460b      	mov	r3, r1
 800a69a:	72fb      	strb	r3, [r7, #11]
 800a69c:	4613      	mov	r3, r2
 800a69e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6ae:	893b      	ldrh	r3, [r7, #8]
 800a6b0:	7af9      	ldrb	r1, [r7, #11]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	f7f9 f9c0 	bl	8003a38 <HAL_PCD_EP_Transmit>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6bc:	7dfb      	ldrb	r3, [r7, #23]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 f85e 	bl	800a780 <USBD_Get_USB_Status>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b086      	sub	sp, #24
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	60f8      	str	r0, [r7, #12]
 800a6da:	607a      	str	r2, [r7, #4]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	460b      	mov	r3, r1
 800a6e0:	72fb      	strb	r3, [r7, #11]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6f4:	893b      	ldrh	r3, [r7, #8]
 800a6f6:	7af9      	ldrb	r1, [r7, #11]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	f7f9 f955 	bl	80039a8 <HAL_PCD_EP_Receive>
 800a6fe:	4603      	mov	r3, r0
 800a700:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	4618      	mov	r0, r3
 800a706:	f000 f83b 	bl	800a780 <USBD_Get_USB_Status>
 800a70a:	4603      	mov	r3, r0
 800a70c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a70e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3718      	adds	r7, #24
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a72a:	78fa      	ldrb	r2, [r7, #3]
 800a72c:	4611      	mov	r1, r2
 800a72e:	4618      	mov	r0, r3
 800a730:	f7f9 f96b 	bl	8003a0a <HAL_PCD_EP_GetRxCount>
 800a734:	4603      	mov	r3, r0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
	...

0800a740 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a748:	4b02      	ldr	r3, [pc, #8]	; (800a754 <USBD_static_malloc+0x14>)
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	bc80      	pop	{r7}
 800a752:	4770      	bx	lr
 800a754:	20001378 	.word	0x20001378

0800a758 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]

}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	bc80      	pop	{r7}
 800a768:	4770      	bx	lr

0800a76a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bc80      	pop	{r7}
 800a77e:	4770      	bx	lr

0800a780 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	2b03      	cmp	r3, #3
 800a792:	d817      	bhi.n	800a7c4 <USBD_Get_USB_Status+0x44>
 800a794:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <USBD_Get_USB_Status+0x1c>)
 800a796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79a:	bf00      	nop
 800a79c:	0800a7ad 	.word	0x0800a7ad
 800a7a0:	0800a7b3 	.word	0x0800a7b3
 800a7a4:	0800a7b9 	.word	0x0800a7b9
 800a7a8:	0800a7bf 	.word	0x0800a7bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b0:	e00b      	b.n	800a7ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b6:	e008      	b.n	800a7ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a7bc:	e005      	b.n	800a7ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7be:	2302      	movs	r3, #2
 800a7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c2:	e002      	b.n	800a7ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c8:	bf00      	nop
  }
  return usb_status;
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bc80      	pop	{r7}
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop

0800a7d8 <memset>:
 800a7d8:	4603      	mov	r3, r0
 800a7da:	4402      	add	r2, r0
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d100      	bne.n	800a7e2 <memset+0xa>
 800a7e0:	4770      	bx	lr
 800a7e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7e6:	e7f9      	b.n	800a7dc <memset+0x4>

0800a7e8 <__errno>:
 800a7e8:	4b01      	ldr	r3, [pc, #4]	; (800a7f0 <__errno+0x8>)
 800a7ea:	6818      	ldr	r0, [r3, #0]
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	20000258 	.word	0x20000258

0800a7f4 <__libc_init_array>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	2600      	movs	r6, #0
 800a7f8:	4d0c      	ldr	r5, [pc, #48]	; (800a82c <__libc_init_array+0x38>)
 800a7fa:	4c0d      	ldr	r4, [pc, #52]	; (800a830 <__libc_init_array+0x3c>)
 800a7fc:	1b64      	subs	r4, r4, r5
 800a7fe:	10a4      	asrs	r4, r4, #2
 800a800:	42a6      	cmp	r6, r4
 800a802:	d109      	bne.n	800a818 <__libc_init_array+0x24>
 800a804:	f000 fb76 	bl	800aef4 <_init>
 800a808:	2600      	movs	r6, #0
 800a80a:	4d0a      	ldr	r5, [pc, #40]	; (800a834 <__libc_init_array+0x40>)
 800a80c:	4c0a      	ldr	r4, [pc, #40]	; (800a838 <__libc_init_array+0x44>)
 800a80e:	1b64      	subs	r4, r4, r5
 800a810:	10a4      	asrs	r4, r4, #2
 800a812:	42a6      	cmp	r6, r4
 800a814:	d105      	bne.n	800a822 <__libc_init_array+0x2e>
 800a816:	bd70      	pop	{r4, r5, r6, pc}
 800a818:	f855 3b04 	ldr.w	r3, [r5], #4
 800a81c:	4798      	blx	r3
 800a81e:	3601      	adds	r6, #1
 800a820:	e7ee      	b.n	800a800 <__libc_init_array+0xc>
 800a822:	f855 3b04 	ldr.w	r3, [r5], #4
 800a826:	4798      	blx	r3
 800a828:	3601      	adds	r6, #1
 800a82a:	e7f2      	b.n	800a812 <__libc_init_array+0x1e>
 800a82c:	0800aff8 	.word	0x0800aff8
 800a830:	0800aff8 	.word	0x0800aff8
 800a834:	0800aff8 	.word	0x0800aff8
 800a838:	0800affc 	.word	0x0800affc

0800a83c <atan2>:
 800a83c:	f000 ba8c 	b.w	800ad58 <__ieee754_atan2>

0800a840 <sqrt>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	4606      	mov	r6, r0
 800a844:	460f      	mov	r7, r1
 800a846:	f000 f9ad 	bl	800aba4 <__ieee754_sqrt>
 800a84a:	4632      	mov	r2, r6
 800a84c:	4604      	mov	r4, r0
 800a84e:	460d      	mov	r5, r1
 800a850:	463b      	mov	r3, r7
 800a852:	4630      	mov	r0, r6
 800a854:	4639      	mov	r1, r7
 800a856:	f7f6 f8d1 	bl	80009fc <__aeabi_dcmpun>
 800a85a:	b990      	cbnz	r0, 800a882 <sqrt+0x42>
 800a85c:	2200      	movs	r2, #0
 800a85e:	2300      	movs	r3, #0
 800a860:	4630      	mov	r0, r6
 800a862:	4639      	mov	r1, r7
 800a864:	f7f6 f8a2 	bl	80009ac <__aeabi_dcmplt>
 800a868:	b158      	cbz	r0, 800a882 <sqrt+0x42>
 800a86a:	f7ff ffbd 	bl	800a7e8 <__errno>
 800a86e:	2321      	movs	r3, #33	; 0x21
 800a870:	2200      	movs	r2, #0
 800a872:	6003      	str	r3, [r0, #0]
 800a874:	2300      	movs	r3, #0
 800a876:	4610      	mov	r0, r2
 800a878:	4619      	mov	r1, r3
 800a87a:	f7f5 ff4f 	bl	800071c <__aeabi_ddiv>
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
 800a882:	4620      	mov	r0, r4
 800a884:	4629      	mov	r1, r5
 800a886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a888 <atan>:
 800a888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	4bb6      	ldr	r3, [pc, #728]	; (800ab68 <atan+0x2e0>)
 800a88e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a892:	429e      	cmp	r6, r3
 800a894:	4604      	mov	r4, r0
 800a896:	460d      	mov	r5, r1
 800a898:	468b      	mov	fp, r1
 800a89a:	dd17      	ble.n	800a8cc <atan+0x44>
 800a89c:	4bb3      	ldr	r3, [pc, #716]	; (800ab6c <atan+0x2e4>)
 800a89e:	429e      	cmp	r6, r3
 800a8a0:	dc01      	bgt.n	800a8a6 <atan+0x1e>
 800a8a2:	d109      	bne.n	800a8b8 <atan+0x30>
 800a8a4:	b140      	cbz	r0, 800a8b8 <atan+0x30>
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	462b      	mov	r3, r5
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	f7f5 fc55 	bl	800015c <__adddf3>
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	460d      	mov	r5, r1
 800a8b6:	e005      	b.n	800a8c4 <atan+0x3c>
 800a8b8:	f1bb 0f00 	cmp.w	fp, #0
 800a8bc:	4cac      	ldr	r4, [pc, #688]	; (800ab70 <atan+0x2e8>)
 800a8be:	f300 8121 	bgt.w	800ab04 <atan+0x27c>
 800a8c2:	4dac      	ldr	r5, [pc, #688]	; (800ab74 <atan+0x2ec>)
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8cc:	4baa      	ldr	r3, [pc, #680]	; (800ab78 <atan+0x2f0>)
 800a8ce:	429e      	cmp	r6, r3
 800a8d0:	dc11      	bgt.n	800a8f6 <atan+0x6e>
 800a8d2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a8d6:	429e      	cmp	r6, r3
 800a8d8:	dc0a      	bgt.n	800a8f0 <atan+0x68>
 800a8da:	a38b      	add	r3, pc, #556	; (adr r3, 800ab08 <atan+0x280>)
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	f7f5 fc3c 	bl	800015c <__adddf3>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4ba5      	ldr	r3, [pc, #660]	; (800ab7c <atan+0x2f4>)
 800a8e8:	f7f6 f87e 	bl	80009e8 <__aeabi_dcmpgt>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d1e9      	bne.n	800a8c4 <atan+0x3c>
 800a8f0:	f04f 3aff 	mov.w	sl, #4294967295
 800a8f4:	e027      	b.n	800a946 <atan+0xbe>
 800a8f6:	f000 f951 	bl	800ab9c <fabs>
 800a8fa:	4ba1      	ldr	r3, [pc, #644]	; (800ab80 <atan+0x2f8>)
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	429e      	cmp	r6, r3
 800a900:	460d      	mov	r5, r1
 800a902:	f300 80b8 	bgt.w	800aa76 <atan+0x1ee>
 800a906:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a90a:	429e      	cmp	r6, r3
 800a90c:	f300 809c 	bgt.w	800aa48 <atan+0x1c0>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	f7f5 fc22 	bl	800015c <__adddf3>
 800a918:	2200      	movs	r2, #0
 800a91a:	4b98      	ldr	r3, [pc, #608]	; (800ab7c <atan+0x2f4>)
 800a91c:	f7f5 fc1c 	bl	8000158 <__aeabi_dsub>
 800a920:	2200      	movs	r2, #0
 800a922:	4606      	mov	r6, r0
 800a924:	460f      	mov	r7, r1
 800a926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a92a:	4620      	mov	r0, r4
 800a92c:	4629      	mov	r1, r5
 800a92e:	f7f5 fc15 	bl	800015c <__adddf3>
 800a932:	4602      	mov	r2, r0
 800a934:	460b      	mov	r3, r1
 800a936:	4630      	mov	r0, r6
 800a938:	4639      	mov	r1, r7
 800a93a:	f7f5 feef 	bl	800071c <__aeabi_ddiv>
 800a93e:	f04f 0a00 	mov.w	sl, #0
 800a942:	4604      	mov	r4, r0
 800a944:	460d      	mov	r5, r1
 800a946:	4622      	mov	r2, r4
 800a948:	462b      	mov	r3, r5
 800a94a:	4620      	mov	r0, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	f7f5 fdbb 	bl	80004c8 <__aeabi_dmul>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4680      	mov	r8, r0
 800a958:	4689      	mov	r9, r1
 800a95a:	f7f5 fdb5 	bl	80004c8 <__aeabi_dmul>
 800a95e:	a36c      	add	r3, pc, #432	; (adr r3, 800ab10 <atan+0x288>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	4606      	mov	r6, r0
 800a966:	460f      	mov	r7, r1
 800a968:	f7f5 fdae 	bl	80004c8 <__aeabi_dmul>
 800a96c:	a36a      	add	r3, pc, #424	; (adr r3, 800ab18 <atan+0x290>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fbf3 	bl	800015c <__adddf3>
 800a976:	4632      	mov	r2, r6
 800a978:	463b      	mov	r3, r7
 800a97a:	f7f5 fda5 	bl	80004c8 <__aeabi_dmul>
 800a97e:	a368      	add	r3, pc, #416	; (adr r3, 800ab20 <atan+0x298>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fbea 	bl	800015c <__adddf3>
 800a988:	4632      	mov	r2, r6
 800a98a:	463b      	mov	r3, r7
 800a98c:	f7f5 fd9c 	bl	80004c8 <__aeabi_dmul>
 800a990:	a365      	add	r3, pc, #404	; (adr r3, 800ab28 <atan+0x2a0>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f7f5 fbe1 	bl	800015c <__adddf3>
 800a99a:	4632      	mov	r2, r6
 800a99c:	463b      	mov	r3, r7
 800a99e:	f7f5 fd93 	bl	80004c8 <__aeabi_dmul>
 800a9a2:	a363      	add	r3, pc, #396	; (adr r3, 800ab30 <atan+0x2a8>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fbd8 	bl	800015c <__adddf3>
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	f7f5 fd8a 	bl	80004c8 <__aeabi_dmul>
 800a9b4:	a360      	add	r3, pc, #384	; (adr r3, 800ab38 <atan+0x2b0>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 fbcf 	bl	800015c <__adddf3>
 800a9be:	4642      	mov	r2, r8
 800a9c0:	464b      	mov	r3, r9
 800a9c2:	f7f5 fd81 	bl	80004c8 <__aeabi_dmul>
 800a9c6:	a35e      	add	r3, pc, #376	; (adr r3, 800ab40 <atan+0x2b8>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	4689      	mov	r9, r1
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	f7f5 fd78 	bl	80004c8 <__aeabi_dmul>
 800a9d8:	a35b      	add	r3, pc, #364	; (adr r3, 800ab48 <atan+0x2c0>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f5 fbbb 	bl	8000158 <__aeabi_dsub>
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	f7f5 fd6f 	bl	80004c8 <__aeabi_dmul>
 800a9ea:	a359      	add	r3, pc, #356	; (adr r3, 800ab50 <atan+0x2c8>)
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	f7f5 fbb2 	bl	8000158 <__aeabi_dsub>
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	f7f5 fd66 	bl	80004c8 <__aeabi_dmul>
 800a9fc:	a356      	add	r3, pc, #344	; (adr r3, 800ab58 <atan+0x2d0>)
 800a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa02:	f7f5 fba9 	bl	8000158 <__aeabi_dsub>
 800aa06:	4632      	mov	r2, r6
 800aa08:	463b      	mov	r3, r7
 800aa0a:	f7f5 fd5d 	bl	80004c8 <__aeabi_dmul>
 800aa0e:	a354      	add	r3, pc, #336	; (adr r3, 800ab60 <atan+0x2d8>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	f7f5 fba0 	bl	8000158 <__aeabi_dsub>
 800aa18:	4632      	mov	r2, r6
 800aa1a:	463b      	mov	r3, r7
 800aa1c:	f7f5 fd54 	bl	80004c8 <__aeabi_dmul>
 800aa20:	4602      	mov	r2, r0
 800aa22:	460b      	mov	r3, r1
 800aa24:	4640      	mov	r0, r8
 800aa26:	4649      	mov	r1, r9
 800aa28:	f7f5 fb98 	bl	800015c <__adddf3>
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	462b      	mov	r3, r5
 800aa30:	f7f5 fd4a 	bl	80004c8 <__aeabi_dmul>
 800aa34:	f1ba 3fff 	cmp.w	sl, #4294967295
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	d144      	bne.n	800aac8 <atan+0x240>
 800aa3e:	4620      	mov	r0, r4
 800aa40:	4629      	mov	r1, r5
 800aa42:	f7f5 fb89 	bl	8000158 <__aeabi_dsub>
 800aa46:	e734      	b.n	800a8b2 <atan+0x2a>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	4b4c      	ldr	r3, [pc, #304]	; (800ab7c <atan+0x2f4>)
 800aa4c:	f7f5 fb84 	bl	8000158 <__aeabi_dsub>
 800aa50:	2200      	movs	r2, #0
 800aa52:	4606      	mov	r6, r0
 800aa54:	460f      	mov	r7, r1
 800aa56:	4620      	mov	r0, r4
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4b48      	ldr	r3, [pc, #288]	; (800ab7c <atan+0x2f4>)
 800aa5c:	f7f5 fb7e 	bl	800015c <__adddf3>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4630      	mov	r0, r6
 800aa66:	4639      	mov	r1, r7
 800aa68:	f7f5 fe58 	bl	800071c <__aeabi_ddiv>
 800aa6c:	f04f 0a01 	mov.w	sl, #1
 800aa70:	4604      	mov	r4, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	e767      	b.n	800a946 <atan+0xbe>
 800aa76:	4b43      	ldr	r3, [pc, #268]	; (800ab84 <atan+0x2fc>)
 800aa78:	429e      	cmp	r6, r3
 800aa7a:	da1a      	bge.n	800aab2 <atan+0x22a>
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	4b42      	ldr	r3, [pc, #264]	; (800ab88 <atan+0x300>)
 800aa80:	f7f5 fb6a 	bl	8000158 <__aeabi_dsub>
 800aa84:	2200      	movs	r2, #0
 800aa86:	4606      	mov	r6, r0
 800aa88:	460f      	mov	r7, r1
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4b3e      	ldr	r3, [pc, #248]	; (800ab88 <atan+0x300>)
 800aa90:	f7f5 fd1a 	bl	80004c8 <__aeabi_dmul>
 800aa94:	2200      	movs	r2, #0
 800aa96:	4b39      	ldr	r3, [pc, #228]	; (800ab7c <atan+0x2f4>)
 800aa98:	f7f5 fb60 	bl	800015c <__adddf3>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	f7f5 fe3a 	bl	800071c <__aeabi_ddiv>
 800aaa8:	f04f 0a02 	mov.w	sl, #2
 800aaac:	4604      	mov	r4, r0
 800aaae:	460d      	mov	r5, r1
 800aab0:	e749      	b.n	800a946 <atan+0xbe>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	2000      	movs	r0, #0
 800aab8:	4934      	ldr	r1, [pc, #208]	; (800ab8c <atan+0x304>)
 800aaba:	f7f5 fe2f 	bl	800071c <__aeabi_ddiv>
 800aabe:	f04f 0a03 	mov.w	sl, #3
 800aac2:	4604      	mov	r4, r0
 800aac4:	460d      	mov	r5, r1
 800aac6:	e73e      	b.n	800a946 <atan+0xbe>
 800aac8:	4b31      	ldr	r3, [pc, #196]	; (800ab90 <atan+0x308>)
 800aaca:	4e32      	ldr	r6, [pc, #200]	; (800ab94 <atan+0x30c>)
 800aacc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f7f5 fb40 	bl	8000158 <__aeabi_dsub>
 800aad8:	4622      	mov	r2, r4
 800aada:	462b      	mov	r3, r5
 800aadc:	f7f5 fb3c 	bl	8000158 <__aeabi_dsub>
 800aae0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800aaec:	f7f5 fb34 	bl	8000158 <__aeabi_dsub>
 800aaf0:	f1bb 0f00 	cmp.w	fp, #0
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	460d      	mov	r5, r1
 800aaf8:	f6bf aee4 	bge.w	800a8c4 <atan+0x3c>
 800aafc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab00:	461d      	mov	r5, r3
 800ab02:	e6df      	b.n	800a8c4 <atan+0x3c>
 800ab04:	4d24      	ldr	r5, [pc, #144]	; (800ab98 <atan+0x310>)
 800ab06:	e6dd      	b.n	800a8c4 <atan+0x3c>
 800ab08:	8800759c 	.word	0x8800759c
 800ab0c:	7e37e43c 	.word	0x7e37e43c
 800ab10:	e322da11 	.word	0xe322da11
 800ab14:	3f90ad3a 	.word	0x3f90ad3a
 800ab18:	24760deb 	.word	0x24760deb
 800ab1c:	3fa97b4b 	.word	0x3fa97b4b
 800ab20:	a0d03d51 	.word	0xa0d03d51
 800ab24:	3fb10d66 	.word	0x3fb10d66
 800ab28:	c54c206e 	.word	0xc54c206e
 800ab2c:	3fb745cd 	.word	0x3fb745cd
 800ab30:	920083ff 	.word	0x920083ff
 800ab34:	3fc24924 	.word	0x3fc24924
 800ab38:	5555550d 	.word	0x5555550d
 800ab3c:	3fd55555 	.word	0x3fd55555
 800ab40:	2c6a6c2f 	.word	0x2c6a6c2f
 800ab44:	bfa2b444 	.word	0xbfa2b444
 800ab48:	52defd9a 	.word	0x52defd9a
 800ab4c:	3fadde2d 	.word	0x3fadde2d
 800ab50:	af749a6d 	.word	0xaf749a6d
 800ab54:	3fb3b0f2 	.word	0x3fb3b0f2
 800ab58:	fe231671 	.word	0xfe231671
 800ab5c:	3fbc71c6 	.word	0x3fbc71c6
 800ab60:	9998ebc4 	.word	0x9998ebc4
 800ab64:	3fc99999 	.word	0x3fc99999
 800ab68:	440fffff 	.word	0x440fffff
 800ab6c:	7ff00000 	.word	0x7ff00000
 800ab70:	54442d18 	.word	0x54442d18
 800ab74:	bff921fb 	.word	0xbff921fb
 800ab78:	3fdbffff 	.word	0x3fdbffff
 800ab7c:	3ff00000 	.word	0x3ff00000
 800ab80:	3ff2ffff 	.word	0x3ff2ffff
 800ab84:	40038000 	.word	0x40038000
 800ab88:	3ff80000 	.word	0x3ff80000
 800ab8c:	bff00000 	.word	0xbff00000
 800ab90:	0800afa8 	.word	0x0800afa8
 800ab94:	0800af88 	.word	0x0800af88
 800ab98:	3ff921fb 	.word	0x3ff921fb

0800ab9c <fabs>:
 800ab9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aba0:	4619      	mov	r1, r3
 800aba2:	4770      	bx	lr

0800aba4 <__ieee754_sqrt>:
 800aba4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800ad48 <__ieee754_sqrt+0x1a4>
 800aba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	ea3c 0c01 	bics.w	ip, ip, r1
 800abb0:	460b      	mov	r3, r1
 800abb2:	4606      	mov	r6, r0
 800abb4:	460d      	mov	r5, r1
 800abb6:	460a      	mov	r2, r1
 800abb8:	4604      	mov	r4, r0
 800abba:	d10e      	bne.n	800abda <__ieee754_sqrt+0x36>
 800abbc:	4602      	mov	r2, r0
 800abbe:	f7f5 fc83 	bl	80004c8 <__aeabi_dmul>
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
 800abc6:	4630      	mov	r0, r6
 800abc8:	4629      	mov	r1, r5
 800abca:	f7f5 fac7 	bl	800015c <__adddf3>
 800abce:	4606      	mov	r6, r0
 800abd0:	460d      	mov	r5, r1
 800abd2:	4630      	mov	r0, r6
 800abd4:	4629      	mov	r1, r5
 800abd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abda:	2900      	cmp	r1, #0
 800abdc:	dc0d      	bgt.n	800abfa <__ieee754_sqrt+0x56>
 800abde:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800abe2:	ea5c 0c00 	orrs.w	ip, ip, r0
 800abe6:	d0f4      	beq.n	800abd2 <__ieee754_sqrt+0x2e>
 800abe8:	b139      	cbz	r1, 800abfa <__ieee754_sqrt+0x56>
 800abea:	4602      	mov	r2, r0
 800abec:	f7f5 fab4 	bl	8000158 <__aeabi_dsub>
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	f7f5 fd92 	bl	800071c <__aeabi_ddiv>
 800abf8:	e7e9      	b.n	800abce <__ieee754_sqrt+0x2a>
 800abfa:	1512      	asrs	r2, r2, #20
 800abfc:	f000 8089 	beq.w	800ad12 <__ieee754_sqrt+0x16e>
 800ac00:	2500      	movs	r5, #0
 800ac02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac06:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ac0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac0e:	07d2      	lsls	r2, r2, #31
 800ac10:	bf5c      	itt	pl
 800ac12:	005b      	lslpl	r3, r3, #1
 800ac14:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800ac18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac1c:	bf58      	it	pl
 800ac1e:	0064      	lslpl	r4, r4, #1
 800ac20:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ac24:	0062      	lsls	r2, r4, #1
 800ac26:	2016      	movs	r0, #22
 800ac28:	4629      	mov	r1, r5
 800ac2a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800ac2e:	1076      	asrs	r6, r6, #1
 800ac30:	190f      	adds	r7, r1, r4
 800ac32:	429f      	cmp	r7, r3
 800ac34:	bfde      	ittt	le
 800ac36:	1bdb      	suble	r3, r3, r7
 800ac38:	1939      	addle	r1, r7, r4
 800ac3a:	192d      	addle	r5, r5, r4
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	3801      	subs	r0, #1
 800ac40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ac44:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ac48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ac4c:	d1f0      	bne.n	800ac30 <__ieee754_sqrt+0x8c>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	2720      	movs	r7, #32
 800ac52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800ac56:	428b      	cmp	r3, r1
 800ac58:	eb0c 0e00 	add.w	lr, ip, r0
 800ac5c:	dc02      	bgt.n	800ac64 <__ieee754_sqrt+0xc0>
 800ac5e:	d113      	bne.n	800ac88 <__ieee754_sqrt+0xe4>
 800ac60:	4596      	cmp	lr, r2
 800ac62:	d811      	bhi.n	800ac88 <__ieee754_sqrt+0xe4>
 800ac64:	f1be 0f00 	cmp.w	lr, #0
 800ac68:	eb0e 000c 	add.w	r0, lr, ip
 800ac6c:	da56      	bge.n	800ad1c <__ieee754_sqrt+0x178>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	db54      	blt.n	800ad1c <__ieee754_sqrt+0x178>
 800ac72:	f101 0801 	add.w	r8, r1, #1
 800ac76:	1a5b      	subs	r3, r3, r1
 800ac78:	4641      	mov	r1, r8
 800ac7a:	4596      	cmp	lr, r2
 800ac7c:	bf88      	it	hi
 800ac7e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ac82:	eba2 020e 	sub.w	r2, r2, lr
 800ac86:	4464      	add	r4, ip
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	3f01      	subs	r7, #1
 800ac8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ac90:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ac94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ac98:	d1dd      	bne.n	800ac56 <__ieee754_sqrt+0xb2>
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	d01b      	beq.n	800acd6 <__ieee754_sqrt+0x132>
 800ac9e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ad4c <__ieee754_sqrt+0x1a8>
 800aca2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ad50 <__ieee754_sqrt+0x1ac>
 800aca6:	e9da 0100 	ldrd	r0, r1, [sl]
 800acaa:	e9db 2300 	ldrd	r2, r3, [fp]
 800acae:	f7f5 fa53 	bl	8000158 <__aeabi_dsub>
 800acb2:	e9da 8900 	ldrd	r8, r9, [sl]
 800acb6:	4602      	mov	r2, r0
 800acb8:	460b      	mov	r3, r1
 800acba:	4640      	mov	r0, r8
 800acbc:	4649      	mov	r1, r9
 800acbe:	f7f5 fe7f 	bl	80009c0 <__aeabi_dcmple>
 800acc2:	b140      	cbz	r0, 800acd6 <__ieee754_sqrt+0x132>
 800acc4:	e9da 0100 	ldrd	r0, r1, [sl]
 800acc8:	e9db 2300 	ldrd	r2, r3, [fp]
 800accc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800acd0:	d126      	bne.n	800ad20 <__ieee754_sqrt+0x17c>
 800acd2:	463c      	mov	r4, r7
 800acd4:	3501      	adds	r5, #1
 800acd6:	106b      	asrs	r3, r5, #1
 800acd8:	0864      	lsrs	r4, r4, #1
 800acda:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800acde:	07ea      	lsls	r2, r5, #31
 800ace0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ace4:	bf48      	it	mi
 800ace6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800acea:	4620      	mov	r0, r4
 800acec:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800acf0:	e76d      	b.n	800abce <__ieee754_sqrt+0x2a>
 800acf2:	0ae3      	lsrs	r3, r4, #11
 800acf4:	3915      	subs	r1, #21
 800acf6:	0564      	lsls	r4, r4, #21
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0fa      	beq.n	800acf2 <__ieee754_sqrt+0x14e>
 800acfc:	02d8      	lsls	r0, r3, #11
 800acfe:	d50a      	bpl.n	800ad16 <__ieee754_sqrt+0x172>
 800ad00:	f1c2 0020 	rsb	r0, r2, #32
 800ad04:	fa24 f000 	lsr.w	r0, r4, r0
 800ad08:	1e55      	subs	r5, r2, #1
 800ad0a:	4094      	lsls	r4, r2
 800ad0c:	4303      	orrs	r3, r0
 800ad0e:	1b4a      	subs	r2, r1, r5
 800ad10:	e776      	b.n	800ac00 <__ieee754_sqrt+0x5c>
 800ad12:	4611      	mov	r1, r2
 800ad14:	e7f0      	b.n	800acf8 <__ieee754_sqrt+0x154>
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	3201      	adds	r2, #1
 800ad1a:	e7ef      	b.n	800acfc <__ieee754_sqrt+0x158>
 800ad1c:	4688      	mov	r8, r1
 800ad1e:	e7aa      	b.n	800ac76 <__ieee754_sqrt+0xd2>
 800ad20:	f7f5 fa1c 	bl	800015c <__adddf3>
 800ad24:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	4649      	mov	r1, r9
 800ad30:	f7f5 fe3c 	bl	80009ac <__aeabi_dcmplt>
 800ad34:	b120      	cbz	r0, 800ad40 <__ieee754_sqrt+0x19c>
 800ad36:	1ca1      	adds	r1, r4, #2
 800ad38:	bf08      	it	eq
 800ad3a:	3501      	addeq	r5, #1
 800ad3c:	3402      	adds	r4, #2
 800ad3e:	e7ca      	b.n	800acd6 <__ieee754_sqrt+0x132>
 800ad40:	3401      	adds	r4, #1
 800ad42:	f024 0401 	bic.w	r4, r4, #1
 800ad46:	e7c6      	b.n	800acd6 <__ieee754_sqrt+0x132>
 800ad48:	7ff00000 	.word	0x7ff00000
 800ad4c:	20000260 	.word	0x20000260
 800ad50:	20000268 	.word	0x20000268
 800ad54:	00000000 	.word	0x00000000

0800ad58 <__ieee754_atan2>:
 800ad58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	4617      	mov	r7, r2
 800ad5e:	4692      	mov	sl, r2
 800ad60:	4699      	mov	r9, r3
 800ad62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ad66:	427b      	negs	r3, r7
 800ad68:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800aee8 <__ieee754_atan2+0x190>
 800ad6c:	433b      	orrs	r3, r7
 800ad6e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ad72:	4543      	cmp	r3, r8
 800ad74:	4604      	mov	r4, r0
 800ad76:	460d      	mov	r5, r1
 800ad78:	d809      	bhi.n	800ad8e <__ieee754_atan2+0x36>
 800ad7a:	4246      	negs	r6, r0
 800ad7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad80:	4306      	orrs	r6, r0
 800ad82:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ad86:	4546      	cmp	r6, r8
 800ad88:	468e      	mov	lr, r1
 800ad8a:	4683      	mov	fp, r0
 800ad8c:	d908      	bls.n	800ada0 <__ieee754_atan2+0x48>
 800ad8e:	4652      	mov	r2, sl
 800ad90:	464b      	mov	r3, r9
 800ad92:	4620      	mov	r0, r4
 800ad94:	4629      	mov	r1, r5
 800ad96:	f7f5 f9e1 	bl	800015c <__adddf3>
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	460d      	mov	r5, r1
 800ad9e:	e019      	b.n	800add4 <__ieee754_atan2+0x7c>
 800ada0:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800ada4:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800ada8:	433e      	orrs	r6, r7
 800adaa:	d103      	bne.n	800adb4 <__ieee754_atan2+0x5c>
 800adac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	f7ff bd6a 	b.w	800a888 <atan>
 800adb4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800adb8:	f006 0602 	and.w	r6, r6, #2
 800adbc:	ea53 0b0b 	orrs.w	fp, r3, fp
 800adc0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800adc4:	d10a      	bne.n	800addc <__ieee754_atan2+0x84>
 800adc6:	2e02      	cmp	r6, #2
 800adc8:	d067      	beq.n	800ae9a <__ieee754_atan2+0x142>
 800adca:	2e03      	cmp	r6, #3
 800adcc:	d102      	bne.n	800add4 <__ieee754_atan2+0x7c>
 800adce:	a53a      	add	r5, pc, #232	; (adr r5, 800aeb8 <__ieee754_atan2+0x160>)
 800add0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800add4:	4620      	mov	r0, r4
 800add6:	4629      	mov	r1, r5
 800add8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	4317      	orrs	r7, r2
 800adde:	d106      	bne.n	800adee <__ieee754_atan2+0x96>
 800ade0:	f1be 0f00 	cmp.w	lr, #0
 800ade4:	da64      	bge.n	800aeb0 <__ieee754_atan2+0x158>
 800ade6:	a536      	add	r5, pc, #216	; (adr r5, 800aec0 <__ieee754_atan2+0x168>)
 800ade8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800adec:	e7f2      	b.n	800add4 <__ieee754_atan2+0x7c>
 800adee:	4542      	cmp	r2, r8
 800adf0:	d10f      	bne.n	800ae12 <__ieee754_atan2+0xba>
 800adf2:	4293      	cmp	r3, r2
 800adf4:	f106 36ff 	add.w	r6, r6, #4294967295
 800adf8:	d107      	bne.n	800ae0a <__ieee754_atan2+0xb2>
 800adfa:	2e02      	cmp	r6, #2
 800adfc:	d851      	bhi.n	800aea2 <__ieee754_atan2+0x14a>
 800adfe:	4b3b      	ldr	r3, [pc, #236]	; (800aeec <__ieee754_atan2+0x194>)
 800ae00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae04:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ae08:	e7e4      	b.n	800add4 <__ieee754_atan2+0x7c>
 800ae0a:	2e02      	cmp	r6, #2
 800ae0c:	d84d      	bhi.n	800aeaa <__ieee754_atan2+0x152>
 800ae0e:	4b38      	ldr	r3, [pc, #224]	; (800aef0 <__ieee754_atan2+0x198>)
 800ae10:	e7f6      	b.n	800ae00 <__ieee754_atan2+0xa8>
 800ae12:	4543      	cmp	r3, r8
 800ae14:	d0e4      	beq.n	800ade0 <__ieee754_atan2+0x88>
 800ae16:	1a9b      	subs	r3, r3, r2
 800ae18:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ae1c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae20:	da21      	bge.n	800ae66 <__ieee754_atan2+0x10e>
 800ae22:	f1b9 0f00 	cmp.w	r9, #0
 800ae26:	da01      	bge.n	800ae2c <__ieee754_atan2+0xd4>
 800ae28:	323c      	adds	r2, #60	; 0x3c
 800ae2a:	db20      	blt.n	800ae6e <__ieee754_atan2+0x116>
 800ae2c:	4652      	mov	r2, sl
 800ae2e:	464b      	mov	r3, r9
 800ae30:	4620      	mov	r0, r4
 800ae32:	4629      	mov	r1, r5
 800ae34:	f7f5 fc72 	bl	800071c <__aeabi_ddiv>
 800ae38:	f7ff feb0 	bl	800ab9c <fabs>
 800ae3c:	f7ff fd24 	bl	800a888 <atan>
 800ae40:	4604      	mov	r4, r0
 800ae42:	460d      	mov	r5, r1
 800ae44:	2e01      	cmp	r6, #1
 800ae46:	d015      	beq.n	800ae74 <__ieee754_atan2+0x11c>
 800ae48:	2e02      	cmp	r6, #2
 800ae4a:	d017      	beq.n	800ae7c <__ieee754_atan2+0x124>
 800ae4c:	2e00      	cmp	r6, #0
 800ae4e:	d0c1      	beq.n	800add4 <__ieee754_atan2+0x7c>
 800ae50:	a31d      	add	r3, pc, #116	; (adr r3, 800aec8 <__ieee754_atan2+0x170>)
 800ae52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae56:	4620      	mov	r0, r4
 800ae58:	4629      	mov	r1, r5
 800ae5a:	f7f5 f97d 	bl	8000158 <__aeabi_dsub>
 800ae5e:	a31c      	add	r3, pc, #112	; (adr r3, 800aed0 <__ieee754_atan2+0x178>)
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	e016      	b.n	800ae94 <__ieee754_atan2+0x13c>
 800ae66:	a51c      	add	r5, pc, #112	; (adr r5, 800aed8 <__ieee754_atan2+0x180>)
 800ae68:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae6c:	e7ea      	b.n	800ae44 <__ieee754_atan2+0xec>
 800ae6e:	2400      	movs	r4, #0
 800ae70:	2500      	movs	r5, #0
 800ae72:	e7e7      	b.n	800ae44 <__ieee754_atan2+0xec>
 800ae74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ae78:	461d      	mov	r5, r3
 800ae7a:	e7ab      	b.n	800add4 <__ieee754_atan2+0x7c>
 800ae7c:	a312      	add	r3, pc, #72	; (adr r3, 800aec8 <__ieee754_atan2+0x170>)
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	4620      	mov	r0, r4
 800ae84:	4629      	mov	r1, r5
 800ae86:	f7f5 f967 	bl	8000158 <__aeabi_dsub>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	a110      	add	r1, pc, #64	; (adr r1, 800aed0 <__ieee754_atan2+0x178>)
 800ae90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae94:	f7f5 f960 	bl	8000158 <__aeabi_dsub>
 800ae98:	e77f      	b.n	800ad9a <__ieee754_atan2+0x42>
 800ae9a:	a50d      	add	r5, pc, #52	; (adr r5, 800aed0 <__ieee754_atan2+0x178>)
 800ae9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aea0:	e798      	b.n	800add4 <__ieee754_atan2+0x7c>
 800aea2:	a50f      	add	r5, pc, #60	; (adr r5, 800aee0 <__ieee754_atan2+0x188>)
 800aea4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aea8:	e794      	b.n	800add4 <__ieee754_atan2+0x7c>
 800aeaa:	2400      	movs	r4, #0
 800aeac:	2500      	movs	r5, #0
 800aeae:	e791      	b.n	800add4 <__ieee754_atan2+0x7c>
 800aeb0:	a509      	add	r5, pc, #36	; (adr r5, 800aed8 <__ieee754_atan2+0x180>)
 800aeb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aeb6:	e78d      	b.n	800add4 <__ieee754_atan2+0x7c>
 800aeb8:	54442d18 	.word	0x54442d18
 800aebc:	c00921fb 	.word	0xc00921fb
 800aec0:	54442d18 	.word	0x54442d18
 800aec4:	bff921fb 	.word	0xbff921fb
 800aec8:	33145c07 	.word	0x33145c07
 800aecc:	3ca1a626 	.word	0x3ca1a626
 800aed0:	54442d18 	.word	0x54442d18
 800aed4:	400921fb 	.word	0x400921fb
 800aed8:	54442d18 	.word	0x54442d18
 800aedc:	3ff921fb 	.word	0x3ff921fb
 800aee0:	54442d18 	.word	0x54442d18
 800aee4:	3fe921fb 	.word	0x3fe921fb
 800aee8:	7ff00000 	.word	0x7ff00000
 800aeec:	0800afc8 	.word	0x0800afc8
 800aef0:	0800afe0 	.word	0x0800afe0

0800aef4 <_init>:
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	bf00      	nop
 800aef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefa:	bc08      	pop	{r3}
 800aefc:	469e      	mov	lr, r3
 800aefe:	4770      	bx	lr

0800af00 <_fini>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr
